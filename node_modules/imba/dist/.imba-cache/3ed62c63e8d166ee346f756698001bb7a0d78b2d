{"js":{"code":"function iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };\n\n/*body*/\nimport setup from '../setup';\nimport nfs from 'fs-extra';\n\nawait setup(__filename);\n\ndescribe.skipIf(process.env.CI || true)(\"ASSETS\",function() {\n\t\n\ttest(\"OPAsset.for with a font\",async function() {\n\t\t\n\t\tconst f = await nfs.promises.readFile('./test/static/russo.ttf');\n\t\tconst font = await OPAsset.for(f);\n\t\texpect(font.id).toMatch(/^A/);\n\t\tok(font instanceof OPAsset);\n\t\tok(font.mime,'font/ttf');\n\t\tok(font.size,37480);\n\t\tok(font.fontΦ);\n\t\treturn ok(font.filePersisted);\n\t});\n\t\n\tdescribe(\"OPAsset.for for various types\",function() {\n\t\t\n\t\ttest(\"OPImage.for\",async function() {\n\t\t\t\n\t\t\tconst f = await nfs.promises.readFile('./test/static/pizza.jpg');\n\t\t\tconst image = await OPAsset.for(f);\n\t\t\t\n\t\t\tok(image instanceof OPAsset);\n\t\t\tok(image instanceof OPImage);\n\t\t\t\n\t\t\tok(image.persistedΦ);\n\t\t\tok(image.width,800);\n\t\t\tok(image.height,533);\n\t\t\tok(image.mime,'image/jpeg');\n\t\t\tok(image.size,128388);\n\t\t\treturn ok(image.filePersisted);\n\t\t});\n\t\t\n\t\ttest(\"OPAsset.for audio using OPAsset.for\",async function() {\n\t\t\t\n\t\t\tconst f = await nfs.promises.readFile('./test/static/audio.mp3');\n\t\t\tconst audio = await OPAsset.for(f);\n\t\t\texpect(audio.id).toMatch(/^AUD/);\n\t\t\tok(audio instanceof OPAsset);\n\t\t\tok(audio instanceof OPMedia);\n\t\t\tok(audio instanceof OPAudio);\n\t\t\tok(audio.mime,'audio/mpeg');\n\t\t\tok(audio.size,2553069);\n\t\t\treturn ok(audio.filePersisted);\n\t\t});\n\t\t\n\t\treturn test(\"OPAsset.for video using OPAsset.for\",async function() {\n\t\t\t\n\t\t\tconst f = await nfs.promises.readFile('./test/static/video.webm');\n\t\t\tconst video = await OPAsset.for(f);\n\t\t\texpect(video.id).toMatch(/^VID/);\n\t\t\tok(video instanceof OPAsset);\n\t\t\tok(video instanceof OPMedia);\n\t\t\tok(video instanceof OPVideo);\n\t\t\tok(video.mime,'video/webm');\n\t\t\tok(video.size,347605);\n\t\t\treturn ok(video.filePersisted);\n\t\t});\n\t});\n\t\n\tdescribe(\"OP<Type>.for for various types\",function() {\n\t\t\n\t\ttest(\"OPImage.for\",async function() {\n\t\t\t\n\t\t\tconst f = await nfs.promises.readFile('./test/static/pizza.jpg');\n\t\t\tconst image = await OPImage.for(f);\n\t\t\t\n\t\t\tok(image instanceof OPAsset);\n\t\t\tok(image instanceof OPImage);\n\t\t\t\n\t\t\tok(image.persistedΦ);\n\t\t\tok(image.width,800);\n\t\t\tok(image.height,533);\n\t\t\tok(image.mime,'image/jpeg');\n\t\t\tok(image.size,128388);\n\t\t\treturn ok(image.filePersisted);\n\t\t});\n\t\t\n\t\ttest(\"OPAudio.for\",async function() {\n\t\t\t\n\t\t\tconst f = await nfs.promises.readFile('./test/static/audio.mp3');\n\t\t\tconst audio = await OPAudio.for(f);\n\t\t\texpect(audio.id).toMatch(/^AUD/);\n\t\t\tok(audio instanceof OPAsset);\n\t\t\tok(audio instanceof OPMedia);\n\t\t\tok(audio instanceof OPAudio);\n\t\t\tok(audio.mime,'audio/mpeg');\n\t\t\tok(audio.size,2553069);\n\t\t\treturn ok(audio.filePersisted);\n\t\t});\n\t\t\n\t\treturn test(\"OPVideo.for\",async function() {\n\t\t\t\n\t\t\tconst f = await nfs.promises.readFile('./test/static/video.webm');\n\t\t\tconst video = await OPVideo.for(f);\n\t\t\texpect(video.id).toMatch(/^VID/);\n\t\t\tok(video instanceof OPAsset);\n\t\t\tok(video instanceof OPMedia);\n\t\t\tok(video instanceof OPVideo);\n\t\t\tok(video.mime,'video/webm');\n\t\t\tok(video.size,347605);\n\t\t\treturn ok(video.filePersisted);\n\t\t});\n\t});\n\t\n\treturn describe(\"Same files are only persisted once\",function() {\n\t\t\n\t\treturn test(\"OPImage.for\",async function() {\n\t\t\t\n\t\t\tconst f = await nfs.promises.readFile('./test/static/pizza.jpg');\n\t\t\tconst image = await OPImage.for(f);\n\t\t\tok(image.filePersisted);\n\t\t\tconst image2 = await OPImage.for(f);\n\t\t\tok(image2.filePersisted);\n\t\t\treturn ok(image.originalPath,image2.originalPath);\n\t\t});\n\t});\n});\n\nafterAll(async function() {\n\tvar $1;\n\t\n\tconst assets = await OPAsset.all();\n\tconsole.log((\"deleting \" + (assets.length) + \" asset(s) ...\"));\n\t$1 = [];\n\tfor (let $2 = 0, $3 = iter$__(assets), $4 = $3.length; $2 < $4; $2++) {\n\t\tlet asset = $3[$2];\n\t\t\n\t\t// we try here to swallow the error\n\t\t// since multiple assets can have the same\n\t\t// file in disk\n\t\ttry {\n\t\t\t$1.push(nfs.rmSync(asset.originalPath));\n\t\t} catch (e) { };\n\t};\n\treturn $1;\n});\n","dependencies":[],"map":{"version":3,"file":"assets.test.js","sourceRoot":"","sources":["/Users/sindre/repos/scrimba/op/test/misc/assets.test.imba"],"sourcesContent":["import setup from '../setup'\nimport nfs from 'fs-extra'\n\nawait setup(__filename)\n\ndescribe.skipIf(process.env.CI or true)(\"ASSETS\") do\n\ttest \"OPAsset.for with a font\" do\n\t\tconst f = await nfs.promises.readFile('./test/static/russo.ttf')\n\t\tconst font = await OPAsset.for(f)\n\t\texpect(font.id).toMatch /^A/\n\t\tok font isa OPAsset\n\t\tok font.mime, 'font/ttf'\n\t\tok font.size, 37480\n\t\tok font.font?\n\t\tok font.filePersisted\n\n\tdescribe \"OPAsset.for for various types\" do\n\t\ttest \"OPImage.for\" do\n\t\t\tconst f = await nfs.promises.readFile('./test/static/pizza.jpg')\n\t\t\tconst image = await OPAsset.for(f)\n\n\t\t\tok image isa OPAsset\n\t\t\tok image isa OPImage\n\n\t\t\tok image.persisted?\n\t\t\tok image.width, 800\n\t\t\tok image.height, 533\n\t\t\tok image.mime, 'image/jpeg'\n\t\t\tok image.size, 128388\n\t\t\tok image.filePersisted\n\n\t\ttest \"OPAsset.for audio using OPAsset.for\" do\n\t\t\tconst f = await nfs.promises.readFile('./test/static/audio.mp3')\n\t\t\tconst audio = await OPAsset.for(f)\n\t\t\texpect(audio.id).toMatch /^AUD/\n\t\t\tok audio isa OPAsset\n\t\t\tok audio isa OPMedia\n\t\t\tok audio isa OPAudio\n\t\t\tok audio.mime, 'audio/mpeg'\n\t\t\tok audio.size, 2553069\n\t\t\tok audio.filePersisted\n\n\t\ttest \"OPAsset.for video using OPAsset.for\" do\n\t\t\tconst f = await nfs.promises.readFile('./test/static/video.webm')\n\t\t\tconst video = await OPAsset.for(f)\n\t\t\texpect(video.id).toMatch /^VID/\n\t\t\tok video isa OPAsset\n\t\t\tok video isa OPMedia\n\t\t\tok video isa OPVideo\n\t\t\tok video.mime, 'video/webm'\n\t\t\tok video.size, 347605\n\t\t\tok video.filePersisted\n\n\tdescribe \"OP<Type>.for for various types\" do\n\t\ttest \"OPImage.for\" do\n\t\t\tconst f = await nfs.promises.readFile('./test/static/pizza.jpg')\n\t\t\tconst image = await OPImage.for(f)\n\n\t\t\tok image isa OPAsset\n\t\t\tok image isa OPImage\n\n\t\t\tok image.persisted?\n\t\t\tok image.width, 800\n\t\t\tok image.height, 533\n\t\t\tok image.mime, 'image/jpeg'\n\t\t\tok image.size, 128388\n\t\t\tok image.filePersisted\n\n\t\ttest \"OPAudio.for\" do\n\t\t\tconst f = await nfs.promises.readFile('./test/static/audio.mp3')\n\t\t\tconst audio = await OPAudio.for(f)\n\t\t\texpect(audio.id).toMatch /^AUD/\n\t\t\tok audio isa OPAsset\n\t\t\tok audio isa OPMedia\n\t\t\tok audio isa OPAudio\n\t\t\tok audio.mime, 'audio/mpeg'\n\t\t\tok audio.size, 2553069\n\t\t\tok audio.filePersisted\n\n\t\ttest \"OPVideo.for\" do\n\t\t\tconst f = await nfs.promises.readFile('./test/static/video.webm')\n\t\t\tconst video = await OPVideo.for(f)\n\t\t\texpect(video.id).toMatch /^VID/\n\t\t\tok video isa OPAsset\n\t\t\tok video isa OPMedia\n\t\t\tok video isa OPVideo\n\t\t\tok video.mime, 'video/webm'\n\t\t\tok video.size, 347605\n\t\t\tok video.filePersisted\n\n\tdescribe \"Same files are only persisted once\" do\n\t\ttest \"OPImage.for\" do\n\t\t\tconst f = await nfs.promises.readFile('./test/static/pizza.jpg')\n\t\t\tconst image = await OPImage.for(f)\n\t\t\tok image.filePersisted\n\t\t\tconst image2 = await OPImage.for(f)\n\t\t\tok image2.filePersisted\n\t\t\tok image.originalPath, image2.originalPath\n\nafterAll do\n\tconst assets = await OPAsset.all!\n\tconsole.log \"deleting {assets.length} asset(s) ...\"\n\tfor asset in assets\n\t\t# we try here to swallow the error\n\t\t# since multiple assets can have the same\n\t\t# file in disk\n\t\ttry nfs.rmSync asset.originalPath\n"],"names":[],"mappings":"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"}},"css":{"code":""},"warnings":[],"errors":[]}
{"js":{"code":"function defineName$__(cls,name){\n\tObject.defineProperty(cls,\"name\",{value:name,configurable:true});\n};;\nfunction inheritClass$__(cls){\n\tObject.getPrototypeOf(cls.prototype).constructor?.inherited?.(cls);\n};;\nfunction extend$__(target,ext){\n\t// @ts-ignore\n\tconst descriptors = Object.getOwnPropertyDescriptors(ext);\n\tdelete descriptors.constructor;\n\tif(target.extend__ instanceof Function){\n\t\ttarget.extend__(descriptors,ext);\n\t} else {\n\t\t// @ts-ignore\n\t\tObject.defineProperties(target,descriptors);\n\t}\n\treturn target;\n};\nconst $__init__$ = Symbol.for('#__init__'), $__patch__$ = Symbol.for('#__patch__'), $__initor__$ = Symbol.for('#__initor__'), $__inited__$ = Symbol.for('#__inited__'), $__hooks__$ = Symbol.for('#__hooks__');\nvar $1 = Symbol();\n\n/*body*/\nimport './ref';\nimport './any';\n\nclass OPImageField extends OPPlainField {\n\t[$__patch__$]($$ = {},fields = true){\n\t\tvar $2;\n\t\tsuper[$__patch__$] && super[$__patch__$]($$,fields);\n\t\t($2 = $$.pgtype) !== undefined && (this.pgtype = $2);\n\t\t\n\t}\n\tconstructor(){\n\t\tsuper(...arguments);\n\t\tsuper[$__init__$] || this[$__init__$]();this[$__initor__$]===$1 && (this[$__hooks__$]&&this[$__hooks__$].inited(this),this[$__inited__$] && this[$__inited__$]());\n\t}\n\t[$__init__$]($$ = null,deep = true,fields = true){\n\t\tvar $3;\n\t\tdeep && super[$__init__$] && super[$__init__$](...arguments);\n\t\tthis.pgtype = ($$ && ($3 = $$.pgtype) !== undefined) ? ($3) : 'text';\n\t\t\n\t}\n\t$sanitize(value){\n\t\t\n\t\treturn value?.id || value;\n\t}\n\t\n\tasync $set(value,target,ctx){\n\t\t\n\t\t// here we want to add support for stuff\n\t\tif (false && value) {\n\t\t\t\n\t\t\t// TODO only if it is not an image?\n\t\t\tvalue = await OP.Image.for(value);\n\t\t};\n\t\t\n\t\treturn super.$set(...arguments);\n\t}\n\t\n\t$get(target){\n\t\t\n\t\treturn OP.Image.get(target[this.$prop][this.name]);\n\t}\n\tstatic {\n\t\tthis.prototype[$__initor__$] = $1;defineName$__(this,'OPImageField');inheritClass$__(this);}\n}; globalThis.OPImageField = OPImageField;\n\nclass ΩOPObject {\n\t\n\tαimage(){\n\t\t\n\t\treturn new OPImageField;\n\t}\n\tstatic {\n\t\tdefineName$__(this,'OPObject');}\n};\nextend$__(OPObject.prototype,ΩOPObject.prototype);\n;\n","dependencies":[],"map":{"version":3,"file":"image.js","sourceRoot":"","sources":["/Users/sindre/repos/scrimba/op/src/fields/image.imba"],"sourcesContent":["import './ref'\nimport './any'\n\nglobal class OPImageField < OPPlainField\n\tpgtype = 'text'\n\n\tdef $sanitize value\n\t\tvalue..id or value\n\n\tdef $set value, target, ctx\n\t\t# here we want to add support for stuff\n\t\tif $web$ and value\n\t\t\t# TODO only if it is not an image?\n\t\t\tvalue = await OP.Image.for(value)\n\n\t\tsuper\n\n\tdef $get target\n\t\tOP.Image.get(target[$prop][name])\n\nextend class OPObject\n\tdef @image\n\t\tnew OPImageField"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,MAAM,CAAC,OAAO;AACd,MAAM,CAAC,OAAO;;AAEP,KAAK,CAAC,YAAY,SAAG,YAAY,EAAA;qCAHxC;;;WAIC,MAAM,CAAA,wBAAN,MAAM;;EAJP;cAAA;;;EAAA;kDAAA;;;OAIC,MAAM,mBAAN,MAAM,CAAA,qBAAA,IAAG,MAAM;;EAJhB;CAMK,SAAS,CAAC,KAAK,CAAA;;EAClB,OAAA,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK;EAAA;;OAEf,IAAI,CAAC,KAAK,CAAE,MAAM,CAAE,GAAG,CAAA;;;EAE1B,EAAE,EAAC,KAAK,CAAC,EAAG,CAAC,KAAK,EAAA;;;GAEjB,KAAK,SAAS,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC;GAAA;;EAElC,OAAA,MANG,IAAI,cAMF;EAAA;;CAEF,IAAI,CAAC,MAAM,CAAA;;EACd,OAAA,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAA,KAAC,KAAK,CAAC,CAAA,KAAC,IAAI,CAAC,CAAC;EAAA;;;AAAA,cAftB,YAAY,GAAZ,YAAY;;AAiBlB,KAAK,CAAC,SAAQ,EAAA;;CAChB,MAAM,EAAA;;EACT,OAAA,GAAG,CAAC,YAAY;EAAA;;;AAAA;UAFL,QAAQ;AAEH;AAAA;"}},"css":{"code":""},"warnings":[],"errors":[]}
{"js":{"code":"function defineName$__(cls,name){\n\tObject.defineProperty(cls,\"name\",{value:name,configurable:true});\n};;\nfunction inheritClass$__(cls){\n\tObject.getPrototypeOf(cls.prototype).constructor?.inherited?.(cls);\n};\n\n/*body*/\nimport * as os from '../util/os';\n\nconst analyze = async function({coverData: coverData = true,blob: blob,full: full = true}) {\n\t\n\tlet mediainfo;\n\tlet result;\n\t\n\tconst readChunk = function(size,offset) {\n\t\t\n\t\tconst chunk = blob.slice(offset,offset + size);\n\t\tconst uint8Array = new Uint8Array(chunk);\n\t\treturn uint8Array;\n\t};\n\ttry {\n\t\t\n\t\tconst fileSize = blob.length;\n\t\tmediainfo = await os.Minfo(\n\t\t\t{format: \"JSON\",\n\t\t\tcoverData: coverData,\n\t\t\tfull: full}\n\t\t);\n\t\t\n\t\tif (mediainfo === undefined) {\n\t\t\t\n\t\t\tthrow new Error(\"Failed to initialize MediaInfo\");\n\t\t};\n\t\tresult = await mediainfo.analyzeData(function() { return fileSize; },readChunk);\n\t} finally {\n\t\t\n\t\tmediainfo && mediainfo.close();\n\t};\n\treturn result;\n};\n\nexport class OPMedia extends OPAsset {\n\t\n\t\n\tget duration(){\n\t\treturn this.params[4];\n\t}\n\tget bitrate(){\n\t\treturn this.params[5];\n\t}\n\tget compression(){\n\t\treturn this.params[6];\n\t}\n\tget streamableÎ¦(){\n\t\treturn this.params[7];\n\t}\n\t\n\tstatic async _for(blob,parameters = {}){\n\t\t\n\t\tif (!(blob)) { return };\n\t\t\n\t\tconst mime = parameters.mime;\n\t\tconst options = {};\n\t\t\n\t\t\n\t\tlet meta = await analyze({blob: blob});\n\t\tif (meta) {\n\t\t\t\n\t\t\tmeta = JSON.parse(meta)?.media.track || {};\n\t\t};\n\t\t\n\t\tlet hash = os.hash(blob);\n\t\toptions.params = [\n\t\t\thash,\n\t\t\tparameters.mime,\n\t\t\t+meta[0].FileSize,\n\t\t\t+meta[0].Duration * 1000\n\t\t];\n\t\t\n\t\toptions.meta = meta;\n\t\t;\n\t\t\n\t\tif (mime?.startsWith?.('audio')) {\n\t\t\t\n\t\t\treturn OPAudio._for(blob,options);\n\t\t} else if (mime?.startsWith?.('video')) {\n\t\t\t\n\t\t\treturn OPVideo._for(blob,options);\n\t\t} else {\n\t\t\t\n\t\t\tconsole.warn((\"Warning: OPAsset - Unsupported media type \" + mime));\n\t\t\treturn this.get(this.encodeKey(options.params));\n\t\t};\n\t}\n\tstatic {\n\t\tdefineName$__(this,'OPMedia');inheritClass$__(this);}\n}; globalThis.OPMedia = OPMedia;\n","dependencies":[],"map":{"version":3,"file":"media.js","sourceRoot":"","sources":["/Users/sindre/repos/scrimba/op/src/types/media.imba"],"sourcesContent":["import * as os from '../util/os'\n\nconst analyze = do({coverData = yes, blob, full = yes})\n\tlet mediainfo\n\tlet result\n\n\tconst readChunk = do(size, offset)\n\t\tconst chunk = blob.slice(offset, offset + size)\n\t\tconst uint8Array = new Uint8Array(chunk)\n\t\treturn uint8Array\n\ttry\n\t\tconst fileSize = blob.length\n\t\tmediainfo = await os.Minfo\n\t\t\tformat: \"JSON\"\n\t\t\tcoverData: coverData\n\t\t\tfull: full\n\n\t\tif mediainfo === undefined\n\t\t\tthrow new Error(\"Failed to initialize MediaInfo\")\n\t\tresult = await mediainfo.analyzeData(&, readChunk) do fileSize\n\tfinally\n\t\tmediainfo and mediainfo.close()\n\treturn result\n\nexport global class OPMedia < OPAsset\n\n\tget duration do params[4]\n\tget bitrate do params[5]\n\tget compression do params[6]\n\tget streamable? do params[7]\n\n\tstatic def _for blob, parameters = {}\n\t\treturn unless blob\n\n\t\tconst mime = parameters.mime\n\t\tconst options = {}\n\t\tif $node$\n\t\t\tlet meta = await analyze({blob})\n\t\t\tif meta\n\t\t\t\tmeta = JSON.parse(meta)..media.track or {}\n\n\t\t\tlet hash = os.hash(blob)\n\t\t\toptions.params = [\n\t\t\t\thash\n\t\t\t\tparameters.mime\n\t\t\t\t+meta[0].FileSize\n\t\t\t\t+meta[0].Duration * 1000\n\t\t\t]\n\n\t\t\toptions.meta = meta\n\t\telif $browser$\n\t\t\toptions.blob-url = parameters.blob-url\n\t\t\tconst data = await blob.arrayBuffer!\n\t\t\tconst hash = os.hash(data)\n\n\t\t\toptions.params = [hash, mime, blob.size]\n\n\t\tif mime..startsWith('audio')\n\t\t\tOPAudio._for(blob, options)\n\t\telif mime..startsWith('video')\n\t\t\tOPVideo._for(blob, options)\n\t\telse\n\t\t\tconsole.warn \"Warning: OPAsset - Unsupported media type {mime}\"\n\t\t\tself.get(encodeKey(options.params))\n"],"names":[],"mappings":";;;;;;;;AAAA,MAAM,CAAC,CAAC,IAAI,EAAE,MAAM,YAAY;;MAE1B,OAAO,GAAG,cAAE,CAAC,CAAC,SAAS,EAAT,SAAS,GAAG,IAAG,CAAE,IAAI,EAAJ,IAAI,CAAE,IAAI,EAAJ,IAAI,GAAG,IAAG,CAAC,EAAC;;KAClD,SAAS;KACT,MAAM;;OAEJ,SAAS,GAAG,QAAE,CAAC,IAAI,CAAE,MAAM,EAAC;;QAC3B,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;QACzC,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC;EACxC,MAAM,CAAC,UAAU;EAAA;KACf;;QACI,QAAQ,GAAG,IAAI,CAAC,MAAM;EAC5B,SAAS,SAAS,EAAE,CAAC,KAAK;IACzB,MAAM,EAAE,MAAM;GACd,SAAS,EAAE,SAAS;GACpB,IAAI,EAAE,IAAI;GAHe;;EAK1B,EAAE,EAAC,SAAS,CAAC,GAAG,CAAC,SAAS,EAAA;;SACnB,GAAG,CAAC,KAAK,CAAC,gCAAgC,CAAC;GAAA;EAClD,MAAM,SAAS,SAAS,CAAC,WAAW,CAAe,QAAE,KAAC,OAAA,QAAQ,IAAtB,SAAS,CAAC;EAAY,SACxD;;EACN,SAAS,CAAC,EAAG,CAAC,SAAS,CAAC,KAAK,EAAE;EAAA;CAChC,MAAM,CAAC,MAAM;CAAA;;AAEd,MAAM,CAAQ,KAAK,CAAC,OAAO,SAAG,OAAO,EAAA;;;CAEpC,GAAG,CAAC,QAAQ;EAAI,OAAA,KAAA,MAAM,CAAC,CAAC,CAAC;EA1B1B;CA2BC,GAAG,CAAC,OAAO;EAAI,OAAA,KAAA,MAAM,CAAC,CAAC,CAAC;EA3BzB;CA4BC,GAAG,CAAC,WAAW;EAAI,OAAA,KAAA,MAAM,CAAC,CAAC,CAAC;EA5B7B;CA6BC,GAAG,CAAC,WAAW;EAAI,OAAA,KAAA,MAAM,CAAC,CAAC,CAAC;EA7B7B;;CA+BC,MAAM,OAAK,IAAI,CAAC,IAAI,CAAE,UAAU,GAAG,EAAE,CAAA;;EAC7B,EAAM,IAAC,IAAI,GAAlB,EAAA,MAAM;;QAEA,IAAI,GAAG,UAAU,CAAC,IAAI;QACtB,OAAO,GAAG,EAAE;EACT;;MACJ,IAAI,SAAS,OAAO,CAAC,CAAC,IAAI,OAAC,CAAC;EAChC,EAAE,EAAC,IAAI,EAAA;;GACN,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;GAAA;;MAEvC,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC;EACxB,OAAO,CAAC,MAAM,GAAG,CAChB;GAAA,IAAI;GACJ,UAAU,CAAC,IAAI;GACf,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ;GACjB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI;EAAA,CACxB;;EAED,OAAO,CAAC,IAAI,GAAG,IAAI;EAAA;;EAQpB,EAAE,EAAC,IAAI,EAAE,UAAU,EAAA,CAAC,OAAO,CAAC,EAAA;;GAC3B,OAAA,OAAO,CAAC,IAAI,CAAC,IAAI,CAAE,OAAO,CAAC;GAAA,MAC5B,EAAA,EAAK,IAAI,EAAE,UAAU,EAAA,CAAC,OAAO,CAAC,EAAA;;GAC7B,OAAA,OAAO,CAAC,IAAI,CAAC,IAAI,CAAE,OAAO,CAAC;GAAA,MACxB;;GACH,OAAO,CAAC,IAAI,CAAC,gDAA4C,IAAI,CAAE,CAAA;GAC/D,OAAA,IAAI,CAAC,GAAG,CAAC,KAAA,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;GAAA;EAAA;;;AAAA,cAvClB,OAAO,GAAP,OAAO;AAwC3B;"}},"css":{"code":""},"warnings":[],"errors":[]}
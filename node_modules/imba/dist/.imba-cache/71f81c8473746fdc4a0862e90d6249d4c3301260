{"js":{"code":"function defineName$__(cls,name){\n\tObject.defineProperty(cls,\"name\",{value:name,configurable:true});\n};;\nfunction inheritClass$__(cls){\n\tObject.getPrototypeOf(cls.prototype).constructor?.inherited?.(cls);\n};;\nfunction extend$__(target,ext){\n\t// @ts-ignore\n\tconst descriptors = Object.getOwnPropertyDescriptors(ext);\n\tdelete descriptors.constructor;\n\tif(target.extend__ instanceof Function){\n\t\ttarget.extend__(descriptors,ext);\n\t} else {\n\t\t// @ts-ignore\n\t\tObject.defineProperties(target,descriptors);\n\t}\n\treturn target;\n};;\nfunction iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };\nconst $__init__$ = Symbol.for('#__init__'), $__patch__$ = Symbol.for('#__patch__'), $__initor__$ = Symbol.for('#__initor__'), $__inited__$ = Symbol.for('#__inited__'), $__hooks__$ = Symbol.for('#__hooks__');\nvar $1 = Symbol(), $2 = Symbol();\n\n/*body*/\nimport {Value} from './any';\nimport {isPlainObject} from '../utils';\n\nclass OPRectField extends OPField {\n\t[$__patch__$]($$ = {},fields = true){\n\t\tvar $3;\n\t\tsuper[$__patch__$] && super[$__patch__$]($$,fields);\n\t\t($3 = $$.pgtype) !== undefined && (this.pgtype = $3);\n\t\t($3 = $$.type) !== undefined && (this.type = $3);\n\t\t($3 = $$.patchkey) !== undefined && (this.patchkey = $3);\n\t\t\n\t}\n\tconstructor(){\n\t\tsuper(...arguments);\n\t\tsuper[$__init__$] || this[$__init__$]();this[$__initor__$]===$1 && (this[$__hooks__$]&&this[$__hooks__$].inited(this),this[$__inited__$] && this[$__inited__$]());\n\t}\n\t[$__init__$]($$ = null,deep = true,fields = true){\n\t\tvar $4;\n\t\tdeep && super[$__init__$] && super[$__init__$](...arguments);\n\t\tthis.pgtype = ($$ && ($4 = $$.pgtype) !== undefined) ? ($4) : 'jsonb';\n\t\tthis.type = ($$ && ($4 = $$.type) !== undefined) ? ($4) : OPRect;\n\t\tthis.patchkey = ($$ && ($4 = $$.patchkey) !== undefined) ? ($4) : Symbol();\n\t\t\n\t}\n\tget valuetype(){\n\t\t\n\t\treturn this.type;\n\t}\n\t\n\tget richΦ(){\n\t\t\n\t\treturn true;\n\t}\n\t\n\t/**\n\t@returns { InstanceType<Type> }\n\t*/\n\t$get(target){\n\t\t\n\t\treturn target.$rich[this.name] ??= this.type.embed(target,this);\n\t}\n\t\n\t$set(value,target){\n\t\t\n\t\t// if we change the rect?!\n\t\treturn this.$load(value,target);\n\t}\n\t\n\t// FIXME Deprecated stuff\n\t$load(value,target){\n\t\t\n\t\t// check if it has changed since the prev load?\n\t\tif ((target[this.patchkey] != value) ? ((target[this.patchkey] = value,true)) : false) {\n\t\t\t\n\t\t\tthis.$get(target).$patch(value);\n\t\t\t// target[key] ??= type.embed(target,self,value)\n\t\t};\n\t\treturn;\n\t}\n\tstatic {\n\t\tthis.prototype[$__initor__$] = $1;defineName$__(this,'OPRectField');inheritClass$__(this);}\n}; globalThis.OPRectField = OPRectField;\n\nclass ΩOPObject {\n\t\n\tαrect(defaults = {}){\n\t\t\n\t\tlet field = new OPRectField(OPRect,defaults);\n\t\treturn field;\n\t}\n\tstatic {\n\t\tdefineName$__(this,'OPObject');}\n};\nextend$__(OPObject.prototype,ΩOPObject.prototype);\n;\n\nconst FLAGS = {\n\tWIDTH: 1 << 0,\n\tHEIGHT: 1 << 1,\n\tFIXED_SIZE: 0\n};\n\nconst DEFAULTS = {l: 0,t: 0,w: 0,h: 0,x: 0,y: 0,ax: 0,ay: 0,auto: 0};\n\n// better to back this up with msgpackable object?\n// No need to really store the id for the embed, right?\n\n// rather use array for this? Also better for the serializing?\n// Unsure if we should serialize it as binary  mp or not\n\nclass OPRect extends OPValue {\n\t\n\tconstructor(raw){\n\t\t\n\t\tsuper();\n\t\tthis.raw = {...DEFAULTS};\n\t\tthis.logs = [];\n\t\tthis.$patch(raw || this.$cloud);\n\t\tthis[$__initor__$]===$2 && (this[$__hooks__$]&&this[$__hooks__$].inited(this),this[$__inited__$] && this[$__inited__$]());\n\t}\n\t\n\tclone(){\n\t\t\n\t\treturn new OPRect({...this.raw});\n\t}\n\t\n\ttoArray(){\n\t\tvar $5;\n\t\t\n\t\t$5 = [];\n\t\tfor (let $6 = 0, $7 = Object.keys(DEFAULTS), $8 = $7.length, k, v; $6 < $8; $6++){\n\t\t\tk = $7[$6];v = DEFAULTS[k];\n\t\t\t$5.push(this.raw[k] || v);\n\t\t};\n\t\treturn $5;\n\t\t// [raw.l or 0,raw.t or 0,raw.w or 0,raw.h or 0, raw.x or 0,raw.y or 0, raw.ax or 0, raw.ay or 0, raw.auto or 0]\n\t}\n\t\n\t// def serialize\n\t// JSON.stringify(Object.values(raw))\n\t\n\t$patch(val){\n\t\t\n\t\tif (typeof val == 'string') {\n\t\t\t\n\t\t\tval = JSON.parse(val);\n\t\t};\n\t\t\n\t\tif (val instanceof Array) {\n\t\t\t\n\t\t\tlet keys = Object.keys(this.raw);\n\t\t\tlet vals = val;\n\t\t\t\n\t\t\tlet dirty = false;\n\t\t\tfor (let i = 0, $9 = iter$__(keys), $10 = $9.length; i < $10; i++) {\n\t\t\t\tlet k = $9[i];\n\t\t\t\tif ((this.raw[k] != vals[i]) ? ((this.raw[k] = vals[i],true)) : false) {\n\t\t\t\t\t\n\t\t\t\t\tdirty = true;\n\t\t\t\t};\n\t\t\t};\n\t\t} else if (isPlainObject(val)) {\n\t\t\t\n\t\t\tfor (let $11 = 0, $12 = Object.keys(val), $13 = $12.length, k, v; $11 < $13; $11++){\n\t\t\t\tk = $12[$11];v = val[k];\n\t\t\t\tthis.raw[k] = v;\n\t\t\t};\n\t\t};\n\t\t\n\t\tthis.$prev ||= Object.assign({},this.raw);\n\t\t\n\t\treturn this;\n\t}\n\t\n\tget auto(){\n\t\treturn this.raw.auto;\n\t}\n\t\n\tset auto(val){\n\t\t\n\t\tthis.raw.auto = val;\n\t\tthis.$changed();\n\t}\n\t\n\tset cx(val){\n\t\t\n\t\tthis.x = (val) + this.w * (this.ax - 0.5);\n\t\tthis.$changed();\n\t}\n\t\n\tset cy(val){\n\t\t\n\t\tthis.y = (val) + this.h * (this.ay - 0.5);\n\t\tthis.$changed();\n\t}\n\t\n\tget ax(){\n\t\treturn this.raw.ax;\n\t}\n\tget ay(){\n\t\treturn this.raw.ay;\n\t}\n\tget x(){\n\t\treturn (this.raw.x ?? this.raw.l);\n\t}\n\tget y(){\n\t\treturn (this.raw.y ?? this.raw.t);\n\t}\n\tget w(){\n\t\treturn this.raw.w;\n\t}\n\tget h(){\n\t\treturn this.raw.h;\n\t}\n\t\n\tget l(){\n\t\treturn this.x - (this.w * this.ax);\n\t}\n\tget t(){\n\t\treturn this.y - (this.h * this.ay);\n\t}\n\t\n\tget b(){\n\t\treturn this.t + this.raw.h;\n\t}\n\tget r(){\n\t\treturn this.l + this.raw.w;\n\t}\n\t\n\tset ax(v1){\n\t\tconst v0 = this.ax;\n\t\tlet x1 = this.l + this.w * v1;\n\t\tthis.raw.ax = v1;\n\t\tthis.raw.x = x1;\n\t\tthis.$changed();\n\t}\n\t\n\tset ay(v1){\n\t\tconst v0 = this.ay;\n\t\tlet y1 = this.t + this.h * v1;\n\t\tthis.raw.ay = v1;\n\t\tthis.raw.y = y1;\n\t\tthis.$changed();\n\t}\n\t\n\tset r(v1){\n\t\tconst v0 = this.r;\n\t\tthis.raw.auto &= ~FLAGS.WIDTH;\n\t\tlet x0 = this.x;\n\t\tlet w0 = this.w;\n\t\t\n\t\tthis.raw.w += (v1 - v0);\n\t\tthis.raw.x += (v1 - v0) * this.ax;\n\t\tthis.$changed();\n\t}\n\t\n\tset l(l1){\n\t\tconst l0 = this.l;\n\t\tthis.raw.auto &= ~FLAGS.WIDTH;\n\t\tthis.raw.w -= (l1 - l0);\n\t\tthis.raw.l = l1;\n\t\tthis.raw.x = l1 + this.raw.w * this.raw.ax;\n\t\tthis.$changed();\n\t}\n\t\n\tset t(v1){\n\t\tconst v0 = this.t;\n\t\tthis.raw.auto &= ~FLAGS.HEIGHT;\n\t\tconsole.log('setting top',v1,v0);\n\t\tthis.raw.h -= (v1 - v0);\n\t\tthis.raw.t = v1;\n\t\tthis.raw.y = v1 + this.raw.h * this.raw.ay;\n\t\tthis.$changed();\n\t}\n\t\n\tset b(v1){\n\t\tconst v0 = this.b;\n\t\tthis.raw.auto &= ~FLAGS.HEIGHT;\n\t\tconsole.log('setting bottom',v1,v0);\n\t\tthis.raw.h = v1 - this.t;\n\t\tthis.$changed();\n\t\t// raw.t = v1\n\t}\n\t\n\tset w(v1){\n\t\t\n\t\tthis.raw.auto &= ~FLAGS.WIDTH;\n\t\tthis.raw.w = v1;\n\t\tthis.$changed();\n\t}\n\t\n\tset h(v1){\n\t\t\n\t\tthis.raw.auto &= ~FLAGS.HEIGHT;\n\t\tthis.raw.h = v1;\n\t\tthis.$changed();\n\t}\n\t\n\tset x(v1){\n\t\tconst v0 = this.x;\n\t\tthis.raw.x = v1;\n\t\tthis.raw.l = this.raw.l + (v1 - v0);\n\t\tthis.$changed();\n\t}\n\t\n\tset y(v1){\n\t\tconst v0 = this.y;\n\t\tthis.raw.y = v1;\n\t\tthis.raw.t = this.raw.t + (v1 - v0);\n\t\tthis.$changed();\n\t}\n\t\n\tround(prec = 10,silent = false){\n\t\t\n\t\tlet dirty = false;\n\t\tfor (let $16 = this.raw, $14 = 0, $15 = Object.keys($16), $17 = $15.length, k, v; $14 < $17; $14++){\n\t\t\tk = $15[$14];v = $16[k];\n\t\t\tif (k[0] == 'a') { continue; };\n\t\t\tlet rounded = v.round(prec);\n\t\t\tthis.raw[k] = rounded;\n\t\t\tif (v != rounded) { dirty = true };\n\t\t};\n\t\t\n\t\tif (dirty && !(silent)) { this.$changed() };\n\t\treturn this;\n\t}\n\t\n\t$changed(hard = false){\n\t\t\n\t\t// TODO make this work with diff/patch\n\t\treturn true;\n\t}\n\tstatic {\n\t\tthis.prototype[$__initor__$] = $2;defineName$__(this,'OPRect');inheritClass$__(this);}\n}; globalThis.OPRect = OPRect;\n","dependencies":[],"map":{"version":3,"file":"rect.js","sourceRoot":"","sources":["/Users/sindre/repos/scrimba/op/src/fields/rect.imba"],"sourcesContent":["import {Value} from './any'\nimport {isPlainObject} from '../utils'\n\nglobal class OPRectField < OPField\n\tpgtype = 'jsonb'\n\ttype = OPRect\n\tpatchkey = Symbol!\n\n\tget valuetype\n\t\ttype\n\n\tget rich?\n\t\tyes\n\n\tdef $get\\InstanceType<Type> target\n\t\ttarget.$rich[name] ??= type.embed(target,self)\n\n\tdef $set value, target\n\t\t# if we change the rect?!\n\t\t$load(value,target)\n\n\t# FIXME Deprecated stuff\n\tdef $load value, target\n\t\t# check if it has changed since the prev load?\n\t\tif target[patchkey] =? value\n\t\t\t$get(target).$patch(value)\n\t\t\t# target[key] ??= type.embed(target,self,value)\n\t\treturn\n\nextend class OPObject\n\tdef @rect defaults = {}\n\t\tlet field = new OPRectField(OPRect,defaults)\n\t\treturn field\n\nconst FLAGS = {\n\tWIDTH: 1 << 0\n\tHEIGHT: 1 << 1\n\tFIXED_SIZE: 0\n}\n\nconst DEFAULTS = {l: 0,t: 0,w: 0,h: 0,x:0,y:0,ax:0,ay:0,auto:0}\n\n# better to back this up with msgpackable object?\n# No need to really store the id for the embed, right?\n\n# rather use array for this? Also better for the serializing?\n# Unsure if we should serialize it as binary  mp or not\n\nglobal class OPRect < OPValue\n\tdef constructor raw\n\t\tsuper()\n\t\tself.raw = {...DEFAULTS}\n\t\tself.logs = []\n\t\t$patch(raw or $cloud)\n\n\tdef clone\n\t\treturn new OPRect({...raw})\n\n\tdef toArray\n\t\treturn for own k,v of DEFAULTS\n\t\t\traw[k] or v\n\t\t# [raw.l or 0,raw.t or 0,raw.w or 0,raw.h or 0, raw.x or 0,raw.y or 0, raw.ax or 0, raw.ay or 0, raw.auto or 0]\n\n\t# def serialize\n\t#\tJSON.stringify(Object.values(raw))\n\n\tdef $patch val\n\t\tif typeof val == 'string'\n\t\t\tval = JSON.parse(val)\n\n\t\tif val isa Array\n\t\t\tlet keys = Object.keys(raw)\n\t\t\tlet vals = val\n\n\t\t\tlet dirty = no\n\t\t\tfor k,i in keys\n\t\t\t\tif raw[k] =? vals[i]\n\t\t\t\t\tdirty = yes\n\n\t\telif isPlainObject(val)\n\t\t\tfor own k,v of val\n\t\t\t\traw[k] = v\n\n\t\t$prev ||= Object.assign({},raw)\n\n\t\tself\n\n\tget auto do raw.auto\n\n\tset auto val\n\t\traw.auto = val\n\t\t$changed!\n\n\tset cx val\n\t\tx = (val) + w * (ax - 0.5)\n\t\t$changed!\n\n\tset cy val\n\t\ty = (val) + h * (ay - 0.5)\n\t\t$changed!\n\n\tget ax do raw.ax\n\tget ay do raw.ay\n\tget x do raw.x ?? raw.l\n\tget y do raw.y ?? raw.t\n\tget w do raw.w\n\tget h do raw.h\n\n\tget l do x - (w * ax)\n\tget t do y - (h * ay)\n\n\tget b do t + raw.h\n\tget r do l + raw.w\n\n\tset ax v1,v0\n\t\tlet x1 = l + w * v1\n\t\traw.ax = v1\n\t\traw.x = x1\n\t\t$changed!\n\n\tset ay v1,v0\n\t\tlet y1 = t + h * v1\n\t\traw.ay = v1\n\t\traw.y = y1\n\t\t$changed!\n\n\tset r v1,v0\n\t\traw.auto ~= FLAGS.WIDTH\n\t\tlet x0 = x\n\t\tlet w0 = w\n\n\t\traw.w += (v1 - v0)\n\t\traw.x += (v1 - v0) * ax\n\t\t$changed!\n\n\tset l l1,l0\n\t\traw.auto ~= FLAGS.WIDTH\n\t\traw.w -= (l1 - l0)\n\t\traw.l = l1\n\t\traw.x = l1 + raw.w * raw.ax\n\t\t$changed!\n\n\tset t v1,v0\n\t\traw.auto ~= FLAGS.HEIGHT\n\t\tconsole.log 'setting top',v1,v0\n\t\traw.h -= (v1 - v0)\n\t\traw.t = v1\n\t\traw.y = v1 + raw.h * raw.ay\n\t\t$changed!\n\n\tset b v1,v0\n\t\traw.auto ~= FLAGS.HEIGHT\n\t\tconsole.log 'setting bottom',v1,v0\n\t\traw.h = v1 - t\n\t\t$changed!\n\t\t# raw.t = v1\n\n\tset w v1\n\t\traw.auto ~= FLAGS.WIDTH\n\t\traw.w = v1\n\t\t$changed!\n\n\tset h v1\n\t\traw.auto ~= FLAGS.HEIGHT\n\t\traw.h = v1\n\t\t$changed!\n\n\tset x v1,v0\n\t\traw.x = v1\n\t\traw.l = raw.l + (v1 - v0)\n\t\t$changed!\n\n\tset y v1,v0\n\t\traw.y = v1\n\t\traw.t = raw.t + (v1 - v0)\n\t\t$changed!\n\n\tdef round prec = 10, silent = no\n\t\tlet dirty = no\n\t\tfor own k,v of raw\n\t\t\tcontinue if k[0] == 'a'\n\t\t\tlet rounded = v.round(prec)\n\t\t\traw[k] = rounded\n\t\t\tdirty = yes if v != rounded\n\n\t\t$changed! if dirty and !silent\n\t\tself\n\n\tdef $changed hard = no\n\t\t# TODO make this work with diff/patch\n\t\tyes"],"names":[],"mappings":"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"}},"css":{"code":""},"warnings":[],"errors":[]}
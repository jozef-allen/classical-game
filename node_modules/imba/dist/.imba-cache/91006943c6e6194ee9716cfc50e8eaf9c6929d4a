{"js":{"code":"function iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };;\nfunction defineName$__(cls,name){\n\tObject.defineProperty(cls,\"name\",{value:name,configurable:true});\n};;\nfunction extend$__(target,ext){\n\t// @ts-ignore\n\tconst descriptors = Object.getOwnPropertyDescriptors(ext);\n\tdelete descriptors.constructor;\n\tif(target.extend__ instanceof Function){\n\t\ttarget.extend__(descriptors,ext);\n\t} else {\n\t\t// @ts-ignore\n\t\tObject.defineProperties(target,descriptors);\n\t}\n\treturn target;\n};;\nfunction decorate$__(decorators,target,key,desc){\n\tvar c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\tif (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\telse for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\treturn c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport {αlazy as imba_αlazy, αthenable as imba_αthenable, use_hooks as imba_use_hooks, hooks as imba_hooks} from 'imba';\n(imba_use_hooks());\nconst $__hooks__$ = Symbol.for('#__hooks__'), $__initor__$ = Symbol.for('#__initor__'), $__inited__$ = Symbol.for('#__inited__'), $__init__$ = Symbol.for('#__init__'), $__patch__$ = Symbol.for('#__patch__');\n\n/*body*/\nimport 'op';\nimport cp from 'child_process';\nimport np from 'path';\nimport nfs from 'fs-extra';\nimport {getUsedProps,resolveFixtures} from './util/fixture.ts';\nprocess.on('uncaughtException',function(err) {\n\t\n\treturn console.trace('uncaught exception',err);\n});\n\nfunction isPlainObject(val){\n\t\n\treturn typeof val == 'object' && val && Object.getPrototypeOf(val) == Object.prototype;\n};\n\nconst users = {\n\tsindre: {id: 2,name: 'Sindre'},\n\tper: {id: 3,name: 'Per'},\n\tmagnus: {id: 4,name: 'Magnus'},\n\trando: {id: 5,name: 'Rando'}\n};\n\nconst servers = new Set;\nlet srv = null;\n\nlet afterAll = function() { return true; };\n\nlet test = function() { return true; };\nlet vitest = {};\nlet verbose = !(!(process.env.VERBOSE));\n\nfunction reorderSuite(suite){\n\t\n\tlet t = suite.tasks;\n\tlet web = t.filter(function(_0) { return _0.name.indexOf(' (web)') >= 0; });\n\t\n\tfor (let $1 = 0, $2 = iter$__(t), $3 = $2.length; $1 < $3; $1++) {\n\t\tlet task = $2[$1];\n\t\tif (task.type == 'suite') {\n\t\t\t\n\t\t\treorderSuite(task);\n\t\t};\n\t};\n\tfor (let $4 = 0, $5 = iter$__(web), $6 = $5.length; $4 < $6; $4++) {\n\t\tlet task = $5[$4];\n\t\tt.splice(t.indexOf(task),1);\n\t\tt.push(task);\n\t};\n\treturn;\n};\n\n\n\nawait import('vitest').then(function(vt) {\n\t\n\tafterAll = vt.afterAll;\n\ttest = vt.test;\n\treturn vitest = {...vt};\n\t// vitest.beforeAll = vt.beforeAll\n});\n\nawait import('vitest/suite').then(function(vt) {\n\t\n\tvitest.getFn = vt.getFn;\n\treturn vitest.getCurrentSuite = vt.getCurrentSuite;\n});\n\nvitest.beforeAll(function(suite) {\n\t\n\treorderSuite(suite);\n\treturn;\n});\n;\n\nclass ΩOPUser {\n\t\n\t\n\t// For testing we can use user.run(...) to execute code as if user is current agent.\n\trun(cb){\n\t\t\n\t\treturn OP.withΞcontext(this,cb);\n\t}\n\tstatic {\n\t\tdefineName$__(this,'OPUser');}\n};\nextend$__(OPUser.prototype,ΩOPUser.prototype);\n;\n\nclass Server {\n\t\n\tconstructor(path,o = {}){\n\t\tvar $7, $8;\n\t\t\n\t\tthis.path = path;\n\t\tthis.options = o;\n\t\tthis.killed = true;\n\t\tthis.env = {\n\t\t\t...process.env,\n\t\t\t...(o.env || {}),\n\t\t\tNODE_ENV: 'development'\n\t\t};\n\t\t((($7 = this.env.VITEST),delete this.env.VITEST, $7));\n\t\t((($8 = this.env.TEST),delete this.env.TEST, $8));\n\t\t!this[$__initor__$] && this[$__hooks__$].inited(this);\n\t}\n\t\n\tget url(){\n\t\t\n\t\treturn (`http://localhost:` + (this.options.port));\n\t}\n\t\n\tlog(data){\n\t\t\n\t\tif (process.env.VERBOSE) {\n\t\t\t\n\t\t\treturn console.log((\"stdout: \" + data));\n\t\t};\n\t}\n\t\n\tget browser(){\n\t\t\n\t\treturn new Browser(this);\n\t}\n\t\n\tstart(){\n\t\tvar self = this;\n\t\t\n\t\treturn new Promise(function(resolve,reject) {\n\t\t\t\n\t\t\tservers.add(self);\n\t\t\tself.t0 = globalThis.performance.now();\n\t\t\tlet timeout = setTimeout(function() {\n\t\t\t\t\n\t\t\t\treturn reject(\"Server not loaded correctly\");\n\t\t\t},(8 * 1000));\n\t\t\t\n\t\t\tself.proc = cp.spawn('imba',['--esm','-ms',self.path],{\n\t\t\t\tcwd: self.options.cwd || process.cwd(),\n\t\t\t\tenv: self.env\n\t\t\t});\n\t\t\tself.killed = false;\n\t\t\t\n\t\t\tself.proc.stdout.on(\"data\",function(data) {\n\t\t\t\t\n\t\t\t\tself.log(data);\n\t\t\t\tlet m;\n\t\t\t\tif (timeout && (m = String(data).match(/listening on ([\\w\\:]+)/))) {\n\t\t\t\t\t\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\ttimeout = null;\n\t\t\t\t\tself.log((`started server in ` + (globalThis.performance.now() - self.t0)));\n\t\t\t\t\tresolve(true);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tlet str = String(data);\n\t\t\t\tif (str.indexOf(\"\\u001b[90m::\\u001b[0m\") >= 0) {\n\t\t\t\t\t\n\t\t\t\t\t// process.stdout.write(\"srv \".magenta + str)\n\t\t\t\t\treturn console.log(\"srv \".cyan + str.replace(/\\n$/,''));\n\t\t\t\t\t// str = str.\n\t\t\t\t\t// out.splice(1,0,\"web\".magenta)\n\t\t\t\t};\n\t\t\t});\n\t\t\t\n\t\t\tself.proc.stderr.on(\"data\",function(data) { return console.error((\"stderr: \" + data)); });\n\t\t\treturn self.proc.on(\"close\",function(code) {\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t\t// LL \"child process exited with code {code}\"\n\t\t\t});\n\t\t});\n\t}\n\t\n\tkill(){\n\t\tvar self = this;\n\t\t\n\t\tif ((this.killed != true) ? ((this.killed = true,true)) : false) {\n\t\t\t\n\t\t\treturn new Promise(function(resolve,reject) {\n\t\t\t\t\n\t\t\t\tlet timeout = setTimeout(resolve,1000);\n\t\t\t\tself.proc.on('close',function() {\n\t\t\t\t\t\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\treturn resolve();\n\t\t\t\t});\n\t\t\t\treturn self.proc.kill('SIGINT');\n\t\t\t});\n\t\t};\n\t}\n\tstatic {\n\t\tthis.prototype[$__hooks__$] = imba_hooks;\n\t\tdefineName$__(this,'Server');decorate$__([imba_αlazy.bind([])],this.prototype,'browser',null);\n\t\tdecorate$__([imba_αthenable.bind([])],this.prototype,'start',null);\n\t}\n};\n\nclass BrowserObjectProxy {\n\t\n\tconstructor(tab,id){\n\t\tvar self = this;\n\t\t\n\t\tthis.tab = tab;\n\t\tthis.id = id;\n\t\tthis.proxy = new Proxy({},{\n\t\t\tget: function(target,key,receiver) {\n\t\t\t\t\n\t\t\t\tif (self[key] instanceof Function) {\n\t\t\t\t\t\n\t\t\t\t\treturn self[key].bind(self);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tif (key == 'set') {\n\t\t\t\t\t\n\t\t\t\t\treturn async function(key,val) {\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn await tab.set(id,key,val);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\treturn tab.get(id,key);\n\t\t\t},\n\t\t\t\n\t\t\tset: function(target,key,value) {\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\treturn this.proxy;\n\t}\n\t\n\tasync set(props){\n\t\t\n\t\treturn await this.tab.set(this.id,props);\n\t}\n\t\n\tasync update(props){\n\t\t\n\t\treturn await this.tab.run([this.id,props],async function([id,props]) {\n\t\t\t\n\t\t\treturn await this.OP.get(id).update(props);\n\t\t});\n\t\t// await tab.set(id,props)\n\t}\n\tstatic {\n\t\tdefineName$__(this,'BrowserObjectProxy');}\n};\n\nclass Browser {\n\t\n\tconstructor(server,browser,o = {}){\n\t\t\n\t\tthis.server = server;\n\t\tthis.browser = browser;\n\t\tthis.options = o;\n\t\tthis.tab = new Tab(this);\n\t\tthis.alt = this.tab.alt = new Tab(this);\n\t\t!this[$__initor__$] && this[$__hooks__$].inited(this);\n\t}\n\t\n\tasync init(){\n\t\tvar self = this;\n\t\t\n\t\tawait this.server;\n\t\tawait import('playwright').then(async function({chromium: chromium}) {\n\t\t\t\n\t\t\tself.chrome = await chromium.launch({...(process.env.D ? {headless: false,slowMo: 500} : {})});\n\t\t\treturn self.context = await self.chrome.newContext(process.env.CI ? {recordVideo: {dir: \"test-results/videos/\"}} : {});\n\t\t});\n\t\treturn;\n\t}\n\t\n\tasync newPage(){\n\t\t\n\t\tawait this;\n\t\treturn this.context.newPage();\n\t}\n\tstatic {\n\t\tthis.prototype[$__hooks__$] = imba_hooks;\n\t\tdefineName$__(this,'Browser');decorate$__([imba_αthenable.bind([])],this.prototype,'init',null);\n\t}\n};\n\nclass Tab {\n\t[$__patch__$]($$ = {},fields = true){\n\t\tvar $9;\n\t\t($9 = $$.page) !== undefined && (this.page = $9);\n\t\t\n\t}\n\t[$__init__$]($$ = null,deep = true,fields = true){\n\t\tthis.page = $$ ? $$.page : undefined;\n\t\t\n\t}\n\t\n\t// Other tab for same client\n\t\n\t\n\tconstructor(browser){\n\t\tthis[$__init__$]();\n\t\tthis.browser = browser;\n\t\tthis.proxies = {};\n\t\tthis.logs = [];\n\t\t!this[$__initor__$] && this[$__hooks__$].inited(this);\n\t}\n\t\n\tget server(){\n\t\t\n\t\treturn this.browser.server;\n\t}\n\t\n\tget session(){\n\t\t\n\t\treturn OP.get(this.sid);\n\t}\n\t\n\tasync init(){\n\t\tvar self = this;\n\t\t\n\t\tawait this.browser;\n\t\t\n\t\tthis.page = await this.browser.context.newPage();\n\t\t\n\t\tthis.page.on('console',function(msg) {\n\t\t\t\n\t\t\tlet typ = msg.type();\n\t\t\tlet txt = msg.text();\n\t\t\tlet pars = msg.args();\n\t\t\tlet nr = self.logs.length;\n\t\t\treturn self.logs.push(new Promise(async function(resolve) {\n\t\t\t\t\n\t\t\t\t// ensure that previous logs has finished\n\t\t\t\tawait self.logs[nr - 1];\n\t\t\t\tlet out = await Promise.all(pars.map(function(_0) { return _0.jsonValue(); }));\n\t\t\t\tlet printΦ = !(!(verbose));\n\t\t\t\t// rewriting imba L logs\n\t\t\t\tif (typeof out[0] == 'string' && out[0][0] == '%') {\n\t\t\t\t\t\n\t\t\t\t\tout.shift();\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tif (out[0] == \"\\u001b[90m::\\u001b[0m\") {\n\t\t\t\t\t\n\t\t\t\t\tprintΦ = true;// print all L(...) logs from web\n\t\t\t\t\t// out.splice(1,0,\"web\".magenta)\n\t\t\t\t\tout.unshift((\"web\" + nr).magenta);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tif (printΦ) { console.log(...out) };\n\t\t\t\treturn resolve();\n\t\t\t}));\n\t\t});\n\t\t\n\t\tawait this.page.goto(this.server.url);\n\t\t\n\t\tawait this.page.waitForFunction(function() { return this.OP && this.OP.session; });\n\t\tthis.sid = await this.page.evaluate(function() { return this.OP.session.id; });\n\t\tthis.clid = await this.page.evaluate(function() { return this.OP.client.id; });\n\t\tthis.tests = await this.page.evaluate(function() {\n\t\t\t\n\t\t\treturn Object.keys(this).filter(function(v) { return v.indexOf('test_') == 0; });\n\t\t});\n\t\treturn;\n\t}\n\t\n\tasync pause(){\n\t\t\n\t\treturn await this.page.pause();\n\t}\n\tasync resume(){\n\t\t\n\t\treturn await this.page.resume();\n\t}\n\t\n\tasync run(...pars){\n\t\t\n\t\tawait this;\n\t\t\n\t\tlet cb = pars.pop();\n\t\tthis.errors = [];\n\t\ttry {\n\t\t\t\n\t\t\tlet res = await this.page.evaluate(cb,...pars);\n\t\t\tif (this.errors.length) {\n\t\t\t\t\n\t\t\t\treturn this.errors[0];\n\t\t\t};\n\t\t\treturn res;\n\t\t} catch (e) {\n\t\t\t\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\t\n\t\t\tthis.errors = [];\n\t\t};\n\t}\n\t\n\tproxy(id){\n\t\t\n\t\treturn this.proxies[id] ||= new BrowserObjectProxy(this,id);\n\t}\n\t\n\tget(id,key){\n\t\t\n\t\tif (key) {\n\t\t\t\n\t\t\treturn this.run([id,key],function([id,key]) { return this.OP.get(id).$plain[key]; });\n\t\t} else {\n\t\t\t\n\t\t\treturn this.run(id,function(id) { return this.OP.get(id); });\n\t\t};\n\t}\n\t\n\t// Try to create OP model from raw data on the client\n\tcreate(data){\n\t\t\n\t\treturn this.run(data,async function(data) { return await this.OP.create(data); });\n\t}\n\t\n\tset(id,key,val){\n\t\t\n\t\treturn this.run([id,key,val],async function([id,key,value]) {\n\t\t\t\n\t\t\tlet obj = await this.OP.get(id);\n\t\t\tif (typeof key == 'string') {\n\t\t\t\t\n\t\t\t\tobj[key] = value;\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tObject.keys(key).map(function(k) {\n\t\t\t\t\t\n\t\t\t\t\treturn obj[k] = key[k];\n\t\t\t\t});\n\t\t\t};\n\t\t\treturn obj;\n\t\t});\n\t}\n\tstatic {\n\t\tthis.prototype[$__hooks__$] = imba_hooks;\n\t\tdefineName$__(this,'Tab');decorate$__([imba_αthenable.bind([])],this.prototype,'init',null);\n\t}\n};\n\nafterAll(async function() {\n\t\n\t// if servers.size\n\t// await global.sleep(20000ms)\n\tif (OP.walΦ) { OP.wal.teardown() };\n\tfor (let server of iter$__(servers)){\n\t\t\n\t\tawait server.kill();\n\t};\n\treturn;\n\t\n\tif (servers.size) {\n\t\t\n\t\treturn await globalThis.sleep(200);\n\t};\n});\n\nconst DBHOST = process.env.DATABASE_HOST || \"localhost\";\nconst DBARGS = [\n\t\"-p\",\"5432\",\n\t\"-h\",DBHOST,\n\t\"-U\",\"postgres\"\n];\n\nfunction dbExec(cmd,args){\n\t\n\tif (!(args)) { return dbExec(\"psql\",['-c',cmd]) };\n\tif (!((args instanceof Array))) { args = [args] };\n\treturn cp.spawnSync(cmd,[\n\t\t...DBARGS,\n\t\t...args\n\t],{env: {...process.env,PGPASSWORD: \"postgres\"}});\n};\n\nasync function serve({name: name,port: port}){\n\t\n\tprocess.env.OP_COOKIE_PREFIX = name;\n\t// process.env.OP_COOKIE_PREFIX = name\n\tconst app = await OP.createServer({});\n\t\n\tawait OP.wal;\n\tconsole.log(\"Started server in\",globalThis.performance.now());\n\t\n\tif (!(true)) {};\n\t\n\treturn app.listen('localhost',port,function() {\n\t\t\n\t\treturn console.log((`listening to ` + port));\n\t});\n};\n\nfunction extendChainable(keys,fn){\n\tvar $10;\n\t\n\t$10 = [];\n\tfor (let $11 = 0, $12 = iter$__(keys), $13 = $12.length; $11 < $13; $11++) {\n\t\tlet k = $12[$11];\n\t\t$10.push(Object.defineProperty(fn,k,{\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\t\n\t\t\t\t// hack to monkeypatch vitest\n\t\t\t\tlet chained = this.concurrent;\n\t\t\t\tchained.setContext('concurrent',false);\n\t\t\t\tchained.setContext(k,true);\n\t\t\t\textendChainable(keys,chained);\n\t\t\t\treturn chained;\n\t\t\t}\n\t\t}));\n\t};\n\treturn $10;\n};\n\nasync function runΞonΞclient(task,originalFn,ctx){\n\t\n\t\n\tlet fixtures = {};\n\t// await resolveFixtures(originalFn,ctx.fixtures,fixtures)\n\tlet name = task.name.replace(' (web)','');\n\tlet grp = task.suite.name;\n\tlet tab = await srv.browser.tab;\n\t\n\tfor (let $14 = 0, $15 = Object.keys(fixtures), $16 = $15.length, k, v; $14 < $16; $14++){\n\t\tk = $15[$14];v = fixtures[k];\n\t\tif (v instanceof OPObject) {\n\t\t\t\n\t\t\tfixtures[k] = v = globalThis.structuredClone(v.$plain);\n\t\t\tv._ = OPFLAGS.FULL | OPFLAGS.CLOUD;\n\t\t};\n\t};\n\t\n\tlet out = await tab.run([grp,name,fixtures],async function([grp,name,fixtures]) {\n\t\t\n\t\treturn await this.__runtest__(grp,name,fixtures);\n\t});\n\t\n\t// Hacky way to do rudimentary sourcemapping for failed test from the client\n\t// We find the start of the group and the test in our original sourcefile,\n\t// and then move down to 'ok' number (n) that we get from client\n\tif (out?.failed) {\n\t\t\n\t\ttry {\n\t\t\t\n\t\t\tok(out.actual,out.expected);\n\t\t} catch (e) {\n\t\t\t\n\t\t\tlet file = nfs.readFileSync(task.file.filepath,'utf8').replace(/[\\\"\\`]/g,\"'\");\n\t\t\tlet lines = file.split('\\n');\n\t\t\tlet from = grp ? file.indexOf((\"describe '\" + grp + \"'\")) : 0;\n\t\t\tlet offset = file.indexOf((\"'\" + name + \"'\"),from);\n\t\t\tlet ind = grp ? '\\t\\t' : '\\t';\n\t\t\t\n\t\t\tlet nr = out.nr;\n\t\t\tlet col = 1;\n\t\t\tlet ln = 1;\n\t\t\t\n\t\t\twhile (offset > lines[0].length){\n\t\t\t\t\n\t\t\t\tln++;\n\t\t\t\toffset -= lines.shift().length + 1;\n\t\t\t};\n\t\t\t\n\t\t\tfor (let i = 0, $17 = iter$__(lines), $18 = $17.length, m; i < $18; i++) {\n\t\t\t\tlet line = $17[i];\n\t\t\t\tif (m = line.match(/^\\t+ok[\\s\\(]/)) {\n\t\t\t\t\t\n\t\t\t\t\tif (--nr < 0) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tln += i;\n\t\t\t\t\t\tcol = m[0].length;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\te.stack = e.stack.split('\\n')[0] += (`\\nat ` + (task.file.filepath) + `:` + ln + `:` + col);\n\t\t\tthrow e;\n\t\t};\n\t\tok(false);\n\t};\n\t\n\tif (out?.error) {\n\t\t\n\t\tthrow out.error;\n\t};\n\treturn ok(true);\n};\n\n/**\n@returns { Promise<Server> }\n*/\nexport default async function init(filepath,o = {}){\n\t\n\tlet t0 = Date.now();\n\tlet name = filepath.split('test/').pop().replace(/\\.test\\.imba/,'').replace(/[\\/\\.\\-]/g,'_');\n\tif (!(process.env.VITEST_WORKER_ID)) { name += '_run' };\n\t\n\tlet dbname = (`optest_` + name);\n\t\n\tlet e2e = (o.e2e ?? (process.env.E2E && filepath.indexOf('.node.test') == -1));\n\t\n\tlet uri = (\"postgres://postgres:postgres@\" + DBHOST + \":5432/\" + dbname);\n\tlet port = 9012 + parseInt(process.env.VITEST_WORKER_ID || '0');\n\tlet standalone = !(process.env.VITEST_WORKER_ID);\n\t\n\tif (process.env.DROPDB) {\n\t\t\n\t\tdbExec(\"dropdb\",['--if-exists',dbname]);\n\t\tconsole.log(`dropdb?`,Date.now() - t0);\n\t};\n\t\n\tif (!(process.env.NOCREATE)) {\n\t\t\n\t\tconst r = dbExec(\"createdb\",[dbname]);\n\t\tconst err = r.stderr?.toString?.();\n\t\tconst out = r.stdout?.toString?.();\n\t\t// Dont want to log out -\n\t};\n\t\n\t// TODO throw error here if db does not exist now?\n\tlet lfsdir = filepath.replace(/test\\/.*$/,``) + (`test/.lfs/` + name);\n\ttry {\n\t\ttrue && nfs.rmSync(lfsdir,{recursive: true});\n\t} catch (e) { };\n\tnfs.mkdirSync(lfsdir,{recursive: true});\n\t\n\tawait OP.init(\n\t\t{wipe: (true || standalone) ? dbname : false,\n\t\twal: (false),\n\t\tlfs: lfsdir,\n\t\tpg: {uri: uri}}\n\t);\n\t\n\tlet fixtures = {\n\t\tuser: async function({task: task},use) { return await use(await OP.User.create()); },\n\t\ttask: async function({task: task},use) { return await use(task); },\n\t\tsession: async function({task: task},use) { return await use(await OP.Session.create()); },\n\t\tclient: async function({task: task},use) { return await use(await OP.Client.create()); }\n\t};\n\t\n\to.data ||= {};\n\t\n\tif ((true || standalone)) {\n\t\t\n\t\tif (OP.walΦ && true) { OP.wal.silent = true };\n\t\t\n\t\tif (o.data instanceof Array) {\n\t\t\t\n\t\t\tlet obj = {};\n\t\t\tfor (let $19 = 0, $20 = iter$__(o.data), $21 = $20.length; $19 < $21; $19++) {\n\t\t\t\tlet item = $20[$19];\n\t\t\t\tobj[item.id] = item;\n\t\t\t};\n\t\t\to.data = obj;\n\t\t};\n\t\t\n\t\tfor (let $22 = 0, $23 = Object.keys(users), $24 = $23.length, nick, user; $22 < $24; $22++){\n\t\t\tnick = $23[$22];user = users[nick];\n\t\t\tif (typeof user.id == 'number') {\n\t\t\t\t\n\t\t\t\tuser.id = (\"\" + (OP.User.id) + \"0\" + (user.id));\n\t\t\t};\n\t\t\to.data[user.id] = Object.assign(o.data[user.id] || {},user);\n\t\t\t\n\t\t\tfixtures[nick] ||= async function({task: task},use) {\n\t\t\t\t\n\t\t\t\t// await use(await OP.get(id))\n\t\t\t\tlet item = await OP.db.get(user.id);\n\t\t\t\treturn await use(OP.$patch(item));\n\t\t\t};\n\t\t};\n\t\t\n\t\tfor (let $27 = o.data, $25 = 0, $26 = Object.keys($27), $28 = $26.length, id, item, typ; $25 < $28; $25++){\n\t\t\tid = $26[$25];item = $27[id];\n\t\t\t\n\t\t\tif (item instanceof Function) {\n\t\t\t\t\n\t\t\t\t// Generates a fixture for this\n\t\t\t\tfixtures[id] = async function({task: task},use) {\n\t\t\t\t\t\n\t\t\t\t\tlet res = await (item(task));\n\t\t\t\t\treturn await use(res);\n\t\t\t\t};\n\t\t\t\tcontinue;\n\t\t\t};\n\t\t\t\n\t\t\t// items with a plain id that exactly matches op will instead be registered as a fixture\n\t\t\t// that is created with unique id for every test that requests it\n\t\t\tif (typ = OPObjectRegistry[id]) {\n\t\t\t\t\n\t\t\t\tfixtures[id] = async function({task: task},use) {\n\t\t\t\t\t\n\t\t\t\t\t// let id = typ.key.generate()\n\t\t\t\t\tlet raw = JSON.parse(JSON.stringify(item));\n\t\t\t\t\traw.id = typ.key.generate();\n\t\t\t\t\tawait OP.db.insert(id,raw);\n\t\t\t\t\treturn await use(await OP.get(raw.id));\n\t\t\t\t};\n\t\t\t\tcontinue;\n\t\t\t};\n\t\t\t\n\t\t\tawait OP.db.insert(id,item);\n\t\t\t\n\t\t\tfixtures[id] = async function({task: task},use) {\n\t\t\t\t\n\t\t\t\t// await use(await OP.get(id))\n\t\t\t\tlet item = await OP.db.get(id);\n\t\t\t\treturn await use(OP.$patch(item));\n\t\t\t};\n\t\t};\n\t\t\n\t\tif (OP.walΦ && true) { OP.wal.silent = false };\n\t};\n\t\n\tif (!(true)) {};\n\t\n\tglobalThis.test = test.extend(fixtures);\n\tlet fn = globalThis.test.fn;\n\t\n\textendChainable(['web','node','both'],globalThis.test);\n\t\n\tfn.apply = function(that,args) {\n\t\t\n\t\tlet name = args[0];\n\t\tlet cb = args[1];\n\t\t\n\t\tif (that.web) {\n\t\t\t\n\t\t\tif (!(e2e)) {\n\t\t\t\t\n\t\t\t\tthat.skip = true;\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tsrv.browser.init();\n\t\t\t\t// kick off early!\n\t\t\t\tlet orig = cb;\n\t\t\t\tname = name + ' (web)';\n\t\t\t\tcb = async function({task: task}) { return await runΞonΞclient(task,orig,that); };\n\t\t\t};\n\t\t};\n\t\t\n\t\tlet res = fn.call(that,name,cb);\n\t\t\n\t\tif (!(that.skip) && !(that.todo) && !(that.web) && (that.both || (!(that.node) && e2e))) {\n\t\t\t\n\t\t\tlet t = globalThis.test.web;\n\t\t\tif (that.only) { t = t.only };\n\t\t\tif (that.todo) { t = t.todo };\n\t\t\tt(name,cb);\n\t\t};\n\t\t\n\t\treturn res;\n\t};\n\t\n\tif (o.preload) {\n\t\t\n\t\t// drop this?\n\t\tfor (let type of iter$__(OP.tables)){\n\t\t\t\n\t\t\tawait OP.preload`select * from ${type}`;\n\t\t};\n\t};\n\t\n\t // and (o.serve or o.e2e)\n\t\n\t// let cwd = o.serve ? np.resolve(path,'..','..') : process.cwd!\n\t// let path = o.serve ? np.resolve(__filename,'..',o.serve) :\n\tlet cwd = process.cwd();\n\tlet path = np.relative(cwd,filepath);\n\t\n\tsrv = new Server(path,{\n\t\tcwd: cwd,\n\t\tenv: {\n\t\t\tOP_PG_URI: uri,\n\t\t\tOP_PORT: String(port),\n\t\t\tOP_NAME: dbname,\n\t\t\tVITEST_WORKER_ID: process.env.VITEST_WORKER_ID,\n\t\t\tNOCREATE: true\n\t\t},\n\t\tname: dbname,\n\t\tport: port\n\t});\n\t// server will only be started upon request\n\t// servers.add(server)\n\t// dont really need to wait for the server to start with other things\n\t// server.browser.init!\n\t// server.browser.init!\n\t;\n\t\n\treturn;\n};\n","dependencies":[],"map":{"version":3,"file":"setup.js","sourceRoot":"","sources":["/Users/sindre/repos/scrimba/op/test/setup.imba"],"sourcesContent":["import 'op'\nimport cp from 'child_process'\nimport np from 'path'\nimport nfs from 'fs-extra'\nimport {getUsedProps,resolveFixtures} from './util/fixture.ts'\nimport type {Page} from 'playwright'\n\nprocess.on('uncaughtException') do(err)\n\tconsole.trace 'uncaught exception', err\n\ndef isPlainObject val\n\ttypeof val == 'object' and val and Object.getPrototypeOf(val) == Object.prototype\n\nconst users = {\n\tsindre: {id:2, name: 'Sindre'}\n\tper: {id:3, name: 'Per'}\n\tmagnus: {id:4, name: 'Magnus'}\n\trando: {id:5, name: 'Rando'}\n}\n\nconst servers = new Set\nlet srv = null\n\nlet afterAll = do yes\n\nlet test = do yes\nlet vitest = {}\nlet verbose = !!process.env.VERBOSE\n\ndef reorderSuite suite\n\tlet t = suite.tasks\n\tlet web = t.filter do $1.name.indexOf(' (web)') >= 0\n\n\tfor task in t\n\t\tif task.type == 'suite'\n\t\t\treorderSuite(task)\n\tfor task in web\n\t\tt.splice(t.indexOf(task),1)\n\t\tt.push(task)\n\treturn\n\nif $vite$\n\tawait import('vitest').then do(vt)\n\t\tafterAll = vt.afterAll\n\t\ttest = vt.test\n\t\tvitest = {...vt}\n\t\t# vitest.beforeAll = vt.beforeAll\n\n\tawait import('vitest/suite').then do(vt)\n\t\tvitest.getFn = vt.getFn\n\t\tvitest.getCurrentSuite = vt.getCurrentSuite\n\n\tvitest.beforeAll do(suite)\n\t\treorderSuite(suite)\n\t\treturn\n\nelse\n\t# stubbing the test code\n\tglobal.describe = do yes\n\ttest = do yes\n\ttest.extend = do test\n\ttest.web = do yes\n\ttest.node = do yes\n\tglobal.test = test\n\tfor k in ['web','node','todo','only','skip','both','concurrent','fails']\n\t\tfor v in [global.describe,test]\n\t\t\tObject.defineProperty(v,k,{enumerable: no, get: do v})\n\nextend class OPUser\n\n\t# For testing we can use user.run(...) to execute code as if user is current agent.\n\tdef run cb\n\t\tOP.with-context(self,cb)\n\nclass Server\n\tdef constructor path, o = {}\n\t\tpath = path\n\t\toptions = o\n\t\tkilled = yes\n\t\tenv = {\n\t\t\t...process.env\n\t\t\t...(o.env or {})\n\t\t\tNODE_ENV: 'development'\n\t\t}\n\t\tdelete env.VITEST\n\t\tdelete env.TEST\n\n\tget url\n\t\t`http://localhost:{options.port}`\n\n\tdef log data\n\t\tif process.env.VERBOSE\n\t\t\tconsole.log \"stdout: {data}\"\n\n\t@lazy get browser\n\t\tnew Browser(self)\n\n\t@thenable def start\n\t\tnew Promise do(resolve,reject)\n\t\t\tservers.add(self)\n\t\t\tt0 = global.performance.now!\n\t\t\tlet timeout = setTimeout(&,8s) do\n\t\t\t\treject(\"Server not loaded correctly\")\n\n\t\t\tproc = cp.spawn('imba', ['--esm','-ms',path], {\n\t\t\t\tcwd: options.cwd or process.cwd!\n\t\t\t\tenv: env\n\t\t\t})\n\t\t\tkilled = no\n\n\t\t\tproc.stdout.on(\"data\") do(data)\n\t\t\t\tlog data\n\t\t\t\tlet m\n\t\t\t\tif timeout and m = String(data).match(/listening on ([\\w\\:]+)/)\n\t\t\t\t\tclearTimeout(timeout)\n\t\t\t\t\ttimeout = null\n\t\t\t\t\tlog(`started server in {global.performance.now! - t0}`)\n\t\t\t\t\tresolve(yes)\n\n\t\t\t\tlet str = String(data)\n\t\t\t\tif str.indexOf(\"\\u001b[90m::\\u001b[0m\") >= 0\n\t\t\t\t\t# process.stdout.write(\"srv \".magenta + str)\n\t\t\t\t\tconsole.log(\"srv \".cyan + str.replace(/\\n$/,''))\n\t\t\t\t\t# str = str.\n\t\t\t\t\t# out.splice(1,0,\"web\".magenta)\n\n\t\t\tproc.stderr.on(\"data\") do(data) console.error \"stderr: {data}\"\n\t\t\tproc.on(\"close\") do(code)\n\t\t\t\tyes\n\t\t\t\t# LL \"child process exited with code {code}\"\n\n\tdef kill\n\t\tif killed =? yes\n\t\t\tnew Promise do(resolve,reject)\n\t\t\t\tlet timeout = setTimeout(resolve,1000ms)\n\t\t\t\tproc.on('close') do\n\t\t\t\t\tclearTimeout(timeout)\n\t\t\t\t\tresolve()\n\t\t\t\tproc.kill('SIGINT')\n\nclass BrowserObjectProxy\n\tdef constructor tab,id\n\t\ttab = tab\n\t\tid = id\n\t\tproxy = new Proxy({},{\n\t\t\tget: do(target, key, receiver)\n\t\t\t\tif self[key] isa Function\n\t\t\t\t\treturn self[key].bind(self)\n\n\t\t\t\tif key == 'set'\n\t\t\t\t\treturn do(key,val)\n\t\t\t\t\t\tawait tab.set(id,key,val)\n\t\t\t\treturn tab.get(id,key)\n\n\t\t\tset: do(target,key,value)\n\t\t\t\treturn yes\n\t\t})\n\t\treturn proxy\n\n\tdef set props\n\t\tawait tab.set(id,props)\n\n\tdef update props\n\t\tawait tab.run([id,props]) do([id,props])\n\t\t\tawait this.OP.get(id).update(props)\n\t\t# await tab.set(id,props)\n\nclass Browser\n\tdef constructor server, browser, o = {}\n\t\tserver = server\n\t\tbrowser = browser\n\t\toptions = o\n\t\ttab = new Tab(self)\n\t\talt = tab.alt = new Tab(self)\n\n\t@thenable def init\n\t\tawait server\n\t\tawait import('playwright').then do({chromium})\n\t\t\tchrome = await chromium.launch {...(process.env.D ? {headless:false, slowMo: 500} :{})}\n\t\t\tcontext = await chrome.newContext(process.env.CI ? {recordVideo: {dir: \"test-results/videos/\"}} : {})\n\t\treturn\n\n\tdef newPage\n\t\tawait self\n\t\treturn context.newPage()\n\nclass Tab\n\t# Other tab for same client\n\tdeclare alt\\Tab\n\n\tpage\\Page\n\tdef constructor browser\n\t\tbrowser = browser\n\t\tproxies = {}\n\t\tlogs = []\n\n\tget server\n\t\tbrowser.server\n\n\tget session\n\t\tOP.get(sid)\n\n\t@thenable def init\n\t\tawait browser\n\n\t\tpage = await browser.context.newPage!\n\n\t\tpage.on('console') do(msg)\n\t\t\tlet typ = msg.type!\n\t\t\tlet txt = msg.text!\n\t\t\tlet pars = msg.args!\n\t\t\tlet nr = logs.length\n\t\t\tlogs.push new Promise do(resolve)\n\t\t\t\t# ensure that previous logs has finished\n\t\t\t\tawait logs[nr - 1]\n\t\t\t\tlet out = await Promise.all(pars.map do $1.jsonValue())\n\t\t\t\tlet print? = !!verbose\n\t\t\t\t# rewriting imba L logs\n\t\t\t\tif typeof out[0] == 'string' and out[0][0] == '%'\n\t\t\t\t\tout.shift!\n\n\t\t\t\tif out[0] == \"\\u001b[90m::\\u001b[0m\"\n\t\t\t\t\tprint? = yes # print all L(...) logs from web\n\t\t\t\t\t# out.splice(1,0,\"web\".magenta)\n\t\t\t\t\tout.unshift(\"web{nr}\".magenta)\n\n\t\t\t\tconsole.log(...out) if print?\n\t\t\t\tresolve()\n\n\t\tawait page.goto(server.url)\n\n\t\tawait page.waitForFunction do this.OP and this.OP.session\n\t\tsid = await page.evaluate do this.OP.session.id\n\t\tclid = await page.evaluate do this.OP.client.id\n\t\ttests = await page.evaluate do\n\t\t\tObject.keys(this).filter(do(v) v.indexOf('test_') == 0)\n\t\treturn\n\n\tdef pause\n\t\tawait page.pause!\n\tdef resume\n\t\tawait page.resume!\n\n\tdef run ...pars\n\t\tawait self\n\n\t\tlet cb = pars.pop!\n\t\terrors = []\n\t\ttry\n\t\t\tlet res = await page.evaluate(cb,...pars)\n\t\t\tif errors.length\n\t\t\t\treturn errors[0]\n\t\t\treturn res\n\n\t\tcatch e\n\t\t\tthrow e\n\t\tfinally\n\t\t\terrors = []\n\n\tdef proxy id\n\t\tproxies[id] ||= new BrowserObjectProxy(self,id)\n\n\tdef get id,key\n\t\tif key\n\t\t\trun([id,key]) do([id,key]) this.OP.get(id).$plain[key]\n\t\telse\n\t\t\trun(id) do(id) this.OP.get(id)\n\n\t# Try to create OP model from raw data on the client\n\tdef create data\n\t\trun(data) do(data) await this.OP.create(data)\n\n\tdef set id,key,val\n\t\trun([id,key,val]) do([id,key,value])\n\t\t\tlet obj = await this.OP.get(id)\n\t\t\tif typeof key == 'string'\n\t\t\t\tobj[key] = value\n\t\t\telse\n\t\t\t\tObject.keys(key).map(do(k)\n\t\t\t\t\tobj[k] = key[k]\n\t\t\t\t)\n\t\t\treturn obj\n\nafterAll do\n\t# if servers.size\n\t#\tawait global.sleep(20000ms)\n\tOP.wal.teardown! if OP.wal?\n\tfor server of servers\n\t\tawait server.kill!\n\treturn\n\n\tif servers.size\n\t\tawait global.sleep(200ms)\n\nconst DBHOST = process.env.DATABASE_HOST or \"localhost\"\nconst DBARGS = [\n\t\"-p\", \"5432\",\n\t\"-h\", DBHOST,\n\t\"-U\", \"postgres\"\n]\n\ndef dbExec(cmd, args)\n\treturn dbExec(\"psql\", ['-c', cmd]) if !args\n\targs = [args] unless args isa Array\n\tcp.spawnSync cmd, [\n\t\t...DBARGS\n\t\t...args\n\t], {env: {...process.env, PGPASSWORD: \"postgres\"}}\n\ndef serve {name,port}\n\tprocess.env.OP_COOKIE_PREFIX = name\n\t# process.env.OP_COOKIE_PREFIX = name\n\tconst app = await OP.createServer({})\n\n\tawait OP.wal\n\tconsole.log \"Started server in\",global.performance.now!\n\n\tunless $vite$\n\t\tapp.get('/test') do(req,res)\n\t\t\tres.end(\"hello\")\n\n\t\tapp.get('/') do(req,res)\n\t\t\tres.html <html lang=\"en\">\n\t\t\t\t<head>\n\t\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t\t\t<link rel=\"icon\" href=\"data:;base64,=\">\n\t\t\t\t<body>\n\t\t\t\t\t# not while testing\n\t\t\t\t\t<script type=\"module\" src=\"__ENTRYPOINT__\">\n\n\tapp.listen('localhost', port) do\n\t\tconsole.log `listening to {port}`\n\ndef extendChainable keys,fn\n\tfor k in keys\n\t\tObject.defineProperty(fn,k,{\n\t\t\tenumerable: yes\n\t\t\tget: do\n\t\t\t\t# hack to monkeypatch vitest\n\t\t\t\tlet chained = this.concurrent\n\t\t\t\tchained.setContext('concurrent',false)\n\t\t\t\tchained.setContext(k,true)\n\t\t\t\textendChainable(keys,chained)\n\t\t\t\treturn chained\n\t\t})\n\ndef run-on-client task,originalFn,ctx\n\n\tlet fixtures = {}\n\t# await resolveFixtures(originalFn,ctx.fixtures,fixtures)\n\tlet name = task.name.replace(' (web)','')\n\tlet grp = task.suite.name\n\tlet tab = await srv.browser.tab\n\n\tfor own k,v of fixtures\n\t\tif v isa OPObject\n\t\t\tfixtures[k] = v = global.structuredClone(v.$plain)\n\t\t\tv._ = OPFLAGS.FULL | OPFLAGS.CLOUD\n\n\tlet out = await tab.run([grp,name,fixtures]) do([grp,name,fixtures])\n\t\tawait this.__runtest__(grp,name,fixtures)\n\n\t# Hacky way to do rudimentary sourcemapping for failed test from the client\n\t# We find the start of the group and the test in our original sourcefile,\n\t# and then move down to 'ok' number (n) that we get from client\n\tif out..failed\n\t\ttry\n\t\t\tok out.actual,out.expected\n\t\tcatch e\n\t\t\tlet file = nfs.readFileSync(task.file.filepath,'utf8').replace(/[\\\"\\`]/g,\"'\")\n\t\t\tlet lines = file.split('\\n')\n\t\t\tlet from = grp ? file.indexOf(\"describe '{grp}'\") : 0\n\t\t\tlet offset = file.indexOf(\"'{name}'\",from)\n\t\t\tlet ind = grp ? '\\t\\t' : '\\t'\n\n\t\t\tlet nr = out.nr\n\t\t\tlet col = 1\n\t\t\tlet ln = 1\n\n\t\t\twhile offset > lines[0].length\n\t\t\t\tln++\n\t\t\t\toffset -= lines.shift!.length + 1\n\n\t\t\tfor line,i in lines\n\t\t\t\tif let m = line.match(/^\\t+ok[\\s\\(]/)\n\t\t\t\t\tif --nr < 0\n\t\t\t\t\t\tln += i\n\t\t\t\t\t\tcol = m[0].length\n\t\t\t\t\t\tbreak\n\n\t\t\te.stack = e.stack.split('\\n')[0] += `\\nat {task.file.filepath}:{ln}:{col}`\n\t\t\tthrow e\n\t\tok no\n\n\tif out..error\n\t\tthrow out.error\n\tok yes\n\nexport default def init\\Promise<Server> filepath, o = {}\n\tlet t0 = Date.now!\n\tlet name = filepath.split('test/').pop!.replace(/\\.test\\.imba/,'').replace(/[\\/\\.\\-]/g,'_')\n\tname += '_run' unless process.env.VITEST_WORKER_ID\n\n\tlet dbname = `optest_{name}`\n\n\tlet e2e = o.e2e ?? (process.env.E2E and filepath.indexOf('.node.test') == -1)\n\n\tlet uri = \"postgres://postgres:postgres@{DBHOST}:5432/{dbname}\"\n\tlet port = 9012 + parseInt(process.env.VITEST_WORKER_ID or '0')\n\tlet standalone = !process.env.VITEST_WORKER_ID\n\n\tif process.env.DROPDB\n\t\tdbExec(\"dropdb\", ['--if-exists', dbname])\n\t\tconsole.log `dropdb?`,Date.now! - t0\n\n\tunless process.env.NOCREATE\n\t\tconst r = dbExec(\"createdb\", [dbname])\n\t\tconst err = r.stderr..toString!\n\t\tconst out = r.stdout..toString!\n\t\t# Dont want to log out -\n\n\t# TODO throw error here if db does not exist now?\n\tlet lfsdir = filepath.replace(/test\\/.*$/,``) + `test/.lfs/{name}`\n\ttry $vite$ and nfs.rmSync(lfsdir, recursive: yes)\n\tnfs.mkdirSync(lfsdir, recursive: yes)\n\n\tawait OP.init(\n\t\twipe: ($vite$ or standalone) ? dbname : no\n\t\twal: $vite$ ? no : yes\n\t\tlfs: lfsdir\n\t\tpg: { uri: uri }\n\t)\n\n\tlet fixtures = {\n\t\tuser: do({task},use) await use(await OP.User.create!)\n\t\ttask: do({task},use) await use(task)\n\t\tsession: do({task},use) await use(await OP.Session.create!)\n\t\tclient: do({task},use) await use(await OP.Client.create!)\n\t}\n\n\to.data ||= {}\n\n\tif ($vite$ or standalone)\n\t\tOP.wal.silent = yes if OP.wal? and $vite$\n\n\t\tif o.data isa Array\n\t\t\tlet obj = {}\n\t\t\tfor item in o.data\n\t\t\t\tobj[item.id] = item\n\t\t\to.data = obj\n\n\t\tfor own nick,user of users\n\t\t\tif typeof user.id == 'number'\n\t\t\t\tuser.id = \"{OP.User.id}0{user.id}\"\n\t\t\to.data[user.id] = Object.assign(o.data[user.id] || {},user)\n\n\t\t\tfixtures[nick] ||= do({task},use)\n\t\t\t\t# await use(await OP.get(id))\n\t\t\t\tlet item = await OP.db.get(user.id)\n\t\t\t\tawait use(OP.$patch(item))\n\n\t\tfor own id,item of o.data\n\n\t\t\tif item isa Function\n\t\t\t\t# Generates a fixture for this\n\t\t\t\tfixtures[id] = do({task},use)\n\t\t\t\t\tlet res = await(item(task))\n\t\t\t\t\tawait use( res )\n\t\t\t\tcontinue\n\n\t\t\t# items with a plain id that exactly matches op will instead be registered as a fixture\n\t\t\t# that is created with unique id for every test that requests it\n\t\t\tif let typ = OPObjectRegistry[id]\n\t\t\t\tfixtures[id] = do({task},use)\n\t\t\t\t\t# let id = typ.key.generate()\n\t\t\t\t\tlet raw = JSON.parse(JSON.stringify(item))\n\t\t\t\t\traw.id = typ.key.generate()\n\t\t\t\t\tawait OP.db.insert(id,raw)\n\t\t\t\t\tawait use( await OP.get(raw.id) )\n\t\t\t\tcontinue\n\n\t\t\tawait OP.db.insert(id,item)\n\n\t\t\tfixtures[id] = do({task},use)\n\t\t\t\t# await use(await OP.get(id))\n\t\t\t\tlet item = await OP.db.get(id)\n\t\t\t\tawait use(OP.$patch(item))\n\n\t\tOP.wal.silent = no if OP.wal? and $vite$\n\n\tunless $vite$\n\t\treturn serve({name,port})\n\n\tglobal.test = test.extend(fixtures)\n\tlet fn = global.test.fn\n\n\textendChainable(['web','node','both'],global.test)\n\n\tfn.apply = do(that,args)\n\t\tlet name = args[0]\n\t\tlet cb = args[1]\n\n\t\tif that.web\n\t\t\tif !e2e\n\t\t\t\tthat.skip = yes\n\t\t\telse\n\t\t\t\tsrv.browser.init!\n\t\t\t\t# kick off early!\n\t\t\t\tlet orig = cb\n\t\t\t\tname = name + ' (web)'\n\t\t\t\tcb = do({task}) await run-on-client(task,orig,that)\n\n\t\tlet res = fn.call(that,name,cb)\n\n\t\tif !that.skip and !that.todo and !that.web and (that.both or (!that.node and e2e))\n\t\t\tlet t = global.test.web\n\t\t\tt = t.only if that.only\n\t\t\tt = t.todo if that.todo\n\t\t\tt(name,cb)\n\n\t\treturn res\n\n\tif o.preload\n\t\t# drop this?\n\t\tfor type of OP.tables\n\t\t\tawait OP.preload`select * from {type}`\n\n\tif $vite$ # and (o.serve or o.e2e)\n\t\t# let cwd = o.serve ? np.resolve(path,'..','..') : process.cwd!\n\t\t# let path = o.serve ? np.resolve(__filename,'..',o.serve) :\n\t\tlet cwd = process.cwd!\n\t\tlet path = np.relative(cwd,filepath)\n\n\t\tsrv = new Server(path, {\n\t\t\tcwd: cwd\n\t\t\tenv: {\n\t\t\t\tOP_PG_URI: uri\n\t\t\t\tOP_PORT: String(port)\n\t\t\t\tOP_NAME: dbname\n\t\t\t\tVITEST_WORKER_ID: process.env.VITEST_WORKER_ID\n\t\t\t\tNOCREATE: true\n\t\t\t}\n\t\t\tname: dbname\n\t\t\tport: port\n\t\t})\n\t\t# server will only be started upon request\n\t\t# servers.add(server)\n\t\t# dont really need to wait for the server to start with other things\n\t\t# server.browser.init!\n\t\t# server.browser.init!\n\n\treturn\n"],"names":[],"mappings":"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"}},"css":{"code":""},"warnings":[],"errors":[]}
{"js":{"code":"function defineName$__(cls,name){\n\tObject.defineProperty(cls,\"name\",{value:name,configurable:true});\n};\nimport {createRef as imba_createRef} from 'imba';\nconst $__initor__$ = Symbol.for('#__initor__'), $__inited__$ = Symbol.for('#__inited__'), $__hooks__$ = Symbol.for('#__hooks__'), $v$ = Symbol.for('#v');\n\n/*body*/\nconst OWNREF = Symbol.for(\"~\");\n\nlet EMBED = null;\n\nexport class Value {\n\t\n\tstatic embed(up,key,...rest){\n\t\t\n\t\tEMBED = [up,key];\n\t\treturn new this(...rest);\n\t}\n\tstatic {\n\t\tdefineName$__(this,'Value');}\n};\n\n// Or rich value?\nexport class OPValue {\n\t\n\t\n\t\n\t// declare $field\\OOP\n\t\n\tstatic embed(up,key,...rest){\n\t\t\n\t\tEMBED = [up,key];\n\t\treturn new this(...rest);\n\t}\n\t\n\tconstructor(data){\n\t\tlet embed;\n\t\t\n\t\tif (embed = EMBED) {\n\t\t\t\n\t\t\tEMBED = null;\n\t\t\tthis.$embed(embed[0],String(embed[1]));\n\t\t\t// self.$up = embed[0]\n\t\t\t// self.$key = String(embed[1])\n\t\t\tthis.id = (\"\" + this.$up + `.` + this.$key);\n\t\t};\n\t}\n\t\n\t$embed(up,key){\n\t\t\n\t\treturn Object.defineProperties(this,{\n\t\t\t$up: {enumerable: false,value: up},\n\t\t\t$key: {enumerable: false,value: key},\n\t\t\t[OWNREF]: {enumerable: false,value: imba_createRef()}\n\t\t});\n\t}\n\t\n\ttoString(){\n\t\t\n\t\treturn this.id;\n\t}\n\t\n\t$mutated(mut){\n\t\t\n\t\treturn true;\n\t}\n\t\n\trolesΞfor(agent){\n\t\t\n\t\treturn this.$up.rolesΞfor(agent);\n\t}\n\t\n\t/**\n\t@returns { OPField }\n\t*/\n\tget $field(){\n\t\t\n\t\treturn this.$up.$fields[this.$key];\n\t}\n\t\n\tget resolvedΦ(){\n\t\t\n\t\t// is that right?\n\t\treturn this.$up.resolvedΦ;\n\t}\n\t\n\tget existsΦ(){\n\t\t\n\t\treturn this.$up.existsΦ;\n\t}\n\t\n\tget unsavedΦ(){\n\t\t\n\t\t// TODO should only show unsaved if embed self is dirty\n\t\treturn this.$up.unsavedΦ;\n\t}\n\t\n\tget persistedΦ(){\n\t\t\n\t\treturn this.$up.persistedΦ;\n\t}\n\t\n\tget writableΦ(){\n\t\t\n\t\tif (this.$up && this.$field) { return OP.rights(this.$up,this.$field) & 2 };\n\t}\n\t\n\tget readableΦ(){\n\t\t\n\t\tif (this.$up && this.$field) { return OP.rights(this.$up,this.$field) & 4 };\n\t}\n\t\n\tget embedΦ(){\n\t\t\n\t\treturn true;\n\t}\n\t\n\tget $root(){\n\t\t\n\t\treturn this.$up.$root;\n\t}\n\t\n\tget $path(){\n\t\t\n\t\tlet pre = this.$up && this.$up.$path;\n\t\treturn pre ? ((\"\" + pre + `.` + this.$key)) : String(this.$key);\n\t}\n\t\n\tget $pathary(){\n\t\t\n\t\treturn this.$up ? this.$up.$pathary.concat(String(this.$key)) : [];\n\t}\n\t\n\tget $cloud(){\n\t\t\n\t\tlet cl = this.$up.$cloud;\n\t\treturn cl ? ((cl[this.$key] ||= {})) : null;\n\t}\n\t\n\tset $cloud(val){\n\t\t\n\t\tlet cl = this.$up.$cloud;\n\t\tcl ? ((cl[this.$key] = val)) : null;\n\t}\n\t\n\tget $plain(){\n\t\t\n\t\treturn this.$up.$plain[this.$key] ||= {};\n\t}\n\t\n\tset $plain(val){\n\t\t\n\t\tthis.$up.$plain[this.$key] = val;\n\t}\n\t\n\t$willΞset(path,value){\n\t\t\n\t\tthis.$cloud ||= {};// for better diffing\n\t\tthis.$plain[$v$] = (this.$plain[$v$] || 0) + 1;\n\t\tthis.$up?.$willΞset?.([this].concat(path),value);\n\t\t// update some counter\n\t\t// else\n\t\t// $initial ||= global.structuredClone($cloud or {})\n\t\treturn true;\n\t}\n\t\n\t$save(o = {}){\n\t\t\n\t\treturn OPObject.prototype.$save.call(this);\n\t}\n\t\n\t$invalidate(){\n\t\t\n\t\tthis[OWNREF].invalidated(0);\n\t\treturn this;\n\t}\n\t\n\tstatic extend(klass){\n\t\tvar $1;\n\t\t\n\t\tlet add = {};\n\t\tlet descriptors = Object.getOwnPropertyDescriptors(this.prototype);\n\t\tlet existing = Object.getOwnPropertyDescriptors(klass.prototype);\n\t\t((($1 = descriptors.constructor),delete descriptors.constructor, $1));\n\t\tfor (let $2 = 0, $3 = Object.keys(descriptors), $4 = $3.length, k, v; $2 < $4; $2++){\n\t\t\tk = $3[$2];v = descriptors[k];\n\t\t\tif (!(existing[k])) {\n\t\t\t\t\n\t\t\t\tadd[k] = v;\n\t\t\t};\n\t\t};\n\t\t\n\t\tObject.defineProperties(klass.prototype,add);\n\t\treturn klass.embed = this.embed;\n\t}\n\tstatic {\n\t\tdefineName$__(this,'OPValue');}\n}; globalThis.OPValue = OPValue;\n\nfor (let $5 = 0, $6 = ['save','$save'], $7 = $6.length; $5 < $7; $5++) {\n\tlet k = $6[$5];\n\tOPValue.prototype[k] ||= OPObject.prototype[k];\n};\n","dependencies":[],"map":{"version":3,"file":"value.js","sourceRoot":"","sources":["/Users/sindre/repos/scrimba/op/src/core/value.imba"],"sourcesContent":["const OWNREF = Symbol.for(\"~\")\n\nlet EMBED = null\n\nexport class Value\n\tstatic def embed up,key,...rest\n\t\tEMBED = [up,key]\n\t\tnew self(...rest)\n\n# Or rich value?\nexport global class OPValue\n\n\tdeclare $up\\OPObject\n\tdeclare $key\\string\n\t# declare $field\\OOP\n\n\tstatic def embed up,key,...rest\n\t\tEMBED = [up,key]\n\t\tnew self(...rest)\n\n\tdef constructor data\n\t\tif let embed = EMBED\n\t\t\tEMBED = null\n\t\t\t$embed(embed[0],String(embed[1]))\n\t\t\t# self.$up = embed[0]\n\t\t\t# self.$key = String(embed[1])\n\t\t\tself.id = `{$up}.{$key}`\n\n\tdef $embed up, key\n\t\tObject.defineProperties(self,{\n\t\t\t$up: {enumerable: no, value: up}\n\t\t\t$key: {enumerable: no, value: key}\n\t\t\t[OWNREF]: {enumerable: no, value: imba.createRef!}\n\t\t})\n\n\tdef toString\n\t\tid\n\n\tdef $mutated mut\n\t\tyes\n\n\tdef roles-for agent\n\t\t$up.roles-for(agent)\n\n\tget $field\\OPField\n\t\t$up.$fields[$key]\n\n\tget resolved?\n\t\t# is that right?\n\t\t$up.resolved?\n\n\tget exists?\n\t\t$up.exists?\n\n\tget unsaved?\n\t\t# TODO should only show unsaved if embed self is dirty\n\t\t$up.unsaved?\n\n\tget persisted?\n\t\t$up.persisted?\n\n\tget writable?\n\t\treturn OP.rights($up,$field) & 2 if $up and $field\n\n\tget readable?\n\t\treturn OP.rights($up,$field) & 4 if $up and $field\n\n\tget embed?\n\t\tyes\n\n\tget $root\n\t\t$up.$root\n\n\tget $path\n\t\tlet pre = $up and $up.$path\n\t\tpre ? `{pre}.{$key}` : String($key)\n\n\tget $pathary\n\t\t$up ? $up.$pathary.concat(String($key)) : []\n\n\tget $cloud\n\t\tlet cl = $up.$cloud\n\t\tcl ? (cl[$key] ||= {}) : null\n\n\tset $cloud val\n\t\tlet cl = $up.$cloud\n\t\tcl ? (cl[$key] = val) : null\n\n\tget $plain\n\t\t$up.$plain[$key] ||= {}\n\n\tset $plain val\n\t\t$up.$plain[$key] = val\n\n\tdef $will-set path, value\n\t\t$cloud ||= {} # for better diffing\n\t\t$plain.#v = ($plain.#v or 0) + 1\n\t\t$up..$will-set([self].concat(path),value)\n\t\t# update some counter\n\t\t# else\n\t\t#\t$initial ||= global.structuredClone($cloud or {})\n\t\tyes\n\n\tdef $save o = {}\n\t\tOPObject.prototype.$save.call(self,)\n\n\tdef $invalidate\n\t\tself[OWNREF].invalidated(0)\n\t\tself\n\n\tstatic def extend klass\n\t\tlet add = {}\n\t\tlet descriptors = Object.getOwnPropertyDescriptors(prototype)\n\t\tlet existing = Object.getOwnPropertyDescriptors(klass.prototype)\n\t\tdelete descriptors.constructor\n\t\tfor own k,v of descriptors\n\t\t\tunless existing[k]\n\t\t\t\tadd[k] = v\n\n\t\tObject.defineProperties(klass.prototype,add)\n\t\tklass.embed = self.embed\n\nfor k in ['save','$save']\n\tOPValue.prototype[k] ||= OPObject.prototype[k]"],"names":[],"mappings":"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"}},"css":{"code":""},"warnings":[],"errors":[]}
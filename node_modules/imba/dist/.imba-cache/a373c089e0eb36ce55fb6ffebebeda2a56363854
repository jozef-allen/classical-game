{"js":{"code":"function iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };;\nfunction defineName$__(cls,name){\n\tObject.defineProperty(cls,\"name\",{value:name,configurable:true});\n};;\nfunction inheritClass$__(cls){\n\tObject.getPrototypeOf(cls.prototype).constructor?.inherited?.(cls);\n};\nimport {commit as imba_commit} from 'imba';\nconst $__init__$ = Symbol.for('#__init__'), $__patch__$ = Symbol.for('#__patch__'), $__initor__$ = Symbol.for('#__initor__'), $__inited__$ = Symbol.for('#__inited__'), $__hooks__$ = Symbol.for('#__hooks__');\nvar $1 = Symbol();\n\n/*body*/\n// Binary socket should be something specific\nimport {Component} from '../component';\n\nconst all = [];\n\nexport class OPSocket extends Component {\n\t[$__patch__$]($$ = {},fields = true){\n\t\tvar $2;\n\t\tsuper[$__patch__$] && super[$__patch__$]($$,fields);\n\t\t($2 = $$.retries) !== undefined && (this.retries = $2);\n\t\t($2 = $$.readyState) !== undefined && (this.readyState = $2);\n\t\t($2 = $$.bytesReceived) !== undefined && (this.bytesReceived = $2);\n\t\t\n\t}\n\t[$__init__$]($$ = null,deep = true,fields = true){\n\t\tvar $3;\n\t\tdeep && super[$__init__$] && super[$__init__$](...arguments);\n\t\tthis.retries = ($$ && ($3 = $$.retries) !== undefined) ? ($3) : 0;\n\t\tthis.readyState = ($$ && ($3 = $$.readyState) !== undefined) ? ($3) : 0;\n\t\tthis.bytesReceived = ($$ && ($3 = $$.bytesReceived) !== undefined) ? ($3) : 0;\n\t\t\n\t}\n\tconstructor(owner,path){\n\t\t\n\t\tsuper(owner);\n\t\tsuper[$__init__$] || this[$__init__$]();\n\t\tthis.path = path;\n\t\tthis.queue = [];\n\t\tthis.open();\n\t\tthis[$__initor__$]===$1 && (this[$__hooks__$]&&this[$__hooks__$].inited(this),this[$__inited__$] && this[$__inited__$]());\n\t}\n\t\n\topen(){\n\t\tvar self = this;\n\t\t\n\t\t// don't open socket unless we are on the cloud?\n\t\tif (this.owner && !(this.owner.persistedΦ)) { return this };\n\t\tthis.closed = false;\n\t\tif (this.ws) { return this };\n\t\t\n\t\tlet url = (\"\" + globalThis.origin.replace(/^http/,'ws') + this.path);\n\t\tthis.ws = new WebSocket(url);\n\t\tthis.ws.binaryType = 'arraybuffer';\n\t\t\n\t\tlet ws = this.ws;\n\t\tlet timeout = setTimeout(function() { return ws.close(); },5000);\n\t\t\n\t\tws.onopen = function(e) {\n\t\t\t\n\t\t\tclearTimeout(timeout);\n\t\t\t// delete ws.then\n\t\t\tself.disconnects = 0;\n\t\t\tself.readyState = ws.readyState;\n\t\t\tconsole.log('ws.onopen',e);\n\t\t\treturn self.flush();\n\t\t};\n\t\t\n\t\tws.onmessage = function(e) {\n\t\t\t\n\t\t\tlet raw = new Uint8Array(e.data);\n\t\t\tlet slot = (raw[0] == 146) ? raw[1] : 0;\n\t\t\tself.bytesReceived += raw.length;\n\t\t\t\n\t\t\tlet msg = OP.$parse(raw);\n\t\t\tself.owner.onmessage(msg,self);// or from the socket itself?\n\t\t\treturn imba_commit();\n\t\t};\n\t\t\n\t\treturn ws.onclose = function(e) {\n\t\t\t\n\t\t\tclearTimeout(timeout);\n\t\t\tself.readyState = ws.readyState;\n\t\t\tself.ws = null;\n\t\t\tlet delay = Math.min(1000 * Math.pow(1.5,self.retries),30000);\n\t\t\tconsole.log('ws.onclose!!',e,delay);\n\t\t\treturn !(self.closed) && setTimeout(function() {\n\t\t\t\t\n\t\t\t\tself.retries++;\n\t\t\t\treturn self.open();\n\t\t\t},delay);\n\t\t};\n\t}\n\t\n\tclose(){\n\t\t\n\t\tthis.closed = true;\n\t\tthis.retries = 0;\n\t\tif (this.ws) { return this.ws.close() };\n\t}\n\t\n\tflush(){\n\t\t\n\t\tlet messages = this.queue;\n\t\tthis.queue = [];\n\t\tfor (let $4 = 0, $5 = iter$__(messages), $6 = $5.length; $4 < $6; $4++) {\n\t\t\tlet msg = $5[$4];\n\t\t\tthis.send(msg);\n\t\t};\n\t\treturn this;\n\t}\n\t\n\tclear(){\n\t\t\n\t\tthis.queue = [];\n\t\treturn this;\n\t}\n\t\n\tsend(msg,bin){\n\t\t\n\t\tif (this.readyΦ) {\n\t\t\t\n\t\t\tif (!((msg instanceof Uint8Array))) {\n\t\t\t\t\n\t\t\t\t// global.msg = msg\n\t\t\t\tmsg = OP.$pack(msg);\n\t\t\t\t// p `send msg`,msg\n\t\t\t};\n\t\t\treturn this.ws.send(msg,true);\n\t\t} else {\n\t\t\t\n\t\t\tthis.queue.push(msg);\n\t\t\treturn this.open();\n\t\t};\n\t}\n\t\n\tget readyΦ(){\n\t\t\n\t\treturn this.readyState == 1;\n\t}\n\tstatic {\n\t\tthis.prototype[$__initor__$] = $1;defineName$__(this,'OPSocket');inheritClass$__(this);}\n}; globalThis.OPSocket = OPSocket;\n","dependencies":[],"map":{"version":3,"file":"socket.js","sourceRoot":"","sources":["/Users/sindre/repos/scrimba/op/src/core/socket.imba"],"sourcesContent":["# Binary socket should be something specific\nimport {Component} from '../component'\n\nconst all = []\n\nexport global class OPSocket < Component\n\tretries = 0\n\treadyState = 0\n\tbytesReceived = 0\n\n\tdef constructor owner,path\n\t\tsuper(owner)\n\t\tpath = path\n\t\tqueue = []\n\t\topen!\n\n\tdef open\n\t\t# don't open socket unless we are on the cloud?\n\t\treturn self if owner and !owner.persisted?\n\t\tclosed = no\n\t\treturn self if ws\n\n\t\tlet url = \"{global.origin.replace(/^http/,'ws')}{path}\"\n\t\tws = new WebSocket(url)\n\t\tws.binaryType = 'arraybuffer'\n\n\t\tlet ws = ws\n\t\tlet timeout = setTimeout(&,5000) do ws.close!\n\n\t\tws.onopen = do(e)\n\t\t\tclearTimeout(timeout)\n\t\t\t# delete ws.then\n\t\t\tdisconnects = 0\n\t\t\treadyState = ws.readyState\n\t\t\tconsole.log 'ws.onopen',e\n\t\t\tflush!\n\n\t\tws.onmessage = do(e)\n\t\t\tlet raw = new Uint8Array(e.data)\n\t\t\tlet slot = raw[0] == 146 ? raw[1] : 0\n\t\t\tbytesReceived += raw.length\n\n\t\t\tlet msg = OP.$parse(raw)\n\t\t\towner.onmessage(msg,self) # or from the socket itself?\n\t\t\timba.commit!\n\n\t\tws.onclose = do(e)\n\t\t\tclearTimeout(timeout)\n\t\t\treadyState = ws.readyState\n\t\t\tself.ws = null\n\t\t\tlet delay = Math.min(1000 * Math.pow(1.5, retries),30000)\n\t\t\tconsole.log 'ws.onclose!!',e,delay\n\t\t\t!closed and setTimeout(&,delay) do\n\t\t\t\tretries++\n\t\t\t\topen!\n\n\tdef close\n\t\tclosed = yes\n\t\tretries = 0\n\t\tws.close! if ws\n\n\tdef flush\n\t\tlet messages = queue\n\t\tqueue = []\n\t\tfor msg in messages\n\t\t\tsend(msg)\n\t\tself\n\n\tdef clear\n\t\tqueue = []\n\t\tself\n\n\tdef send msg, bin\n\t\tif ready?\n\t\t\tunless msg isa Uint8Array\n\t\t\t\t# global.msg = msg\n\t\t\t\tmsg = OP.$pack(msg)\n\t\t\t\t# p `send msg`,msg\n\t\t\tws.send(msg,yes)\n\t\telse\n\t\t\tqueue.push(msg)\n\t\t\topen!\n\n\tget ready?\n\t\treadyState == 1"],"names":[],"mappings":"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"}},"css":{"code":""},"warnings":[],"errors":[]}
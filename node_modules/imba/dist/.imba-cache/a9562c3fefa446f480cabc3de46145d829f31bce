{"js":{"code":"function defineName$__(cls,name){\n\tObject.defineProperty(cls,\"name\",{value:name,configurable:true});\n};;\nfunction extend$__(target,ext){\n\t// @ts-ignore\n\tconst descriptors = Object.getOwnPropertyDescriptors(ext);\n\tdelete descriptors.constructor;\n\tif(target.extend__ instanceof Function){\n\t\ttarget.extend__(descriptors,ext);\n\t} else {\n\t\t// @ts-ignore\n\t\tObject.defineProperties(target,descriptors);\n\t}\n\treturn target;\n};\n\n/*body*/\nclass ΩNumber {\n\t\n\t\n\tto(num){\n\t\tvar self = this;\n\t\t\n\t\t// TODO Rename this to upto?\n\t\treturn Array.from({length: num - this + 1},function(_0,_1) { return self + _1; });\n\t}\n\t\n\tfloor(){\n\t\t\n\t\treturn Math.floor(this);\n\t}\n\t\n\tceil(){\n\t\t\n\t\treturn Math.ceil(this);\n\t}\n\t\n\tround(prec = 1){\n\t\t\n\t\tif (prec != 1) {\n\t\t\t\n\t\t\tlet inv = 1.0 / prec;\n\t\t\treturn Math.round(this * inv) / inv;\n\t\t};\n\t\treturn Math.round(this);\n\t}\n\t\n\t/**\n\t@param {number} min\n\t@param {number} max\n\t@returns { number }\n\t*/\n\tclamp(min,max){\n\t\t\n\t\t// TODO Makes little sense to support these? Better to define .min and .max functions on nr?\n\t\tif (typeof max !== 'number') {\n\t\t\t\n\t\t\treturn Math.max(this,min);\n\t\t} else if (typeof min !== 'number') {\n\t\t\t\n\t\t\treturn Math.min(this,max);\n\t\t} else {\n\t\t\t\n\t\t\treturn Math.min(Math.max(this,min),max);\n\t\t};\n\t}\n\t\n\t/**\n\t@param {number} imin\n\t@param {number} imax\n\t@returns { number }\n\t*/\n\tlerp(imin,imax,omin = 0,omax = 1){\n\t\t\n\t\tlet normal = (this - imin) / (imax - imin);\n\t\treturn omin + normal * (omax - omin);\n\t}\n\tstatic {\n\t\tdefineName$__(this,'Number');}\n};\nextend$__(Number.prototype,ΩNumber.prototype);\n;\n","dependencies":[],"map":{"version":3,"file":"number.js","sourceRoot":"","sources":["/Users/sindre/repos/imba/packages/imba/src/utils/std/number.imba"],"sourcesContent":["extend class Number\n\n\tdef to num\n\t\t# TODO Rename this to upto?\n\t\tArray.from {length: num - self + 1}, do self + $2\n\n\tdef floor\n\t\tMath.floor self\n\n\tdef ceil\n\t\tMath.ceil self\n\n\tdef round prec = 1\n\t\tif prec != 1\n\t\t\tlet inv = 1.0 / prec\n\t\t\treturn Math.round(self * inv) / inv\n\t\tMath.round self\n\n\tdef clamp\\number min\\number, max\\number\n\t\t# TODO Makes little sense to support these? Better to define .min and .max functions on nr?\n\t\tif typeof max isnt 'number'\n\t\t\tMath.max self, min\n\t\telif typeof min isnt 'number'\n\t\t\tMath.min self, max\n\t\telse\n\t\t\tMath.min Math.max(self,min), max\n\n\tdef lerp\\number imin\\number, imax\\number, omin = 0, omax = 1\n\t\tlet normal = (self - imin) / (imax - imin)\n\t\treturn omin + normal * (omax - omin)\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAO,KAAK,CAAC,OAAM,EAAA;;;CAEd,EAAE,CAAC,GAAG,CAAA;;;;EAET,OAAA,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE,QAAE,UAAC,OAAA,IAAI,CAAC,CAAC,CAAC,EAAE,IAAvC;EAAuC;;CAE9C,KAAK,EAAA;;EACR,OAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAA;EAAA;;CAEZ,IAAI,EAAA;;EACP,OAAA,IAAI,CAAC,IAAI,CAAC,IAAI,CAAA;EAAA;;CAEX,KAAK,CAAC,IAAI,GAAG,CAAC,CAAA;;EACjB,EAAE,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAA;;OACP,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,IAAI;GACpB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG;GAAA;EACpC,OAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAA;EAAA;;;SAEK,MAAM;SAAM,MAAM;YAA7B,MAAM;;CAAZ,KAAK,CAAQ,GAAG,CAAS,GAAG,CAAO;;;EAEtC,EAAE,EAAC,OAAO,GAAG,CAAC,GAAI,CAAC,QAAQ,EAAA;;GAC1B,OAAA,IAAI,CAAC,GAAG,CAAC,IAAI,CAAE,GAAG,CAAA;GAAA,MACnB,EAAA,EAAK,OAAO,GAAG,CAAC,GAAI,CAAC,QAAQ,EAAA;;GAC5B,OAAA,IAAI,CAAC,GAAG,CAAC,IAAI,CAAE,GAAG,CAAA;GAAA,MACf;;GACH,OAAA,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAE,GAAG,CAAA;GAAA;EAAA;;;SAEb,MAAM;SAAO,MAAM;YAA/B,MAAM;;CAAX,IAAI,CAAQ,IAAI,CAAS,IAAI,CAAS,IAAI,GAAG,CAAC,CAAE,IAAI,GAAG,CAAC,CAAA;;MACvD,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI;EACzC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI;EAAC;;;AAAA;UA7BzB,MAAM;AA6BmB;AACtC;"}},"css":{"code":""},"warnings":[],"errors":[]}
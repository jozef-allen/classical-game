{"js":{"code":"function defineName$__(cls,name){\n\tObject.defineProperty(cls,\"name\",{value:name,configurable:true});\n};;\nfunction inheritClass$__(cls){\n\tObject.getPrototypeOf(cls.prototype).constructor?.inherited?.(cls);\n};\nconst $__init__$ = Symbol.for('#__init__'), $__patch__$ = Symbol.for('#__patch__'), $__initor__$ = Symbol.for('#__initor__'), $__inited__$ = Symbol.for('#__inited__'), $__hooks__$ = Symbol.for('#__hooks__');\nvar $1 = Symbol();\n\n/*body*/\nimport './any.imba';\n\nexport class EventField extends OPField {\n\t[$__patch__$]($$ = {},fields = true){\n\t\tvar $2;\n\t\tsuper[$__patch__$] && super[$__patch__$]($$,fields);\n\t\t($2 = $$.pgtype) !== undefined && (this.pgtype = $2);\n\t\t\n\t}\n\tconstructor(){\n\t\tsuper(...arguments);\n\t\tsuper[$__init__$] || this[$__init__$]();this[$__initor__$]===$1 && (this[$__hooks__$]&&this[$__hooks__$].inited(this),this[$__inited__$] && this[$__inited__$]());\n\t}\n\t[$__init__$]($$ = null,deep = true,fields = true){\n\t\tvar $3;\n\t\tdeep && super[$__init__$] && super[$__init__$](...arguments);\n\t\tthis.pgtype = ($$ && ($3 = $$.pgtype) !== undefined) ? ($3) : 'integer';\n\t\t\n\t}\n\t$set(value,target,key = this.key){\n\t\t\n\t\tthis.log('eventfield set',value);\n\t\tif (value == true) {\n\t\t\t\n\t\t\tvalue = OP.now();\n\t\t} else if (value == false) {\n\t\t\t\n\t\t\t// set negative value to track the time like toggle?\n\t\t\tvalue = 0;\n\t\t};\n\t\t\n\t\tthis.load(value,target,key);\n\t\t// only trigger changed if it actually did change\n\t\treturn target.$changed(this.name,value,this);\n\t}\n\t\n\t// How similar is this to ToggleField?\n\t\n\tstatic {\n\t\tthis.prototype[$__initor__$] = $1;defineName$__(this,'EventField');inheritClass$__(this);}\n};\n","dependencies":[],"map":{"version":3,"file":"event.js","sourceRoot":"","sources":["/Users/sindre/repos/scrimba/op/src/fields/event.imba"],"sourcesContent":["import './any.imba'\n\nexport class EventField < OPField\n\tpgtype = 'integer'\n\n\tdeclare def $get\\number do ''\n\n\tdef $set value, target, key = key\n\t\tlog 'eventfield set',value\n\t\tif value == yes\n\t\t\tvalue = OP.now!\n\t\t# also accent date?\n\t\telif value == no\n\t\t\t# set negative value to track the time like toggle?\n\t\t\tvalue = 0\n\n\t\tload(value,target,key)\n\t\t# only trigger changed if it actually did change\n\t\ttarget.$changed(name,value,self)\n\n\t# How similar is this to ToggleField?"],"names":[],"mappings":";;;;;;;;;;AAAA,MAAM,CAAC,YAAY;;AAEnB,MAAM,CAAC,KAAK,CAAC,UAAU,SAAG,OAAO,EAAA;qCAFjC;;;WAGC,MAAM,CAAA,wBAAN,MAAM;;EAHP;cAAA;;;EAAA;kDAAA;;;OAGC,MAAM,mBAAN,MAAM,CAAA,qBAAA,IAAG,SAAS;;EAHnB;CAOK,IAAI,CAAC,KAAK,CAAE,MAAM,CAAE,GAAG,GAAG,KAAA,GAAG,CAAA;;EAChC,KAAA,GAAG,CAAC,gBAAgB,CAAC,KAAK,CAAA;EAC1B,EAAE,EAAC,KAAK,CAAC,EAAE,CAAC,IAAG,EAAA;;GACd,KAAK,GAAG,EAAE,CAAC,GAAG,EAAC;GAAA,MAEhB,EAAA,EAAK,KAAK,CAAC,EAAE,CAAC,KAAE,EAAA;;;GAEf,KAAK,GAAG,CAAC;GAAA;;EAEV,KAAA,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC;;EAEtB,OAAA,MAAM,CAAC,QAAQ,CAAC,KAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;EAAA;;;;;;AAEI,CAAA;AAAA;"}},"css":{"code":""},"warnings":[],"errors":[]}
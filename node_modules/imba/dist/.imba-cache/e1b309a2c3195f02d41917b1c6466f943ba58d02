{"js":{"code":"\n/*body*/\n// TODO Op\n\nimport 'imba/std';\nimport os from 'os';\nimport np from 'path';\nimport nfs from 'fs';\nimport cp from 'child_process';\n\nlet dir = __filename.replace('test/','test/.fs/').replace('.test.imba','');\ntry {\n\tnfs.rmSync(dir,{recursive: true});\n} catch (e) { };\nnfs.mkdirSync(dir,{recursive: true});\n\nlet cwd = dir;\n\ncp.spawnSync(\"npm\",[\"run\",\"build\"]);\n\ntest(\"create new server project in temp dir\",function() {\n\t\n\t\n\tlet res = cp.spawnSync(\"op-create\",{cwd: np.join(cwd,\"\")});\n\tif (res.status !== 0) {\n\t\t\n\t\tconsole.log(res.stdout?.toString?.());\n\t\tconsole.log((\"Error running op-create in \" + cwd),res.stderr?.toString?.());\n\t\tthrow {name: 'Error creating server project',message: res.stderr?.toString?.()};\n\t};\n\t\n\tlet projectΞname = res.stdout.toString().trim();\n\tok(projectΞname.length > 0);\n\treturn cwd = np.join(cwd,projectΞname);\n});\n\ntest(\"run server project\",function() {\n\t\n\tlet res = cp.spawnSync(\"npm\",[\"run\",\"dev\"],{cwd: cwd});\n\tif (res.status !== 0) {\n\t\t\n\t\tconsole.log(res.stdout?.toString?.());\n\t\tconsole.log((\"Error running nr dev in \" + cwd),res.stderr?.toString?.());\n\t\tthrow {name: 'Error running server project',message: res.stderr?.toString?.()};\n\t};\n});\n\ntest(\"create new fullstack project in temp dir\",function() {\n\t\n\tcwd = dir;\n\tlet res = cp.spawnSync(\"op-create\",[\"-f\"],{cwd: cwd});\n\tif (res.status !== 0) {\n\t\t\n\t\tconsole.log(res.stdout?.toString?.());\n\t\tconsole.log((\"Error running op-create -f in \" + cwd),res.stderr?.toString?.());\n\t\tthrow {name: 'Error creating fullstack project',message: res.stderr?.toString?.()};\n\t};\n\t\n\tlet projectΞname = res.stdout.toString().trim();\n\tok(projectΞname.length > 0);\n\treturn cwd = np.join(cwd,projectΞname);\n});\n\ntest.skip(\"run fullstack project\",async function() {\n\t\n\t// TODO should use playwright to detect client side errors\n\t\n\tlet child = cp.spawn(\"npm\",[\"run\",\"dev\"],{cwd: cwd});\n\tlet res = await new Promise(async function(resolve) {\n\t\t\n\t\tchild.on('exit',function(code,signal) {\n\t\t\t\n\t\t\tif (signal === 'SIGINT') {\n\t\t\t\t\n\t\t\t\treturn resolve(true);\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\treturn resolve((\"\" + code + \", \" + signal));\n\t\t\t};\n\t\t});\n\t\tchild.stderr.on('data',function(data) {\n\t\t\t\n\t\t\treturn resolve(data.toString());\n\t\t});\n\t\tawait sleep((4 * 1000));\n\t\treturn child.kill('SIGINT');\n\t});\n\t\n\tif (!(res === true)) {\n\t\t\n\t\tthrow {name: 'Error running fullstack project',message: res};\n\t};\n});\n","dependencies":[],"map":{"version":3,"file":"op-create.test.js","sourceRoot":"","sources":["/Users/sindre/repos/scrimba/op/test/bin/op-create.test.imba"],"sourcesContent":["# TODO Op\n\nimport 'imba/std'\nimport os from 'os'\nimport np from 'path'\nimport nfs from 'fs'\nimport cp from 'child_process'\n\nlet dir = __filename.replace('test/','test/.fs/').replace('.test.imba','')\ntry nfs.rmSync(dir, recursive: yes)\nnfs.mkdirSync(dir, recursive: yes)\n\nlet cwd = dir\n\ncp.spawnSync \"npm\", [\"run\", \"build\"]\n\ntest \"create new server project in temp dir\" do\n\n\tlet res = cp.spawnSync \"op-create\", { cwd: np.join(cwd, \"\") }\n\tif res.status isnt 0\n\t\tconsole.log res.stdout..toString!\n\t\tconsole.log \"Error running op-create in {cwd}\", res.stderr..toString!\n\t\tthrow { name: 'Error creating server project', message: res.stderr..toString! }\n\n\tlet project-name = res.stdout.toString!.trim!\n\tok project-name.length > 0\n\tcwd = np.join cwd, project-name\n\ntest \"run server project\" do\n\tlet res = cp.spawnSync \"npm\", [\"run\", \"dev\"], { cwd }\n\tif res.status isnt 0\n\t\tconsole.log res.stdout..toString!\n\t\tconsole.log \"Error running nr dev in {cwd}\", res.stderr..toString!\n\t\tthrow { name: 'Error running server project', message: res.stderr..toString! }\n\ntest \"create new fullstack project in temp dir\" do\n\tcwd = dir\n\tlet res = cp.spawnSync \"op-create\", [\"-f\"], { cwd }\n\tif res.status isnt 0\n\t\tconsole.log res.stdout..toString!\n\t\tconsole.log \"Error running op-create -f in {cwd}\", res.stderr..toString!\n\t\tthrow { name: 'Error creating fullstack project', message: res.stderr..toString! }\n\n\tlet project-name = res.stdout.toString!.trim!\n\tok project-name.length > 0\n\tcwd = np.join cwd, project-name\n\ntest.skip \"run fullstack project\" do\n\t# TODO should use playwright to detect client side errors\n\n\tlet child = cp.spawn \"npm\", [\"run\", \"dev\"], { cwd }\n\tlet res = await new Promise do(resolve)\n\t\tchild.on 'exit' do(code, signal)\n\t\t\tif signal is 'SIGINT'\n\t\t\t\tresolve yes\n\t\t\telse\n\t\t\t\tresolve \"{code}, {signal}\"\n\t\tchild.stderr.on 'data', do(data)\n\t\t\tresolve data.toString!\n\t\tawait sleep 4s\n\t\tchild.kill 'SIGINT'\n\n\tunless res is yes\n\t\tthrow { name: 'Error running fullstack project', message: res }\n"],"names":[],"mappings":"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"}},"css":{"code":""},"warnings":[],"errors":[]}
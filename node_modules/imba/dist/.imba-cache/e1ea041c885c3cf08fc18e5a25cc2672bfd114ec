{"js":{"code":"\n/*body*/\nimport crypto from 'crypto';\nimport fs from 'fs-extra';\nimport SparkMD5 from 'spark-md5';\nimport Minfo from 'mediainfo.js?external';\nimport {fileTypeFromBuffer} from 'file-type';\n\nimport fetch from 'node-fetch';\nfunction hash(_0){\n\t\n\treturn SparkMD5.ArrayBuffer.hash(_0,true);\n};\n\nconst mimeMap = {\n\t\"audio/vnd.wave\": \"audio/wav\"\n};\nasync function getMime(raw){\n\t\n\tconst typ = await fileTypeFromBuffer(raw);\n\tconst mime = typ?.mime || 'unknown';\n\t\n\treturn mimeMap[mime] || mime;\n};\n\nexport {fetch,crypto,fs,hash,Minfo,getMime};\n","dependencies":[],"map":{"version":3,"file":"os.node.js","sourceRoot":"","sources":["/Users/sindre/repos/scrimba/op/src/util/os.node.imba"],"sourcesContent":["import crypto from 'crypto'\nimport  fs from 'fs-extra'\nimport SparkMD5 from 'spark-md5'\nimport Minfo from 'mediainfo.js?external'\nimport {fileTypeFromBuffer} from 'file-type'\n\nimport fetch from 'node-fetch'\ndef hash\n\tSparkMD5.ArrayBuffer.hash $1, yes\n\nconst mimeMap = {\n\t\"audio/vnd.wave\": \"audio/wav\"\n}\ndef getMime(raw)\n\tconst typ = await fileTypeFromBuffer(raw)\n\tconst mime = typ..mime or 'unknown'\n\n\tmimeMap[mime] or mime\n\nexport {fetch, crypto, fs, hash, Minfo, getMime}\n"],"names":[],"mappings":";;AAAA,MAAM,CAAC,MAAM,MAAM,QAAQ;AAC3B,MAAM,CAAE,EAAE,MAAM,UAAU;AAC1B,MAAM,CAAC,QAAQ,MAAM,WAAW;AAChC,MAAM,CAAC,KAAK,MAAM,uBAAuB;AACzC,MAAM,EAAE,kBAAkB,OAAO,WAAW;;AAE5C,MAAM,CAAC,KAAK,MAAM,YAAY;AAC9B,QAAG,CAAC,IAAI,IAAA;;CACP,OAAA,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAE,IAAG,CAAA;CAAA;;MAE5B,OAAO,GAAG;CACf,gBAAgB,EAAE,WAAW;CAC7B;AACD,cAAG,CAAC,OAAO,CAAC,GAAG,CAAC;;OACT,GAAG,SAAS,kBAAkB,CAAC,GAAG,CAAC;OACnC,IAAI,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,SAAS;;CAEnC,OAAA,OAAO,CAAA,IAAK,CAAC,CAAC,EAAE,CAAC,IAAI;CAAA;;AAEtB,MAAM,EAAE,KAAK,CAAE,MAAM,CAAE,EAAE,CAAE,IAAI,CAAE,KAAK,CAAE,OAAO;AAC/C;"}},"css":{"code":""},"warnings":[],"errors":[]}
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var stdin_exports = {};
__export(stdin_exports, {
  aliases: () => aliases,
  compile: () => export_compile,
  deserialize: () => export_deserialize,
  fonts: () => fonts,
  helpers: () => export_helpers,
  modifiers: () => modifiers,
  parse: () => export_parse,
  parseAsset: () => parseAsset,
  parser: () => export_parser,
  program: () => program,
  resolve: () => export_resolve,
  resolveConfig: () => export_resolveConfig,
  rewrite: () => export_rewrite,
  selparser: () => selparser,
  tokenize: () => export_tokenize,
  variants: () => variants
});
module.exports = __toCommonJS(stdin_exports);
var __create = Object.create;
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
var __getOwnPropNames2 = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames2(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export2 = (target, all) => {
  for (var name in all)
    __defProp2(target, name, { get: all[name], enumerable: true });
};
var __copyProps2 = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames2(from))
      if (!__hasOwnProp2.call(to, key) && key !== except)
        __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps2(
  isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
var require_token = __commonJS({
  "src/compiler/token.imba1"(exports) {
    var self = {};
    var TOK = exports.TOK = {};
    var TTERMINATOR = TOK.TERMINATOR = 1;
    var TIDENTIFIER = TOK.IDENTIFIER = TOK.IVAR = 2;
    var CONST = TOK.CONST = 3;
    var VAR = TOK.VAR = 4;
    var IF = TOK.IF = 5;
    var ELSE = TOK.ELSE = 6;
    var DEF = TOK.DEF = 7;
    function Token2(type, value, loc, len) {
      this._type = type;
      this._value = value;
      this._loc = loc != null ? loc : -1;
      this._len = len != null ? len : this._value.length;
      this._meta = null;
      this.generated = false;
      this.newLine = false;
      this.spaced = false;
      this.call = false;
      return this;
    }
    exports.Token = Token2;
    Token2.prototype.type = function() {
      return this._type;
    };
    Token2.prototype.value = function() {
      return this._value;
    };
    Token2.prototype.traverse = function() {
      return;
    };
    Token2.prototype.c = function() {
      return "" + this._value;
    };
    Token2.prototype.prepend = function(str) {
      this._value = str + this._value;
      return this;
    };
    Token2.prototype.toString = function() {
      return this._value;
    };
    Token2.prototype.charAt = function(i) {
      return this._value.charAt(i);
    };
    Token2.prototype.slice = function(i) {
      return this._value.slice(i);
    };
    Token2.prototype.cloneSlice = function(i, type) {
      return new Token2(type || this._type, this.slice(i), this._loc + i, this._len - i);
    };
    Token2.prototype.region = function() {
      return [this._loc, this._loc + this._len];
    };
    Token2.prototype.startLoc = function() {
      return this._loc;
    };
    Token2.prototype.endLoc = function() {
      return this._loc + this._len;
    };
    Token2.prototype.loc = function() {
      return [this._loc, this.endLoc()];
    };
    exports.lex = self.lex = function() {
      var token = this.tokens[this.pos++];
      var ttag;
      if (token) {
        ttag = token._type;
        this.yytext = token;
      } else {
        ttag = "";
      }
      ;
      return ttag;
    };
    exports.token = self.token = function(typ, val) {
      return new Token2(typ, val, -1, 0);
    };
    exports.typ = self.typ = function(tok) {
      return tok._type;
    };
    exports.val = self.val = function(tok) {
      return tok._value;
    };
    exports.line = self.line = function(tok) {
      return tok._line;
    };
    exports.loc = self.loc = function(tok) {
      return tok._loc;
    };
    exports.setTyp = self.setTyp = function(tok, v) {
      return tok._type = v;
    };
    exports.setVal = self.setVal = function(tok, v) {
      return tok._value = v;
    };
    exports.setLine = self.setLine = function(tok, v) {
      return tok._line = v;
    };
    exports.setLoc = self.setLoc = function(tok, v) {
      return tok._loc = v;
    };
    var LBRACKET = exports.LBRACKET = new Token2("{", "{", 0, 0, 0);
    var RBRACKET = exports.RBRACKET = new Token2("}", "}", 0, 0, 0);
    var LPAREN = exports.LPAREN = new Token2("(", "(", 0, 0, 0);
    var RPAREN = exports.RPAREN = new Token2(")", ")", 0, 0, 0);
    LBRACKET.generated = true;
    RBRACKET.generated = true;
    LPAREN.generated = true;
    RPAREN.generated = true;
    var INDENT = exports.INDENT = new Token2("INDENT", "2", 0, 0, 0);
    var OUTDENT = exports.OUTDENT = new Token2("OUTDENT", "2", 0, 0, 0);
  }
});
var fnv1a_exports = {};
__export2(fnv1a_exports, {
  fnv1a: () => fnv1a
});
function fnv1a(string2, { size = 32 } = {}) {
  if (!FNV_PRIMES[size]) {
    throw new Error("The `size` option must be one of 32, 64, 128, 256, 512, or 1024");
  }
  let hash = FNV_OFFSETS[size];
  const fnvPrime = FNV_PRIMES[size];
  let isUnicoded = false;
  for (let index = 0; index < string2.length; index++) {
    let characterCode = string2.charCodeAt(index);
    if (characterCode > 127 && !isUnicoded) {
      string2 = unescape(encodeURIComponent(string2));
      characterCode = string2.charCodeAt(index);
      isUnicoded = true;
    }
    hash ^= BigInt(characterCode);
    hash = BigInt.asUintN(size, hash * fnvPrime);
  }
  return hash;
}
var FNV_PRIMES, FNV_OFFSETS;
var init_fnv1a = __esm({
  "vendor/fnv1a.js"() {
    FNV_PRIMES = {
      32: 16777619n,
      64: 1099511628211n,
      128: 309485009821345068724781371n,
      256: 374144419156711147060143317175368453031918731002211n,
      512: 35835915874844867368919076489095108449946327955754392558399825615420669938882575126094039892345713852759n,
      1024: 5016456510113118655434598811035278955030765345404790744303017523831112055108147451509157692220295382716162651878526895249385292291816524375083746691371804094271873160484737966720260389217684476157468082573n
    };
    FNV_OFFSETS = {
      32: 2166136261n,
      64: 14695981039346656037n,
      128: 144066263297769815596495629667062367629n,
      256: 100029257958052580907070968620625704837092796014241193945225284501741471925557n,
      512: 9659303129496669498009435400716310466090418745672637896108374329434462657994582932197716438449813051892206539805784495328239340083876191928701583869517785n,
      1024: 14197795064947621068722070641403218320880622795441933960878474914617582723252296732303717722150864096521202355549365628174669108571814760471015076148029755969804077320157692458563003215304957150157403644460363550505412711285966361610267868082893823963790439336411086884584107735010676915n
    };
  }
});
var identifiers_exports = {};
__export2(identifiers_exports, {
  InternalPrefixes: () => InternalPrefixes,
  ReservedIdentifierRegex: () => ReservedIdentifierRegex,
  ReservedPrefixes: () => ReservedPrefixes,
  ToImbaMap: () => ToImbaMap,
  ToJSMap: () => ToJSMap,
  toCustomTagIdentifier: () => toCustomTagIdentifier,
  toImbaIdentifier: () => toImbaIdentifier,
  toJSIdentifier: () => toJSIdentifier
});
function toJSIdentifier(raw) {
  return raw.replace(toJSregex, toJSreplacer);
}
function toImbaIdentifier(raw) {
  return raw.replace(toImbaRegex, toImbaReplacer);
}
function toCustomTagIdentifier(str) {
  return "\u0393" + toJSIdentifier(str);
}
var InternalPrefixes, ReservedPrefixes, ReservedIdentifierRegex, ToJSMap, toJSregex, toJSreplacer, ToImbaMap, toImbaRegex, toImbaReplacer;
var init_identifiers = __esm({
  "src/utils/identifiers.imba"() {
    InternalPrefixes = {
      TAG: "\u03C4",
      FLIP: "\u03C9",
      VALUE: "\u03C5",
      CACHE: "\u03F2",
      KEY: "\u03BA",
      ANY: "\u03C6",
      SYM: "\u03B5",
      SEP: "\u03B9",
      PRIVATE: "\u03A8",
      B: "\u03B9",
      T: "\u03C4",
      C: "\u03C1",
      V: "\u03C5",
      K: "\u03BA",
      D: "\u0394",
      H: "\u03B8",
      EXTEND: "\u03A9"
    };
    ReservedPrefixes = new Set(Object.values(InternalPrefixes));
    ReservedIdentifierRegex = new RegExp("^[" + Array.from(ReservedPrefixes).join("") + "]", "u");
    ToJSMap = {
      "-": "\u039E",
      "?": "\u03A6",
      "#": "\u03A8",
      "@": "\u03B1"
    };
    toJSregex = new RegExp("[-?#@]", "gu");
    toJSreplacer = function(m) {
      return ToJSMap[m];
    };
    ToImbaMap = {
      "\u039E": "-",
      "\u03A6": "?",
      "\u03A8": "#",
      "\u03B1": "@"
    };
    toImbaRegex = new RegExp("[\u039E\u03A6\u03A8\u03B1]", "gu");
    toImbaReplacer = function(m) {
      return ToImbaMap[m];
    };
  }
});
var require_helpers = __commonJS({
  "src/compiler/helpers.imba1"(exports) {
    function iter$(a) {
      return a ? a.toArray ? a.toArray() : a : [];
    }
    var self = {};
    var fnv1a2 = (init_fnv1a(), __toCommonJS2(fnv1a_exports)).fnv1a;
    var ansiMap = {
      reset: [0, 0],
      bold: [1, 22],
      dim: [2, 22],
      italic: [3, 23],
      underline: [4, 24],
      inverse: [7, 27],
      hidden: [8, 28],
      strikethrough: [9, 29],
      black: [30, 39],
      red: [31, 39],
      green: [32, 39],
      yellow: [33, 39],
      blue: [34, 39],
      magenta: [35, 39],
      cyan: [36, 39],
      white: [37, 39],
      gray: [90, 39],
      redBright: [91, 39],
      greenBright: [92, 39],
      yellowBright: [93, 39],
      blueBright: [94, 39],
      magentaBright: [95, 39],
      cyanBright: [96, 39],
      whiteBright: [97, 39]
    };
    var ansi = exports.ansi = {
      bold: function(text) {
        return "\x1B[1m" + text + "\x1B[22m";
      },
      red: function(text) {
        return "\x1B[31m" + text + "\x1B[39m";
      },
      green: function(text) {
        return "\x1B[32m" + text + "\x1B[39m";
      },
      yellow: function(text) {
        return "\x1B[33m" + text + "\x1B[39m";
      },
      blue: function(text) {
        return "\x1B[94m" + text + "\x1B[39m";
      },
      gray: function(text) {
        return "\x1B[90m" + text + "\x1B[39m";
      },
      white: function(text) {
        return "\x1B[37m" + text + "\x1B[39m";
      },
      f: function(name, text) {
        let pair = ansiMap[name];
        return "\x1B[" + pair[0] + "m" + text + "\x1B[" + pair[1] + "m";
      }
    };
    ansi.warn = ansi.yellow;
    ansi.error = ansi.red;
    var imba$ = (init_identifiers(), __toCommonJS2(identifiers_exports));
    var toImbaIdentifier2 = imba$.toImbaIdentifier;
    var toJSIdentifier2 = imba$.toJSIdentifier;
    var GreekLetters = "\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9";
    exports.brace = self.brace = function(str) {
      var lines = str.match(/\n/);
      if (lines) {
        return "{" + str + "\n}";
      } else {
        return "{\n" + str + "\n}";
      }
      ;
    };
    exports.normalizeIndentation = self.normalizeIndentation = function(str) {
      var m;
      var reg = /\n+([^\n\S]*)/g;
      var ind = null;
      var length_;
      while (m = reg.exec(str)) {
        var attempt = m[1];
        if (ind === null || 0 < (length_ = attempt.length) && length_ < ind.length) {
          ind = attempt;
        }
        ;
      }
      ;
      if (ind) {
        str = str.replace(RegExp("\\n" + ind, "g"), "\n");
      }
      ;
      return str;
    };
    exports.flatten = self.flatten = function(arr) {
      var out = [];
      arr.forEach(function(v) {
        return v instanceof Array ? out.push.apply(out, self.flatten(v)) : out.push(v);
      });
      return out;
    };
    exports.clearLocationMarkers = self.clearLocationMarkers = function(str) {
      return str.replace(/\/\*\%([\w\|]*)\$\*\//g, "");
    };
    exports.pascalCase = self.pascalCase = function(str) {
      return str.replace(/(^|[\-\_\s])(\w)/g, function(m, v, l) {
        return l.toUpperCase();
      });
    };
    exports.camelCase = self.camelCase = function(str) {
      str = String(str);
      return str.replace(/([\-\_\s])(\w)/g, function(m, v, l) {
        return l.toUpperCase();
      });
    };
    exports.dashToCamelCase = self.dashToCamelCase = function(str) {
      str = String(str);
      if (str.indexOf("-") >= 0) {
        str = str.replace(/([\-\s])(\w)/g, function(m, v, l) {
          return l.toUpperCase();
        });
      }
      ;
      return str;
    };
    exports.snakeCase = self.snakeCase = function(str) {
      var str = str.replace(/([\-\s])(\w)/g, "_");
      return str.replace(/()([A-Z])/g, "_$1", function(m, v, l) {
        return l.toUpperCase();
      });
    };
    exports.dasherize = self.dasherize = function(str) {
      return str.replace(/([a-z\d])([A-Z])/g, "$1-$2").toLowerCase();
    };
    exports.setterSym = self.setterSym = function(sym) {
      return self.dashToCamelCase("set-" + sym);
    };
    exports.quote = self.quote = function(str) {
      return '"' + str + '"';
    };
    exports.singlequote = self.singlequote = function(str) {
      return "'" + str + "'";
    };
    exports.isValidIdentifier = self.isValidIdentifier = function(str) {
      return !/[?-\s]/.test(str) && str[0] != "#";
    };
    exports.toValidIdentifier = self.toValidIdentifier = function(str) {
      return toJSIdentifier2(str);
      return str.replace(/[-\?]/g, "$");
    };
    exports.fromValidIdentifier = self.fromValidIdentifier = function(str) {
      return toImbaIdentifier2(str);
      return str[0] + str.slice(1).replace(/\$$/, "?").replace(/\$/g, "-");
    };
    exports.isSystemIdentifier = self.isSystemIdentifier = function(str) {
      return GreekLetters.indexOf(str[0]) >= 0;
    };
    exports.symbolize = self.symbolize = function(str, stack) {
      str = String(str);
      return self.toValidIdentifier(str);
      if (stack && stack.tsc() || true) {
        return str;
      }
      ;
      var end = str.charAt(str.length - 1);
      if (end == "?") {
        str = "is" + str[0].toUpperCase() + str.slice(1, -1);
      }
      ;
      if (str.indexOf("-") >= 0) {
        str = str.replace(/([\-\s])(\w)/g, function(m, v, l) {
          return l.toUpperCase();
        });
      }
      ;
      return str;
    };
    exports.indent = self.indent = function(str) {
      return String(str).replace(/^/g, "	").replace(/\n/g, "\n	").replace(/\n\t$/g, "\n");
    };
    exports.bracketize = self.bracketize = function(str, ind) {
      if (ind === void 0)
        ind = true;
      if (ind) {
        str = "\n" + self.indent(str) + "\n";
      }
      ;
      return "{" + str + "}";
    };
    exports.parenthesize = self.parenthesize = function(str) {
      return "(" + String(str) + ")";
    };
    exports.unionOfLocations = self.unionOfLocations = function() {
      var $0 = arguments, i = $0.length;
      var locs = new Array(i > 0 ? i : 0);
      while (i > 0)
        locs[i - 1] = $0[--i];
      var a = Infinity;
      var b = -Infinity;
      for (let i2 = 0, items = iter$(locs), len = items.length, loc; i2 < len; i2++) {
        loc = items[i2];
        if (loc && loc._loc != void 0) {
          loc = loc._loc;
        }
        ;
        if (loc && loc.loc instanceof Function) {
          loc = loc.loc();
        }
        ;
        if (loc instanceof Array) {
          if (a > loc[0]) {
            a = loc[0];
          }
          ;
          if (b < loc[0]) {
            b = loc[1];
          }
          ;
        } else if (typeof loc == "number" || loc instanceof Number) {
          if (a > loc) {
            a = loc;
          }
          ;
          if (b < loc) {
            b = loc;
          }
          ;
        }
        ;
      }
      ;
      return [a, b];
    };
    exports.locationToLineColMap = self.locationToLineColMap = function(code) {
      var lines = code.split(/\n/g);
      var map = [];
      var chr;
      var loc = 0;
      var col = 0;
      var line = 0;
      while (chr = code[loc]) {
        map[loc] = [line, col];
        if (chr == "\n") {
          line++;
          col = 0;
        } else {
          col++;
        }
        ;
        loc++;
      }
      ;
      map[loc] = [line, col];
      map[loc + 1] = [line, col];
      return map;
    };
    exports.markLineColForTokens = self.markLineColForTokens = function(tokens, code) {
      return self;
    };
    exports.parseArgs = self.parseArgs = function(argv, o) {
      var env_;
      if (o === void 0)
        o = {};
      var aliases2 = o.alias || (o.alias = {});
      var groups = o.group || (o.group = []);
      var schema = o.schema || {};
      schema.main = {};
      var options = {};
      var explicit = {};
      argv = argv || process.argv.slice(2);
      var curr = null;
      var i = 0;
      var m;
      while (i < argv.length) {
        var arg = argv[i];
        i++;
        if (m = arg.match(/^\-([a-zA-Z]+)(\=\S+)?$/)) {
          curr = null;
          let chars = m[1].split("");
          for (let i2 = 0, items = iter$(chars), len = items.length, item; i2 < len; i2++) {
            item = items[i2];
            var key = aliases2[item] || item;
            chars[i2] = key;
            options[key] = true;
          }
          ;
          if (chars.length == 1) {
            curr = chars;
          }
          ;
          continue;
        } else if (m = arg.match(/^\-\-([a-z0-9\-\_A-Z]+)(\=\S+)?$/)) {
          var val = true;
          key = m[1];
          if (key.indexOf("no-") == 0) {
            key = key.substr(3);
            val = false;
          }
          ;
          key = self.dashToCamelCase(key);
          if (m[2]) {
            val = m[2].slice(1);
          }
          ;
          options[key] = val;
          curr = key;
          continue;
        } else {
          var desc = schema[curr];
          if (!(curr && schema[curr])) {
            curr = "main";
          }
          ;
          if (arg.match(/^\d+$/)) {
            arg = parseInt(arg);
          }
          ;
          val = options[curr];
          if (val == true || val == false) {
            options[curr] = arg;
          } else if (typeof val == "string" || val instanceof String || (typeof val == "number" || val instanceof Number)) {
            options[curr] = [val].concat(arg);
          } else if (val instanceof Array) {
            val.push(arg);
          } else {
            options[curr] = arg;
          }
          ;
          if (!(desc && desc.multi)) {
            curr = "main";
          }
          ;
        }
        ;
      }
      ;
      for (let j = 0, items = iter$(groups), len = items.length; j < len; j++) {
        let name = self.dashToCamelCase(items[j]);
        for (let v, i_ = 0, keys = Object.keys(options), l = keys.length, k; i_ < l; i_++) {
          k = keys[i_];
          v = options[k];
          if (k.indexOf(name) == 0) {
            let key2 = k.substr(name.length).replace(/^\w/, function(m2) {
              return m2.toLowerCase();
            });
            if (key2) {
              options[name] || (options[name] = {});
              options[name][key2] = v;
            } else {
              options[name] || (options[name] = {});
            }
            ;
          }
          ;
        }
        ;
      }
      ;
      if (typeof (env_ = options.env) == "string" || env_ instanceof String) {
        options["ENV_" + options.env] = true;
      }
      ;
      return options;
    };
    exports.printExcerpt = self.printExcerpt = function(code, loc, pars) {
      if (!pars || pars.constructor !== Object)
        pars = {};
      var hl = pars.hl !== void 0 ? pars.hl : false;
      var gutter = pars.gutter !== void 0 ? pars.gutter : true;
      var type = pars.type !== void 0 ? pars.type : "warn";
      var pad = pars.pad !== void 0 ? pars.pad : 2;
      var lines = code.split(/\n/g);
      var locmap = self.locationToLineColMap(code);
      var lc = locmap[loc[0]] || [0, 0];
      var ln = lc[0];
      var col = lc[1];
      var line = lines[ln];
      var ln0 = Math.max(0, ln - pad);
      var ln1 = Math.min(ln0 + pad + 1 + pad, lines.length);
      let lni = ln - ln0;
      var l = ln0;
      var res1 = [];
      while (l < ln1) {
        res1.push(lines[l++]);
      }
      ;
      var out = res1;
      if (gutter) {
        out = out.map(function(line2, i) {
          let prefix = "" + (ln0 + i + 1);
          let str;
          while (prefix.length < String(ln1).length) {
            prefix = " " + prefix;
          }
          ;
          if (i == lni) {
            str = "   -> " + prefix + " | " + line2;
            if (hl) {
              str = ansi.f(hl, str);
            }
            ;
          } else {
            str = "      " + prefix + " | " + line2;
            if (hl) {
              str = ansi.f("gray", str);
            }
            ;
          }
          ;
          return str;
        });
      }
      ;
      let res = out.join("\n");
      return res;
    };
    exports.printWarning = self.printWarning = function(code, warn) {
      let msg = warn.message;
      let excerpt = self.printExcerpt(code, warn.loc, { hl: "whiteBright", type: "warn", pad: 1 });
      return msg + "\n" + excerpt;
    };
    exports.identifierForPath = self.identifierForPath = function(str) {
      let hash = fnv1a2(str).toString(36);
      if (hash[0].match(/\d/)) {
        hash = "z" + hash;
      }
      ;
      return hash;
    };
    exports.isPlainObject = self.isPlainObject = function(val) {
      return typeof val == "object" && Object.getPrototypeOf(val) == Object.prototype;
    };
    exports.deepAssign = self.deepAssign = function(base, assignment) {
      for (let v, i = 0, keys = Object.keys(assignment), l = keys.length, k; i < l; i++) {
        k = keys[i];
        v = assignment[k];
        let orig = base[k];
        if (self.isPlainObject(orig) && self.isPlainObject(v)) {
          self.deepAssign(orig, v);
        } else {
          base[k] = v;
        }
        ;
      }
      ;
      return base;
    };
  }
});
var require_constants = __commonJS({
  "src/compiler/constants.imba1"(exports) {
    function iter$(a) {
      return a ? a.toArray ? a.toArray() : a : [];
    }
    var BALANCED_PAIRS = exports.BALANCED_PAIRS = [
      ["(", ")"],
      ["[", "]"],
      ["{", "}"],
      ["{{", "}}"],
      ["INDENT", "OUTDENT"],
      ["CALL_START", "CALL_END"],
      ["PARAM_START", "PARAM_END"],
      ["INDEX_START", "INDEX_END"],
      ["TAG_START", "TAG_END"],
      ["STYLE_START", "STYLE_END"],
      ["BLOCK_PARAM_START", "BLOCK_PARAM_END"]
    ];
    var BITWISE_OPERATORS = exports.BITWISE_OPERATORS = {
      "|": true,
      "&": true,
      "!&": true,
      "~": true,
      "|=": true,
      "&=": true,
      "~=": true,
      "^=": true,
      "^": true,
      "<<": true,
      "<<=": true,
      ">>": true,
      ">>=": true
    };
    var ASSIGNMENT_OPERATORS = exports.ASSIGNMENT_OPERATORS = {
      "=": true,
      "=?": true,
      "??=": true,
      "||=": true,
      "&&=": true,
      "|=": true,
      "|=?": true,
      "&=": true,
      "&=?": true,
      "^=": true,
      "^=?": true,
      "~=": true,
      "~=?": true
    };
    var INVERSES = exports.INVERSES = {};
    for (let i = 0, len = BALANCED_PAIRS.length, pair; i < len; i++) {
      pair = BALANCED_PAIRS[i];
      left = pair[0];
      rite = pair[1];
      INVERSES[rite] = left;
      INVERSES[left] = rite;
      BALANCED_PAIRS[left] = rite;
    }
    var left;
    var rite;
    var ALL_KEYWORDS = exports.ALL_KEYWORDS = [
      "true",
      "false",
      "null",
      "this",
      "delete",
      "typeof",
      "in",
      "instanceof",
      "throw",
      "break",
      "continue",
      "debugger",
      "if",
      "else",
      "switch",
      "for",
      "while",
      "do",
      "try",
      "catch",
      "finally",
      "class",
      "extends",
      "super",
      "return",
      "undefined",
      "then",
      "unless",
      "until",
      "loop",
      "of",
      "by",
      "when",
      "def",
      "tag",
      "do",
      "elif",
      "begin",
      "var",
      "let",
      "self",
      "await",
      "import",
      "and",
      "or",
      "is",
      "isnt",
      "not",
      "yes",
      "no",
      "isa",
      "case",
      "nil",
      "require"
    ];
    var TOK = exports.TOK = {
      TERMINATOR: "TERMINATOR",
      INDENT: "INDENT",
      OUTDENT: "OUTDENT",
      DEF_BODY: "DEF_BODY",
      THEN: "THEN",
      CATCH: "CATCH"
    };
    var OPERATOR_ALIASES = exports.OPERATOR_ALIASES = {
      and: "&&",
      or: "||",
      is: "==",
      isnt: "!=",
      isa: "instanceof"
    };
    var HEREGEX_OMIT = exports.HEREGEX_OMIT = /\s+(?:#.*)?/g;
    var HEREGEX = exports.HEREGEX = /^\/{3}([\s\S]+?)\/{3}([a-z]{0,8})(?!\w)/;
    var TAG_GLOBAL_ATTRIBUTES = exports.TAG_GLOBAL_ATTRIBUTES = {
      itemid: 1,
      itemprop: 1,
      itemref: 1,
      itemscope: 1,
      itemtype: 1,
      enterkeyhint: 1,
      autofocus: 1,
      autocapitalize: 1,
      autocomplete: 1,
      accesskey: 1,
      inputmode: 1,
      spellcheck: 1,
      translate: 1,
      is: 1
    };
    var SYSVAR_PREFIX = exports.SYSVAR_PREFIX = {
      TAG: "\u03C4",
      FLIP: "\u03C9",
      VALUE: "\u03C5",
      CACHE: "\u03C1",
      KEY: "\u03BA",
      ANY: "\u03C6",
      B: "\u0398",
      T: "\u03C4",
      C: "\u03C1",
      V: "\u03C5",
      K: "\u03BA",
      D: "\u0394"
    };
    var TAG_TYPES = exports.TAG_TYPES = {
      "": [-1, { id: 1, className: "class", slot: 1, part: 1, elementTiming: "elementtiming" }],
      HTML: [-1, { title: 1, lang: 1, translate: 1, dir: 1, accessKey: "accesskey", draggable: 1, spellcheck: 1, autocapitalize: 1, inputMode: "inputmode", style: 1, tabIndex: "tabindex", enterKeyHint: "enterkeyhint" }],
      HTMLAnchor: [1, { target: 1, download: 1, ping: 1, rel: 1, relList: "rel", hreflang: 1, type: 1, referrerPolicy: "referrerpolicy", coords: 1, charset: 1, name: 1, rev: 1, shape: 1, href: 1 }],
      HTMLArea: [1, { alt: 1, coords: 1, download: 1, shape: 1, target: 1, ping: 1, rel: 1, relList: "rel", referrerPolicy: "referrerpolicy", href: 1 }],
      HTMLMedia: [1, { src: 1, crossOrigin: "crossorigin", preload: 1, controlsList: "controlslist" }],
      HTMLAudio: [4, {}],
      HTMLBase: [1, { href: 1, target: 1 }],
      HTMLQuote: [1, { cite: 1 }],
      HTMLBody: [1, { text: 1, link: 1, vLink: "vlink", aLink: "alink", bgColor: "bgcolor", background: 1 }],
      HTMLBR: [1, { clear: 1 }],
      HTMLButton: [1, { formAction: "formaction", formEnctype: "formenctype", formMethod: "formmethod", formTarget: "formtarget", name: 1, type: 1, value: 1 }],
      HTMLCanvas: [1, { width: 1, height: 1 }],
      HTMLTableCaption: [1, { align: 1 }],
      HTMLTableCol: [1, { span: 1, align: 1, ch: "char", chOff: "charoff", vAlign: "valign", width: 1 }],
      HTMLData: [1, { value: 1 }],
      HTMLDataList: [1, {}],
      HTMLMod: [1, { cite: 1, dateTime: "datetime" }],
      HTMLDetails: [1, {}],
      HTMLDialog: [1, {}],
      HTMLDiv: [1, { align: 1 }],
      HTMLDList: [1, {}],
      HTMLEmbed: [1, { src: 1, type: 1, width: 1, height: 1, align: 1, name: 1 }],
      HTMLFieldSet: [1, { name: 1 }],
      HTMLForm: [1, { acceptCharset: "accept-charset", action: 1, autocomplete: 1, enctype: 1, encoding: "enctype", method: 1, name: 1, target: 1 }],
      HTMLHeading: [1, { align: 1 }],
      HTMLHead: [1, {}],
      HTMLHR: [1, { align: 1, color: 1, size: 1, width: 1 }],
      HTMLHtml: [1, { version: 1 }],
      HTMLIFrame: [1, { src: 1, srcdoc: 1, name: 1, sandbox: 1, width: 1, height: 1, referrerPolicy: "referrerpolicy", csp: 1, allow: 1, align: 1, scrolling: 1, frameBorder: "frameborder", longDesc: "longdesc", marginHeight: "marginheight", marginWidth: "marginwidth", loading: 1 }],
      HTMLImage: [1, { alt: 1, src: 1, srcset: 1, sizes: 1, crossOrigin: "crossorigin", useMap: "usemap", width: 1, height: 1, referrerPolicy: "referrerpolicy", decoding: 1, name: 1, lowsrc: 1, align: 1, hspace: 1, vspace: 1, longDesc: "longdesc", border: 1, loading: 1 }],
      HTMLInput: [1, { accept: 1, alt: 1, autocomplete: 1, dirName: "dirname", formAction: "formaction", formEnctype: "formenctype", formMethod: "formmethod", formTarget: "formtarget", height: 1, max: 1, maxLength: "maxlength", min: 1, minLength: "minlength", name: 1, pattern: 1, placeholder: 1, src: 1, step: 1, type: 1, defaultValue: "value", width: 1, align: 1, useMap: "usemap" }],
      HTMLLabel: [1, { htmlFor: "for" }],
      HTMLLegend: [1, { align: 1 }],
      HTMLLI: [1, { value: 1, type: 1 }],
      HTMLLink: [1, { href: 1, crossOrigin: "crossorigin", rel: 1, relList: "rel", media: 1, hreflang: 1, type: 1, as: 1, referrerPolicy: "referrerpolicy", sizes: 1, imageSrcset: "imagesrcset", imageSizes: "imagesizes", charset: 1, rev: 1, target: 1, integrity: 1 }],
      HTMLMap: [1, { name: 1 }],
      HTMLMenu: [1, {}],
      HTMLMeta: [1, { name: 1, httpEquiv: "http-equiv", content: 1, scheme: 1 }],
      HTMLMeter: [1, { value: 1, min: 1, max: 1, low: 1, high: 1, optimum: 1 }],
      HTMLObject: [1, { data: 1, type: 1, name: 1, useMap: "usemap", width: 1, height: 1, align: 1, archive: 1, code: 1, hspace: 1, standby: 1, vspace: 1, codeBase: "codebase", codeType: "codetype", border: 1 }],
      HTMLOList: [1, { start: 1, type: 1 }],
      HTMLOptGroup: [1, { label: 1 }],
      HTMLOption: [1, { label: 1, value: 1 }],
      HTMLOutput: [1, { htmlFor: "for", name: 1 }],
      HTMLParagraph: [1, { align: 1 }],
      HTMLParam: [1, { name: 1, value: 1, type: 1, valueType: "valuetype" }],
      HTMLPicture: [1, {}],
      HTMLPre: [1, { width: 1 }],
      HTMLProgress: [1, { value: 1, max: 1 }],
      HTMLScript: [1, { src: 1, type: 1, charset: 1, crossOrigin: "crossorigin", referrerPolicy: "referrerpolicy", event: 1, htmlFor: "for", integrity: 1 }],
      HTMLSelect: [1, { autocomplete: 1, name: 1, size: 1 }],
      HTMLSlot: [1, { name: 1 }],
      HTMLSource: [1, { src: 1, type: 1, srcset: 1, sizes: 1, media: 1 }],
      HTMLSpan: [1, {}],
      HTMLStyle: [1, { media: 1, type: 1 }],
      HTMLTable: [1, { align: 1, border: 1, frame: 1, rules: 1, summary: 1, width: 1, bgColor: "bgcolor", cellPadding: "cellpadding", cellSpacing: "cellspacing" }],
      HTMLTableSection: [1, { align: 1, ch: "char", chOff: "charoff", vAlign: "valign" }],
      HTMLTableCell: [1, { colSpan: "colspan", rowSpan: "rowspan", headers: 1, align: 1, axis: 1, height: 1, width: 1, ch: "char", chOff: "charoff", vAlign: "valign", bgColor: "bgcolor", abbr: 1, scope: 1 }],
      HTMLTemplate: [1, {}],
      HTMLTextArea: [1, { autocomplete: 1, cols: 1, dirName: "dirname", maxLength: "maxlength", minLength: "minlength", name: 1, placeholder: 1, rows: 1, wrap: 1 }],
      HTMLTime: [1, { dateTime: "datetime" }],
      HTMLTitle: [1, {}],
      HTMLTableRow: [1, { align: 1, ch: "char", chOff: "charoff", vAlign: "valign", bgColor: "bgcolor" }],
      HTMLTrack: [1, { kind: 1, src: 1, srclang: 1, label: 1 }],
      HTMLUList: [1, { type: 1 }],
      HTMLVideo: [4, { width: 1, height: 1, poster: 1 }],
      SVG: [-1, {}],
      SVGGraphics: [66, { transform: 1 }],
      SVGA: [67, {}],
      SVGAnimation: [66, {}],
      SVGAnimate: [69, {}],
      SVGAnimateMotion: [69, {}],
      SVGAnimateTransform: [69, {}],
      SVGGeometry: [67, {}],
      SVGCircle: [73, { cx: 1, cy: 1, r: 1 }],
      SVGClipPath: [67, { clipPathUnits: 1 }],
      SVGDefs: [67, {}],
      SVGDesc: [66, {}],
      SVGDiscard: [66, {}],
      SVGEllipse: [73, { cx: 1, cy: 1, rx: 1, ry: 1 }],
      SVGFEBlend: [66, { mode: 1, x: 1, y: 1, width: 1, height: 1 }],
      SVGFEColorMatrix: [66, { type: 1, values: 1, x: 1, y: 1, width: 1, height: 1 }],
      SVGFEComponentTransfer: [66, { x: 1, y: 1, width: 1, height: 1 }],
      SVGFEComposite: [66, { operator: 1, x: 1, y: 1, width: 1, height: 1 }],
      SVGFEConvolveMatrix: [66, { orderX: 1, orderY: 1, kernelMatrix: 1, divisor: 1, edgeMode: 1, x: 1, y: 1, width: 1, height: 1 }],
      SVGFEDiffuseLighting: [66, { surfaceScale: 1, diffuseConstant: 1, x: 1, y: 1, width: 1, height: 1 }],
      SVGFEDisplacementMap: [66, { xChannelSelector: 1, yChannelSelector: 1, x: 1, y: 1, width: 1, height: 1 }],
      SVGFEDistantLight: [66, {}],
      SVGFEDropShadow: [66, { dx: 1, dy: 1, stdDeviationX: 1, stdDeviationY: 1, x: 1, y: 1, width: 1, height: 1 }],
      SVGFEFlood: [66, { x: 1, y: 1, width: 1, height: 1 }],
      SVGComponentTransferFunction: [66, { type: 1, tableValues: 1, slope: 1, amplitude: 1, exponent: 1 }],
      SVGFEFuncA: [90, {}],
      SVGFEFuncB: [90, {}],
      SVGFEFuncG: [90, {}],
      SVGFEFuncR: [90, {}],
      SVGFEGaussianBlur: [66, { x: 1, y: 1, width: 1, height: 1 }],
      SVGFEImage: [66, { preserveAspectRatio: 1, x: 1, y: 1, width: 1, height: 1 }],
      SVGFEMerge: [66, { x: 1, y: 1, width: 1, height: 1 }],
      SVGFEMergeNode: [66, {}],
      SVGFEMorphology: [66, { operator: 1, x: 1, y: 1, width: 1, height: 1 }],
      SVGFEOffset: [66, { x: 1, y: 1, width: 1, height: 1 }],
      SVGFEPointLight: [66, {}],
      SVGFESpecularLighting: [66, { surfaceScale: 1, specularConstant: 1, specularExponent: 1, x: 1, y: 1, width: 1, height: 1 }],
      SVGFESpotLight: [66, { specularExponent: 1 }],
      SVGFETile: [66, { x: 1, y: 1, width: 1, height: 1 }],
      SVGFETurbulence: [66, { numOctaves: 1, stitchTiles: 1, type: 1, x: 1, y: 1, width: 1, height: 1 }],
      SVGFilter: [66, { filterUnits: 1, primitiveUnits: 1, x: 1, y: 1, width: 1, height: 1 }],
      SVGForeignObject: [67, { x: 1, y: 1, width: 1, height: 1 }],
      SVGG: [67, {}],
      SVGImage: [67, { x: 1, y: 1, width: 1, height: 1, preserveAspectRatio: 1 }],
      SVGLine: [73, { x1: 1, y1: 1, x2: 1, y2: 1 }],
      SVGGradient: [66, { gradientUnits: 1, gradientTransform: 1, spreadMethod: 1 }],
      SVGLinearGradient: [111, { x1: 1, y1: 1, x2: 1, y2: 1 }],
      SVGMarker: [66, { refX: 1, refY: 1, markerUnits: 1, markerWidth: 1, markerHeight: 1, orientType: 1, orientAngle: 1, viewBox: 1, preserveAspectRatio: 1 }],
      SVGMask: [66, { maskUnits: 1, maskContentUnits: 1, x: 1, y: 1, width: 1, height: 1 }],
      SVGMetadata: [66, {}],
      SVGMPath: [66, {}],
      SVGPath: [73, {}],
      SVGPattern: [66, { patternUnits: 1, patternContentUnits: 1, patternTransform: 1, x: 1, y: 1, width: 1, height: 1, viewBox: 1, preserveAspectRatio: 1 }],
      SVGPolygon: [73, {}],
      SVGPolyline: [73, {}],
      SVGRadialGradient: [111, { cx: 1, cy: 1, r: 1, fx: 1, fy: 1, fr: 1 }],
      SVGRect: [73, { x: 1, y: 1, width: 1, height: 1, rx: 1, ry: 1 }],
      SVGScript: [66, {}],
      SVGSet: [69, {}],
      SVGStop: [66, {}],
      SVGStyle: [66, {}],
      SVGSVG: [67, { x: 1, y: 1, width: 1, height: 1, viewBox: 1, preserveAspectRatio: 1 }],
      SVGSwitch: [67, {}],
      SVGSymbol: [66, { viewBox: 1, preserveAspectRatio: 1 }],
      SVGTextContent: [67, { textLength: 1, lengthAdjust: 1 }],
      SVGTextPositioning: [130, { x: 1, y: 1, dx: 1, dy: 1, rotate: 1 }],
      SVGText: [131, {}],
      SVGTextPath: [130, { startOffset: 1, method: 1, spacing: 1 }],
      SVGTitle: [66, {}],
      SVGTSpan: [131, {}],
      SVGUse: [67, { x: 1, y: 1, width: 1, height: 1 }],
      SVGView: [66, { viewBox: 1, preserveAspectRatio: 1 }]
    };
    var TAG_NAMES2 = exports.TAG_NAMES = {
      a: 2,
      abbr: 1,
      address: 1,
      area: 3,
      article: 1,
      aside: 1,
      audio: 5,
      b: 1,
      base: 6,
      bdi: 1,
      bdo: 1,
      blockquote: 7,
      body: 8,
      br: 9,
      button: 10,
      canvas: 11,
      caption: 12,
      cite: 1,
      code: 1,
      col: 13,
      colgroup: 13,
      data: 14,
      datalist: 15,
      dd: 1,
      del: 16,
      details: 17,
      dfn: 1,
      dialog: 18,
      div: 19,
      dl: 20,
      dt: 1,
      em: 1,
      embed: 21,
      fieldset: 22,
      figcaption: 1,
      figure: 1,
      footer: 1,
      form: 23,
      h1: 24,
      h2: 24,
      h3: 24,
      h4: 24,
      h5: 24,
      h6: 24,
      head: 25,
      header: 1,
      hgroup: 1,
      hr: 26,
      html: 27,
      i: 1,
      iframe: 28,
      img: 29,
      input: 30,
      ins: 16,
      kbd: 1,
      label: 31,
      legend: 32,
      li: 33,
      link: 34,
      main: 1,
      map: 35,
      mark: 1,
      menu: 36,
      meta: 37,
      meter: 38,
      nav: 1,
      noscript: 1,
      object: 39,
      ol: 40,
      optgroup: 41,
      option: 42,
      output: 43,
      p: 44,
      param: 45,
      picture: 46,
      pre: 47,
      progress: 48,
      q: 7,
      rp: 1,
      rt: 1,
      ruby: 1,
      s: 1,
      samp: 1,
      script: 49,
      section: 1,
      select: 50,
      slot: 51,
      small: 1,
      source: 52,
      span: 53,
      strike: 1,
      strong: 1,
      style: 54,
      sub: 1,
      summary: 1,
      sup: 1,
      table: 55,
      tbody: 56,
      td: 57,
      template: 58,
      textarea: 59,
      tfoot: 56,
      th: 57,
      thead: 56,
      time: 60,
      title: 61,
      tr: 62,
      track: 63,
      u: 1,
      ul: 64,
      "var": 1,
      video: 65,
      wbr: 1,
      svg_a: 68,
      svg_animate: 70,
      svg_animateMotion: 71,
      svg_animateTransform: 72,
      svg_audio: 66,
      svg_canvas: 66,
      svg_circle: 74,
      svg_clipPath: 75,
      svg_defs: 76,
      svg_desc: 77,
      svg_discard: 78,
      svg_ellipse: 79,
      svg_feBlend: 80,
      svg_feColorMatrix: 81,
      svg_feComponentTransfer: 82,
      svg_feComposite: 83,
      svg_feConvolveMatrix: 84,
      svg_feDiffuseLighting: 85,
      svg_feDisplacementMap: 86,
      svg_feDistantLight: 87,
      svg_feDropShadow: 88,
      svg_feFlood: 89,
      svg_feFuncA: 91,
      svg_feFuncB: 92,
      svg_feFuncG: 93,
      svg_feFuncR: 94,
      svg_feGaussianBlur: 95,
      svg_feImage: 96,
      svg_feMerge: 97,
      svg_feMergeNode: 98,
      svg_feMorphology: 99,
      svg_feOffset: 100,
      svg_fePointLight: 101,
      svg_feSpecularLighting: 102,
      svg_feSpotLight: 103,
      svg_feTile: 104,
      svg_feTurbulence: 105,
      svg_filter: 106,
      svg_foreignObject: 107,
      svg_g: 108,
      svg_iframe: 66,
      svg_image: 109,
      svg_line: 110,
      svg_linearGradient: 112,
      svg_marker: 113,
      svg_mask: 114,
      svg_metadata: 115,
      svg_mpath: 116,
      svg_path: 117,
      svg_pattern: 118,
      svg_polygon: 119,
      svg_polyline: 120,
      svg_radialGradient: 121,
      svg_rect: 122,
      svg_script: 123,
      svg_set: 124,
      svg_stop: 125,
      svg_style: 126,
      svg_svg: 127,
      svg_switch: 128,
      svg_symbol: 129,
      svg_text: 132,
      svg_textPath: 133,
      svg_title: 134,
      svg_tspan: 135,
      svg_unknown: 66,
      svg_use: 136,
      svg_video: 66,
      svg_view: 137
    };
    var keys = Object.keys(TAG_TYPES);
    for (let i = 0, items = iter$(keys), len = items.length, typ; i < len; i++) {
      typ = items[i];
      let item = TAG_TYPES[typ];
      item.up = TAG_TYPES[keys[item[0]]];
      item.name = typ + "Element";
    }
    for (let ref, i = 0, keys1 = Object.keys(TAG_NAMES2), l = keys1.length, name; i < l; i++) {
      name = keys1[i];
      ref = TAG_NAMES2[name];
      TAG_NAMES2[name] = TAG_TYPES[keys[ref]];
    }
  }
});
var \u03A8__init__, \u03A8source, \u03A8lineText, \u03A8version, DOCMAP, Position, Range, DiagnosticSeverity, Diagnostic;
var init_structures = __esm({
  "src/program/structures.imba"() {
    \u03A8__init__ = /* @__PURE__ */ Symbol.for("#__init__");
    \u03A8source = /* @__PURE__ */ Symbol.for("#source");
    \u03A8lineText = /* @__PURE__ */ Symbol.for("#lineText");
    \u03A8version = /* @__PURE__ */ Symbol.for("#version");
    DOCMAP = /* @__PURE__ */ new WeakMap();
    Position = class {
      [\u03A8__init__]($$ = null) {
        this.line = $$ ? $$.line : void 0;
        this.character = $$ ? $$.character : void 0;
        this.offset = $$ ? $$.offset : void 0;
      }
      constructor(l, c, o, v = null) {
        this[\u03A8__init__]();
        this.line = l;
        this.character = c;
        this.offset = o;
        this[\u03A8version] = v;
      }
      toString() {
        return "" + this.line + ":" + this.character;
      }
      valueOf() {
        return this.offset;
      }
    };
    Range = class {
      [\u03A8__init__]($$ = null) {
        this.start = $$ ? $$.start : void 0;
        this.end = $$ ? $$.end : void 0;
      }
      constructor(start, end) {
        this[\u03A8__init__]();
        this.start = start;
        this.end = end;
      }
      get offset() {
        return this.start.offset;
      }
      get length() {
        return this.end.offset - this.start.offset;
      }
      get ["0"]() {
        return this.start.offset;
      }
      get ["1"]() {
        return this.end.offset;
      }
      getText(str) {
        return str.slice(this.start, this.end);
      }
      equals(other) {
        return other.offset == this.offset && other.length == this.length;
      }
    };
    DiagnosticSeverity = {
      Error: 1,
      Warning: 2,
      Information: 3,
      Hint: 4,
      error: 1,
      warning: 2,
      warn: 2,
      info: 3,
      hint: 4
    };
    Diagnostic = class {
      constructor(data, doc = null) {
        this.range = data.range;
        this.severity = DiagnosticSeverity[data.severity] || data.severity;
        this.code = data.code;
        this.source = data.source;
        this.message = data.message;
        DOCMAP.set(this, doc);
      }
      get [\u03A8source]() {
        return DOCMAP.get(this);
      }
      get [\u03A8lineText]() {
        return this[\u03A8source].doc.getLineText(this.range.start.line);
      }
      toSnippet() {
        let start = this.range.start;
        let end = this.range.end;
        let msg = "" + this[\u03A8source].sourcePath + ":" + (start.line + 1) + ":" + (start.character + 1) + ": " + this.message;
        let line = this[\u03A8source].doc.getLineText(start.line);
        let stack = [msg, line];
        stack.push(line.replace(/[^\t]/g, " ").slice(0, start.character) + "^".repeat(end.character - start.character));
        return stack.join("\n").replace(/\t/g, "    ") + "\n";
      }
      toError() {
        let start = this.range.start;
        let end = this.range.end;
        let msg = "" + this[\u03A8source].sourcePath + ":" + (start.line + 1) + ":" + (start.character + 1) + ": " + this.message;
        let err = new SyntaxError(msg);
        let line = this[\u03A8source].doc.getLineText(start.line);
        let stack = [msg, line];
        stack.push(line.replace(/[^\t]/g, " ").slice(0, start.character) + "^".repeat(end.character - start.character));
        err.stack = "\n" + stack.join("\n").replace(/\t/g, "    ") + "\n";
        return err;
      }
      raise() {
        throw this.toError();
      }
    };
  }
});
function iter$__(a) {
  let v;
  return a ? (v = a.toIterable) ? v.call(a) : a : [];
}
function prevToken(start, pattern, max = 1e5) {
  let tok = start;
  while (tok && max > 0) {
    if (tok.match(pattern)) {
      return tok;
    }
    ;
    max--;
    tok = tok.prev;
  }
  ;
  return null;
}
function computeLineOffsets(text, isAtLineStart, textOffset) {
  if (textOffset === void 0) {
    textOffset = 0;
  }
  ;
  var result = isAtLineStart ? [textOffset] : [];
  var i = 0;
  while (i < text.length) {
    var ch = text.charCodeAt(i);
    if (ch === 13 || ch === 10) {
      if (ch === 13 && i + 1 < text.length && text.charCodeAt(i + 1) === 10) {
        i++;
      }
      ;
      result.push(textOffset + i + 1);
    }
    ;
    i++;
  }
  ;
  return result;
}
function getWellformedRange(range) {
  var start = range.start;
  var end = range.end;
  if (start.line > end.line || start.line === end.line && start.character > end.character) {
    return new Range(end, start);
  }
  ;
  return range instanceof Range ? range : new Range(start, end);
}
function editIsFull(e) {
  return e !== void 0 && e !== null && typeof e.text === "string" && e.range === void 0;
}
function fastExtractSymbols(text) {
  let lines = text.split(/\n/);
  let symbols = [];
  let scope = { indent: -1, children: [] };
  let root = scope;
  let m;
  let t0 = Date.now();
  for (let i = 0, items\u03C62 = iter$__(lines), len\u03C62 = items\u03C62.length; i < len\u03C62; i++) {
    let line = items\u03C62[i];
    if (line.match(/^\s*$/)) {
      continue;
    }
    ;
    let indent = line.match(/^\t*/)[0].length;
    while (scope.indent >= indent) {
      scope = scope.parent || root;
    }
    ;
    m = line.match(/^(\t*((?:export )?(?:static )?(?:extend )?)(class|tag|def|get|set|prop|attr) )(\@?[\w\-\$\:]+(?:\.[\w\-\$]+)?)/);
    if (m) {
      let kind = m[3];
      let name = m[4];
      let ns = scope.name ? scope.name + "." : "";
      let mods = m[2].trim().split(/\s+/);
      let md = "";
      let span = {
        start: { line: i, character: m[1].length },
        end: { line: i, character: m[0].length }
      };
      let symbol = {
        kind,
        ownName: name,
        name: ns + name,
        span,
        indent,
        modifiers: mods,
        children: [],
        parent: scope == root ? null : scope,
        type: kind,
        data: {},
        static: mods.indexOf("static") >= 0,
        extends: mods.indexOf("extend") >= 0
      };
      if (symbol.static) {
        symbol.containerName = "static";
      }
      ;
      symbol.containerName = m[2] + m[3];
      if (kind == "tag" && (m = line.match(/\<\s+([\w\-\$\:]+(?:\.[\w\-\$]+)?)/))) {
        symbol.superclass = m[1];
      }
      ;
      if (scope.type == "tag") {
        md = "```html\n<" + scope.name + " " + name + ">\n```\n";
        symbol.description = { kind: "markdown", value: md };
      }
      ;
      scope.children.push(symbol);
      scope = symbol;
      symbols.push(symbol);
    }
    ;
  }
  ;
  root.all = symbols;
  console.log("fast outline", text.length, Date.now() - t0);
  return root;
}
var init_utils = __esm({
  "src/program/utils.imba"() {
    init_structures();
  }
});
function iter$__2(a) {
  let v;
  return a ? (v = a.toIterable) ? v.call(a) : a : [];
}
function regexify(array, pattern = "#") {
  if (typeof array == "string") {
    array = array.split(" ");
  }
  ;
  let items = array.slice().sort(function(_0, _1) {
    return _1.length - _0.length;
  });
  items = items.map(function(item) {
    let escaped = item.replace(/[.*+\-?^${}()|[\]\\]/g, "\\$&");
    return pattern.replace("#", escaped);
  });
  return new RegExp("(?:" + items.join("|") + ")");
}
function denter(indent, outdent, stay, o = {}) {
  var v$\u03C6;
  if (indent == null) {
    indent = toodeep;
  } else if (indent == 1) {
    indent = { next: "@>" };
  } else if (indent == 2) {
    indent = { next: "@>_indent&-_indent" };
  } else if (typeof indent == "string") {
    indent = { next: indent };
  }
  ;
  if (outdent == -1) {
    outdent = repop;
  }
  ;
  if (stay == -1) {
    stay = repop;
  } else if (stay == 0) {
    o.comment == null ? o.comment = true : o.comment;
    stay = {};
  }
  ;
  indent = Object.assign({ token: "white.tabs" }, indent || {});
  stay = Object.assign({ token: "white.tabs" }, stay || {});
  outdent = Object.assign({ token: "@rematch", next: "@pop" }, outdent || {});
  let cases = {
    "$1==$S2	": indent,
    "$1==$S2": {
      cases: { "$1==$S6": stay, "@default": { token: "@rematch", switchTo: "@*$1" } }
    },
    "@default": outdent
  };
  v$\u03C6 = 0;
  for (let k of ["next", "switchTo"]) {
    let v = v$\u03C6++;
    if (indent[k] && indent[k].indexOf("*") == -1) {
      indent[k] += "*$1";
    }
    ;
  }
  ;
  let rule = [/^(\t*)(?=[^ \t\n])/, { cases }];
  if (o.comment) {
    let clones = {};
    for (let i\u03C6 = 0, keys\u03C6 = Object.keys(cases), l\u03C6 = keys\u03C6.length, k, v; i\u03C6 < l\u03C6; i\u03C6++) {
      k = keys\u03C6[i\u03C6];
      v = cases[k];
      let clone = Object.assign({}, v);
      if (!clone.next && !clone.switchTo) {
        clone.next = "@>_comment";
      }
      ;
      clones[k] = clone;
    }
    ;
    return [[/^(\t*)(?=#\s|#$)/, { cases: clones }], rule];
  }
  ;
  return rule;
}
function rewrite\u039Estate(raw) {
  let state = ["$S1", "$S2", "$S3", "$S4", "$S5", "$S6"];
  if (raw.match(/\@(pop|push|popall)/)) {
    return raw;
  }
  ;
  if (raw[0] == "@") {
    raw = raw.slice(1);
  }
  ;
  if (raw.indexOf(".") >= 0) {
    return raw;
  }
  ;
  raw = rewrite\u039Etoken(raw);
  if (raw[0] == ">") {
    state[1] = "$S6	";
    raw = raw.slice(1);
  }
  ;
  for (let i\u03C62 = 0, items\u03C6 = iter$__2(raw.split(/(?=[\/\&\=\*])/)), len\u03C6 = items\u03C6.length; i\u03C62 < len\u03C6; i\u03C62++) {
    let part = items\u03C6[i\u03C62];
    if (part[0] == "&") {
      if (part[1] == "-" || part[1] == "_") {
        state[2] = "$S3" + part.slice(1);
      } else {
        state[2] = "$S3-" + part.slice(1);
      }
      ;
    } else if (part[0] == "+") {
      state[3] = "$S4-" + part.slice(1);
    } else if (part[0] == "=") {
      state[3] = part.slice(1);
    } else if (part[0] == "/") {
      state[4] = part.slice(1);
    } else if (part[0] == "*") {
      state[5] = part.slice(1);
    } else {
      state[0] = part;
    }
    ;
  }
  ;
  return state.join(".");
}
function rewrite\u039Etoken(raw) {
  let orig = raw;
  raw = raw.replace("$/", "$S5");
  raw = raw.replace("$F", "$S4");
  raw = raw.replace("$&", "$S3");
  raw = raw.replace("$I", "$S2");
  raw = raw.replace("$T", "$S2");
  return raw;
}
function rewrite\u039Eactions(actions, add) {
  if (typeof actions == "string") {
    actions = { token: actions };
  }
  ;
  if (actions && actions.token != void 0) {
    actions.token = rewrite\u039Etoken(actions.token);
    if (typeof add == "string") {
      actions.next = add;
    } else if (add) {
      Object.assign(actions, add);
    }
    ;
    if (actions.next) {
      actions.next = rewrite\u039Estate(actions.next);
    }
    ;
    if (actions.switchTo) {
      actions.switchTo = rewrite\u039Estate(actions.switchTo);
    }
    ;
  } else if (actions && actions.cases) {
    let cases = {};
    for (let o\u03C6 = actions.cases, i\u03C63 = 0, keys\u03C62 = Object.keys(o\u03C6), l\u03C62 = keys\u03C62.length, k, v; i\u03C63 < l\u03C62; i\u03C63++) {
      k = keys\u03C62[i\u03C63];
      v = o\u03C6[k];
      let newkey = rewrite\u039Etoken(k);
      cases[newkey] = rewrite\u039Eactions(v);
    }
    ;
    actions.cases = cases;
  } else if (actions instanceof Array) {
    let result = [];
    let curr = null;
    for (let i = 0, items\u03C62 = iter$__2(actions), len\u03C62 = items\u03C62.length; i < len\u03C62; i++) {
      let action = items\u03C62[i];
      if (action[0] == "@" && i == actions.length - 1 && curr) {
        action = { next: action };
      }
      ;
      if (typeof action == "object") {
        if (action.token != void 0 || action.cases) {
          result.push(curr = Object.assign({}, action));
        } else {
          Object.assign(curr, action);
        }
        ;
      } else if (typeof action == "string") {
        result.push(curr = { token: rewrite\u039Etoken(action) });
      }
      ;
    }
    ;
    actions = result;
  }
  ;
  if (actions instanceof Array) {
    for (let i = 0, items\u03C63 = iter$__2(actions), len\u03C63 = items\u03C63.length; i < len\u03C63; i++) {
      let action = items\u03C63[i];
      if (action.token && action.token.indexOf("$$") >= 0) {
        action.token = action.token.replace("$$", "$" + (i + 1));
      }
      ;
      if (action.next) {
        action.next = rewrite\u039Estate(action.next);
      }
      ;
      if (action.switchTo) {
        action.switchTo = rewrite\u039Estate(action.switchTo);
      }
      ;
    }
    ;
  }
  ;
  return actions;
}
var eolpop, repop, toodeep, states, grammar;
var init_grammar = __esm({
  "src/program/grammar.imba"() {
    eolpop = [/^/, { token: "@rematch", next: "@pop" }];
    repop = { token: "@rematch", next: "@pop" };
    toodeep = { token: "white.indent", next: "@>illegal_indent" };
    states = {
      root: [
        [/^@comment/, "comment", "@>_comment"],
        [/^(\t+)(?=[^\t\n])/, { cases: {
          "$1==$S2	": { token: "white.indent", next: "@>_indent*$1" },
          "@default": "white.indent"
        } }],
        "block_"
      ],
      _comment: [
        [/^([\t\s\n]*)$/, "comment"],
        [/^(\t*)([\S\s]*)/, { cases: {
          "$1~$S2	*": { token: "comment" },
          "@default": { token: "@rematch", next: "@pop" }
        } }],
        [/[\S\s]+/, "comment"]
      ],
      illegal_indent: [
        denter()
      ],
      identifier_: [
        [/\$\w+\$/, "identifier.env"],
        [/\$\d+/, "identifier.special"],
        [/\#+@id/, "identifier.symbol"],
        [/\¶@id/, "ivar"],
        [/@id\!?/, { cases: {
          this: "this",
          self: "self",
          "@keywords": "keyword.$#",
          "$0~[A-Z].*": "identifier.uppercase.$F",
          "@default": "identifier.$F"
        } }]
      ],
      block_: [
        [/^(\t+)(?=[\r\n]|$)/, "white.tabs"],
        "class_",
        "tagclass_",
        "var_",
        "func_",
        "import_",
        "export_",
        "flow_",
        "for_",
        "try_",
        "catch_",
        "while_",
        "css_",
        "tag_",
        "do_",
        "block_comment_",
        "expr_",
        [/[ ]+/, "white"],
        "common_"
      ],
      indentable_: [
        [/^[ ]+/, "white"],
        denter("@>_paren_indent&-_indent", null, null),
        [/^(\t+)(?=[\r\n]|$)/, "white.tabs"],
        "whitespace"
      ],
      _indent: [
        denter(2, -1, 0),
        "block_"
      ],
      _paren_indent: [
        denter(2, -1, 0),
        "block_",
        [/\)|\}|\]/, "@rematch", "@pop"]
      ],
      block: [
        denter("@>", -1, 0),
        "block_"
      ],
      bool_: [
        [/(true|false|yes|no|undefined|null)(?![\:\-\w\.\_])/, "boolean"]
      ],
      op_: [
        [/\s+\:\s+/, "operator.ternary"],
        [/(@unspaced_ops)/, { cases: {
          "@spread": "operator.spread",
          "@access": "operator.access",
          "@default": "operator"
        } }],
        [/\/(?!\/)/, "operator.math"],
        [/\&(?=[,\)])/, "operator.special.blockparam"],
        [/(\s*)(@symbols)(\s*)/, { cases: {
          "$2@assignments": "operator.assign",
          "$2@math": "operator.math",
          "$2@operators": "operator",
          "$2@logic": "operator.logic",
          "$2@access": "operator.access",
          "@default": "delimiter"
        } }],
        [/\&\b/, "operator"]
      ],
      keyword_: [
        [/new@B/, "keyword.new"],
        [/isa@B/, "keyword.isa"],
        [/is@B/, "keyword.is"],
        [/(switch|when|throw|continue|break|then|await|typeof|by)@B/, "keyword.$1"],
        [/delete@B/, "keyword.delete"],
        [/and@B|or@B/, "operator.flow"]
      ],
      return_: [
        [/return@B/, "keyword.new"]
      ],
      primitive_: [
        "string_",
        "number_",
        "regexp_",
        "bool_"
      ],
      value_: [
        "primitive_",
        "keyword_",
        "implicit_call_",
        "parens_",
        "key_",
        "access_",
        "identifier_",
        "array_",
        "object_"
      ],
      expr_: [
        "comment_",
        "inline_var_",
        "return_",
        "value_",
        "tag_",
        "op_",
        "type_",
        "spread_"
      ],
      attr_expr_: [
        "primitive_",
        "parens_",
        "access_",
        "identifier_",
        "array_",
        "object_",
        "tag_",
        "op_"
      ],
      access_: [
        [/(\.\.?)(@propid\!?)/, { cases: {
          "$2~[A-Z].*": ["operator.access", "accessor.uppercase"],
          "$2~#.*": ["operator.access", "accessor.symbol"],
          "@default": ["operator.access", "accessor"]
        } }]
      ],
      call_: [
        [/\(/, "(", "@call_body"]
      ],
      key_: [
        [/(\#+@id)(\:\s*)/, ["key.symbol", "operator.assign.key-value"]],
        [/(@propid)(\:\s*)/, { cases: {
          "@default": ["key", "operator.assign.key-value"]
        } }]
      ],
      implicit_call_: [
        [/(\.\.?)(@propid)@implicitCall/, { cases: {
          "$2~[A-Z].*": ["operator.access", "accessor.uppercase", "@implicit_call_body"],
          "@default": ["operator.access", "accessor", "@implicit_call_body"]
        } }],
        [/(@propid)@implicitCall/, { cases: {
          "$2~[A-Z].*": ["identifier.uppercase", "@implicit_call_body"],
          "@default": ["identifier", "@implicit_call_body"]
        } }]
      ],
      implicit_call_body: [
        eolpop,
        [/\)|\}|\]|\>/, "@rematch", "@pop"],
        "arglist_",
        "whitespace"
      ],
      arglist_: [
        "do_",
        "expr_",
        [/\s*\,\s*/, "delimiter.comma"]
      ],
      params_: [
        [/\[/, "array.[", "@array_var_body=decl-param"],
        [/\{/, "object.{", "@object_body=decl-param"],
        [/(@variable)/, "identifier.decl-param"],
        "spread_",
        "type_",
        [/\s*\=\s*/, "operator", "@var_value="],
        [/\s*\,\s*/, "separator"]
      ],
      object_: [
        [/\{/, "object.{", "@object_body"]
      ],
      parens_: [
        [/\(/, "parens.(", "@parens_body"]
      ],
      parens_body: [
        [/\)/, ")", "@pop"],
        "indentable_",
        "arglist_"
      ],
      array_: [
        [/\[/, "array.[", "@array_body"]
      ],
      array_body: [
        [/\]@implicitCall/, { token: "]", switchTo: "@implicit_call_body=" }],
        [/\]/, "]", "@pop"],
        [/\)|\}/, "invalid"],
        "indentable_",
        "expr_",
        [",", "delimiter"]
      ],
      object_body: [
        [/\}/, "}", "@pop"],
        [/(@id)(\s*:\s*)/, ["key", "operator.assign.key-value", "@object_value"]],
        [/(@id)/, "identifier.$F"],
        [/\[/, "[", "@object_dynamic_key="],
        [/\s*=\s*/, "operator.assign", "@object_value="],
        [/:/, "operator.assign.key-value", "@object_value="],
        [/\,/, "delimiter.comma"],
        "indentable_",
        "expr_"
      ],
      object_value: [
        eolpop,
        [/,|\}|\]|\)/, "@rematch", "@pop"],
        "expr_"
      ],
      object_dynamic_key: [
        ["]", "]", "@pop"],
        "expr_"
      ],
      comment_: [
        [/#(\s.*)?(\n|$)/, "comment"]
      ],
      block_comment_: [
        [/###/, "comment.start", "@_block_comment"]
      ],
      _block_comment: [
        [/###/, "comment.end", "@pop"],
        [/[^#]+/, "comment"],
        [/#(?!##)/, "comment"]
      ],
      try_: [
        [/try@B/, "keyword.try", "@>_try&try"]
      ],
      catch_: [
        [/(catch\s+)(?=@id(\s|$))/, "keyword.catch", "@catch_start&catch"],
        [/catch@B/, "keyword.catch", "@catch_start&catch"]
      ],
      catch_start: [
        [/@id/, "identifier.decl-const", { switchTo: "@>_catch" }],
        [/.?/, "@rematch", { switchTo: "@>_catch" }]
      ],
      _catch: [
        denter("@>block", -1, 0),
        "block_"
      ],
      _try: [
        denter("@>block", -1, 0),
        "block_"
      ],
      do_: [
        [/do(?=\()/, "keyword.do", "@>do_start&do"],
        [/do(?=\s*\|)/, "keyword.do", "@>do_piped&do"],
        [/do@B/, "keyword.do", "@>_do&do"]
      ],
      do_start: [
        denter(null, -1, -1),
        [/\(/, "(", { switchTo: "@_do_params" }],
        [/./, "@rematch", { switchTo: "@_do" }]
      ],
      do_piped: [
        denter(null, -1, -1),
        [/\s*\|/, "args.open", { switchTo: "@_do_piped_params" }],
        [/./, "@rematch", { switchTo: "@_do" }]
      ],
      _do_piped_params: [
        [/\|/, "args.close", { switchTo: "@_do" }],
        "params_"
      ],
      _do_params: [
        [/\)/, ")", { switchTo: "@_do" }],
        "params_"
      ],
      _do: [
        denter(2, -1, 0),
        [/(\}|\)|\])/, "@rematch", "@pop"],
        "block_"
      ],
      class_: [
        [/(extend)(?=\s+class )/, "keyword.$1"],
        [/(global)(?=\s+class )/, "keyword.$1"],
        [/(class)(\s)(@id)/, ["keyword.$1", "white.$1name", "entity.name.class.decl-const", "@class_start="]],
        [/(class)(?=\n)/, "keyword.$1", "@>_class&class="]
      ],
      class_start: [
        [/(\s+\<\s+)(@id)/, ["keyword.extends", "identifier.superclass"]],
        [/@comment/, "comment"],
        [/^/, "@rematch", { switchTo: "@>_class&class=" }]
      ],
      tagclass_: [
        [/(extend)(?=\s+tag )/, "keyword.$1"],
        [/(global)(?=\s+tag )/, "keyword.$1"],
        [/(tag)(\s)(@constant)/, ["keyword.tag", "white.tagname", "entity.name.component.local", "@tagclass_start="]],
        [/(tag)(\s)(@id)/, ["keyword.tag", "white.tagname", "entity.name.component.global", "@tagclass_start="]]
      ],
      tagclass_start: [
        [/(\s+\<\s+)(@id)/, ["keyword.extends", "identifier.superclass"]],
        [/@comment/, "comment"],
        [/^/, "@rematch", { switchTo: "@>_tagclass&component=" }]
      ],
      import_: [
        [/(import)(?=\s+['"])/, "keyword.import", "@>import_source"],
        [/(import)(\s+type)(?=\s[\w\$\@\{])/, ["keyword.import", "keyword.type", "@>import_body&-_imports=decl-import/part"]],
        [/(import)@B/, "keyword.import", "@>import_body&-_imports=decl-import/part"]
      ],
      import_body: [
        denter(null, -1, 0),
        [/(@esmIdentifier)( +from)/, ["identifier.$F.default", "keyword.from", { switchTo: "@import_source" }]],
        [/(\*)(\s+as\s+)(@esmIdentifier)(\s+from)/, ["keyword.star", "keyword.as", "identifier.$F.ns", "keyword.from", { switchTo: "@import_source" }]],
        [/(@esmIdentifier)(\s*,\s*)(\*)(\s+as\s+)(@esmIdentifier)(from)/, ["identifier.$F.default", "delimiter.comma", "keyword.star", "keyword.as", "identifier.$F.ns", "keyword.from", { switchTo: "@import_source" }]],
        [/\ *from/, "keyword.from", { switchTo: "@import_source" }],
        [/\{/, "specifiers.{", "@esm_specifiers/part"],
        [/(@esmIdentifier)/, "identifier.$F", { switchTo: "@/delim" }],
        [/\s*\,\s*/, "delimiter.comma", { switchTo: "@/part" }],
        "comma_",
        "common_"
      ],
      import_source: [
        denter(null, -1, 0),
        [/["']/, "path.open", "@_path=$#"],
        eolpop
      ],
      export_: [
        [/(export)( +)(default)@B/, ["keyword.export", "white", "keyword.default"]],
        [/(export)(?= +(let|const|var|class|tag)@B)/, "keyword.export"],
        [/(export)( +)(global)@B/, ["keyword.export", "white", "keyword.global"]],
        [/(export)(\s+\*\s+)(from)@B/, ["keyword.export", "operator.star", "keyword.from", "@>import_source"]],
        [/(export)@B/, "keyword.export", "@>export_body"]
      ],
      export_body: [
        denter(null, -1, 0),
        [/(\*)(\s+as\s+)(@esmIdentifier)/, ["keyword.star", "keyword.as", "identifier.const.export"]],
        [/(@esmIdentifier)(\s+as\s+)(default)/, ["alias", "keyword.as", "alias.default"]],
        [/(@esmIdentifier)(\s+as\s+)(@esmIdentifier)/, ["alias", "keyword.as", "identifier.const.export"]],
        [/from/, "keyword.from", { switchTo: "@import_source" }],
        [/\{/, "{", "@esm_specifiers=export/part"],
        [/(@esmIdentifier)/, "identifier.const.export"],
        [/\*/, "operator.star"],
        "comma_",
        "common_"
      ],
      esm_specifiers: [
        [/\}/, "}", "@pop"],
        [/(@esmIdentifier)(\s+as\s+)(@esmIdentifier)/, ["alias", "keyword.as", "identifier.const.$F", { switchTo: "@/delim" }]],
        [/@esmIdentifier/, { cases: {
          "$/==part": { token: "identifier.const.$S4", switchTo: "@/delim" },
          "@default": { token: "invalid" }
        } }],
        [/\s*\,\s*/, "delimiter.comma", { switchTo: "@/part" }],
        "whitespace"
      ],
      _path: [
        [/[^"'\`\{\\]+/, "path"],
        [/@escapes/, "path.escape"],
        [/\./, "path.escape.invalid"],
        [/\{/, "invalid"],
        [/["'`]/, { cases: { "$#==$F": { token: "path.close", next: "@pop" }, "@default": "path" } }]
      ],
      member_: [
        [/(constructor)@B/, "entity.name.constructor", "@>def_params&def/def"],
        [/(def|get|set)(\s)(@defid)/, ["keyword.$1", "white.entity", "entity.name.$1", "@>def_params&$1/$1"]],
        [/(def|get|set)(\s)(\[)/, ["keyword.$1", "white.entity", "$$", "@>def_dynamic_name/$1"]]
      ],
      func_: [
        [/export(?=\s+(get|set|def|global) )/, "keyword.export"],
        [/global(?=\s+(get|set|def) )/, "keyword.global"],
        [/(def)(\s)(@id)(\.)(@defid)/, [
          "keyword.$1",
          "white.entity",
          "identifier.target",
          "operator",
          "entity.name.def",
          "@>def_params&$1/$1"
        ]],
        [/(def)(\s)(@defid)/, ["keyword.$1", "white.entity", "entity.name.function.decl-const-func", "@>def_params&$1/$1"]]
      ],
      flow_: [
        [/(if|else|elif|unless)(?=\s|$)/, ["keyword.$1", "@flow_start=$1"]]
      ],
      flow_start: [
        denter({ switchTo: "@>_flow&$F" }, -1, -1),
        [/[ \t]+/, "white"],
        "expr_"
      ],
      for_: [
        [/for(?: own)?@B/, "keyword.$#", "@for_start&forscope=decl-for"]
      ],
      while_: [
        [/(while|until)@B/, "keyword.$#", "@>while_body"]
      ],
      while_body: [
        denter(2, -1, 0),
        "block_"
      ],
      for_start: [
        denter({ switchTo: "@>for_body" }, -1, -1),
        [/\[/, "array.[", "@array_var_body"],
        [/\{/, "object.{", "@object_body"],
        [/(@variable)/, "identifier.$F"],
        [/(\s*\,\s*)/, "separator", "@=decl-for-index"],
        [/\s(in|of)@B/, "keyword.$1", { switchTo: "@>for_source=" }],
        [/[ \t]+/, "white"],
        "type_"
      ],
      for_source: [
        denter({ switchTo: "@>for_body" }, -1, { switchTo: "@for_body" }),
        "expr_",
        [/[ \t]+/, "white"]
      ],
      for_body: [
        denter(2, -1, 0),
        "block_"
      ],
      decorator_: [
        [/(@decid)(\()/, ["decorator", "$2", "@_decorator_params"]],
        [/(@decid)/, "decorator"]
      ],
      _decorator_params: [
        [/\)/, ")", "@pop"],
        "params_"
      ],
      field_: [
        [/((?:lazy )?)((?:static )?)(const|let|attr)(?=\s|$)/, ["keyword.lazy", "keyword.static", "keyword.$1", "@_vardecl=field-$3"]],
        [/(static\s+)(?=@fieldid)/, "keyword.static"],
        [/(@fieldid)(?=$)/, "entity.name.field"],
        [/(@fieldid)/, ["entity.name.field", "@_field_1"]]
      ],
      _field_1: [
        denter(null, -1, -1),
        "type_",
        [/(\s*=)(?!\=)/, ["operator.assign", "@>_field_value&field"]],
        [/(\s*(?:\@)set\s*)/, ["keyword.spy", "@>_def&spy"]]
      ],
      _field_value: [
        denter(2, -1, 0),
        "block_",
        [/(\s*(?:\@)set\s*)/, ["@rematch", "@pop"]]
      ],
      var_: [
        [/((?:export )?)(const|let)(?=\s[\[\{\$a-zA-Z]|\s*$)/, ["keyword.export", "keyword.$1", "@_vardecl=decl-$2"]],
        [/((?:export )?)(const|let)(?=\s|$)/, ["keyword.export", "keyword.$1"]]
      ],
      inline_var_: [
        [/(const|let)(?=\s[\[\{\$a-zA-Z]|\s*$)/, ["keyword.$1", "@inline_var_body=decl-$1"]]
      ],
      string_: [
        [/"""/, "string", '@_herestring="""'],
        [/'''/, "string", "@_herestring='''"],
        [/["'`]/, "string.open", "@_string=$#"]
      ],
      number_: [
        [/0[xX][0-9a-fA-F_]+/, "number.hex"],
        [/0[b][01_]+/, "number.binary"],
        [/0[o][0-9_]+/, "number.octal"],
        [/(\d+)([a-z]+|\%)/, ["number", "unit"]],
        [/(\d*\.\d+(?:[eE][\-+]?\d+)?)([a-z]+|\%)/, ["number.float", "unit"]],
        [/\d+[eE]([\-+]?\d+)?/, "number.float"],
        [/\d[\d_]*\.\d[\d_]*([eE][\-+]?\d+)?/, "number.float"],
        [/\d[\d_]*/, "number.integer"],
        [/0[0-7]+(?!\d)/, "number.octal"],
        [/\d+/, "number"]
      ],
      _string: [
        [/[^"'\`\{\\]+/, "string"],
        [/@escapes/, "string.escape"],
        [/\./, "string.escape.invalid"],
        [/\{/, { cases: {
          "$F=='": "string",
          "@default": { token: "string.bracket.open", next: "@interpolation_body" }
        } }],
        [/["'`]/, { cases: { "$#==$F": { token: "string.close", next: "@pop" }, "@default": "string" } }],
        [/#/, "string"]
      ],
      _herestring: [
        [/("""|''')/, { cases: { "$1==$F": { token: "string", next: "@pop" }, "@default": "string" } }],
        [/[^#\\'"\{]+/, "string"],
        [/['"]+/, "string"],
        [/@escapes/, "string.escape"],
        [/\./, "string.escape.invalid"],
        [/\{/, { cases: { '$F=="""': { token: "string", next: "@interpolation_body" }, "@default": "string" } }],
        [/#/, "string"]
      ],
      interpolation_body: [
        [/\}/, "string.bracket.close", "@pop"],
        "expr_"
      ],
      _class: [
        denter(toodeep, -1, 0),
        "css_",
        "member_",
        "comment_",
        "decorator_",
        [/(get|set|def|static|prop|attr)@B/, "keyword.$0"],
        "field_",
        "common_"
      ],
      _tagclass: [
        "_class",
        [/(?=\<self)/, "entity.name.def.render", "@_render&def"]
      ],
      def_params: [
        [/\(/, "(", "@def_parens"],
        [/^/, "@rematch", { switchTo: "@_def" }],
        [/do@B/, "keyword.do", { switchTo: "@_def" }],
        "params_",
        [/@comment/, "comment"]
      ],
      def_parens: [
        [/\)/, ")", "@pop"],
        "params_"
      ],
      def_dynamic_name: [
        ["]", { token: "square.close", switchTo: "@def_params&$/" }],
        "expr_"
      ],
      _render: [
        denter(2, -1, -1),
        "block_"
      ],
      _def: [
        denter(2, -1, 0),
        "block_"
      ],
      _flow: [
        denter(2, -1, 0),
        "block_"
      ],
      _varblock: [
        denter(1, -1, -1),
        [/\[/, "array.[", "@array_var_body"],
        [/\{/, "object.{", "@object_body"],
        [/(@variable)/, "identifier.$F"],
        [/\s*\,\s*/, "separator"],
        [/(\s*\=\s*)(?=(for|while|until|if|unless|try)\s)/, "operator", "@pop"],
        [/(\s*\=\s*)/, "operator", "@var_value="],
        "type_",
        [/#(\s.*)?\n?$/, "comment"]
      ],
      _vardecl: [
        denter(null, -1, -1),
        [/\[/, "array.[", "@array_var_body"],
        [/\{/, "object.{", "@object_body"],
        [/(@variable)(?=\n|,|$)/, "identifier.$F", "@pop"],
        [/(@variable)/, "identifier.$F"],
        [/(\s*\=\s*)/, "operator.declval", { switchTo: "@var_value&value=" }],
        "type_"
      ],
      array_var_body: [
        [/\]/, "]", "@pop"],
        [/\{/, "object.{", "@object_body"],
        [/\[/, "array.[", "@array_var_body"],
        "spread_",
        [/(@variable)/, "identifier.$F"],
        [/(\s*\=\s*)/, "operator.assign", "@array_var_body_value="],
        [",", "delimiter"]
      ],
      array_var_body_value: [
        [/(?=,|\)|]|})/, "delimiter", "@pop"],
        "expr_"
      ],
      inline_var_body: [
        [/\[/, "array.[", "@array_var_body"],
        [/\{/, "object.{", "@object_body"],
        [/(@variable)/, "identifier.$F"],
        [/(\s*\=\s*)/, "operator", "@pop"],
        "type_"
      ],
      var_value: [
        [/(?=,|\)|]|})/, "delimiter", "@pop"],
        denter({ switchTo: "@>block" }, -1, -1),
        "block_"
      ],
      common_: [
        [/^(\t+)(?=\n|$)/, "white.tabs"],
        "whitespace"
      ],
      comma_: [
        [/\s*,\s*/, "delimiter.comma"]
      ],
      spread_: [
        [/\.\.\./, "operator.spread"]
      ],
      type_: [
        [/\\/, "@rematch", "@_type&-_type/0"]
      ],
      _type: [
        denter(-1, -1, -1),
        [/\\/, "delimiter.type.prefix"],
        [/\[/, "delimiter.type", "@/]"],
        [/\(/, "delimiter.type", "@/)"],
        [/\{/, "delimiter.type", "@/}"],
        [/\</, "delimiter.type", "@/>"],
        [/\|/, "delimiter.type.union"],
        [/\,|\s|\=|\./, {
          cases: {
            "$/==0": { token: "@rematch", next: "@pop" },
            "@default": "type"
          }
        }],
        [/[\]\}\)\>]/, {
          cases: {
            "$#==$/": { token: "delimiter.type", next: "@pop" },
            "@default": { token: "@rematch", next: "@pop" }
          }
        }],
        [/[\w\-\$]+/, "type"]
      ],
      css_: [
        [/global(?=\s+css@B)/, "keyword.$#"],
        [/css(?:\s+)?/, "keyword.css", "@>css_selector&rule-_sel"]
      ],
      sel_: [
        [/(\%)((?:@id)?)/, ["style.selector.mixin.prefix", "style.selector.mixin"]],
        [/(\@)(\.{0,2}[\w\-\<\>\!]*\+?)/, "style.selector.modifier"],
        [/(\@)(\.{0,2}[\w\-\<\>\!]*)/, "style.selector.modifier"],
        [/\.([\w\-]+)/, "style.selector.class-name"],
        [/\#([\w\-]+)/, "style.selector.id"],
        [/([\w\-]+)/, "style.selector.element"],
        [/(>+|~|\+)/, "style.selector.operator"],
        [/(\*+)/, "style.selector.element.any"],
        [/(\$)((?:@id)?)/, ["style.selector.reference.prefix", "style.selector.reference"]],
        [/\&/, "style.selector.context"],
        [/\(/, "delimiter.selector.parens.open", "@css_selector_parens"],
        [/\[/, "delimiter.selector.attr.open", "@css_selector_attr"],
        [/\s+/, "white"],
        [/,/, "style.selector.delimiter"],
        [/#(\s.*)?\n?$/, "comment"]
      ],
      css_props: [
        denter(null, -1, 0),
        [/(?=@cssPropertyKey)/, "", "@css_property&-_styleprop-_stylepropkey"],
        [/#(\s.*)?\n?$/, "comment"],
        [/(?=[\%\*\w\&\$\>\.\[\@\!]|\#[\w\-])/, "", "@>css_selector&rule-_sel"],
        [/\s+/, "white"]
      ],
      css_selector: [
        denter({ switchTo: "@css_props" }, -1, { token: "@rematch", switchTo: "@css_props&_props" }),
        [/(\}|\)|\])/, "@rematch", "@pop"],
        [/(?=\s*@cssPropertyKey)/, "", { switchTo: "@css_props&_props" }],
        [/\s*#\s/, "@rematch", { switchTo: "@css_props&_props" }],
        "sel_"
      ],
      css_inline: [
        [/\]/, "style.close", "@pop"],
        [/(?=@cssPropertyKey)/, "", "@css_property&-_styleprop-_stylepropkey"],
        [/(?=@cssPropertyPath\])/, "", "@css_property&-_styleprop-_stylepropkey"]
      ],
      css_selector_parens: [
        [/\)/, "delimiter.selector.parens.close", "@pop"],
        "sel_"
      ],
      css_selector_attr: [
        [/\]/, "delimiter.selector.parens.close", "@pop"],
        "sel_"
      ],
      css_property: [
        denter(null, -1, -1),
        [/\]/, "@rematch", "@pop"],
        [/(\d+)(@id)/, ["style.property.unit.number", "style.property.unit.name"]],
        [/((--|\$)@id)/, "style.property.var"],
        [/(-*@id)/, "style.property.name"],
        [/@cssModifier/, "style.property.modifier"],
        [/(\@+|\.+)(@id\-?)/, ["style.property.modifier.start", "style.property.modifier"]],
        [/\+(@id)/, "style.property.scope"],
        [/\s*([\:\=]\s*)(?=@br|$)/, "style.property.operator", { switchTo: "@>css_multiline_value&_stylevalue" }],
        [/\s*([\:\=]\s*)/, "style.property.operator", { switchTo: "@>css_value&_stylevalue" }]
      ],
      css_value_: [
        [/(x?xs|sm\-?|md\-?|lg\-?|xx*l|\dxl|hg|x+h)\b/, "style.value.size"],
        [/\#[0-9a-fA-F]+/, "style.value.color.hex"],
        [/((--|\$)@id)/, "style.value.var"],
        [/(@optid)(\@+|\.+)(@optid)/, ["style.property.name", "style.property.modifier.prefix", "style.property.modifier"]],
        "op_",
        "string_",
        "number_",
        "comment_",
        [/\s+/, "style.value.white"],
        [/\(/, "delimiter.style.parens.open", "@css_expressions"],
        [/\{/, "delimiter.style.curly.open", "@css_interpolation&-_styleinterpolation"],
        [/(@id)/, "style.value"]
      ],
      css_value: [
        denter({ switchTo: "@>css_multiline_value" }, -1, -1),
        [/@cssPropertyKey/, "@rematch", "@pop"],
        [/;/, "style.delimiter", "@pop"],
        [/(\}|\)|\])/, "@rematch", "@pop"],
        "css_value_"
      ],
      css_multiline_value: [
        denter(null, -1, 0),
        [/@cssPropertyKey/, "invalid"],
        "css_value_"
      ],
      css_expressions: [
        [/\)/, "delimiter.style.parens.close", "@pop"],
        [/\(/, "delimiter.style.parens.open", "@css_expressions"],
        "css_value"
      ],
      css_interpolation: [
        [/\}/, "delimiter.style.curly.close", "@pop"],
        "expr_"
      ],
      expressions: [
        [/\,/, "delimiter.comma"]
      ],
      whitespace: [
        [/[\r\n]+/, "br"],
        [/[ \t\r\n]+/, "white"]
      ],
      space: [
        [/[ \t]+/, "white"]
      ],
      tag_: [
        [/(\s*)(<)(?=\.)/, ["white", "tag.open", "@_tag/flag"]],
        [/(\s*)(<)(?=\w|\{|\[|\%|\#|>)/, ["white", "tag.open", "@_tag/name"]]
      ],
      tag_content: [
        denter(2, -1, 0),
        [/\)|\}|\]/, "@rematch", "@pop"],
        "common_",
        "flow_",
        "var_",
        "for_",
        "css_",
        "expr_",
        "do_"
      ],
      tag_children: [],
      _tag: [
        [/\/>/, "tag.close", "@pop"],
        [/>/, "tag.close", { switchTo: "@>tag_content=&-_tagcontent" }],
        [/>/, "tag.close", "@pop"],
        [/(\-?\d+)/, "tag.$S3"],
        [/(\%)(@id)/, ["tag.mixin.prefix", "tag.mixin"]],
        [/\#@id/, "tag.id"],
        [/\./, { cases: {
          "$/==event": { token: "tag.event-modifier.start", switchTo: "@/event-modifier" },
          "$/==event-modifier": { token: "tag.event-modifier.start", switchTo: "@/event-modifier" },
          "$/==modifier": { token: "tag.modifier.start", switchTo: "@/modifier" },
          "$/==rule": { token: "tag.rule-modifier.start", switchTo: "@/rule-modifier" },
          "$/==rule-modifier": { token: "tag.rule-modifier.start", switchTo: "@/rule-modifier" },
          "@default": { token: "tag.flag.start", switchTo: "@/flag" }
        } }],
        [/(\$@id)/, { cases: {
          "$/==name": "tag.reference",
          "@default": "tag.$/"
        } }],
        [/\{/, "tag.$/.interpolation.open", "@_tag_interpolation"],
        [/\[/, "style.open", "@css_inline"],
        [/(\s*\=\s*)/, "operator.equals.tagop.tag-$/", "@_tag_value&-value"],
        [/\:/, { token: "tag.event.start", switchTo: "@/event" }],
        "tag_event_",
        [/(\-?@tagIdentifier)(\:@id)?/, { cases: {
          "$/==attr": { token: "@rematch", next: "@_tag_attr&-_tagattr" },
          "@default": { token: "tag.$/" }
        } }],
        [/\(/, { token: "tag.$/.parens.open", next: "@_tag_parens/0" }],
        [/\s+/, { token: "tag.white", switchTo: "@/attr" }],
        "comment_"
      ],
      tag_event_: [
        [/(?=\@@optid)/, "", "@_tag_event&-_listener"]
      ],
      _tag_part: [
        [/\)|\}|\]|\>/, "@rematch", "@pop"]
      ],
      _tag_event: [
        "_tag_part",
        [/(\@)(@optid)/, ["tag.event.start", "tag.event.name"]],
        [/(\.)(@optid)/, ["tag.event-modifier.start", "tag.event-modifier.name"]],
        [/\(/, { token: "tag.$/.parens.open", next: "@_tag_parens/0" }],
        [/(\s*\=\s*)/, "operator.equals.tagop.tag-$/", "@_tag_value&handler"],
        [/\s+/, "@rematch", "@pop"]
      ],
      tag_attr_: [
        [/(?=@tagIdentifier(\:@id)?)/, "", "@_tag_attr&-_attribute"]
      ],
      _tag_attr: [
        "_tag_part",
        [/(\-?@tagIdentifier)(\:@id)?/, "tag.attr"],
        [/\.(@optid)/, "tag.event-modifierzz"],
        [/\(/, { token: "tag.parens.open.$/", next: "@_tag_parens/0" }],
        [/(\s*\=\s*)/, "operator.equals.tagop.tag-$/", "@_tag_value&-tagattrvalue"],
        [/\s+/, "@rematch", "@pop"]
      ],
      _tag_interpolation: [
        [/\}/, "tag.$/.interpolation.close", "@pop"],
        "expr_",
        [/\)|\]/, "invalid"]
      ],
      _tag_parens: [
        [/\)/, "tag.$/.parens.close", "@pop"],
        "arglist_",
        [/\]|\}/, "invalid"]
      ],
      _tag_value: [
        [/(?=(\/?\>|\s))/, "", "@pop"],
        "attr_expr_"
      ],
      regexp_: [
        [/\/(?!\ )(?=([^\\\/]|\\.)+\/)/, { token: "regexp.slash.open", bracket: "@open", next: "@_regexp" }],
        [/\/\/\//, { token: "regexp.slash.open", bracket: "@open", next: "@_hereregexp" }],
        [/(\/)(\/)/, ["regexp.slash.open", "regexp.slash.close"]]
      ],
      _regexp: [
        [/(\{)(\d+(?:,\d*)?)(\})/, ["regexp.escape.control", "regexp.escape.control", "regexp.escape.control"]],
        [/(\[)(\^?)(?=(?:[^\]\\\/]|\\.)+)/, ["regexp.escape.control", { token: "regexp.escape.control", next: "@_regexrange" }]],
        [/(\()(\?:|\?=|\?!)/, ["regexp.escape.control", "regexp.escape.control"]],
        [/[()]/, "regexp.escape.control"],
        [/@regexpctl/, "regexp.escape.control"],
        [/[^\\\/]/, "regexp"],
        [/@regexpesc/, "regexp.escape"],
        [/\\:/, "regexp.escape"],
        [/\\\./, "regexp.invalid"],
        [/(\/)(\w+)/, [{ token: "regexp.slash.close" }, { token: "regexp.flags", next: "@pop" }]],
        ["/", { token: "regexp.slash.close", next: "@pop" }],
        [/./, "regexp.invalid"]
      ],
      _regexrange: [
        [/-/, "regexp.escape.control"],
        [/\^/, "regexp.invalid"],
        [/@regexpesc/, "regexp.escape"],
        [/[^\]]/, "regexp"],
        [/\]/, "regexp.escape.control", "@pop"]
      ],
      _hereregexp: [
        [/[^\\\/#]/, "regexp"],
        [/\\./, "regexp"],
        [/#.*$/, "comment"],
        ["///[igm]*", "regexp", "@pop"],
        [/\//, "regexp"],
        "comment_"
      ]
    };
    for (let i\u03C64 = 0, keys\u03C63 = Object.keys(states), l\u03C63 = keys\u03C63.length, key, rules; i\u03C64 < l\u03C63; i\u03C64++) {
      key = keys\u03C63[i\u03C64];
      rules = states[key];
      let i = 0;
      while (i < rules.length) {
        let rule = rules[i];
        if (rule[0] instanceof Array) {
          rules.splice(i, 1, ...rule);
          continue;
        } else if (typeof rule == "string") {
          rules[i] = { include: rule };
        } else if (rule[1] instanceof Array) {
          rule[1] = rewrite\u039Eactions(rule[1]);
        } else if (rule instanceof Array) {
          rule.splice(1, 2, rewrite\u039Eactions(rule[1], rule[2]));
        }
        ;
        i++;
      }
      ;
    }
    grammar = {
      defaultToken: "invalid",
      ignoreCase: false,
      tokenPostfix: "",
      brackets: [
        { open: "{", close: "}", token: "bracket.curly" },
        { open: "[", close: "]", token: "bracket.square" },
        { open: "(", close: ")", token: "bracket.parenthesis" }
      ],
      keywords: [
        "def",
        "and",
        "or",
        "is",
        "isnt",
        "not",
        "on",
        "yes",
        "@",
        "no",
        "off",
        "true",
        "false",
        "null",
        "this",
        "self",
        "as",
        "new",
        "delete",
        "typeof",
        "in",
        "instanceof",
        "return",
        "throw",
        "break",
        "continue",
        "debugger",
        "if",
        "elif",
        "else",
        "switch",
        "for",
        "while",
        "do",
        "try",
        "catch",
        "finally",
        "class",
        "extends",
        "super",
        "undefined",
        "then",
        "unless",
        "until",
        "loop",
        "of",
        "by",
        "when",
        "tag",
        "prop",
        "attr",
        "export",
        "import",
        "extend",
        "var",
        "let",
        "const",
        "require",
        "isa",
        "await"
      ],
      boolean: ["true", "false", "yes", "no", "undefined", "null"],
      operators: [
        "=",
        "!",
        "~",
        "?",
        ":",
        "!!",
        "??",
        "&",
        "|",
        "^",
        "%",
        "<<",
        "!&",
        ">>",
        ">>>",
        "+=",
        "-=",
        "*=",
        "/=",
        "&=",
        "|=",
        "??=",
        "^=",
        "%=",
        "~=",
        "<<=",
        ">>=",
        ">>>=",
        "..",
        "...",
        "||=",
        `&&=`,
        "**=",
        "**",
        "|=?",
        "~=?",
        "^=?",
        "=?",
        "and",
        "or"
      ],
      assignments: [
        "=",
        "|=?",
        "~=?",
        "^=?",
        "=?",
        "^=",
        "%=",
        "~=",
        "<<=",
        ">>=",
        ">>>=",
        "||=",
        `&&=`,
        "??=",
        "+=",
        "-=",
        "*=",
        "/=",
        "&=",
        "|=",
        "**="
      ],
      logic: [
        ">",
        "<",
        "==",
        "<=",
        ">=",
        "!=",
        "&&",
        "||",
        "===",
        "!=="
      ],
      ranges: ["..", "..."],
      spread: ["..."],
      dot: ["."],
      access: [".", ".."],
      math: ["+", "-", "*", "/", "++", "--"],
      unspaced_ops: regexify("... . .. + * ++ --"),
      comment: /#(\s.*)?(\n|$)/,
      symbols: /[=><!~?&%|+\-*\^,]+/,
      escapes: /\\(?:[abfnrtv\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
      postaccess: /(:(?=\w))?/,
      ivar: /\@[a-zA-Z_]\w*/,
      B: /(?=\s|$)/,
      br: /[\r\n]+/,
      constant: /[A-Z][\w\$]*(?:\-+[\w\$]+)*/,
      id: /[A-Za-z_\$][\w\$]*(?:\-+[\w\$]+)*\??/,
      plainid: /[A-Za-z_\$][\w\$]*(?:\-+[\w\$]+)*\??/,
      fieldid: /[\@\#]*@plainid/,
      propid: /[\@\#]*@plainid/,
      defid: /[\@\#]*@plainid/,
      decid: /\@@plainid/,
      symid: /\#+@plainid/,
      symref: /\#\#@plainid/,
      optid: /(?:@id)?/,
      esmIdentifier: /[A-Za-z_\$\@][\w\$]*(?:\-+[\w\$]+)*\??/,
      propertyPath: /(?:[A-Za-z_\$][A-Za-z\d\-\_\$]*\.)?(?:[A-Za-z_\$][A-Za-z\d\-\_\$]*)/,
      tagNameIdentifier: /(?:[\w\-]+\:)?\w+(?:\-\w+)*/,
      variable: /[\w\$]+(?:-[\w\$]*)*\??/,
      varKeyword: /var|let|const/,
      tagIdentifier: /-*[a-zA-Z][\w\-]*/,
      implicitCall: /(?!\s(?:and|or|is|isa)\s)(?=\s[\w\'\"\/\[\{])/,
      cssModifier: /(?:\@+[\<\>\!]?[\w\-]+\+?|\.+@id\-?)/,
      cssPropertyPath: /[\@\.]*[\w\-\$]+(?:[\@\.]+[\w\-\$]+)*/,
      cssVariable: /(?:--|\$)[\w\-\$]+/,
      cssPropertyName: /[\w\-\$]+/,
      cssPropertyKey: /(?:@cssPropertyName(?:@cssModifier)*|@cssModifier+)(?:\s*[\:\=])/,
      cssUpModifier: /\.\.[\w\-\$]+/,
      cssIsModifier: /\.[\w\-\$]+/,
      regEx: /\/(?!\/\/)(?:[^\/\\]|\\.)*\/[igm]*/,
      regexpctl: /[(){}\[\]\$\^|\-*+?\.]/,
      regexpesc: /\\(?:[bBdDfnrstvwWn0\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,
      tokenizer: states
    };
  }
});
function isFuzzyActionArr(what) {
  return Array.isArray(what);
}
function isFuzzyAction(what) {
  return !isFuzzyActionArr(what);
}
function isString(what) {
  return typeof what === "string";
}
function isIAction(what) {
  return !isString(what);
}
function empty(s) {
  return s ? false : true;
}
function fixCase(lexer2, str) {
  return lexer2.ignoreCase && str ? str.toLowerCase() : str;
}
function sanitize(s) {
  return s.replace(/[&<>'"_]/g, "-");
}
function log(lexer2, msg) {
  console.log(`${lexer2.languageId}: ${msg}`);
}
function createError(lexer2, msg) {
  return new Error(`${lexer2.languageId}: ${msg}`);
}
function compileSubstitution(str) {
  const parts = [];
  let i = 0;
  let l = str.length;
  let part = "";
  let sub = 0;
  while (i < l) {
    let chr = str[i++];
    if (chr == "$") {
      let next = str[i++];
      if (next == "$") {
        part += "$";
        continue;
      }
      if (part)
        parts.push(part);
      part = "";
      if (next == "#") {
        parts.push(0);
      } else if (next == "S") {
        parts.push(parseInt(str[i++]) + 100);
      } else {
        parts.push(parseInt(next) + 1);
      }
    } else {
      part += chr;
    }
  }
  if (part)
    parts.push(part);
  substitutionCache[str] = parts;
  return parts;
}
function substituteMatches(lexer2, str, id, matches, state) {
  let stateMatches = null;
  let parts = substitutionCache[str] || compileSubstitution(str);
  let out = "";
  for (let i = 0; i < parts.length; i++) {
    let part = parts[i];
    if (typeof part == "string") {
      out += part;
    } else if (part > 100) {
      if (stateMatches === null)
        stateMatches = state.split(".");
      out += stateMatches[part - 101] || "";
    } else if (part === 100) {
      out += state;
    } else if (part === 0) {
      out += id;
    } else if (part > 0) {
      out += matches[part - 1];
    }
  }
  return out;
}
function findRules(lexer2, inState) {
  let state = inState;
  if (FIND_RULES_MAP[state]) {
    return lexer2.tokenizer[FIND_RULES_MAP[state]];
  }
  while (state && state.length > 0) {
    const rules = lexer2.tokenizer[state];
    if (rules) {
      FIND_RULES_MAP[inState] = state;
      return rules;
    }
    const idx = state.lastIndexOf(".");
    if (idx < 0) {
      state = null;
    } else {
      state = state.substr(0, idx);
    }
  }
  return null;
}
function stateExists(lexer2, inState) {
  let state = inState;
  while (state && state.length > 0) {
    const exist = lexer2.stateNames[state];
    if (exist) {
      return true;
    }
    const idx = state.lastIndexOf(".");
    if (idx < 0) {
      state = null;
    } else {
      state = state.substr(0, idx);
    }
  }
  return false;
}
var substitutionCache, FIND_RULES_MAP;
var init_common = __esm({
  "src/program/monarch/common.ts"() {
    substitutionCache = {};
    FIND_RULES_MAP = {};
  }
});
function isArrayOf(elemType, obj) {
  if (!obj) {
    return false;
  }
  if (!Array.isArray(obj)) {
    return false;
  }
  for (const el of obj) {
    if (!elemType(el)) {
      return false;
    }
  }
  return true;
}
function bool(prop, defValue) {
  if (typeof prop === "boolean") {
    return prop;
  }
  return defValue;
}
function string(prop, defValue) {
  if (typeof prop === "string") {
    return prop;
  }
  return defValue;
}
function arrayToHash(array) {
  const result = {};
  for (const e of array) {
    result[e] = true;
  }
  return result;
}
function createKeywordMatcher(arr, caseInsensitive = false) {
  if (caseInsensitive) {
    arr = arr.map(function(x) {
      return x.toLowerCase();
    });
  }
  const hash = arrayToHash(arr);
  if (caseInsensitive) {
    return function(word) {
      return hash[word.toLowerCase()] !== void 0 && hash.hasOwnProperty(word.toLowerCase());
    };
  } else {
    return function(word) {
      return hash[word] !== void 0 && hash.hasOwnProperty(word);
    };
  }
}
function compileRegExp(lexer2, str) {
  let n = 0;
  while (str.indexOf("@") >= 0 && n < 5) {
    n++;
    str = str.replace(/@(\w+)/g, function(s, attr) {
      let sub = "";
      if (typeof lexer2[attr] === "string") {
        sub = lexer2[attr];
      } else if (lexer2[attr] && lexer2[attr] instanceof RegExp) {
        sub = lexer2[attr].source;
      } else {
        if (lexer2[attr] === void 0) {
          throw createError(lexer2, "language definition does not contain attribute '" + attr + "', used at: " + str);
        } else {
          throw createError(lexer2, "attribute reference '" + attr + "' must be a string, used at: " + str);
        }
      }
      return empty(sub) ? "" : "(?:" + sub + ")";
    });
  }
  return new RegExp(str, lexer2.ignoreCase ? "i" : "");
}
function selectScrutinee(id, matches, state, num) {
  if (num < 0) {
    return id;
  }
  if (num < matches.length) {
    return matches[num];
  }
  if (num >= 100) {
    num = num - 100;
    let parts = state.split(".");
    parts.unshift(state);
    if (num < parts.length) {
      return parts[num];
    }
  }
  return null;
}
function createGuard(lexer2, ruleName, tkey, val) {
  let scrut = -1;
  let oppat = tkey;
  let matches = tkey.match(/^\$(([sS]?)(\d\d?)|#)(.*)$/);
  if (matches) {
    if (matches[3]) {
      scrut = parseInt(matches[3]);
      if (matches[2]) {
        scrut = scrut + 100;
      }
    }
    oppat = matches[4];
  }
  let op = "~";
  let pat = oppat;
  if (!oppat || oppat.length === 0) {
    op = "!=";
    pat = "";
  } else if (/^\w*$/.test(pat)) {
    op = "==";
  } else {
    matches = oppat.match(/^(@|!@|~|!~|==|!=)(.*)$/);
    if (matches) {
      op = matches[1];
      pat = matches[2];
    }
  }
  let tester;
  if ((op === "~" || op === "!~") && /^(\w|\|)*$/.test(pat)) {
    let inWords = createKeywordMatcher(pat.split("|"), lexer2.ignoreCase);
    tester = function(s) {
      return op === "~" ? inWords(s) : !inWords(s);
    };
  } else if (op === "@" || op === "!@") {
    let words = lexer2[pat];
    if (!words) {
      throw createError(lexer2, "the @ match target '" + pat + "' is not defined, in rule: " + ruleName);
    }
    if (!isArrayOf(function(elem) {
      return typeof elem === "string";
    }, words)) {
      throw createError(lexer2, "the @ match target '" + pat + "' must be an array of strings, in rule: " + ruleName);
    }
    let inWords = createKeywordMatcher(words, lexer2.ignoreCase);
    tester = function(s) {
      return op === "@" ? inWords(s) : !inWords(s);
    };
  } else if (op === "~" || op === "!~") {
    if (pat.indexOf("$") < 0) {
      let re = compileRegExp(lexer2, "^" + pat + "$");
      tester = function(s) {
        return op === "~" ? re.test(s) : !re.test(s);
      };
    } else {
      tester = function(s, id, matches2, state) {
        let re = compileRegExp(lexer2, "^" + substituteMatches(lexer2, pat, id, matches2, state) + "$");
        return re.test(s);
      };
    }
  } else {
    if (pat.indexOf("$") < 0) {
      let patx = fixCase(lexer2, pat);
      tester = function(s) {
        return op === "==" ? s === patx : s !== patx;
      };
    } else {
      let patx = fixCase(lexer2, pat);
      tester = function(s, id, matches2, state, eos) {
        let patexp = substituteMatches(lexer2, patx, id, matches2, state);
        return op === "==" ? s === patexp : s !== patexp;
      };
    }
  }
  if (scrut === -1) {
    return {
      name: tkey,
      value: val,
      test: function(id, matches2, state, eos) {
        return tester(id, id, matches2, state, eos);
      }
    };
  } else {
    return {
      name: tkey,
      value: val,
      test: function(id, matches2, state, eos) {
        let scrutinee = selectScrutinee(id, matches2, state, scrut);
        return tester(!scrutinee ? "" : scrutinee, id, matches2, state, eos);
      }
    };
  }
}
function compileAction(lexer2, ruleName, action) {
  if (!action) {
    return { token: "" };
  } else if (typeof action === "string") {
    return action;
  } else if (action.token || action.token === "") {
    if (typeof action.token !== "string") {
      throw createError(lexer2, "a 'token' attribute must be of type string, in rule: " + ruleName);
    } else {
      let newAction = { token: action.token };
      if (action.token.indexOf("$") >= 0) {
        newAction.tokenSubst = true;
      }
      if (typeof action.bracket === "string") {
        if (action.bracket === "@open") {
          newAction.bracket = 1;
        } else if (action.bracket === "@close") {
          newAction.bracket = -1;
        } else {
          throw createError(lexer2, "a 'bracket' attribute must be either '@open' or '@close', in rule: " + ruleName);
        }
      }
      if (action.next) {
        if (typeof action.next !== "string") {
          throw createError(lexer2, "the next state must be a string value in rule: " + ruleName);
        } else {
          let next = action.next;
          if (!/^(@pop|@push|@popall)$/.test(next)) {
            if (next[0] === "@") {
              next = next.substr(1);
            }
            if (next.indexOf("$") < 0) {
              if (!stateExists(lexer2, substituteMatches(lexer2, next, "", [], ""))) {
                throw createError(lexer2, "the next state '" + action.next + "' is not defined in rule: " + ruleName);
              }
            }
          }
          newAction.next = next;
        }
      }
      if (typeof action.goBack === "number") {
        newAction.goBack = action.goBack;
      }
      if (typeof action.switchTo === "string") {
        newAction.switchTo = action.switchTo;
      }
      if (typeof action.log === "string") {
        newAction.log = action.log;
      }
      if (typeof action._push === "string") {
        newAction._push = action._push;
      }
      if (typeof action._pop === "string") {
        newAction._pop = action._pop;
      }
      if (typeof action.mark === "string") {
        newAction.mark = action.mark;
      }
      if (typeof action.fn === "string") {
        newAction.fn = action.fn;
      }
      if (typeof action.nextEmbedded === "string") {
        newAction.nextEmbedded = action.nextEmbedded;
        lexer2.usesEmbedded = true;
      }
      return newAction;
    }
  } else if (Array.isArray(action)) {
    let results = [];
    for (let i = 0, len = action.length; i < len; i++) {
      results[i] = compileAction(lexer2, ruleName, action[i]);
    }
    return { group: results };
  } else if (action.cases) {
    let cases = [];
    for (let tkey in action.cases) {
      if (action.cases.hasOwnProperty(tkey)) {
        const val = compileAction(lexer2, ruleName, action.cases[tkey]);
        if (tkey === "@default" || tkey === "@" || tkey === "") {
          cases.push({ test: void 0, value: val, name: tkey });
        } else if (tkey === "@eos") {
          cases.push({ test: function(id, matches, state, eos) {
            return eos;
          }, value: val, name: tkey });
        } else {
          cases.push(createGuard(lexer2, ruleName, tkey, val));
        }
      }
    }
    const def = lexer2.defaultToken;
    return {
      test: function(id, matches, state, eos) {
        for (const _case of cases) {
          const didmatch = !_case.test || _case.test(id, matches, state, eos);
          if (didmatch) {
            return _case.value;
          }
        }
        return def;
      }
    };
  } else {
    throw createError(lexer2, "an action must be a string, an object with a 'token' or 'cases' attribute, or an array of actions; in rule: " + ruleName);
  }
}
function compile(languageId, json) {
  if (!json || typeof json !== "object") {
    throw new Error("Monarch: expecting a language definition object");
  }
  let lexer2 = {};
  lexer2.languageId = languageId;
  lexer2.noThrow = false;
  lexer2.maxStack = 100;
  lexer2.start = typeof json.start === "string" ? json.start : null;
  lexer2.ignoreCase = bool(json.ignoreCase, false);
  lexer2.tokenPostfix = string(json.tokenPostfix, "." + lexer2.languageId);
  lexer2.defaultToken = string(json.defaultToken, "source");
  lexer2.usesEmbedded = false;
  let lexerMin = json;
  lexerMin.languageId = languageId;
  lexerMin.ignoreCase = lexer2.ignoreCase;
  lexerMin.noThrow = lexer2.noThrow;
  lexerMin.usesEmbedded = lexer2.usesEmbedded;
  lexerMin.stateNames = json.tokenizer;
  lexerMin.defaultToken = lexer2.defaultToken;
  function addRules(state, newrules, rules) {
    for (const rule of rules) {
      let include = rule.include;
      if (include) {
        if (typeof include !== "string") {
          throw createError(lexer2, "an 'include' attribute must be a string at: " + state);
        }
        if (include[0] === "@") {
          include = include.substr(1);
        }
        if (!json.tokenizer[include]) {
          throw createError(lexer2, "include target '" + include + "' is not defined at: " + state);
        }
        addRules(state + "." + include, newrules, json.tokenizer[include]);
      } else {
        const newrule = new Rule(state);
        if (Array.isArray(rule) && rule.length >= 1 && rule.length <= 3) {
          newrule.setRegex(lexerMin, rule[0]);
          if (rule.length >= 3) {
            if (typeof rule[1] === "string") {
              newrule.setAction(lexerMin, { token: rule[1], next: rule[2] });
            } else if (typeof rule[1] === "object") {
              const rule1 = rule[1];
              rule1.next = rule[2];
              newrule.setAction(lexerMin, rule1);
            } else {
              throw createError(lexer2, "a next state as the last element of a rule can only be given if the action is either an object or a string, at: " + state);
            }
          } else {
            newrule.setAction(lexerMin, rule[1]);
          }
        } else {
          if (!rule.regex) {
            throw createError(lexer2, "a rule must either be an array, or an object with a 'regex' or 'include' field at: " + state);
          }
          if (rule.name) {
            if (typeof rule.name === "string") {
              newrule.name = rule.name;
            }
          }
          if (rule.matchOnlyAtStart) {
            newrule.matchOnlyAtLineStart = bool(rule.matchOnlyAtLineStart, false);
          }
          newrule.setRegex(lexerMin, rule.regex);
          newrule.setAction(lexerMin, rule.action);
        }
        newrules.push(newrule);
      }
    }
  }
  if (!json.tokenizer || typeof json.tokenizer !== "object") {
    throw createError(lexer2, "a language definition must define the 'tokenizer' attribute as an object");
  }
  lexer2.tokenizer = [];
  for (let key in json.tokenizer) {
    if (json.tokenizer.hasOwnProperty(key)) {
      if (!lexer2.start) {
        lexer2.start = key;
      }
      const rules = json.tokenizer[key];
      lexer2.tokenizer[key] = new Array();
      addRules("tokenizer." + key, lexer2.tokenizer[key], rules);
    }
  }
  lexer2.usesEmbedded = lexerMin.usesEmbedded;
  if (json.brackets) {
    if (!Array.isArray(json.brackets)) {
      throw createError(lexer2, "the 'brackets' attribute must be defined as an array");
    }
  } else {
    json.brackets = [
      { open: "{", close: "}", token: "delimiter.curly" },
      { open: "[", close: "]", token: "delimiter.square" },
      { open: "(", close: ")", token: "delimiter.parenthesis" },
      { open: "<", close: ">", token: "delimiter.angle" }
    ];
  }
  let brackets = [];
  for (let el of json.brackets) {
    let desc = el;
    if (desc && Array.isArray(desc) && desc.length === 3) {
      desc = { token: desc[2], open: desc[0], close: desc[1] };
    }
    if (desc.open === desc.close) {
      throw createError(lexer2, "open and close brackets in a 'brackets' attribute must be different: " + desc.open + "\n hint: use the 'bracket' attribute if matching on equal brackets is required.");
    }
    if (typeof desc.open === "string" && typeof desc.token === "string" && typeof desc.close === "string") {
      brackets.push({
        token: desc.token + lexer2.tokenPostfix,
        open: fixCase(lexer2, desc.open),
        close: fixCase(lexer2, desc.close)
      });
    } else {
      throw createError(lexer2, "every element in the 'brackets' array must be a '{open,close,token}' object or array");
    }
  }
  lexer2.brackets = brackets;
  lexer2.noThrow = true;
  return lexer2;
}
var Rule;
var init_compile = __esm({
  "src/program/monarch/compile.ts"() {
    init_common();
    Rule = class {
      constructor(name) {
        this.regex = new RegExp("");
        this.action = { token: "" };
        this.matchOnlyAtLineStart = false;
        this.name = "";
        this.name = name;
        this.stats = { time: 0, count: 0, hits: 0 };
      }
      setRegex(lexer2, re) {
        let sregex;
        if (typeof re === "string") {
          sregex = re;
        } else if (re instanceof RegExp) {
          sregex = re.source;
        } else {
          throw createError(lexer2, "rules must start with a match string or regular expression: " + this.name);
        }
        if (sregex.length == 2 && sregex[0] == "\\" && /[\{\}\(\)\[\]]/.test(sregex[1])) {
          this.string = sregex[1];
        }
        this.matchOnlyAtLineStart = sregex.length > 0 && sregex[0] === "^";
        this.name = this.name + ": " + sregex;
        this.regex = compileRegExp(lexer2, "^(?:" + (this.matchOnlyAtLineStart ? sregex.substr(1) : sregex) + ")");
      }
      setAction(lexer2, act) {
        this.action = compileAction(lexer2, this.name, act);
      }
    };
  }
});
var Token, TokenizationResult;
var init_token = __esm({
  "src/program/monarch/token.ts"() {
    Token = class {
      constructor(offset, type, language) {
        this.offset = offset | 0;
        this.type = type;
        this.language = language;
        this.kind = 0;
        this.mods = 0;
        this.value = null;
        this.stack = null;
      }
      toString() {
        return this.value || "";
      }
      get span() {
        return { offset: this.offset, length: this.value ? this.value.length : 0 };
      }
      get indent() {
        return 0;
      }
      get startOffset() {
        return this.offset;
      }
      get endOffset() {
        return this.offset + (this.value ? this.value.length : 0);
      }
      clone() {
        let tok = new Token(this.offset, this.type, this.language);
        tok.value = this.value;
        tok.stack = this.stack;
        return tok;
      }
      match(val) {
        if (typeof val == "string") {
          if (val.indexOf(" ") > 0) {
            val = val.split(" ");
          } else {
            let idx = this.type.indexOf(val);
            return val[0] == "." ? idx >= 0 : idx == 0;
          }
        }
        if (val instanceof Array) {
          for (let item of val) {
            let idx = this.type.indexOf(item);
            let hit = item[0] == "." ? idx >= 0 : idx == 0;
            if (hit)
              return true;
          }
        }
        if (val instanceof RegExp) {
          return val.test(this.type);
        }
        return false;
      }
    };
    TokenizationResult = class {
      constructor(tokens, endState) {
        this.tokens = tokens;
        this.endState = endState;
      }
    };
  }
});
function statePart(state, index) {
  return state.split(".")[index];
}
function findBracket(lexer2, matched) {
  if (!matched) {
    return null;
  }
  matched = fixCase(lexer2, matched);
  let brackets = lexer2.brackets;
  for (const bracket of brackets) {
    if (bracket.open === matched) {
      return { token: bracket.token, bracketType: 1 };
    } else if (bracket.close === matched) {
      return { token: bracket.token, bracketType: -1 };
    }
  }
  return null;
}
var CACHE_STACK_DEPTH, _MonarchStackElementFactory, MonarchStackElementFactory, MonarchStackElement, _MonarchLineStateFactory, MonarchLineStateFactory, MonarchLineState, MonarchClassicTokensCollector, MonarchTokenizer;
var init_lexer = __esm({
  "src/program/monarch/lexer.ts"() {
    init_token();
    init_common();
    CACHE_STACK_DEPTH = 10;
    _MonarchStackElementFactory = class {
      static create(parent, state) {
        return this._INSTANCE.create(parent, state);
      }
      constructor(maxCacheDepth) {
        this._maxCacheDepth = maxCacheDepth;
        this._entries = /* @__PURE__ */ Object.create(null);
      }
      create(parent, state) {
        if (parent !== null && parent.depth >= this._maxCacheDepth) {
          return new MonarchStackElement(parent, state);
        }
        let stackElementId = MonarchStackElement.getStackElementId(parent);
        if (stackElementId.length > 0) {
          stackElementId += "|";
        }
        stackElementId += state;
        let result = this._entries[stackElementId];
        if (result) {
          return result;
        }
        result = new MonarchStackElement(parent, state);
        this._entries[stackElementId] = result;
        return result;
      }
    };
    MonarchStackElementFactory = _MonarchStackElementFactory;
    MonarchStackElementFactory._INSTANCE = new _MonarchStackElementFactory(CACHE_STACK_DEPTH);
    MonarchStackElement = class {
      constructor(parent, state) {
        this.parent = parent;
        this.state = state;
        this.depth = (this.parent ? this.parent.depth : 0) + 1;
      }
      static getStackElementId(element) {
        let result = "";
        while (element !== null) {
          if (result.length > 0) {
            result += "|";
          }
          result += element.state;
          element = element.parent;
        }
        return result;
      }
      static _equals(a, b) {
        while (a !== null && b !== null) {
          if (a === b) {
            return true;
          }
          if (a.state !== b.state) {
            return false;
          }
          a = a.parent;
          b = b.parent;
        }
        if (a === null && b === null) {
          return true;
        }
        return false;
      }
      get indent() {
        return this.state.lastIndexOf("	") - this.state.indexOf("	");
      }
      get scope() {
        return this.part(2);
      }
      get detail() {
        return this.part(2);
      }
      part(index) {
        return this.state.split(".")[index];
      }
      equals(other) {
        return MonarchStackElement._equals(this, other);
      }
      push(state) {
        return MonarchStackElementFactory.create(this, state);
      }
      pop() {
        return this.parent;
      }
      popall() {
        let result = this;
        while (result.parent) {
          result = result.parent;
        }
        return result;
      }
      switchTo(state) {
        return MonarchStackElementFactory.create(this.parent, state);
      }
    };
    _MonarchLineStateFactory = class {
      static create(stack) {
        return this._INSTANCE.create(stack);
      }
      constructor(maxCacheDepth) {
        this._maxCacheDepth = maxCacheDepth;
        this._entries = /* @__PURE__ */ Object.create(null);
      }
      create(stack) {
        if (stack !== null && stack.depth >= this._maxCacheDepth) {
          return new MonarchLineState(stack);
        }
        let stackElementId = MonarchStackElement.getStackElementId(stack);
        let result = this._entries[stackElementId];
        if (result) {
          return result;
        }
        result = new MonarchLineState(stack);
        this._entries[stackElementId] = result;
        return result;
      }
    };
    MonarchLineStateFactory = _MonarchLineStateFactory;
    MonarchLineStateFactory._INSTANCE = new _MonarchLineStateFactory(CACHE_STACK_DEPTH);
    MonarchLineState = class {
      constructor(stack) {
        this.stack = stack;
      }
      clone() {
        return MonarchLineStateFactory.create(this.stack);
      }
      equals(other) {
        if (!(other instanceof MonarchLineState)) {
          return false;
        }
        if (!this.stack.equals(other.stack)) {
          return false;
        }
        return true;
      }
    };
    MonarchClassicTokensCollector = class {
      constructor() {
        this._tokens = [];
        this._language = null;
        this._lastToken = new Token(0, "start", "imba");
        this._lastTokenType = null;
      }
      enterMode(startOffset, modeId) {
        this._language = modeId;
      }
      emit(startOffset, type, stack) {
        if (this._lastTokenType === type && false) {
          console.log("add to last token", type);
          return this._lastToken;
        }
        let token = new Token(startOffset, type, this._language);
        this._lastTokenType = type;
        this._lastToken = token;
        this._tokens.push(token);
        return token;
      }
      finalize(endState) {
        return new TokenizationResult(this._tokens, endState);
      }
    };
    MonarchTokenizer = class {
      constructor(modeId, lexer2) {
        this._modeId = modeId;
        this._lexer = lexer2;
        this._profile = false;
      }
      dispose() {
      }
      getLoadStatus() {
        return { loaded: true };
      }
      getInitialState() {
        let rootState = MonarchStackElementFactory.create(null, this._lexer.start);
        return MonarchLineStateFactory.create(rootState);
      }
      tokenize(line, lineState, offsetDelta) {
        let tokensCollector = new MonarchClassicTokensCollector();
        let endLineState = this._tokenize(line, lineState, offsetDelta, tokensCollector);
        return tokensCollector.finalize(endLineState);
      }
      _tokenize(line, lineState, offsetDelta, collector) {
        return this._myTokenize(line, lineState, offsetDelta, collector);
      }
      _safeRuleName(rule) {
        if (rule) {
          return rule.name;
        }
        return "(unknown)";
      }
      _rescope(from, to, tokens, toState) {
        let a = (from || "").split("-");
        let b = (to || "").split("-");
        if (from == to)
          return;
        let diff = 1;
        while (a[diff] && a[diff] == b[diff]) {
          diff++;
        }
        let level = a.length;
        while (level > diff) {
          tokens.push("pop." + a[--level] + "." + level);
        }
        while (b.length > diff) {
          let id = "push." + b[diff++] + "." + (diff - 1);
          if (toState) {
            let indent = statePart(toState, 1);
            id += "." + indent;
          }
          tokens.push(id);
        }
      }
      _myTokenize(line, lineState, offsetDelta, tokensCollector) {
        tokensCollector.enterMode(offsetDelta, this._modeId);
        const lineLength = line.length;
        let stack = lineState.stack;
        let lastToken = null;
        let pos = 0;
        let profile = this._profile;
        let groupMatching = null;
        let forceEvaluation = true;
        let append = [];
        let tries = 0;
        let rules = [];
        let rulesState = null;
        let hangPos = -1;
        while (forceEvaluation || pos < lineLength) {
          tries++;
          if (tries > 1e3) {
            if (pos == hangPos) {
              console.log("infinite recursion", pos, lineLength, stack, tokensCollector);
              throw "infinite recursion in tokenizer?";
            } else {
              hangPos = pos;
              tries = 0;
            }
          }
          const pos0 = pos;
          const stackLen0 = stack.depth;
          const groupLen0 = groupMatching ? groupMatching.groups.length : 0;
          const state = stack.state;
          let matches = null;
          let matched = null;
          let action = null;
          let rule = null;
          if (groupMatching) {
            matches = groupMatching.matches;
            const groupEntry = groupMatching.groups.shift();
            matched = groupEntry.matched;
            action = groupEntry.action;
            rule = groupMatching.rule;
            if (groupMatching.groups.length === 0) {
              groupMatching = null;
            }
          } else {
            if (!forceEvaluation && pos >= lineLength) {
              break;
            }
            forceEvaluation = false;
            rules = this._lexer.tokenizer[state];
            if (!rules) {
              rules = findRules(this._lexer, state);
              if (!rules) {
                throw createError(this._lexer, "tokenizer state is not defined: " + state);
              }
            }
            let restOfLine = line.substr(pos);
            for (const rule2 of rules) {
              if (rule2.string !== void 0) {
                if (restOfLine[0] === rule2.string) {
                  matches = [rule2.string];
                  matched = rule2.string;
                  action = rule2.action;
                  break;
                }
              } else if (pos === 0 || !rule2.matchOnlyAtLineStart) {
                if (profile) {
                  rule2.stats.count++;
                  let now = performance.now();
                  matches = restOfLine.match(rule2.regex);
                  rule2.stats.time += performance.now() - now;
                  if (matches) {
                    rule2.stats.hits++;
                  }
                } else {
                  matches = restOfLine.match(rule2.regex);
                }
                if (matches) {
                  matched = matches[0];
                  action = rule2.action;
                  break;
                }
              }
            }
          }
          if (!matches) {
            matches = [""];
            matched = "";
          }
          if (!action) {
            if (pos < lineLength) {
              matches = [line.charAt(pos)];
              matched = matches[0];
            }
            action = this._lexer.defaultToken;
          }
          if (matched === null) {
            break;
          }
          pos += matched.length;
          while (isFuzzyAction(action) && isIAction(action) && action.test) {
            action = action.test(matched, matches, state, pos === lineLength);
          }
          let result = null;
          if (typeof action === "string" || Array.isArray(action)) {
            result = action;
          } else if (action.group) {
            result = action.group;
          } else if (action.token !== null && action.token !== void 0) {
            if (action.tokenSubst) {
              result = substituteMatches(this._lexer, action.token, matched, matches, state);
            } else {
              result = action.token;
            }
            if (action.goBack) {
              pos = Math.max(0, pos - action.goBack);
            }
            if (action.switchTo && typeof action.switchTo === "string") {
              let nextState = substituteMatches(this._lexer, action.switchTo, matched, matches, state);
              if (nextState[0] === "@") {
                nextState = nextState.substr(1);
              }
              if (!findRules(this._lexer, nextState)) {
                throw createError(this._lexer, "trying to switch to a state '" + nextState + "' that is undefined in rule: " + this._safeRuleName(rule));
              } else {
                let from = stack.scope;
                let to = statePart(nextState, 2);
                if (from !== to)
                  this._rescope(from, to, append, nextState);
                stack = stack.switchTo(nextState);
              }
            } else if (action.transform && typeof action.transform === "function") {
              throw createError(this._lexer, "action.transform not supported");
            } else if (action.next) {
              if (action.next === "@push") {
                if (stack.depth >= this._lexer.maxStack) {
                  throw createError(this._lexer, "maximum tokenizer stack size reached: [" + stack.state + "," + stack.parent.state + ",...]");
                } else {
                  stack = stack.push(state);
                }
              } else if (action.next === "@pop") {
                if (stack.depth <= 1) {
                  throw createError(this._lexer, "trying to pop an empty stack in rule: " + this._safeRuleName(rule));
                } else {
                  let prev = stack;
                  stack = stack.pop();
                  let from = statePart(prev.state, 2);
                  let to = statePart(stack.state, 2);
                  if (from !== to)
                    this._rescope(from, to, append, stack.state);
                }
              } else if (action.next === "@popall") {
                stack = stack.popall();
              } else {
                let nextState = substituteMatches(this._lexer, action.next, matched, matches, state);
                if (nextState[0] === "@") {
                  nextState = nextState.substr(1);
                }
                let nextScope = statePart(nextState, 2);
                if (!findRules(this._lexer, nextState)) {
                  throw createError(this._lexer, "trying to set a next state '" + nextState + "' that is undefined in rule: " + this._safeRuleName(rule));
                } else {
                  if (nextScope != stack.scope)
                    this._rescope(stack.scope || "", nextScope, append, nextState);
                  stack = stack.push(nextState);
                }
              }
            }
            if (action.log && typeof action.log === "string") {
              log(this._lexer, this._lexer.languageId + ": " + substituteMatches(this._lexer, action.log, matched, matches, state));
            }
            if (action.mark) {
              tokensCollector.emit(pos0 + offsetDelta, action.mark, stack);
            }
          }
          if (result === null) {
            throw createError(this._lexer, "lexer rule has no well-defined action in rule: " + this._safeRuleName(rule));
          }
          if (Array.isArray(result)) {
            if (groupMatching && groupMatching.groups.length > 0) {
              throw createError(this._lexer, "groups cannot be nested: " + this._safeRuleName(rule));
            }
            if (matches.length !== result.length + 1) {
              throw createError(this._lexer, "matched number of groups does not match the number of actions in rule: " + this._safeRuleName(rule));
            }
            let totalLen = 0;
            for (let i = 1; i < matches.length; i++) {
              totalLen += matches[i].length;
            }
            if (totalLen !== matched.length) {
              throw createError(this._lexer, "with groups, all characters should be matched in consecutive groups in rule: " + this._safeRuleName(rule));
            }
            groupMatching = {
              rule,
              matches,
              groups: []
            };
            for (let i = 0; i < result.length; i++) {
              groupMatching.groups[i] = {
                action: result[i],
                matched: matches[i + 1]
              };
            }
            pos -= matched.length;
            continue;
          } else {
            if (result === "@rematch") {
              pos -= matched.length;
              matched = "";
              matches = null;
              result = "";
            }
            if (matched.length === 0) {
              if (lineLength === 0 || stackLen0 !== stack.depth || state !== stack.state || (!groupMatching ? 0 : groupMatching.groups.length) !== groupLen0) {
                if (typeof result == "string" && result)
                  tokensCollector.emit(pos + offsetDelta, result, stack);
                while (append.length > 0) {
                  tokensCollector.emit(pos + offsetDelta, append.shift(), stack);
                }
                continue;
              } else {
                throw createError(this._lexer, "no progress in tokenizer in rule: " + this._safeRuleName(rule));
              }
            }
            let tokenType = null;
            if (isString(result) && result.indexOf("@brackets") === 0) {
              let rest = result.substr("@brackets".length);
              let bracket = findBracket(this._lexer, matched);
              if (!bracket) {
                throw createError(this._lexer, "@brackets token returned but no bracket defined as: " + matched);
              }
              tokenType = sanitize(bracket.token + rest);
            } else {
              let token2 = result === "" ? "" : result + this._lexer.tokenPostfix;
              tokenType = sanitize(token2);
            }
            let token = tokensCollector.emit(pos0 + offsetDelta, tokenType, stack);
            token.stack = stack;
            if (lastToken && lastToken != token) {
              lastToken.value = line.slice(lastToken.offset - offsetDelta, pos0);
            }
            lastToken = token;
            while (append.length > 0) {
              tokensCollector.emit(pos + offsetDelta, append.shift(), stack);
            }
          }
        }
        if (lastToken && !lastToken.value) {
          lastToken.value = line.slice(lastToken.offset - offsetDelta);
        }
        return MonarchLineStateFactory.create(stack);
      }
    };
  }
});
function iter$__3(a) {
  let v;
  return a ? (v = a.toIterable) ? v.call(a) : a : [];
}
var \u03A8__init__2, LexedLine, compiled, lexer;
var init_lexer2 = __esm({
  "src/program/lexer.imba"() {
    init_grammar();
    init_compile();
    init_lexer();
    init_token();
    \u03A8__init__2 = /* @__PURE__ */ Symbol.for("#__init__");
    LexedLine = class {
      constructor($$ = null) {
        this[\u03A8__init__2]($$);
      }
      [\u03A8__init__2]($$ = null) {
        this.offset = $$ ? $$.offset : void 0;
        this.text = $$ ? $$.text : void 0;
        this.tokens = $$ ? $$.tokens : void 0;
        this.startState = $$ ? $$.startState : void 0;
        this.endState = $$ ? $$.endState : void 0;
      }
      clone(newOffset = this.offset) {
        let clones = [];
        let delta = newOffset - this.offset;
        for (let i\u03C6 = 0, items\u03C6 = iter$__3(this.tokens), len\u03C6 = items\u03C6.length; i\u03C6 < len\u03C6; i\u03C6++) {
          let tok = items\u03C6[i\u03C6];
          let clone = tok.clone();
          clone.offset = tok.offset + delta;
          clones.push(clone);
        }
        ;
        return new LexedLine({
          offset: newOffset,
          startState: this.startState,
          endState: this.endState,
          text: this.text,
          tokens: clones
        });
      }
    };
    compiled = compile("imba", grammar);
    lexer = new MonarchTokenizer("imba", compiled);
  }
});
function iter$__4(a) {
  let v;
  return a ? (v = a.toIterable) ? v.call(a) : a : [];
}
var SemanticTokenTypes, M, SemanticTokenModifiers, CompletionTypes, KeywordTypes, Keywords, SymbolKind;
var init_types = __esm({
  "src/program/types.imba"() {
    SemanticTokenTypes = [
      "comment",
      "string",
      "keyword",
      "number",
      "regexp",
      "operator",
      "namespace",
      "type",
      "struct",
      "class",
      "interface",
      "enum",
      "typeParameter",
      "function",
      "member",
      "macro",
      "variable",
      "parameter",
      "property",
      "label"
    ];
    for (let index = 0, items\u03C6 = iter$__4(SemanticTokenTypes), len\u03C6 = items\u03C6.length; index < len\u03C6; index++) {
      let key = items\u03C6[index];
      SemanticTokenTypes[key] = index;
    }
    M = {
      Declaration: 1 << 0,
      Import: 1 << 1,
      Export: 1 << 2,
      Global: 1 << 3,
      ReadOnly: 1 << 4,
      Static: 1 << 5,
      Modification: 1 << 6,
      Deprecated: 1 << 7,
      Access: 1 << 8,
      Root: 1 << 9,
      Special: 1 << 10,
      Class: 1 << 11,
      Member: 1 << 12,
      Function: 1 << 13,
      Def: 1 << 14,
      Var: 1 << 15,
      Let: 1 << 16,
      Const: 1 << 17,
      Get: 1 << 18,
      Set: 1 << 19
    };
    SemanticTokenModifiers = Object.keys(M).map(function(_0) {
      return _0.toLowerCase();
    });
    for (let i\u03C6 = 0, items\u03C62 = iter$__4(Object.keys(M)), len\u03C62 = items\u03C62.length; i\u03C6 < len\u03C62; i\u03C6++) {
      let k = items\u03C62[i\u03C6];
      M[k.toLowerCase()] = M[k];
    }
    CompletionTypes = {
      Keyword: 1 << 0,
      Access: 1 << 1,
      Key: 1 << 2,
      TagName: 1 << 3,
      TagEvent: 1 << 4,
      TagFlag: 1 << 5,
      TagProp: 1 << 6,
      TagEventModifier: 1 << 7,
      Value: 1 << 8,
      Path: 1 << 9,
      StyleProp: 1 << 10,
      StyleValue: 1 << 11,
      Type: 1 << 12,
      StyleModifier: 1 << 13,
      StyleSelector: 1 << 14,
      VarName: 1 << 15,
      ImportName: 1 << 16
    };
    KeywordTypes = {
      Keyword: 1 << 0,
      Root: 1 << 1,
      Class: 1 << 2,
      Block: 1 << 3
    };
    Keywords = {
      and: KeywordTypes.Block,
      await: KeywordTypes.Block,
      begin: KeywordTypes.Block,
      break: KeywordTypes.Block,
      by: KeywordTypes.Block,
      case: KeywordTypes.Block,
      catch: KeywordTypes.Block,
      class: KeywordTypes.Block,
      const: KeywordTypes.Block,
      continue: KeywordTypes.Block,
      css: KeywordTypes.Class | KeywordTypes.Root,
      debugger: KeywordTypes.Block,
      def: KeywordTypes.Class | KeywordTypes.Block,
      get: KeywordTypes.Class,
      set: KeywordTypes.Class,
      delete: KeywordTypes.Block,
      do: KeywordTypes.Block,
      elif: KeywordTypes.Block,
      else: KeywordTypes.Block,
      export: KeywordTypes.Root,
      extends: KeywordTypes.Block,
      false: KeywordTypes.Block,
      finally: KeywordTypes.Block,
      "for": KeywordTypes.Block,
      if: KeywordTypes.Block,
      import: KeywordTypes.Root,
      in: KeywordTypes.Block,
      instanceof: KeywordTypes.Block,
      is: KeywordTypes.Block,
      isa: KeywordTypes.Block,
      isnt: KeywordTypes.Block,
      let: KeywordTypes.Block,
      loop: KeywordTypes.Block,
      module: KeywordTypes.Block,
      nil: KeywordTypes.Block,
      no: KeywordTypes.Block,
      not: KeywordTypes.Block,
      null: KeywordTypes.Block,
      of: KeywordTypes.Block,
      or: KeywordTypes.Block,
      require: KeywordTypes.Block,
      return: KeywordTypes.Block,
      self: KeywordTypes.Block,
      static: KeywordTypes.Block | KeywordTypes.Class,
      super: KeywordTypes.Block,
      switch: KeywordTypes.Block,
      tag: KeywordTypes.Root,
      then: KeywordTypes.Block,
      this: KeywordTypes.Block,
      throw: KeywordTypes.Block,
      true: KeywordTypes.Block,
      try: KeywordTypes.Block,
      typeof: KeywordTypes.Block,
      undefined: KeywordTypes.Block,
      unless: KeywordTypes.Block,
      until: KeywordTypes.Block,
      var: KeywordTypes.Block,
      when: KeywordTypes.Block,
      while: KeywordTypes.Block,
      yes: KeywordTypes.Block
    };
    SymbolKind = {
      File: 1,
      Module: 2,
      Namespace: 3,
      Package: 4,
      Class: 5,
      Method: 6,
      Property: 7,
      Field: 8,
      Constructor: 9,
      Enum: 10,
      Interface: 11,
      Function: 12,
      Variable: 13,
      Constant: 14,
      String: 15,
      Number: 16,
      Boolean: 17,
      Array: 18,
      Object: 19,
      Key: 20,
      Null: 21,
      EnumMember: 22,
      Struct: 23,
      Event: 24,
      Operator: 25,
      TypeParameter: 26
    };
    for (let i\u03C62 = 0, keys\u03C6 = Object.keys(SymbolKind), l\u03C6 = keys\u03C6.length, k, v; i\u03C62 < l\u03C6; i\u03C62++) {
      k = keys\u03C6[i\u03C62];
      v = SymbolKind[k];
      SymbolKind[v] = k;
    }
  }
});
function iter$__5(a) {
  let v;
  return a ? (v = a.toIterable) ? v.call(a) : a : [];
}
var \u03A8__init__3, \u03A8datatype, SymbolFlags, Conversions, ConversionCache, Sym;
var init_symbol = __esm({
  "src/program/symbol.imba"() {
    init_types();
    init_utils();
    \u03A8__init__3 = /* @__PURE__ */ Symbol.for("#__init__");
    \u03A8datatype = /* @__PURE__ */ Symbol.for("#datatype");
    SymbolFlags = {
      None: 0,
      ConstVariable: 1 << 0,
      LetVariable: 1 << 1,
      Property: 1 << 2,
      EnumMember: 1 << 3,
      Function: 1 << 4,
      Class: 1 << 5,
      LocalComponent: 1 << 6,
      GlobalComponent: 1 << 7,
      RegularEnum: 1 << 8,
      ValueModule: 1 << 9,
      Parameter: 1 << 10,
      TypeLiteral: 1 << 11,
      ObjectLiteral: 1 << 12,
      Method: 1 << 13,
      Constructor: 1 << 14,
      GetAccessor: 1 << 15,
      SetAccessor: 1 << 16,
      Signature: 1 << 17,
      TypeParameter: 1 << 18,
      TypeAlias: 1 << 19,
      ExportValue: 1 << 20,
      Alias: 1 << 21,
      Prototype: 1 << 22,
      ExportStar: 1 << 23,
      Optional: 1 << 24,
      IsSpecial: 1 << 27,
      IsImport: 1 << 28,
      IsStatic: 1 << 29,
      IsGlobal: 1 << 30,
      IsRoot: 1 << 31
    };
    SymbolFlags.Component = SymbolFlags.LocalComponent | SymbolFlags.GlobalComponent;
    SymbolFlags.Variable = SymbolFlags.LetVariable | SymbolFlags.ConstVariable | SymbolFlags.Parameter;
    SymbolFlags.Accessor = SymbolFlags.GetAccessor | SymbolFlags.SetAccessor;
    SymbolFlags.ClassMember = SymbolFlags.Method | SymbolFlags.Accessor | SymbolFlags.Property;
    SymbolFlags.Scoped = SymbolFlags.Function | SymbolFlags.Variable | SymbolFlags.Class | SymbolFlags.Enum | SymbolFlags.LocalComponent;
    SymbolFlags.Type = SymbolFlags.Component | SymbolFlags.Class;
    SymbolFlags.GlobalVar = SymbolFlags.ConstVariable | SymbolFlags.IsGlobal;
    SymbolFlags.SpecialVar = SymbolFlags.ConstVariable | SymbolFlags.IsSpecial;
    Conversions = [
      ["entity.name.component.local", 0, SymbolFlags.LocalComponent],
      ["entity.name.component.global", 0, SymbolFlags.GlobalComponent],
      ["entity.name.function", 0, SymbolFlags.Function],
      ["entity.name.class", 0, SymbolFlags.Class],
      ["entity.name.constructor", 0, SymbolFlags.Method],
      ["entity.name.def", 0, SymbolFlags.Method],
      ["entity.name.get", 0, SymbolFlags.GetAccessor],
      ["entity.name.set", 0, SymbolFlags.SetAccessor],
      ["field", 0, SymbolFlags.Property],
      ["decl-let", 0, SymbolFlags.LetVariable],
      ["decl-for-index", 0, SymbolFlags.LetVariable, { datatype: "\\number" }],
      ["decl-for", 0, SymbolFlags.LetVariable, { kind: "for" }],
      ["decl-var", 0, SymbolFlags.LetVariable],
      ["decl-param", 0, SymbolFlags.Parameter],
      ["decl-const", 0, SymbolFlags.ConstVariable],
      ["decl-import", 0, SymbolFlags.ConstVariable | SymbolFlags.IsImport]
    ];
    ConversionCache = {};
    Sym = class {
      [\u03A8__init__3]($$ = null) {
        var v\u03C6;
        this.value = $$ ? $$.value : void 0;
        this.body = $$ && (v\u03C6 = $$.body) !== void 0 ? v\u03C6 : null;
      }
      static typeMatch(type) {
        if (ConversionCache[type] != void 0) {
          return ConversionCache[type];
        }
        ;
        for (let i = 0, items\u03C6 = iter$__5(Conversions), len\u03C6 = items\u03C6.length; i < len\u03C6; i++) {
          let [strtest, modtest, flags, o] = items\u03C6[i];
          if (type.indexOf(strtest) >= 0) {
            return ConversionCache[type] = Conversions[i];
          }
          ;
        }
        ;
        return null;
      }
      static forToken(tok, type, mods = 0) {
        let match = this.typeMatch(type);
        if (match) {
          let sym = new this(match[2], tok.value, tok, match[3]);
          return sym;
        }
        ;
        return null;
      }
      constructor(flags, name, node, desc = null) {
        this[\u03A8__init__3]();
        this.flags = flags;
        this.name = name;
        this.node = node;
        this.desc = desc;
      }
      get importSource() {
        if (!this.imported\u03A6) {
          return null;
        }
        ;
        let ctx = this.node.context.closest("imports");
        return ctx.sourcePath;
      }
      get exportName() {
        if (this.node.prev.match("keyword.as")) {
          return this.node.prev.prev.value;
        } else if (this.node.match(".default")) {
          return "default";
        } else {
          return this.node.value;
        }
        ;
      }
      get importInfo() {
        if (!this.imported\u03A6) {
          return null;
        }
        ;
        let ctx = this.node.context.closest("imports");
        return {
          exportName: this.exportName,
          name: this.node.value,
          isTypeOnly: ctx.isTypeOnly,
          path: ctx.sourcePath
        };
      }
      get datatype() {
        var _a;
        let m;
        let type = this.desc && this.desc.datatype;
        if (type) {
          return type;
        }
        ;
        if (this[\u03A8datatype]) {
          return this[\u03A8datatype];
        }
        ;
        let next = this.node && this.node.nextNode;
        if (next && next.type == "type") {
          return next;
        }
        ;
        let scope = this.scope;
        if (scope && ((_a = this.desc) == null ? void 0 : _a.kind) == "for") {
          let typ = scope.doc.getDestructuredPath(this.node, [[scope.expression, "__@iterable"]]);
          return this[\u03A8datatype] || (this[\u03A8datatype] = typ);
        }
        ;
        if (m = this.importInfo) {
          return m;
        }
        ;
        return null;
      }
      get static\u03A6() {
        return this.node && this.node.mods & M.Static;
      }
      get itervar\u03A6() {
        return this.node && this.node.match(".decl-for");
      }
      get variable\u03A6() {
        return this.flags & SymbolFlags.Variable;
      }
      get parameter\u03A6() {
        return this.flags & SymbolFlags.Parameter;
      }
      get member\u03A6() {
        return this.flags & SymbolFlags.ClassMember;
      }
      get scoped\u03A6() {
        return this.flags & SymbolFlags.Scoped;
      }
      get type\u03A6() {
        return this.flags & SymbolFlags.Type;
      }
      get global\u03A6() {
        return this.flags & SymbolFlags.IsGlobal;
      }
      get imported\u03A6() {
        return this.flags & SymbolFlags.IsImport;
      }
      get component\u03A6() {
        return this.flags & SymbolFlags.Component;
      }
      get escapedName() {
        return this.name;
      }
      get scope() {
        var _a, _b;
        return (_b = (_a = this.node) == null ? void 0 : _a.context) == null ? void 0 : _b.scope;
      }
      addReference(node) {
        this.references || (this.references = []);
        this.references.push(node);
        node.symbol = this;
        return this;
      }
      dereference(tok) {
        let idx = this.references.indexOf(tok);
        if (idx >= 0) {
          tok.symbol = null;
          this.references.splice(idx, 1);
        }
        ;
        return this;
      }
      get kind() {
        if (this.variable\u03A6) {
          return SymbolKind.Variable;
        } else if (this.flags & SymbolFlags.Class) {
          return SymbolKind.Class;
        } else if (this.flags & SymbolFlags.Component) {
          return SymbolKind.Class;
        } else if (this.flags & SymbolFlags.Property) {
          return SymbolKind.Field;
        } else if (this.flags & SymbolFlags.Method) {
          if (this.escapedName == "constructor") {
            return SymbolKind.Constructor;
          } else {
            return SymbolKind.Method;
          }
          ;
        } else if (this.flags & SymbolFlags.Function) {
          return SymbolKind.Function;
        } else {
          return SymbolKind.Method;
        }
        ;
      }
      get semanticKind() {
        if (this.flags & SymbolFlags.Parameter) {
          return "parameter";
        } else if (this.variable\u03A6) {
          return "variable";
        } else if (this.type\u03A6) {
          return "type";
        } else if (this.flags & SymbolFlags.Function) {
          return "function";
        } else if (this.member\u03A6) {
          return "member";
        } else if (this.component\u03A6) {
          return "component";
        } else {
          return "variable";
        }
        ;
      }
      get semanticFlags() {
        let mods = 0;
        if (this.flags & SymbolFlags.ConstVariable) {
          mods |= M.ReadOnly;
        }
        ;
        if (this.static\u03A6) {
          mods |= M.Static;
        }
        ;
        if (this.flags & SymbolFlags.IsImport) {
          mods |= M.Import;
        }
        ;
        if (this.flags & SymbolFlags.IsGlobal) {
          mods |= M.Global;
        }
        ;
        if (this.flags & SymbolFlags.IsRoot) {
          mods |= M.Root;
        }
        ;
        if (this.flags & SymbolFlags.IsSpecial) {
          mods |= M.Special;
        }
        ;
        return mods;
      }
    };
  }
});
function iter$__6(a) {
  let v;
  return a ? (v = a.toIterable) ? v.call(a) : a : [];
}
var \u03A8__init__4, \u03A8__initor__, \u03A8__inited__, \u03C6, \u03C62, \u03C63, Globals, Node, Group, ValueNode, StringNode, StyleNode, StyleRuleNode, Scope, Root, ForScope, WeakScope, FieldScope, SelectorNode, StylePropKey, StylePropValue, StylePropNode, StyleInterpolation, PathNode, TagNode, TagAttrNode, TagAttrValueNode, TagContent, Listener, ParensNode, BracketsNode, BracesNode, SpecifiersNode, ArrayNode, IndexNode, TypeAnnotationNode, InterpolatedValueNode, ObjectNode, ImportsNode, ScopeTypeMap;
var init_scope = __esm({
  "src/program/scope.imba"() {
    init_utils();
    init_types();
    init_symbol();
    \u03A8__init__4 = /* @__PURE__ */ Symbol.for("#__init__");
    \u03A8__initor__ = /* @__PURE__ */ Symbol.for("#__initor__");
    \u03A8__inited__ = /* @__PURE__ */ Symbol.for("#__inited__");
    \u03C6 = /* @__PURE__ */ Symbol();
    \u03C62 = /* @__PURE__ */ Symbol();
    \u03C63 = /* @__PURE__ */ Symbol();
    Globals = {
      global: { datatype: "globalThis" },
      imba: { datatype: "globalThis.imba" },
      module: {},
      window: { datatype: "globalThis.window" },
      document: { datatype: "globalThis.document" },
      exports: {},
      console: { datatype: "globalThis.console" },
      process: { datatype: "globalThis.process" },
      parseInt: { datatype: "globalThis.parseInt" },
      parseFloat: { datatype: "globalThis.parseFloat" },
      setTimeout: { datatype: "globalThis.setTimeout" },
      setInterval: { datatype: "globalThis.setInterval" },
      setImmediate: { datatype: "globalThis.setImmediate" },
      clearTimeout: { datatype: "globalThis.clearTimeout" },
      clearInterval: { datatype: "globalThis.clearInterval" },
      clearImmediate: { datatype: "globalThis.clearImmediate" },
      globalThis: { datatype: "globalThis" },
      isNaN: { datatype: "globalThis.isNaN" },
      isFinite: { datatype: "globalThis.isFinite" },
      __dirname: { datatype: "\\string" },
      __filename: { datatype: "\\string" },
      __realname: { datatype: "\\string" }
    };
    Node = class {
      [\u03A8__init__4]($$ = null) {
        var v\u03C6;
        this.type = $$ && (v\u03C6 = $$.type) !== void 0 ? v\u03C6 : "";
        this.start = $$ ? $$.start : void 0;
        this.end = $$ ? $$.end : void 0;
        this.parent = $$ ? $$.parent : void 0;
      }
      static build(doc, tok, scope, typ, types) {
        return new this(doc, tok, scope, typ, types);
      }
      constructor(doc, token, parent, type) {
        this[\u03A8__init__4]();
        this.doc = doc;
        this.start = token;
        this.end = null;
        this.type = type;
        this.parent = parent;
        this.$name = null;
        token.scope = this;
      }
      pop(end) {
        this.end = end;
        end.start = this.start;
        end.pops = this;
        this.start.end = end;
        this.visit();
        return this.parent;
      }
      find(pattern) {
        return this.findChildren(pattern, true)[0];
      }
      get childNodes() {
        let nodes = this.doc.getNodesInScope(this);
        return nodes;
      }
      findChildren(pattern, returnFirst = false) {
        let found = [];
        let tok = this.start;
        while (tok) {
          if (returnFirst && found.length) {
            return found;
          }
          ;
          if (tok.scope && tok.scope != this) {
            if (tok.scope.match(pattern)) {
              found.push(tok.scope);
            }
            ;
            tok = tok.scope.next;
            continue;
          }
          ;
          if (tok.match(pattern)) {
            found.push(tok);
          }
          ;
          if (tok == this.end) {
            break;
          }
          ;
          tok = tok.next;
        }
        ;
        return found;
      }
      closest(ref) {
        if (this.match(ref)) {
          return this;
        }
        ;
        return this.parent ? this.parent.closest(ref) : null;
      }
      visit() {
        return this;
      }
      get member\u03A6() {
        return false;
      }
      get top\u03A6() {
        return false;
      }
      get selfScope() {
        return this.member\u03A6 || this.top\u03A6 ? this : this.parent.selfScope;
      }
      get name() {
        return this.$name || "";
      }
      get value() {
        return this.doc.content.slice(this.start.offset, this.next ? this.next.offset : -1);
      }
      get next() {
        return this.end ? this.end.next : null;
      }
      get prev() {
        return this.start ? this.start.prev : null;
      }
      match(query) {
        if (typeof query == "string") {
          return this.type == query;
        } else if (query instanceof RegExp) {
          return query.test(this.type);
        } else if (query instanceof Function) {
          return query(this);
        }
        ;
        return true;
      }
    };
    Group = class extends Node {
      static [\u03A8__init__4]() {
        this.prototype[\u03A8__initor__] = \u03C6;
        return this;
      }
      constructor(doc, token, parent, type, parts = []) {
        super(doc, token, parent, type);
        this[\u03A8__initor__] === \u03C6 && this[\u03A8__inited__] && this[\u03A8__inited__]();
      }
      get scope() {
        return this.parent.scope;
      }
      get varmap() {
        return this.parent.varmap;
      }
      register(symbol) {
        return this.parent.register(symbol);
      }
      lookup(...params) {
        return this.parent.lookup(...params);
      }
    };
    Group[\u03A8__init__4]();
    ValueNode = class extends Group {
    };
    StringNode = class extends Group {
    };
    StyleNode = class extends Group {
      get properties() {
        return this.findChildren("styleprop");
      }
    };
    StyleRuleNode = class extends Group {
    };
    Scope = class extends Node {
      static [\u03A8__init__4]() {
        this.prototype[\u03A8__initor__] = \u03C62;
        return this;
      }
      constructor(doc, token, parent, type, parts = []) {
        super(doc, token, parent, type);
        this.children = [];
        this.entities = [];
        this.refs = [];
        this.varmap = Object.create(parent ? parent.varmap : {});
        if (this instanceof Root) {
          for (let i\u03C6 = 0, keys\u03C6 = Object.keys(Globals), l\u03C6 = keys\u03C6.length, key, val; i\u03C6 < l\u03C6; i\u03C6++) {
            key = keys\u03C6[i\u03C6];
            val = Globals[key];
            let tok = { value: key, offset: -1, mods: 0 };
            this.varmap[key] = new Sym(SymbolFlags.GlobalVar, key, tok, val);
          }
          ;
        }
        ;
        this.indent = parts[3] && parts[3][0] == "	" ? parts[3].length : 0;
        this.setup();
        return this;
        this[\u03A8__initor__] === \u03C62 && this[\u03A8__inited__] && this[\u03A8__inited__]();
      }
      setup() {
        if (this.handler\u03A6) {
          this.varmap.e = new Sym(SymbolFlags.SpecialVar, "e", null, "eventReference");
        }
        ;
        if (this.class\u03A6 || this.property\u03A6) {
          this.ident = this.token = prevToken(this.start, "entity.");
          if (this.ident) {
            this.ident.body = this;
          }
          ;
          if (this.ident && this.ident.type == "entity.name.def.render") {
            this.$name = "render";
            if (this.ident.symbol) {
              return this.ident.symbol.name = "render";
            }
            ;
          }
          ;
        }
        ;
      }
      get selfPath() {
        let path = this.path;
        if (this.property\u03A6) {
          return path.slice(0, path.lastIndexOf("."));
        }
        ;
        return path;
      }
      get path() {
        let par = this.parent ? this.parent.path : "";
        if (this.property\u03A6) {
          let sep2 = this.static\u03A6 ? "." : ".prototype.";
          return this.parent ? "" + this.parent.path + sep2 + this.name : this.name;
        }
        ;
        if (this.component\u03A6) {
          if (this.name[0] == this.name[0].toLowerCase()) {
            return this.name.replace(/\-/g, "_") + "$$TAG$$";
          } else {
            return this.name;
          }
          ;
        }
        ;
        if (this.class\u03A6) {
          return this.name;
        }
        ;
        return par;
      }
      get allowedKeywordTypes() {
        if (this.class\u03A6) {
          return KeywordTypes.Class;
        } else if (this.root\u03A6) {
          return KeywordTypes.Root | KeywordTypes.Block;
        } else {
          return KeywordTypes.Block;
        }
        ;
      }
      get component\u03A6() {
        return !!this.type.match(/^component/);
      }
      get root\u03A6() {
        return this instanceof Root;
      }
      get top\u03A6() {
        return this instanceof Root;
      }
      get class\u03A6() {
        return !!this.type.match(/^class/) || this.component\u03A6;
      }
      get def\u03A6() {
        return !!this.type.match(/def|get|set/);
      }
      get static\u03A6() {
        return !!(this.ident && this.ident.mods & M.Static);
      }
      get handler\u03A6() {
        return !!this.type.match(/handler|spy/);
      }
      get member\u03A6() {
        return !!this.type.match(/def|get|set/);
      }
      get property\u03A6() {
        return !!this.type.match(/def|get|set|field/);
      }
      get flow\u03A6() {
        return !!this.type.match(/if|else|elif|unless|for|while|until/);
      }
      get closure\u03A6() {
        return !!this.type.match(/class|component|def|get|set|do/);
      }
      get scope() {
        return this;
      }
      get name() {
        return this.$name || (this.ident ? this.ident.value : "");
      }
      visit() {
        return this;
      }
      register(symbol) {
        if (symbol.scoped\u03A6) {
          this.varmap[symbol.name] = symbol;
          if (this.root\u03A6) {
            symbol.flags |= SymbolFlags.IsRoot;
          }
          ;
        }
        ;
        return symbol;
      }
      lookup(token, kind = SymbolFlags.Scoped) {
        let variable;
        let name = token.value;
        if (name[name.length - 1] == "!") {
          name = name.slice(0, -1);
        }
        ;
        if (variable = this.varmap[name]) {
          return variable;
        }
        ;
        return null;
      }
      toOutline() {
        return {
          kind: this.type,
          name: this.name,
          children: [],
          span: this.ident ? this.ident.span : this.start.span
        };
      }
    };
    Scope[\u03A8__init__4]();
    Root = class extends Scope {
    };
    ForScope = class extends Scope {
      get expression() {
        let kw = this.find("keyword.in keyword.of");
        return kw.next.next;
      }
      get forvars() {
        return Object.values(this.varmap).filter(function(_0) {
          return _0.itervar\u03A6;
        });
      }
    };
    WeakScope = class extends Scope {
      register(symbol) {
        return this.parent.register(symbol);
      }
      lookup(...params) {
        return this.parent.lookup(...params);
      }
    };
    FieldScope = class extends Scope {
      get selfScope() {
        return this;
      }
    };
    SelectorNode = class extends Group {
    };
    StylePropKey = class extends Group {
      get propertyName() {
        var _a;
        if (this.start.next.match("style.property.name")) {
          return this.start.next.value;
        } else {
          return (_a = this.parent.prevProperty) == null ? void 0 : _a.propertyName;
        }
        ;
      }
      get modifier() {
        if (this.start.next.match("style.property.modifier")) {
          return this.start.next.value;
        }
        ;
      }
      get styleValue() {
        return true;
      }
    };
    StylePropValue = class extends Group {
      get key() {
        return this.parent.key;
      }
      get propertyName() {
        return this.parent.propertyName;
      }
      get modifier() {
        return this.parent.modifier;
      }
    };
    StylePropNode = class extends Group {
      get key() {
        return this.find("stylepropkey");
      }
      get prevProperty() {
        if (this.start.prev.pops) {
          return this.start.prev.pops;
        }
        ;
        return null;
      }
      get propertyName() {
        var _a;
        return (_a = this.key) == null ? void 0 : _a.propertyName;
      }
      get modifier() {
        var _a;
        return (_a = this.key) == null ? void 0 : _a.modifier;
      }
    };
    StyleInterpolation = class extends Group {
    };
    PathNode = class extends Group {
      get innerText() {
        return this.value.slice(1, -1);
      }
    };
    TagNode = class extends Group {
      get name() {
        let name = this.findChildren("tag.name").join("");
        return name == "self" ? this.closest("component").name : name;
      }
      get local\u03A6() {
        return this.name[0] == this.name[0].toUpperCase();
      }
      get tagName() {
        return this.name;
      }
      get parentTag() {
        var _a;
        return (_a = this.closest("tagcontent")) == null ? void 0 : _a.ownerTag;
      }
      get ancestorTags() {
        var _a;
        return (_a = this.closest("tagcontent")) == null ? void 0 : _a.ownerTags;
      }
      get ancestorPath() {
        return this.ancestorTags.map(function(_0) {
          return _0.tagName;
        }).join(".");
      }
      get pathName() {
        return "<" + this.name + ">";
      }
      get outline() {
        return this.findChildren(/tag\.(reference|name|id|white|flag|event(?!\-))/).join("");
      }
    };
    TagAttrNode = class extends Group {
      get propertyName() {
        if (this.start.next.match("tag.attr")) {
          return this.start.next.value;
        } else {
          return "";
        }
        ;
      }
      get tagName() {
        return this.parent.name;
      }
    };
    TagAttrValueNode = class extends Group {
      get propertyName() {
        return this.parent.propertyName;
      }
      get tagName() {
        return this.parent.tagName;
      }
    };
    TagContent = class extends WeakScope {
      get ownerTag() {
        return this.start.prev.pops;
      }
      get ownerTags() {
        let els = [this.ownerTag];
        let el;
        while (el = els[0].parentTag) {
          els.unshift(el);
        }
        ;
        return els;
      }
    };
    Listener = class extends Group {
      get name() {
        return this.findChildren("tag.event.name").join("").replace("@", "");
      }
    };
    ParensNode = class extends Group {
    };
    BracketsNode = class extends Group {
      static build(doc, tok, scope, typ, types) {
        let cls = this;
        let chr = doc.content[tok.offset - 1];
        if (!chr || " [{(|=&-;\n	:/*%+-".indexOf(chr) >= 0) {
          typ = "array";
          cls = ArrayNode;
        } else {
          typ = "index";
          cls = IndexNode;
        }
        ;
        return new cls(doc, tok, scope, typ, types);
      }
    };
    BracesNode = class extends Group {
    };
    SpecifiersNode = class extends BracesNode {
    };
    ArrayNode = class extends BracketsNode {
      get delimiters() {
        return this.childNodes.filter(function(_0) {
          return _0.match("delimiter");
        });
      }
      indexOfNode(node) {
        var i$\u03C6;
        let delims = this.delimiters;
        let index = 0;
        i$\u03C6 = 0;
        for (let delim of iter$__6(delims)) {
          let i = i$\u03C6++;
          if (node.offset > delim.offset) {
            index++;
          }
          ;
        }
        ;
        return index;
      }
    };
    IndexNode = class extends BracketsNode {
    };
    TypeAnnotationNode = class extends Group {
      static [\u03A8__init__4]() {
        this.prototype[\u03A8__initor__] = \u03C63;
        return this;
      }
      constructor() {
        super(...arguments);
        this.prev.datatype = this;
        this[\u03A8__initor__] === \u03C63 && this[\u03A8__inited__] && this[\u03A8__inited__]();
      }
      toString() {
        return this.value;
      }
    };
    TypeAnnotationNode[\u03A8__init__4]();
    InterpolatedValueNode = class extends Group {
    };
    ObjectNode = class extends BracesNode {
    };
    ImportsNode = class extends Group {
      get isTypeOnly() {
        return this.start.prev.match("keyword.type");
      }
      get sourcePath() {
        let path = this.childNodes.find(function(_0) {
          return _0.match("path");
        });
        return path == null ? void 0 : path.innerText;
      }
      get specifiers() {
        return this.childNodes.find(function(_0) {
          return _0.match("specifiers");
        });
      }
      get default() {
        return this.childNodes.find(function(_0) {
          return _0.match(".default");
        });
      }
      get namespace() {
        return this.childNodes.find(function(_0) {
          return _0.match(".ns");
        });
      }
    };
    ScopeTypeMap = {
      style: StyleNode,
      array: BracketsNode,
      stylerule: StyleRuleNode,
      sel: SelectorNode,
      path: PathNode,
      value: ValueNode,
      tag: TagNode,
      forscope: ForScope,
      field: FieldScope,
      type: TypeAnnotationNode,
      parens: ParensNode,
      brackets: BracketsNode,
      object: ObjectNode,
      braces: BracesNode,
      specifiers: SpecifiersNode,
      string: StringNode,
      tagattr: TagAttrNode,
      imports: ImportsNode,
      interpolation: InterpolatedValueNode,
      tagattrvalue: TagAttrValueNode,
      tagcontent: TagContent,
      listener: Listener,
      styleinterpolation: StyleInterpolation,
      styleprop: StylePropNode,
      stylepropkey: StylePropKey,
      stylevalue: StylePropValue,
      args: ParensNode
    };
  }
});
function extend$__(target, ext) {
  const descriptors = Object.getOwnPropertyDescriptors(ext);
  delete descriptors.constructor;
  Object.defineProperties(target, descriptors);
  return target;
}
function iter$__7(a) {
  let v;
  return a ? (v = a.toIterable) ? v.call(a) : a : [];
}
var \u03A8ins, \u03A8del, \u03A8version2, \u03A8multiline, \u03A8significant, \u03A8body, \u03A8lexed, Extend$Token$af, ImbaDocument;
var init_document = __esm({
  "src/program/document.imba"() {
    init_utils();
    init_lexer2();
    init_utils();
    init_scope();
    init_symbol();
    init_types();
    init_structures();
    \u03A8ins = /* @__PURE__ */ Symbol.for("#ins");
    \u03A8del = /* @__PURE__ */ Symbol.for("#del");
    \u03A8version2 = /* @__PURE__ */ Symbol.for("#version");
    \u03A8multiline = /* @__PURE__ */ Symbol.for("#multiline");
    \u03A8significant = /* @__PURE__ */ Symbol.for("#significant");
    \u03A8body = /* @__PURE__ */ Symbol.for("#body");
    \u03A8lexed = /* @__PURE__ */ Symbol.for("#lexed");
    Extend$Token$af = class {
      get node() {
        if (this.scope && this.scope.start == this) {
          return this.scope;
        }
        ;
        if (this.pops) {
          return this.pops;
        }
        ;
        return this;
      }
      get nextNode() {
        var _a;
        return (_a = this.next) == null ? void 0 : _a.node;
      }
      get prevNode() {
        var _a;
        return (_a = this.prev) == null ? void 0 : _a.node;
      }
    };
    extend$__(Token.prototype, Extend$Token$af.prototype);
    ImbaDocument = class {
      static tmp(content) {
        return new this("file://temporary.imba", "imba", 0, content);
      }
      static from(uri, languageId, version, content) {
        return new this(uri, languageId, version, content);
      }
      constructor(uri, languageId, version, content) {
        this.uri = uri;
        this.languageId = languageId;
        this.version = version;
        this.content = content;
        this.connection = null;
        this.lineTokens = [];
        this.isLegacy = languageId == "imba1" || uri && uri.match(/\.imba1$/);
        this.head = this.seed = new Token(0, "eol", "imba");
        this.initialState = lexer.getInitialState();
        this.seed.stack = lexer.getInitialState();
        this.history = [];
        this.lexer = lexer;
        this.versionToHistoryMap = {};
        this.versionToHistoryMap[version] = -1;
        if (content && content.match(/^\#[^\n]+imba1/m)) {
          this.isLegacy = true;
        }
        ;
      }
      log(...params) {
        return console.log(...params);
      }
      get lineCount() {
        return this.lineOffsets.length;
      }
      get lineOffsets() {
        return this._lineOffsets || (this._lineOffsets = computeLineOffsets(this.content, true));
      }
      getText(range = null) {
        if (range) {
          let start = this.offsetAt(range.start);
          let end = this.offsetAt(range.end);
          return this.content.substring(start, end);
        }
        ;
        return this.content;
      }
      getLineText(line) {
        let start = this.lineOffsets[line];
        let end = this.lineOffsets[line + 1];
        return this.content.substring(start, end).replace(/[\r\n]/g, "");
      }
      positionAt(offset) {
        if (offset instanceof Position) {
          return offset;
        }
        ;
        if (typeof offset == "object") {
          offset = offset.offset;
        }
        ;
        offset = Math.max(Math.min(offset, this.content.length), 0);
        let lineOffsets = this.lineOffsets;
        let low = 0;
        let high = lineOffsets.length;
        if (high === 0) {
          return new Position(0, offset, offset, this.version);
        }
        ;
        while (low < high) {
          let mid = Math.floor((low + high) / 2);
          if (lineOffsets[mid] > offset) {
            high = mid;
          } else {
            low = mid + 1;
          }
          ;
        }
        ;
        let line = low - 1;
        return new Position(line, offset - lineOffsets[line], offset, this.version);
      }
      offsetAt(position) {
        if (position.offset) {
          return position.offset;
        }
        ;
        let lineOffsets = this.lineOffsets;
        if (position.line >= lineOffsets.length) {
          return this.content.length;
        } else if (position.line < 0) {
          return 0;
        }
        ;
        let lineOffset = lineOffsets[position.line];
        let nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this.content.length;
        return position.offset = Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
      }
      rangeAt(start, end = start) {
        return new Range(this.positionAt(start), this.positionAt(end));
      }
      overwrite(body, newVersion) {
        this.version = newVersion || this.version + 1;
        this.content = body;
        this._lineOffsets = null;
        this.invalidateFromLine(0);
        return this;
      }
      update(changes, version) {
        if (version == void 0) {
          version = this.version + 1;
        }
        ;
        let edits = [];
        let isSignificant = false;
        edits[\u03A8ins] = "";
        edits[\u03A8del] = "";
        for (let i = 0, items\u03C6 = iter$__7(changes), len\u03C62 = items\u03C6.length; i < len\u03C62; i++) {
          let change = items\u03C6[i];
          if (editIsFull(change)) {
            this.overwrite(change.text, version);
            edits.push([0, this.content.length, change.text]);
            isSignificant = true;
            continue;
          }
          ;
          let range = getWellformedRange(change.range);
          let startOffset = this.offsetAt(range.start);
          let endOffset = this.offsetAt(range.end);
          change.range = range;
          change.offset = startOffset;
          change.length = endOffset - startOffset;
          range.start.offset = startOffset;
          range.end.offset = endOffset;
          let remLength = endOffset - startOffset;
          let prevText = remLength ? this.content.slice(startOffset, endOffset) : "";
          edits[\u03A8del] += prevText;
          edits[\u03A8ins] += change.text || "";
          this.applyEdit(change, version, changes);
          edits.push([startOffset, endOffset - startOffset, change.text || "", prevText]);
          let startLine = Math.max(range.start.line, 0);
          let endLine = Math.max(range.end.line, 0);
          let lineOffsets = this.lineOffsets;
          let addedLineOffsets = computeLineOffsets(change.text, false, startOffset);
          if (endLine - startLine === addedLineOffsets.length) {
            for (let k = 0, items\u03C62 = iter$__7(addedLineOffsets), len\u03C6 = items\u03C62.length; k < len\u03C6; k++) {
              let added = items\u03C62[k];
              lineOffsets[k + startLine + 1] = addedLineOffsets[i];
            }
            ;
          } else {
            if (addedLineOffsets.length < 1e4) {
              lineOffsets.splice.apply(lineOffsets, [startLine + 1, endLine - startLine].concat(addedLineOffsets));
            } else {
              this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
            }
            ;
          }
          ;
          let diff = change.text.length - (endOffset - startOffset);
          if (diff !== 0) {
            let k = startLine + 1 + addedLineOffsets.length;
            while (k < lineOffsets.length) {
              lineOffsets[k] = lineOffsets[k] + diff;
              k++;
            }
            ;
          }
          ;
        }
        ;
        this.history.push(edits);
        edits[\u03A8version2] = version;
        let prevEdits = this.history[this.history.length - 2];
        let changeStr = edits[\u03A8ins] + edits[\u03A8del];
        if (changeStr.indexOf("\n") >= 0) {
          edits[\u03A8multiline] = true;
          if (prevEdits && !prevEdits[\u03A8multiline]) {
            edits[\u03A8significant] = true;
            edits[\u03A8body] = this.content;
          }
          ;
        }
        ;
        this.versionToHistoryMap[version] = this.history.length - 1;
        return this.updated(changes, version);
      }
      get lastSignificantVersion() {
        let i = this.history.length;
        while (i > 0) {
          let edits = this.history[--i];
          if (edits && edits[\u03A8significant]) {
            return edits[\u03A8version2];
          }
          ;
        }
        ;
        return null;
      }
      editsSinceVersion(version) {
        let from = this.versionToHistoryMap[version];
        let edits = [];
        for (let i\u03C6 = 0, items\u03C63 = iter$__7(this.history.slice(from + 1)), len\u03C63 = items\u03C63.length; i\u03C6 < len\u03C63; i\u03C6++) {
          let item = items\u03C63[i\u03C6];
          edits.push(...item);
        }
        ;
        return edits;
      }
      contentAtVersion(version) {
        let nr = this.versionToHistoryMap[version];
        let edits = this.history[nr];
        if (edits[\u03A8body] != void 0) {
          return edits[\u03A8body];
        }
        ;
        return null;
      }
      offsetAtVersion(fromOffset, fromVersion, toVersion = this.version, stickyStart = false) {
        let from = this.versionToHistoryMap[fromVersion];
        let to = this.versionToHistoryMap[toVersion];
        let offset = fromOffset;
        let modified = false;
        if (from < to) {
          while (from < to) {
            let edits = this.history[++from];
            for (let i\u03C62 = 0, items\u03C64 = iter$__7(edits), len\u03C64 = items\u03C64.length; i\u03C62 < len\u03C64; i\u03C62++) {
              let [start, len, text] = items\u03C64[i\u03C62];
              if (start > offset) {
                continue;
              }
              ;
              if (stickyStart) {
                start -= 1;
              }
              ;
              if (offset > start && offset > start + len) {
                offset += text.length - len;
              }
              ;
            }
            ;
          }
          ;
        } else if (to < from) {
          while (to < from) {
            let edits = this.history[from--];
            for (let i\u03C63 = 0, items\u03C65 = iter$__7(edits), len\u03C65 = items\u03C65.length; i\u03C63 < len\u03C65; i\u03C63++) {
              let [start, len, text] = items\u03C65[i\u03C63];
              if (start > offset) {
                continue;
              }
              ;
              if (offset > start && offset > start + len) {
                offset -= text.length - len;
              }
              ;
            }
            ;
          }
          ;
        }
        ;
        return offset;
      }
      historicalOffset(offset, oldVersion) {
        return this.offsetAtVersion(offset, this.version, oldVersion, true);
      }
      applyEdit(change, version, changes) {
        this.content = this.content.substring(0, change.range.start.offset) + change.text + this.content.substring(change.range.end.offset, this.content.length);
        let line = change.range.start.line;
        this.invalidateFromLine(line);
        return;
      }
      updated(changes, version) {
        this.version = version;
        return this;
      }
      invalidateFromLine(line) {
        this.head = this.seed;
        return this;
      }
      after(token, match) {
        let idx = this.tokens.indexOf(token);
        if (match) {
          while (idx < this.tokens.length) {
            let tok = this.tokens[++idx];
            if (tok && this.matchToken(tok, match)) {
              return tok;
            }
            ;
          }
          ;
          return null;
        }
        ;
        return this.tokens[idx + 1];
      }
      matchToken(token, match) {
        if (match instanceof RegExp) {
          return token.type.match(match);
        } else if (typeof match == "string") {
          return token.type == match;
        }
        ;
        return false;
      }
      before(token, match, offset = 0) {
        let idx = this.tokens.indexOf(token) + offset;
        if (match) {
          while (idx > 0) {
            let tok = this.tokens[--idx];
            if (this.matchToken(tok, match)) {
              return tok;
            }
            ;
          }
          ;
          return null;
        }
        ;
        return this.tokens[idx - 1];
      }
      getTokenRange(token) {
        return { start: this.positionAt(token.offset), end: this.positionAt(token.offset + token.value.length) };
      }
      getTokensInScope(scope) {
        let start = this.tokens.indexOf(scope.start);
        let end = scope.end ? this.tokens.indexOf(scope.end) : this.tokens.length;
        let i = start;
        let parts = [];
        while (i < end) {
          let tok = this.tokens[i++];
          if (tok.scope && tok.scope != scope) {
            parts.push(tok.scope);
            i = tok.scope.endIndex + 1;
          } else {
            parts.push(tok);
          }
          ;
        }
        ;
        return parts;
      }
      getSymbols() {
        var \u03C64;
        this.astify();
        return (\u03C64 = this[\u03A8lexed]).symbols || (\u03C64.symbols = this.tokens.map(function(_0) {
          return _0.symbol;
        }).filter(function(_0) {
          return _0;
        }).filter(function(sym, i, arr) {
          return arr.indexOf(sym) == i;
        }));
      }
      getImportedSymbols() {
        return this.getSymbols().filter(function(_0) {
          return _0.imported\u03A6;
        });
      }
      getImportNodes() {
        let tokens = this.tokens.filter(function(_0) {
          return _0.match("push._imports");
        });
        return tokens.map(function(_0) {
          return _0.scope;
        });
      }
      getNodesInScope(scope, includeEnds = false) {
        let tok = scope.start;
        let end = scope.end;
        if (includeEnds) {
          end = end.next;
        } else {
          tok = tok.next;
        }
        ;
        let parts = [];
        while (tok && tok != end) {
          if (tok.scope && tok.scope != scope) {
            parts.push(tok.scope);
            tok = tok.scope.end.next;
            continue;
          } else if (tok.type != "white") {
            parts.push(tok);
          }
          ;
          tok = tok.next;
        }
        ;
        return parts;
      }
      getTokenAtOffset(offset, forwardLooking = false) {
        return this.tokenAtOffset(offset);
        let pos = this.positionAt(offset);
        this.getTokens(pos);
        let line = this.lineTokens[pos.line];
        let idx = line.index;
        let token;
        let prev;
        while (token = this.tokens[idx++]) {
          if (forwardLooking && token.offset == offset) {
            return token;
          }
          ;
          if (token.offset >= offset) {
            break;
          }
          ;
          prev = token;
        }
        ;
        return prev || token;
      }
      getSemanticTokens(filter2 = SymbolFlags.Scoped) {
        let tokens = this.parse();
        let items = [];
        for (let i = 0, items\u03C66 = iter$__7(tokens), len\u03C66 = items\u03C66.length; i < len\u03C66; i++) {
          let tok = items\u03C66[i];
          let sym = tok.symbol;
          if (!(sym && (!filter2 || sym.flags & filter2))) {
            continue;
          }
          ;
          let typ = SemanticTokenTypes[sym.semanticKind];
          let mods = tok.mods | sym.semanticFlags;
          items.push([tok.offset, tok.value.length, typ, mods]);
        }
        ;
        return items;
      }
      getEncodedSemanticTokens() {
        let tokens = this.getSemanticTokens();
        let out = [];
        let l = 0;
        let c = 0;
        for (let i\u03C64 = 0, items\u03C67 = iter$__7(tokens), len\u03C67 = items\u03C67.length; i\u03C64 < len\u03C67; i\u03C64++) {
          let item = items\u03C67[i\u03C64];
          let pos = this.positionAt(item[0]);
          let dl = pos.line - l;
          let chr = dl ? pos.character : pos.character - c;
          out.push(dl, chr, item[1], item[2], item[3]);
          l = pos.line;
          c = pos.character;
        }
        ;
        return out;
      }
      getDestructuredPath(tok, stack = [], root = null) {
        if (tok.context.type == "array") {
          this.getDestructuredPath(tok.context.start, stack, root);
          stack.push(tok.context.indexOfNode(tok));
          return stack;
        }
        ;
        let key = tok.value;
        if (tok.prev.match("operator.assign.key-value")) {
          key = tok.prev.prev.value;
        }
        ;
        if (tok.context.type == "object") {
          this.getDestructuredPath(tok.context.start, stack, root);
          stack.push(key);
        }
        ;
        return stack;
      }
      tokenAtOffset(offset) {
        let tok = this.tokens[0];
        while (tok) {
          let next = tok.next;
          if (tok.offset >= offset) {
            return tok.prev;
          }
          ;
          if (tok.end && tok.end.offset < offset) {
            tok = tok.end;
          } else if (next) {
            tok = next;
          } else {
            return tok;
          }
          ;
        }
        ;
        return tok;
      }
      patternAtOffset(offset, matcher = /[\w\-\.\%]/) {
        let from = offset;
        let to = offset;
        let str = this.content;
        while (from > 0 && matcher.test(this.content[from - 1])) {
          from--;
        }
        ;
        while (matcher.test(this.content[to + 1] || "")) {
          to++;
        }
        ;
        let value = str.slice(from, to + 1);
        return [value, from, to];
      }
      adjustmentAtOffset(offset, amount = 1) {
        let [word, start, end] = this.patternAtOffset(offset);
        let [pre, post = ""] = word.split(/[\d\.]+/);
        let num = parseFloat(word.slice(pre.length).slice(0, post.length ? -post.length : 1e3));
        if (!Number.isNaN(num)) {
          num += amount;
          return [start + pre.length, word.length - pre.length - post.length, String(num)];
        }
        ;
        return null;
      }
      contextAtOffset(offset) {
        var res\u03C6;
        this.ensureParsed();
        let pos = this.positionAt(offset);
        let tok = this.tokenAtOffset(offset);
        let linePos = this.lineOffsets[pos.line];
        let tokPos = offset - tok.offset;
        let ctx = tok.context;
        const before = {
          character: this.content[offset - 1],
          line: this.content.slice(linePos, offset),
          token: tok.value.slice(0, tokPos)
        };
        const after = {
          character: this.content[offset],
          token: tok.value.slice(tokPos),
          line: this.content.slice(offset, this.lineOffsets[pos.line + 1]).replace(/[\r\n]+/, "")
        };
        if (tok.scope && !after.token) {
          ctx = tok.scope;
        }
        ;
        if (tok.next) {
          if (tok.next.value == null && tok.next.scope && !after.token && tok.match("operator.assign")) {
            ctx = tok.next.scope;
          }
          ;
        }
        ;
        let tabs = prevToken(tok, "white.tabs");
        let indent = tabs ? tabs.value.length : 0;
        let group = ctx;
        let scope = ctx.scope;
        let meta = {};
        let target = tok;
        let mstate = tok.stack.state || "";
        let t = CompletionTypes;
        if (group) {
          if (group.start) {
            before.group = this.content.slice(group.start.offset, offset);
          }
          ;
          if (group.end) {
            after.group = this.content.slice(offset, group.end.offset);
          }
          ;
        }
        ;
        let suggest = {
          keywords: []
        };
        let flags = 0;
        if (tok == tabs) {
          indent = tokPos;
        }
        ;
        if (tok.match("br white.tabs")) {
          while (scope.indent > indent) {
            scope = scope.parent;
          }
          ;
        }
        ;
        if (group.type == "tag") {
          true;
        }
        ;
        if (tok.match("entity string regexp comment style.")) {
          flags = 0;
        }
        ;
        if (tok.match("tag.event.name tag.event-modifier.name")) {
          target = tok.prev;
        }
        ;
        if (tok.type == "path" || tok.type == "path.open") {
          flags |= CompletionTypes.Path;
          suggest.paths = 1;
        }
        ;
        if (tok.match("identifier tag.operator.equals br white delimiter array operator ( self")) {
          flags |= CompletionTypes.Value;
          target = null;
        }
        ;
        if (tok.match("operator.access")) {
          flags |= CompletionTypes.Access;
          target = tok;
        }
        ;
        if (tok.match("accessor")) {
          flags |= CompletionTypes.Access;
          target = tok.prev;
        }
        ;
        if (tok.match("delimiter.type.prefix type")) {
          flags |= CompletionTypes.Type;
        }
        ;
        if (tok.match("tag.name tag.open")) {
          flags |= CompletionTypes.TagName;
        } else if (tok.match("tag.attr tag.white")) {
          flags |= CompletionTypes.TagProp;
        } else if (tok.match("tag.flag")) {
          flags |= CompletionTypes.TagFlag;
        } else if (tok.match("tag.event.modifier")) {
          flags |= CompletionTypes.TagEventModifier;
        } else if (tok.match("tag.event")) {
          flags |= CompletionTypes.TagEvent;
        } else if (tok.match("operator.equals.tagop")) {
          flags |= CompletionTypes.Value;
        }
        ;
        if (tok.match("style.property.operator") || group.closest("stylevalue")) {
          flags |= t.StyleValue;
          try {
            suggest.styleProperty = group.closest("styleprop").propertyName;
          } catch (e) {
          }
          ;
        }
        ;
        if (tok.match("style.open style.property.name")) {
          flags |= t.StyleProp;
        }
        ;
        if (tok.match("style.value.white") || tok.prev && tok.prev.match("style.value.white")) {
          flags |= t.StyleProp;
        }
        ;
        if (tok.match("style.selector.element") && after.line.match(/^\s*$/)) {
          flags |= t.StyleProp;
        }
        ;
        if (scope.closest("rule")) {
          flags |= t.StyleProp;
          flags &= ~t.Value;
        }
        ;
        if (tok.match("style.property.operator")) {
          flags &= ~t.StyleProp;
        }
        ;
        if (group.match("stylevalue") && before.group.indexOf(" ") == -1) {
          flags = t.StyleValue;
        }
        ;
        if (tok.match("style.selector.modifier style.property.modifier")) {
          flags = t.StyleModifier;
        }
        ;
        if (tok.match("style.selector.element")) {
          flags |= t.StyleSelector;
        }
        ;
        if (scope.closest("rule") && before.line.match(/^\s*$/)) {
          flags |= t.StyleSelector;
          flags &= ~t.StyleValue;
        }
        ;
        if (tok.match("operator.access accessor white.classname white.tagname")) {
          flags &= ~t.Value;
        }
        ;
        if (group.closest("imports")) {
          flags &= ~t.Value;
          flags |= t.ImportName;
        }
        ;
        if (mstate.match(/\.decl-(let|var|const|param|for)/) || tok.match(/\.decl-(for|let|var|const|param)/)) {
          flags &= ~t.Value;
          flags |= t.VarName;
        }
        ;
        let kfilter = scope.allowedKeywordTypes;
        res\u03C6 = [];
        for (let i\u03C65 = 0, keys\u03C6 = Object.keys(Keywords), l\u03C6 = keys\u03C6.length, key, v; i\u03C65 < l\u03C6; i\u03C65++) {
          key = keys\u03C6[i\u03C65];
          v = Keywords[key];
          if (!(v & kfilter)) {
            continue;
          }
          ;
          res\u03C6.push(key);
        }
        ;
        suggest.keywords = res\u03C6;
        suggest.flags = flags;
        for (let i\u03C66 = 0, keys\u03C62 = Object.keys(t), l\u03C62 = keys\u03C62.length, k, v; i\u03C66 < l\u03C62; i\u03C66++) {
          k = keys\u03C62[i\u03C66];
          v = t[k];
          if (flags & v) {
            suggest[k] || (suggest[k] = true);
          }
          ;
        }
        ;
        let out = {
          token: tok,
          offset,
          position: pos,
          linePos,
          scope,
          indent,
          group: ctx,
          mode: "",
          target,
          path: scope.path,
          suggest,
          before,
          after
        };
        return out;
      }
      textBefore(offset) {
        let before = this.content.slice(0, offset);
        let ln = before.lastIndexOf("\n");
        return before.slice(ln + 1);
      }
      varsAtOffset(offset, globals\u03A6 = false) {
        let tok = this.tokenAtOffset(offset);
        let vars = [];
        let scope = tok.context.scope;
        let names = {};
        while (scope) {
          for (let i\u03C67 = 0, items\u03C68 = iter$__7(Object.values(scope.varmap)), len\u03C68 = items\u03C68.length; i\u03C67 < len\u03C68; i\u03C67++) {
            let item = items\u03C68[i\u03C67];
            if (item.global\u03A6 && !globals\u03A6) {
              continue;
            }
            ;
            if (names[item.name]) {
              continue;
            }
            ;
            if (!item.node || item.node.offset < offset) {
              vars.push(item);
              names[item.name] = item;
            }
            ;
          }
          ;
          scope = scope.parent;
        }
        ;
        return vars;
      }
      getOutline(walker = null) {
        var \u03C622, \u03C632, \u03C64, \u03C65;
        if (this.isLegacy) {
          let symbols2 = fastExtractSymbols(this.content);
          for (let i\u03C68 = 0, items\u03C69 = iter$__7(symbols2.all), len\u03C69 = items\u03C69.length; i\u03C68 < len\u03C69; i\u03C68++) {
            let item = items\u03C69[i\u03C68];
            \u03C622 = item.parent, delete item.parent, \u03C622;
            item.path = item.name;
            item.name = item.ownName;
            if (walker) {
              walker(item, symbols2.all);
            }
            ;
          }
          ;
          return symbols2;
        }
        ;
        this.ensureParsed();
        let t = Date.now();
        let all = [];
        let root = { children: [] };
        let curr = root;
        let scop = null;
        let last = {};
        let symbols = /* @__PURE__ */ new Set();
        let awaitScope = null;
        function add(item, tok) {
          if (item instanceof Sym) {
            symbols.add(item);
            item = {
              name: item.name,
              kind: item.kind
            };
          }
          ;
          last = item;
          item.token = tok;
          item.children || (item.children = []);
          item.span || (item.span = tok.span);
          item.name || (item.name = tok.value);
          all.push(item);
          return curr.children.push(item);
        }
        ;
        function push(end) {
          last.children || (last.children = []);
          last.parent || (last.parent = curr);
          curr = last;
          return curr.end = end;
        }
        ;
        function pop(tok) {
          return curr = curr.parent;
        }
        ;
        for (let i = 0, items\u03C610 = iter$__7(this.tokens), len\u03C610 = items\u03C610.length; i < len\u03C610; i++) {
          let token = items\u03C610[i];
          let sym = token.symbol;
          let scope = token.scope;
          if (token.type == "key") {
            add({ kind: SymbolKind.Key }, token);
          } else if (sym) {
            if (sym.parameter\u03A6) {
              continue;
            }
            ;
            if (!symbols.has(sym)) {
              add(sym, token);
            }
            ;
            if (sym.body) {
              awaitScope = sym.body.start;
            }
            ;
          } else if (scope && scope.type == "do") {
            let pre = this.textBefore(token.offset - 3).replace(/^\s*(return\s*)?/, "");
            pre += " callback";
            add({ kind: SymbolKind.Function, name: pre }, token.prev);
            awaitScope = token;
          } else if (scope && scope.type == "tag") {
            add({ kind: SymbolKind.Field, name: scope.outline }, token);
          }
          ;
          if (token == awaitScope) {
            push(token.end);
          }
          ;
          if (token == curr.end) {
            pop();
          }
          ;
        }
        ;
        for (let i\u03C69 = 0, items\u03C611 = iter$__7(all), len\u03C611 = items\u03C611.length; i\u03C69 < len\u03C611; i\u03C69++) {
          let item = items\u03C611[i\u03C69];
          if (item.span) {
            let len = item.span.length;
            item.span.start = this.positionAt(item.span.offset);
            item.span.end = len ? this.positionAt(item.span.offset + len) : item.span.start;
          }
          ;
          if (walker) {
            walker(item, all);
          }
          ;
          \u03C632 = item.parent, delete item.parent, \u03C632;
          \u03C64 = item.end, delete item.end, \u03C64;
          \u03C65 = item.token, delete item.token, \u03C65;
        }
        ;
        return root;
      }
      getContextAtOffset(offset, forwardLooking = false) {
        return this.contextAtOffset(offset);
      }
      ensureParsed() {
        this.parse();
        return this;
      }
      reparse() {
        this.invalidateFromLine(0);
        return this.parse();
      }
      profileReparse() {
        let t = Date.now();
        let res = this.reparse();
        console.log("took", Date.now() - t);
        return res;
      }
      tokenize(force = false) {
        var \u03C66;
        let from = this[\u03A8lexed] || { lines: [], version: -1 };
        if (from.version == this.version && !force) {
          return from;
        }
        ;
        let raw = this.content;
        if (this.isLegacy) {
          raw = raw.replace(/\@\w/g, function(m) {
            return "\xB6" + m.slice(1);
          });
          raw = raw.replace(/\w\:(?=\w)/g, function(m) {
            return m[0] + ".";
          });
          raw = raw.replace(/(do)(\s?)\|([^\|]*)\|/g, function(m, a, space, b) {
            return a + "(" + (space || "") + b + ")";
          });
        }
        ;
        let lineOffsets = this.lineOffsets;
        let tokens = [];
        let head = this.seed;
        let prev = head;
        let t0 = Date.now();
        let nextState = this.initialState;
        this[\u03A8lexed] = {
          version: this.version,
          lines: [],
          tokens
        };
        let lineCache = {};
        this[\u03A8lexed].cache = lineCache;
        for (let i\u03C610 = 0, items\u03C612 = iter$__7(from.lines), len\u03C612 = items\u03C612.length; i\u03C610 < len\u03C612; i\u03C610++) {
          let line = items\u03C612[i\u03C610];
          let item = lineCache[\u03C66 = line.text] || (lineCache[\u03C66] = []);
          item.push(line);
          line;
        }
        ;
        for (let i = 0, items\u03C613 = iter$__7(lineOffsets), len\u03C614 = items\u03C613.length; i < len\u03C614; i++) {
          let lineOffset = items\u03C613[i];
          let next = lineOffsets[i + 1];
          let toOffset = next || raw.length;
          let str = raw.slice(lineOffset, toOffset);
          let startState = nextState;
          let cached2 = lineCache[str];
          let matches = cached2 && cached2.filter(function(item) {
            return item.startState == startState;
          });
          let match = matches && (matches.find(function(_0) {
            return _0.offset == lineOffset;
          }) || matches[0]);
          let lexed = null;
          if (match) {
            if (match.offset == lineOffset) {
              lexed = match.clone(lineOffset);
            } else {
              lexed = match.clone(lineOffset);
            }
            ;
          }
          ;
          if (!lexed) {
            let run = lexer.tokenize(str, startState, lineOffset);
            lexed = new LexedLine(
              {
                offset: lineOffset,
                text: str,
                startState,
                endState: run.endState,
                tokens: run.tokens
              }
            );
          }
          ;
          for (let ti = 0, items\u03C614 = iter$__7(lexed.tokens), len\u03C613 = items\u03C614.length; ti < len\u03C613; ti++) {
            let tok = items\u03C614[ti];
            tokens.push(tok);
          }
          ;
          this[\u03A8lexed].lines.push(lexed);
          nextState = lexed.endState;
        }
        ;
        return this[\u03A8lexed];
      }
      get tokens() {
        this.astify();
        return this[\u03A8lexed].tokens;
      }
      getTokens(range = null) {
        return this.tokens;
      }
      astify() {
        let lexed = this.tokenize();
        if (lexed.root) {
          return this;
        }
        ;
        const pairings = { "]": "[", ")": "(", "}": "{", ">": "<" };
        const openers = { "[": "]", "(": ")", "{": "}", "<": ">" };
        const callAfter = /[\w\$\)\]\?]/;
        let t0 = Date.now();
        let entity = null;
        let scope = lexed.root = new Root(this, this.seed, null, "root");
        let raw = this.content;
        let log2 = console.log.bind(console);
        let lastDecl = null;
        let lastVarKeyword = null;
        let lastVarAssign = null;
        let prev = null;
        let entityFlags = 0;
        for (let ti = 0, items\u03C615 = iter$__7(lexed.tokens), len\u03C615 = items\u03C615.length; ti < len\u03C615; ti++) {
          let tok = items\u03C615[ti];
          let types = tok.type.split(".");
          let value = tok.value;
          let nextToken = lexed.tokens[ti + 1];
          let [typ, subtyp, sub2] = types;
          let ltyp = types[types.length - 1];
          let styp = types[types.length - 2];
          let scopeType = null;
          let decl = 0;
          if (typ == "ivar") {
            value = tok.value = "@" + value.slice(1);
          }
          ;
          if (prev) {
            prev.next = tok;
          }
          ;
          tok.prev = prev;
          tok.context = scope;
          if (typ == "(" && prev) {
            let prevchr = raw[tok.offset - 1] || "";
            if (callAfter.test(prevchr)) {
              scope = tok.scope = ScopeTypeMap.args.build(this, tok, scope, "args", types);
            }
            ;
          }
          ;
          if (typ == "operator") {
            tok.op = tok.value.trim();
          }
          ;
          if (typ == "keyword") {
            if (M[subtyp]) {
              entityFlags |= M[subtyp];
            }
            ;
            if (value == "let" || value == "const") {
              lastVarKeyword = tok;
              lastVarAssign = null;
            }
            ;
          }
          ;
          if (typ == "entity") {
            tok.mods |= entityFlags;
            entityFlags = 0;
          }
          ;
          if (typ == "push") {
            let scopetype = subtyp;
            let idx = subtyp.lastIndexOf("_");
            let ctor = idx >= 0 ? Group : Scope;
            if (idx >= 0) {
              scopetype = scopetype.slice(idx + 1);
              ctor = ScopeTypeMap[scopetype] || Group;
            } else if (ScopeTypeMap[scopetype]) {
              ctor = ScopeTypeMap[scopetype];
            }
            ;
            scope = tok.scope = new ctor(this, tok, scope, scopetype, types);
            if (lastDecl) {
              lastDecl.body = scope;
              scope.symbol = lastDecl;
              lastDecl = null;
            }
            ;
            if (scope == scope.scope) {
              lastVarKeyword = null;
              lastVarAssign = null;
            }
            ;
          } else if (typ == "pop") {
            if (subtyp == "value") {
              lastVarAssign = null;
            }
            ;
            scope = scope.pop(tok);
          } else if ((subtyp == "open" || openers[subtyp]) && ScopeTypeMap[typ]) {
            scope = tok.scope = ScopeTypeMap[typ].build(this, tok, scope, typ, types);
          } else if (ltyp == "open" && (scopeType = ScopeTypeMap[styp])) {
            scope = tok.scope = scopeType.build(this, tok, scope, styp, types);
          } else if (ltyp == "close" && scope.type == styp) {
            scope = scope.pop(tok);
          } else if (subtyp == "close" && ScopeTypeMap[typ]) {
            scope = scope.pop(tok);
          } else if (pairings[typ] && scope && scope.start.value == pairings[typ]) {
            scope = scope.pop(tok);
          }
          ;
          if (tok.match(/entity\.name|decl-/)) {
            let tokenSymbol = Sym.forToken(tok, tok.type, tok.mods);
            if (tokenSymbol) {
              lastDecl = tok.symbol = tokenSymbol;
              tok.symbol.keyword = lastVarKeyword;
              scope.register(tok.symbol);
            }
            ;
            tok.mods |= M.Declaration;
          }
          ;
          if (subtyp == "declval") {
            lastVarAssign = tok;
          }
          ;
          if (tok.match("identifier") && !tok.symbol) {
            let sym = scope.lookup(tok, lastVarKeyword);
            if (sym && sym.scoped\u03A6) {
              if (lastVarAssign && sym.keyword == lastVarKeyword) {
                true;
              } else {
                sym.addReference(tok);
              }
              ;
            }
            ;
            if (prev && prev.op == "=" && sym) {
              let lft = prev.prev;
              if (lft && lft.symbol == sym) {
                if (lft.mods & M.Declaration) {
                  sym.dereference(tok);
                } else if (!nextToken || nextToken.match("br")) {
                  sym.dereference(lft);
                }
                ;
              }
              ;
            }
            ;
          }
          ;
          prev = tok;
        }
        ;
        return this;
      }
      parse() {
        return this.tokens;
      }
      getMatchingTokens(filter2) {
        let tokens = this.getTokens();
        tokens = tokens.slice(0).filter(function(_0) {
          return _0.match(filter2);
        });
        return tokens;
      }
      migrateToImba2() {
        let source = this.content;
        source = source.replace(/\bdef self\./g, "static def ");
        source = source.replace(/\b(var|let|const) def /g, "def ");
        source = source.replace(/\?\./g, "..");
        source = source.replace(/def ([\w\-]+)\=/g, "set $1");
        source = source.replace(/do\s?\|([^\|]+)\|/g, "do($1)");
        source = source.replace(/(prop) ([\w\-]+) (.+)$/gm, function(m, typ, name, rest) {
          var \u03C67, \u03C68;
          let opts = {};
          rest.split(/,\s*/).map(function(_0) {
            return _0.split(/\:\s*/);
          }).map(function(_0) {
            return opts[_0[0]] = _0[1];
          });
          let out = "" + typ + " " + name;
          if (opts.watch && opts.watch[0].match(/[\'\"\:]/)) {
            out = "@watch(" + opts.watch + ") " + out;
          } else if (opts.watch) {
            out = "@watch " + out;
          }
          ;
          \u03C67 = opts.watch, delete opts.watch, \u03C67;
          if (opts.default) {
            out = "" + out + " = " + opts.default;
            \u03C68 = opts.default, delete opts.default, \u03C68;
          }
          ;
          if (Object.keys(opts).length) {
            console.log("more prop values", m, opts);
          }
          ;
          return out;
        });
        let doc = ImbaDocument.tmp(source);
        let tokens = doc.getTokens();
        let ivarPrefix = "";
        for (let i = 0, items\u03C616 = iter$__7(tokens), len\u03C616 = items\u03C616.length; i < len\u03C616; i++) {
          let token = items\u03C616[i];
          let next = tokens[i + 1];
          let { value, type, offset } = token;
          let end = offset + value.length;
          if (type == "operator.dot.legacy") {
            value = ".";
            if (next) {
              next.access = true;
            }
            ;
          }
          ;
          if (type == "operator.spread.legacy") {
            value = "...";
          }
          ;
          if (type == "identifier.tagname") {
            if (value.indexOf(":") >= 0) {
              value = value.replace(":", "-");
            }
            ;
          }
          ;
          if (type == "identifier.def.propname" && value == "initialize") {
            value = "constructor";
          }
          ;
          if (type == "decorator" && !source.slice(end).match(/^\s(prop|def|get|set)/)) {
            value = ivarPrefix + value.slice(1);
          }
          ;
          if (type == "property") {
            if (value[0] == "@") {
              value = value.replace(/^\@/, ivarPrefix);
              token.access = true;
            } else if (value == "len") {
              value = "length";
            } else if (/^(\n|\s\:|\)|\,|\.)/.test(source.slice(end)) && !token.access) {
              if (value[0] == value[0].toLowerCase()) {
                value = value + "!";
              }
              ;
            }
            ;
          }
          ;
          if (type == "identifier" && !token.access && value[0] == value[0].toLowerCase() && value[0] != "_") {
            if (!token.variable && /^(\n|\s\:|\)|\,|\.)/.test(source.slice(end)) && value != "new") {
              value = value + "!";
            }
            ;
          }
          ;
          token.value = value;
        }
        ;
        return tokens.map(function(_0) {
          return _0.value;
        }).join("");
      }
      createImportEdit(path, name, alias = name) {
        path = path.replace(/\.imba$/, "");
        let nodes = this.getImportNodes().filter(function(_0) {
          return _0.sourcePath == path;
        });
        let out = "";
        let offset = 0;
        let changes = [];
        let result = {
          changes
        };
        if (true) {
          let symbols = this.getImportedSymbols().map(function(_0) {
            return _0.importInfo;
          });
          let match = symbols.find(function(_0) {
            return _0.path == path && _0.name == alias && _0.exportName == name;
          });
          if (match) {
            return result;
          }
          ;
        }
        ;
        if (name != "default" && name != "*") {
          nodes = nodes.filter(function(_0) {
            return _0.specifiers || !_0.ns;
          });
        }
        ;
        for (let i\u03C611 = 0, items\u03C617 = iter$__7(nodes), len\u03C617 = items\u03C617.length; i\u03C611 < len\u03C617; i\u03C611++) {
          let node = items\u03C617[i\u03C611];
          let defaults = node.default;
          let members = node.specifiers;
          let ns = node.namespace;
          if (name == "default") {
            offset = node.start.offset + 1;
            if (defaults) {
              if (defaults.value == alias) {
                return result;
              } else {
                result.alias = defaults.value;
                offset = 0;
                continue;
              }
              ;
            } else {
              out = alias;
              if (ns || members) {
                out += ", ";
              }
              ;
            }
            ;
          } else if (name == "*") {
            if (members) {
              continue;
            }
            ;
            if (defaults) {
              offset = defaults.endOffset;
              out = ", * as " + alias;
            } else {
              offset = node.start.offset + 1;
              out = "* as " + alias + " ";
            }
            ;
          } else if (ns) {
            result.alias = "" + ns.value + "." + name;
            continue;
          } else {
            let key = name;
            if (alias != name) {
              key += " as " + alias;
            }
            ;
            if (members) {
              offset = members.start.offset + 1;
              out = " " + key + ",";
            } else if (defaults) {
              offset = defaults.endOffset;
              out = ", { " + key + " }";
            } else {
              out = "{ " + key + " }";
              offset = node.start.offset + 1;
            }
            ;
          }
          ;
          if (out) {
            break;
          }
          ;
        }
        ;
        if (!out) {
          if (name == "default") {
            out = "import " + alias + " from '" + path + "'";
          } else if (name == "*") {
            out = "import * as " + alias + " from '" + path + "'";
          } else if (alias != name) {
            out = "import { " + name + " as " + alias + " } from '" + path + "'";
          } else {
            out = "import { " + name + " } from '" + path + "'";
          }
          ;
          out += "\n";
        }
        ;
        changes.push({ newText: out, range: this.rangeAt(offset, offset) });
        return result;
      }
    };
  }
});
var path_exports = {};
__export2(path_exports, {
  basename: () => basename,
  default: () => path_default,
  delimiter: () => delimiter,
  dirname: () => dirname,
  extname: () => extname,
  isAbsolute: () => isAbsolute,
  join: () => join,
  normalize: () => normalize,
  relative: () => relative,
  resolve: () => resolve,
  sep: () => sep
});
function normalizeArray(parts, allowAboveRoot) {
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === ".") {
      parts.splice(i, 1);
    } else if (last === "..") {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift("..");
    }
  }
  return parts;
}
function resolve() {
  var resolvedPath = "", resolvedAbsolute = false;
  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = i >= 0 ? arguments[i] : "/";
    if (typeof path !== "string") {
      throw new TypeError("Arguments to path.resolve must be strings");
    } else if (!path) {
      continue;
    }
    resolvedPath = path + "/" + resolvedPath;
    resolvedAbsolute = path.charAt(0) === "/";
  }
  resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function(p) {
    return !!p;
  }), !resolvedAbsolute).join("/");
  return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
}
function normalize(path) {
  var isPathAbsolute = isAbsolute(path), trailingSlash = substr(path, -1) === "/";
  path = normalizeArray(filter(path.split("/"), function(p) {
    return !!p;
  }), !isPathAbsolute).join("/");
  if (!path && !isPathAbsolute) {
    path = ".";
  }
  if (path && trailingSlash) {
    path += "/";
  }
  return (isPathAbsolute ? "/" : "") + path;
}
function isAbsolute(path) {
  return path.charAt(0) === "/";
}
function join() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return normalize(filter(paths, function(p, index) {
    if (typeof p !== "string") {
      throw new TypeError("Arguments to path.join must be strings");
    }
    return p;
  }).join("/"));
}
function relative(from, to) {
  from = resolve(from).substr(1);
  to = resolve(to).substr(1);
  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== "")
        break;
    }
    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== "")
        break;
    }
    if (start > end)
      return [];
    return arr.slice(start, end - start + 1);
  }
  var fromParts = trim(from.split("/"));
  var toParts = trim(to.split("/"));
  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }
  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push("..");
  }
  outputParts = outputParts.concat(toParts.slice(samePartsLength));
  return outputParts.join("/");
}
function dirname(path) {
  var result = splitPath(path), root = result[0], dir = result[1];
  if (!root && !dir) {
    return ".";
  }
  if (dir) {
    dir = dir.substr(0, dir.length - 1);
  }
  return root + dir;
}
function basename(path, ext) {
  var f = splitPath(path)[2];
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
}
function extname(path) {
  return splitPath(path)[3];
}
function filter(xs, f) {
  if (xs.filter)
    return xs.filter(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    if (f(xs[i], i, xs))
      res.push(xs[i]);
  }
  return res;
}
var splitPathRe, splitPath, sep, delimiter, path_default, substr;
var init_path = __esm({
  "polyfills/path/index.js"() {
    splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
    splitPath = function(filename) {
      return splitPathRe.exec(filename).slice(1);
    };
    sep = "/";
    delimiter = ":";
    path_default = {
      extname,
      basename,
      dirname,
      sep,
      delimiter,
      relative,
      join,
      isAbsolute,
      normalize,
      resolve
    };
    substr = "ab".substr(-1) === "b" ? function(str, start, len) {
      return str.substr(start, len);
    } : function(str, start, len) {
      if (start < 0)
        start = str.length + start;
      return str.substr(start, len);
    };
  }
});
var sourcemapper_exports = {};
__export2(sourcemapper_exports, {
  SourceMapper: () => SourceMapper
});
var SourceMapper;
var init_sourcemapper = __esm({
  "src/compiler/sourcemapper.imba"() {
    SourceMapper = class {
      static strip(input) {
        return input.replace(/\/\*\%([\w\|]*)\$\*\//g, "");
      }
      static run(input, o = {}) {
        let output = input.replace(/\/\*\%([\w\|]*)\$\*\//g, "");
        return {
          code: output,
          map: null,
          toString: function() {
            return this.code;
          }
        };
      }
    };
  }
});
var compilation_exports = {};
__export2(compilation_exports, {
  Compilation: () => Compilation,
  CompilationResult: () => CompilationResult
});
var \u03A8__init__5, \u03A8doc, STEPS, CompilationResult, Compilation;
var init_compilation = __esm({
  "src/compiler/compilation.imba"() {
    init_document();
    init_structures();
    init_path();
    init_sourcemapper();
    \u03A8__init__5 = /* @__PURE__ */ Symbol.for("#__init__");
    \u03A8doc = /* @__PURE__ */ Symbol.for("#doc");
    STEPS = {
      TOKENIZE: 1,
      REWRITE: 2,
      PARSE: 4,
      TRAVERSE: 8,
      COMPILE: 16
    };
    CompilationResult = class {
    };
    Compilation = class {
      static [\u03A8__init__5]() {
        this.current = void 0;
        return this;
      }
      static error(opts) {
        var _a, _b;
        return (_b = (_a = this.current) == null ? void 0 : _a.addDiagnostic) == null ? void 0 : _b.call(_a, "error", opts);
      }
      static warn(opts) {
        var _a, _b;
        return (_b = (_a = this.current) == null ? void 0 : _a.addDiagnostic) == null ? void 0 : _b.call(_a, "warning", opts);
      }
      static info(opts) {
        var _a, _b;
        return (_b = (_a = this.current) == null ? void 0 : _a.addDiagnostic) == null ? void 0 : _b.call(_a, "info", opts);
      }
      static deserialize(data, o = {}) {
        let item = new Compilation("", o);
        return item.deserialize(data);
      }
      constructor(code, options) {
        this.sourceCode = code;
        this.sourcePath = options.sourcePath;
        this.options = options;
        this.flags = 0;
        this.js = "";
        this.css = "";
        this.result = {};
        this.diagnostics = [];
        this.tokens = null;
        this.ast = null;
      }
      deserialize(input) {
        let val;
        try {
          val = JSON.parse(input);
        } catch (e) {
          console.log("failed", input, this.options);
          throw e;
        }
        ;
        this.rawResult = val;
        this.deserialized = val;
        return this;
      }
      serialize() {
        if (this.rawResult) {
          return JSON.stringify(this.rawResult, null, 2);
        }
        ;
      }
      tokenize() {
        var \u03C64;
        if ((this.flags & (\u03C64 = STEPS.TOKENIZE)) == 0 ? (this.flags |= \u03C64, true) : false) {
          try {
            Compilation.current = this;
            this.lexer.reset();
            this.tokens = this.lexer.tokenize(this.sourceCode, this.options, this);
            this.tokens = this.rewriter.rewrite(this.tokens, this.options, this);
          } catch (e) {
            true;
          }
          ;
        }
        ;
        return this.tokens;
      }
      parse() {
        var \u03C622;
        this.tokenize();
        if ((this.flags & (\u03C622 = STEPS.PARSE)) == 0 ? (this.flags |= \u03C622, true) : false) {
          if (!this.errored\u03A6) {
            Compilation.current = this;
            try {
              this.ast = this.parser.parse(this.tokens, this);
            } catch (e) {
            }
            ;
          }
          ;
        }
        ;
        return this;
      }
      compile() {
        var \u03C632;
        this.parse();
        if ((this.flags & (\u03C632 = STEPS.COMPILE)) == 0 ? (this.flags |= \u03C632, true) : false) {
          if (!this.errored\u03A6) {
            Compilation.current = this;
            this.result = this.ast.compile(this.options, this);
          }
          ;
          if (this.options.raiseErrors) {
            this.raiseErrors();
          }
          ;
        }
        ;
        return this;
      }
      recompile(o = {}) {
        if (this.deserialized) {
          let js = this.deserialized.js;
          let res = {};
          res.js = SourceMapper.run(js, o);
          res.css = SourceMapper.run(this.deserialized.css || "", o);
          if (o.styles == "import" && res.css.code) {
            res.js.code += "\nimport './" + path_default.basename(this.sourcePath) + ".css'";
          }
          ;
          return res;
        }
        ;
        return { js: this.js };
      }
      addDiagnostic(severity, params) {
        params.severity || (params.severity = severity);
        let item = new Diagnostic(params, this);
        this.diagnostics.push(item);
        return item;
      }
      get errored\u03A6() {
        return this.errors.length > 0;
      }
      get errors() {
        return this.diagnostics.filter(function(_0) {
          return _0.severity == DiagnosticSeverity.Error;
        });
      }
      get warnings() {
        return this.diagnostics.filter(function(_0) {
          return _0.severity == DiagnosticSeverity.Warning;
        });
      }
      get info() {
        return this.diagnostics.filter(function(_0) {
          return _0.severity == DiagnosticSeverity.Information;
        });
      }
      get doc() {
        return this[\u03A8doc] || (this[\u03A8doc] = new ImbaDocument(null, "imba", 0, this.sourceCode));
      }
      positionAt(offset) {
        return this.doc.positionAt(offset);
      }
      offsetAt(position) {
        return this.doc.offsetAt(position);
      }
      rangeAt(a, b) {
        return this.doc.rangeAt(a, b);
      }
      toString() {
        return this.js;
      }
      raiseErrors() {
        if (this.errors.length) {
          throw this.errors[0].toError();
        }
        ;
        return this;
      }
    };
    Compilation[\u03A8__init__5]();
  }
});
var require_errors = __commonJS({
  "src/compiler/errors.imba1"(exports) {
    function subclass$(obj, sup) {
      for (var k in sup) {
        if (sup.hasOwnProperty(k))
          obj[k] = sup[k];
      }
      ;
      obj.prototype = Object.create(sup.prototype);
      obj.__super__ = obj.prototype.__super__ = sup.prototype;
      obj.prototype.initialize = obj.prototype.constructor = obj;
    }
    var util = require_helpers();
    var meta = /* @__PURE__ */ new WeakMap();
    function ImbaParseError(e, o) {
      var m;
      this.error = e;
      this._options = o || {};
      this.severity = this._options.severity || "error";
      let msg = e.message;
      if (m = msg.match(/Unexpected '([\w\-]+)'/)) {
        if (m[1] == "TERMINATOR") {
          msg = "Unexpected newline";
        }
        ;
      }
      ;
      this.message = msg;
      this.sourcePath = e.sourcePath;
      this.line = e.line;
      this;
    }
    subclass$(ImbaParseError, Error);
    exports.ImbaParseError = ImbaParseError;
    ImbaParseError.wrap = function(err) {
      return new this(err);
    };
    Object.defineProperty(ImbaParseError.prototype, "_options", { get: function() {
      return meta.get(this);
    }, configurable: true });
    Object.defineProperty(ImbaParseError.prototype, "_options", { set: function(value) {
      return meta.set(this, value);
    }, configurable: true });
    ImbaParseError.prototype.set = function(opts) {
      this._options || (this._options = {});
      for (let v, i = 0, keys = Object.keys(opts), l = keys.length, k; i < l; i++) {
        k = keys[i];
        v = opts[k];
        this._options[k] = v;
      }
      ;
      return this;
    };
    ImbaParseError.prototype.start = function() {
      var o = this._options;
      var idx = o.pos - 1;
      var tok = o.tokens && o.tokens[idx];
      while (tok && (tok._loc == -1 || tok._loc == 0 || tok._len == 0)) {
        tok = o.tokens[--idx];
      }
      ;
      return tok;
    };
    Object.defineProperty(ImbaParseError.prototype, "token", { get: function() {
      if (this._token) {
        return this._token;
      }
      ;
      var o = this._options;
      var idx = o.pos - 1;
      var tok = o.tokens && o.tokens[idx];
      while (tok && (tok._loc == -1 || tok._loc == 0 || tok._len == 0)) {
        tok = o.tokens[--idx];
      }
      ;
      return this._token = tok;
    }, configurable: true });
    ImbaParseError.prototype.desc = function() {
      var o = this._options;
      let msg = this.message;
      if (o.token && o.token._loc == -1) {
        return "Syntax Error";
      } else {
        return msg;
      }
      ;
    };
    ImbaParseError.prototype.loc = function() {
      var start_;
      return this._loc || (start_ = this.start()) && start_.region && start_.region();
    };
    ImbaParseError.prototype.toJSON = function() {
      var o = this._options;
      var tok = this.start();
      return { warn: true, message: this.desc(), loc: this.loc() };
    };
    ImbaParseError.prototype.toNativeError = function() {
      let err = new SyntaxError("hello");
      err.fileName = this._sourcePath;
      err.message = this.message;
      err.stack = this.excerpt({ colors: false, details: true });
      err.lineNumber = this.lineNumber;
      err.columnNumber = this.columnNumber;
      return err;
    };
    ImbaParseError.prototype.excerpt = function(pars) {
      if (!pars || pars.constructor !== Object)
        pars = {};
      var gutter = pars.gutter !== void 0 ? pars.gutter : true;
      var colors2 = pars.colors !== void 0 ? pars.colors : false;
      var details = pars.details !== void 0 ? pars.details : true;
      try {
        var code = this._code;
        var loc = this.loc();
        var lines = code.split(/\n/g);
        var locmap = util.locationToLineColMap(code);
        var lc = locmap[loc[0]] || [0, 0];
        var ln = lc[0];
        var col = lc[1];
        var line = lines[ln];
        this.lineNumber = ln + 1;
        this.columnNumber = col;
        var ln0 = Math.max(0, ln - 2);
        var ln1 = Math.min(ln0 + 5, lines.length);
        let lni = ln - ln0;
        var l = ln0;
        var colorize = function(_0) {
          return _0;
        };
        if (colors2) {
          let color = this.severity == "warn" ? "yellow" : "red";
          if (typeof colors2 == "string" || colors2 instanceof String) {
            color = colors2;
          }
          ;
          colorize = function(_0) {
            return util.ansi[color](util.ansi.bold(_0));
          };
        }
        ;
        var res = [];
        while (l < ln1) {
          res.push(line = lines[l++]);
        }
        ;
        var out = res;
        if (gutter) {
          out = out.map(function(line2, i) {
            let prefix = "" + (ln0 + i + 1);
            while (prefix.length < String(ln1).length) {
              prefix = " " + prefix;
            }
            ;
            if (i == lni) {
              return "   -> " + prefix + " | " + line2;
            } else {
              return "      " + prefix + " | " + line2;
            }
            ;
          });
        }
        ;
        out[lni] = colorize(out[lni]);
        if (details) {
          out.unshift(colorize(this.message));
        }
        ;
        return out.join("\n") + "\n";
      } catch (e) {
        return "";
      }
      ;
    };
    ImbaParseError.prototype.prettyMessage = function() {
      var excerpt;
      return excerpt = this.excerpt();
    };
    function ImbaTraverseError() {
      return ImbaParseError.apply(this, arguments);
    }
    subclass$(ImbaTraverseError, ImbaParseError);
    exports.ImbaTraverseError = ImbaTraverseError;
    ImbaTraverseError.prototype.loc = function() {
      return this._loc;
    };
    ImbaTraverseError.prototype.excerpt = function() {
      var excerpt = ImbaTraverseError.prototype.__super__.excerpt.apply(this, arguments);
      return excerpt + "\n---\n" + this.error.stack;
    };
  }
});
var require_lexer = __commonJS({
  "src/compiler/lexer.imba1"(exports) {
    function len$(a) {
      return a && (a.len instanceof Function ? a.len() : a.length) || 0;
    }
    function idx$(a, b) {
      return b && b.indexOf ? b.indexOf(a) : [].indexOf.call(a, b);
    }
    function iter$(a) {
      return a ? a.toArray ? a.toArray() : a : [];
    }
    function subclass$(obj, sup) {
      for (var k in sup) {
        if (sup.hasOwnProperty(k))
          obj[k] = sup[k];
      }
      ;
      obj.prototype = Object.create(sup.prototype);
      obj.__super__ = obj.prototype.__super__ = sup.prototype;
      obj.prototype.initialize = obj.prototype.constructor = obj;
    }
    var T = require_token();
    var Token2 = T.Token;
    var INVERSES = require_constants().INVERSES;
    var Compilation2 = (init_compilation(), __toCommonJS2(compilation_exports)).Compilation;
    var ERR = require_errors();
    var helpers2 = require_helpers();
    var JS_KEYWORDS = [
      "true",
      "false",
      "null",
      "this",
      "delete",
      "typeof",
      "in",
      "instanceof",
      "throw",
      "break",
      "continue",
      "debugger",
      "if",
      "else",
      "switch",
      "for",
      "while",
      "do",
      "try",
      "catch",
      "finally",
      "class",
      "extends",
      "super",
      "return"
    ];
    var TSC_CARET_BEFORE = {
      ",": 1,
      "\n": 1,
      ")": 1,
      "]": 1,
      "}": 1,
      ">": 1,
      " ": 1
    };
    var IMBA_CONTEXTUAL_KEYWORDS = ["extend", "local", "global", "prop"];
    var ALL_KEYWORDS = exports.ALL_KEYWORDS = [
      "true",
      "false",
      "null",
      "this",
      "self",
      "delete",
      "typeof",
      "in",
      "instanceof",
      "throw",
      "break",
      "continue",
      "debugger",
      "if",
      "else",
      "switch",
      "for",
      "while",
      "do",
      "try",
      "catch",
      "finally",
      "class",
      "extends",
      "super",
      "return",
      "undefined",
      "then",
      "unless",
      "until",
      "loop",
      "of",
      "by",
      "when",
      "def",
      "tag",
      "do",
      "elif",
      "begin",
      "var",
      "let",
      "const",
      "await",
      "import",
      "and",
      "or",
      "is",
      "isnt",
      "not",
      "yes",
      "no",
      "isa",
      "case",
      "nil",
      "module",
      "export",
      "static",
      "extend"
    ];
    var RESERVED = ["case", "default", "function", "void", "with", "const", "enum", "native"];
    var JS_FORBIDDEN = JS_KEYWORDS.concat(RESERVED);
    var IDENTIFIER = /^((\$|##|#|@@|@|\%)[\$\wA-Za-z_\-\x7f-\uffff][$\w\x7f-\uffff]*(\-[$\w\x7f-\uffff]+)*[\?]?|[$A-Za-z_][$\w\x7f-\uffff]*(\-[$\w\x7f-\uffff]+)*[\?]?)([^\n\S]*:)?/;
    var IMPORTS = /^import\s+(\{?[^\"\'\}]+\}?)(?=\s+from\s+)/;
    var TAG = /^(\<)(?=[A-Za-z\#\.\%\$\[\{\@\>\(])/;
    var TAG_TYPE = /^(\w[\w\d]*:)?(\w[\w\d]*)(-[\w\d]+)*/;
    var TAG_ID = /^#((\w[\w\d]*)(-[\w\d]+)*)/;
    var SELECTOR = /^([%\$]{1,2})([\(])/;
    var SYMBOL = /^\:((([\*\@$\w\x7f-\uffff]+)+([\-\\\:][\w\x7f-\uffff]+)*)|==|\<=\>)/;
    var STYLE_HEX = /^\#[\w\-]+/;
    var STYLE_NUMERIC = /^(\-?\d*\.?\d+)([A-Za-z]+|\%)?(?![\d\w])/;
    var STYLE_IDENTIFIER = /^[\w\-\$]*\w[\w\-\$]*/;
    var STYLE_URL = /^url\(([^\)]*)\)/;
    var STYLE_PROPERTY = /^(\^?[\w\-\$\@\.\!\#\^]+)(?=\:([^\:]|$)|\s*\=)/;
    var NUMBER = /^0x[\da-f_]+|^0b[01_]+|^0o[\d_]+|^\-?(?:\d[_\d]*)\.?\d[_\d]*(?:e[+-]?\d+)?|^\-?\d*\.?\d+(?:e[+-]?\d+)?/i;
    var HEREDOC = /^("""|''')([\s\S]*?)(?:\n[^\n\S]*)?\1/;
    var OPERATOR = /^(?:[-=]=>|!&(?=[\s\n])|[&|~^]?=\?|[&|~^]=|\?\?=|===|---|->|=>|\/>|!==|\*\*=?|[-+*\/%<>&|^!?=]=|=<|>>>=?|([-+:])\1|([&|<>])\2=?|\?\.|\?\?|\.{2,3}|\*(?=[a-zA-Z\_]))/;
    var WHITESPACE = /^[^\n\S]+/;
    var COMMENT = /^###([^#][\s\S]*?)(?:###[^\n\S]*|(?:###)?$)/;
    var JS_COMMENT = /^\/\*([\s\S]*?)\*\//;
    var INLINE_COMMENT = /^(\s*)((#[ \t\!]|\/\/(?!\/))(.*)|#[ \t]?(?=\n|$))+/;
    var CODE = /^[-=]=>/;
    var MULTI_DENT = /^(?:\n[^\n\S]*)+/;
    var SIMPLESTR = /^'[^\\']*(?:\\.[^\\']*)*'/;
    var REGEX = /^(\/(?![\s=])[^[\/\n\\]*(?:(?:\\[\s\S]|\[[^\]\n\\]*(?:\\[\s\S][^\]\n\\]*)*])[^[\/\n\\]*)*\/)([a-z]{0,8})(?!\w)/;
    var HEREGEX = /^\/{3}([\s\S]+?)\/{3}([a-z]{0,8})(?!\w)/;
    var MULTILINER = /\n/g;
    var HEREDOC_INDENT = /\n+([^\n\S]*)/g;
    var HEREDOC_ILLEGAL = /\*\//;
    var LINE_CONTINUER = /^\s*(?:,|\??\.(?![.\d])|(?:&&|\|\||and|or)[\n\s])/;
    var ENV_FLAG = /^\$\w+\$/;
    var ARGVAR = /^\$\d$/;
    var COMPOUND_ASSIGN = [
      "-=",
      "+=",
      "/=",
      "*=",
      "%=",
      "||=",
      "&&=",
      "?=",
      "??=",
      "<<=",
      ">>=",
      ">>>=",
      "&=",
      "^=",
      "|=",
      "~=",
      "=<",
      "**=",
      "=?",
      "~=?",
      "|=?",
      "&=?",
      "^=?"
    ];
    var UNARY = ["!", "~", "NEW", "TYPEOF", "DELETE"];
    var LOGIC = ["&&", "||", "??", "and", "or"];
    var SHIFT = ["<<", ">>", ">>>"];
    var COMPARE = ["===", "!==", "==", "!=", "<", ">", "<=", ">=", "===", "!==", "&", "|", "^", "!&"];
    var MATH = ["*", "/", "%", "\u222A", "\u2229", "\u221A"];
    var RELATION = ["IN", "OF", "INSTANCEOF", "ISA"];
    var NOT_REGEX = ["NUMBER", "REGEX", "BOOL", "TRUE", "FALSE", "++", "--", "]"];
    var NOT_SPACED_REGEX = ["NUMBER", "REGEX", "BOOL", "TRUE", "FALSE", "++", "--", "]", ")", "}", "THIS", "SELF", "IDENTIFIER", "STRING"];
    var UNFINISHED = ["\\", ".", "UNARY", "MATH", "EXP", "+", "-", "SHIFT", "RELATION", "COMPARE", "THROW", "EXTENDS"];
    var CALLABLE = ["IDENTIFIER", "SYMBOLID", "STRING", "REGEX", ")", "]", "INDEX_END", "THIS", "SUPER", "TAG_END", "IVAR", "SELF", "NEW", "ARGVAR", "SYMBOL", "RETURN", "INDEX_END", "CALL_END", "DECORATOR", "@"];
    var INDEXABLE = [
      "IDENTIFIER",
      "SYMBOLID",
      "STRING",
      "REGEX",
      ")",
      "]",
      "THIS",
      "SUPER",
      "TAG_END",
      "IVAR",
      "SELF",
      "NEW",
      "ARGVAR",
      "SYMBOL",
      "RETURN",
      "BANG",
      "NUMBER",
      "BOOL",
      "TAG_SELECTOR",
      "ARGUMENTS",
      "}",
      "TAG_TYPE",
      "TAG_REF",
      "INDEX_END",
      "CALL_END",
      "DO_VALUE"
    ];
    var LINE_BREAK = ["INDENT", "OUTDENT", "TERMINATOR"];
    function LexerError(message, file, line) {
      this.message = message;
      this.file = file;
      this.line = line;
      return this;
    }
    subclass$(LexerError, SyntaxError);
    exports.LexerError = LexerError;
    var last = function(array, back) {
      if (back === void 0)
        back = 0;
      return array[array.length - back - 1];
    };
    var count = function(str, substr2) {
      return str.split(substr2).length - 1;
    };
    var repeatString = function(str, times) {
      var res = "";
      while (times > 0) {
        if (times % 2 == 1) {
          res += str;
        }
        ;
        str += str;
        times >>= 1;
      }
      ;
      return res;
    };
    var tT = T.typ;
    var tV = T.val;
    var tTs = T.setTyp;
    var tVs = T.setVal;
    function Lexer() {
      this.reset();
      this;
    }
    exports.Lexer = Lexer;
    Lexer.prototype.reset = function() {
      this._code = null;
      this._chunk = null;
      this._opts = null;
      this._state = {};
      this._indent = 0;
      this._indebt = 0;
      this._outdebt = 0;
      this._indents = [];
      this._ends = [];
      this._contexts = [];
      this._scopes = [];
      this._nextScope = null;
      this._context = null;
      this._indentStyle = "	";
      this._inTag = false;
      this._inStyle = 0;
      this._tokens = [];
      this._seenFor = false;
      this._loc = 0;
      this._locOffset = 0;
      this._end = null;
      this._char = null;
      this._bridge = null;
      this._last = null;
      this._lastTyp = "";
      this._lastVal = null;
      this._script = null;
      return this;
    };
    Lexer.prototype.jisonBridge = function(jison) {
      return this._bridge = {
        lex: T.lex,
        setInput: function(tokens) {
          this.tokens = tokens;
          return this.pos = 0;
        },
        upcomingInput: function() {
          return "";
        }
      };
    };
    Lexer.prototype.tokenize = function(code, o, script) {
      var m;
      if (script === void 0)
        script = null;
      if (code.length == 0) {
        return [];
      }
      ;
      if (!o.inline) {
        if (WHITESPACE.test(code)) {
          code = "\n" + code;
          if (code.match(/^\s*$/g)) {
            return [];
          }
          ;
        }
        ;
        code = code.replace(/\r/g, "").replace(/[\t ]+$/g, "");
      }
      ;
      this._last = null;
      this._lastTyp = null;
      this._lastVal = null;
      this._script = script;
      this._code = code;
      this._opts = o;
      this._locOffset = o.loc || 0;
      this._platform = o.platform || o.target;
      this._indentStyle = "	";
      if (m = code.match(/^([\ \t]*)[^\n\s\t]/)) {
        this._state.gutter = m[1];
      }
      ;
      if (o.gutter !== void 0) {
        this._state.gutter = o.gutter;
      }
      ;
      if (this._script && !o.inline) {
        this._script.tokens = this._tokens;
      }
      ;
      this.parse(code);
      if (!o.inline)
        this.closeIndentation();
      if (this._ends.length) {
        this.error("missing " + this._ends.pop());
      }
      ;
      if (this._platform == "tsc") {
        for (let i = 0, items = iter$(this._tokens), len = items.length, token; i < len; i++) {
          token = items[i];
          if (token._type == "SYMBOLID") {
            token._type = "IDENTIFIER";
          }
          ;
        }
        ;
      }
      ;
      return this._tokens;
    };
    Lexer.prototype.parse = function(code) {
      var i = 0;
      var pi = 0;
      this._loc = this._locOffset + i;
      while (this._chunk = code.slice(i)) {
        let ctx = this._context;
        if (ctx && ctx.pop) {
          if (ctx.pop.test(this._chunk)) {
            this.popEnd();
          }
          ;
        }
        ;
        pi = ctx && ctx.lexer && ctx.lexer.call(this) || this._end == "TAG" && this.tagDefContextToken() || this._inTag && this.tagContextToken() || this._inStyle2 && this.lexStyleBody() || this.basicContext();
        i += pi;
        this._loc = this._locOffset + i;
      }
      ;
      return;
    };
    Lexer.prototype.basicContext = function() {
      return this.selectorToken() || this.symbolToken() || this.identifierToken() || this.whitespaceToken() || this.lineToken() || this.commentToken() || this.heredocToken() || this.tagToken() || this.stringToken() || this.numberToken() || this.regexToken() || this.literalToken() || 0;
    };
    Lexer.prototype.moveCaret = function(i) {
      return this._loc += i;
    };
    Lexer.prototype.context = function() {
      return this._ends[this._ends.length - 1];
    };
    Lexer.prototype.inContext = function(key) {
      var o = this._contexts[this._contexts.length - 1];
      return o && o[key];
    };
    Lexer.prototype.pushEnd = function(val, ctx) {
      let prev = this._context;
      this._ends.push(val);
      this._contexts.push(this._context = ctx || {});
      this._end = val;
      this.refreshScope();
      if (ctx && (ctx.closeType == "STYLE_END" || ctx.style)) {
        ctx.lexer = this.lexStyleBody;
        ctx.style = true;
        this._inStyle++;
      }
      ;
      if (prev && prev.style && val != "}") {
        ctx.lexer = this.lexStyleBody;
        ctx.style = true;
      }
      ;
      if (ctx && ctx.id) {
        ctx.start = new Token2(ctx.id + "_START", val, this._last.region()[1], 0);
        this._tokens.push(ctx.start);
      }
      ;
      return this;
    };
    Lexer.prototype.popEnd = function(val) {
      var popped = this._ends.pop();
      this._end = this._ends[this._ends.length - 1];
      var ctx = this._context;
      if (ctx && ctx.start) {
        ctx.end = new Token2(ctx.closeType || ctx.id + "_END", popped, this._last.region()[1], 0);
        ctx.end._start = ctx.start;
        ctx.start._end = ctx.end;
        this._tokens.push(ctx.end);
      }
      ;
      if (ctx && (ctx.closeType == "STYLE_END" || ctx.style)) {
        this._inStyle--;
      }
      ;
      this._contexts.pop();
      this._context = this._contexts[this._contexts.length - 1];
      this.refreshScope();
      return [popped, ctx];
    };
    Lexer.prototype.refreshScope = function() {
      var ctx0 = this._ends[this._ends.length - 1];
      var ctx1 = this._ends[this._ends.length - 2];
      return this._inTag = ctx0 == "TAG_END" || ctx1 == "TAG_END" && ctx0 == "OUTDENT";
    };
    Lexer.prototype.queueScope = function(val) {
      this._scopes[this._indents.length] = val;
      return this;
    };
    Lexer.prototype.popScope = function(val) {
      this._scopes.pop();
      return this;
    };
    Lexer.prototype.getScope = function() {
      return this._scopes[this._indents.length - 1];
    };
    Lexer.prototype.scope = function(sym, opts) {
      var len = this._ends.push(this._end = sym);
      this._contexts.push(opts || null);
      return sym;
    };
    Lexer.prototype.closeSelector = function() {
      if (this._end == "%") {
        this.token("SELECTOR_END", "%", 0);
        return this.pair("%");
      }
      ;
    };
    Lexer.prototype.openDef = function() {
      return this.pushEnd("DEF");
    };
    Lexer.prototype.closeDef = function() {
      if (this.context() == "DEF") {
        var prev = last(this._tokens);
        if (tT(prev) == "TERMINATOR") {
          let n = this._tokens.pop();
          this.token("DEF_BODY", "DEF_BODY", 0);
          this._tokens.push(n);
        } else {
          this.token("DEF_BODY", "DEF_BODY", 0);
        }
        ;
        this.pair("DEF");
      }
      ;
      return;
    };
    Lexer.prototype.tagContextToken = function() {
      let chr = this._chunk[0];
      let chr2 = this._chunk[1];
      let m = /^([A-Za-z\_\-\$\%\#][\w\-\$]*(\:[A-Za-z\_\-\$]+)*)/.exec(this._chunk);
      if (m) {
        let tok = m[1];
        let typ = "TAG_LITERAL";
        let len = m[0].length;
        if (tok == "self" && this._lastVal == "<") {
          typ = "SELF";
        }
        ;
        if (chr == "$" && (this._lastTyp == "TAG_TYPE" || this._lastTyp == "TAG_START")) {
          typ = "TAG_REF";
        }
        ;
        if (chr == "%") {
          typ = "MIXIN";
        }
        ;
        if (chr == "#") {
          typ = "TAG_SYMBOL_ID";
          if (tok.length == 1) {
            return 0;
          }
          ;
        }
        ;
        this.token(typ, tok, len);
        return len;
      }
      ;
      if (chr == "/" && chr2 == ">") {
        this.token("TAG_END", "/>", 2);
        this.pair("TAG_END");
        return 2;
      }
      ;
      if (chr == "%" || chr == ":" || chr == "." || chr == "@") {
        this.token("T" + chr, chr, 1);
        if (chr == "." && (!chr2 || TSC_CARET_BEFORE[chr2]) && this._platform == "tsc") {
          this.token("TAG_LITERAL", "$CARET$", 0, 1);
        }
        ;
        return 1;
      } else if (chr == " " || chr == "\n" || chr == "	") {
        let m2 = /^[\n\s\t]+/.exec(this._chunk);
        this.token("TAG_WS", m2[0], m2[0].length);
        return m2[0].length;
      } else if (chr == "=" && this._chunk[1] != ">") {
        this.token("=", "=", 1);
        this.pushEnd("TAG_ATTR", { id: "VALUE", pop: /^([\s\n\>]|\/\>)/ });
        return 1;
      }
      ;
      return 0;
    };
    Lexer.prototype.tagDefContextToken = function() {
      var match;
      if (match = TAG_TYPE.exec(this._chunk)) {
        this.token("TAG_TYPE", match[0], match[0].length);
        return match[0].length;
      }
      ;
      if (match = TAG_ID.exec(this._chunk)) {
        var input = match[0];
        this.token("TAG_ID", input, input.length);
        return input.length;
      }
      ;
      if (this._chunk[0] == "\n") {
        this.pair("TAG");
      }
      ;
      return 0;
    };
    Lexer.prototype.findTypeAnnotation = function(str) {
      var stack = [];
      var i = 0;
      var replaces = [];
      var ending = /[\=\n\ \t\.\,\:\+]/;
      while (i < str.length) {
        var chr = str.charAt(i);
        let end = stack[0];
        let instr = end == '"' || end == "'";
        if (chr && chr == end) {
          stack.shift();
        } else if (!end && (chr == ")" || chr == "]" || chr == "}" || chr == ">")) {
          break;
        } else if (chr == "(") {
          stack.unshift(")");
        } else if (chr == "[") {
          stack.unshift("]");
        } else if (chr == "{") {
          stack.unshift("}");
        } else if (chr == "<") {
          stack.unshift(">");
        } else if (chr == '"') {
          stack.unshift('"');
        } else if (chr == "'") {
          stack.unshift("'");
        } else if (!end && ending.test(chr)) {
          break;
        }
        ;
        i++;
      }
      ;
      if (i == 0) {
        return null;
      }
      ;
      return str.slice(0, i);
    };
    Lexer.prototype.findBalancedSelector = function(str) {
      var stack = [];
      var i = 0;
      var replaces = [];
      while (i < str.length - 1) {
        var letter = str.charAt(i);
        let end = stack[0];
        let instr = end == '"' || end == "'";
        if (letter && letter == end) {
          stack.shift();
        } else if (!instr && (letter == ")" || letter == "]" || letter == "}")) {
          console.log("out of balance!!");
          break;
        } else if (letter == "/") {
          replaces.unshift([i, 1, ":"]);
        } else if (letter == "(" && !instr) {
          stack.unshift(")");
        } else if (letter == "[" && !instr) {
          stack.unshift("]");
        } else if (letter == '"') {
          stack.unshift('"');
        } else if (letter == "'") {
          stack.unshift("'");
        }
        ;
        if (!end && (letter == "=" || letter == "\n" || letter == "{")) {
          break;
        }
        ;
        if (!end && letter == " ") {
          let after = str.slice(i + 1);
          if (STYLE_PROPERTY.exec(after)) {
            break;
          }
          ;
          if (INLINE_COMMENT.exec(after)) {
            break;
          }
          ;
        }
        ;
        i++;
      }
      ;
      if (i == 0) {
        return null;
      }
      ;
      let sel = str.slice(0, i);
      if (replaces.length) {
        sel = sel.split("");
        for (let j = 0, len = replaces.length; j < len; j++) {
          sel.splice.apply(sel, replaces[j]);
        }
        ;
        sel = sel.join("");
      }
      ;
      return sel;
    };
    Lexer.prototype.lexStyleRule = function(offset, force) {
      if (offset === void 0)
        offset = 0;
      if (force === void 0)
        force = false;
      let chunk = offset ? this._chunk.slice(offset) : this._chunk;
      let sel = this.findBalancedSelector(chunk);
      if (sel || force) {
        let len = sel ? sel.length : 0;
        this.token("CSS_SEL", sel || "", len, offset);
        let seltoken = this._last;
        let next = chunk[len];
        if (next == "=") {
          len++;
        }
        ;
        this._indents.push(1);
        this._outdebt = this._indebt = 0;
        this.token("INDENT", "1", 0, 1);
        this.pushEnd("OUTDENT", { lexer: this.lexStyleBody, opener: seltoken, style: true });
        this._indent++;
        return len;
      }
      ;
      return 0;
    };
    Lexer.prototype.lexStyleBody = function() {
      if (this._end == "%") {
        return 0;
      }
      ;
      let chr = this._chunk[0];
      var m;
      let styleprop = STYLE_PROPERTY.exec(this._chunk);
      let ltyp = this._lastTyp;
      if (!styleprop && this._chunk.match(/^([\^\%\*\w\&\$\>\/\.\[\@\!]|\#[\w\-]|\:\:)/) && (ltyp == "TERMINATOR" || ltyp == "INDENT")) {
        let sel = this.findBalancedSelector(this._chunk);
        if (sel) {
          return this.lexStyleRule(0);
        }
        ;
      }
      ;
      if (styleprop) {
        this.token("CSSPROP", styleprop[0], styleprop[0].length);
        return styleprop[0].length;
      }
      ;
      if (chr[0] == "#" && (m = STYLE_HEX.exec(this._chunk))) {
        this.token("COLOR", m[0], m[0].length);
        return m[0].length;
      }
      ;
      if (chr == "/" && !this._last.spaced) {
        this.token("/", chr, 1);
        return 1;
      }
      ;
      if (m = STYLE_NUMERIC.exec(this._chunk)) {
        let len = m[0].length;
        let typ = "NUMBER";
        if (m[2] == "%") {
          typ = "PERCENTAGE";
        } else if (m[2]) {
          typ = "DIMENSION";
        }
        ;
        if (this._lastTyp == "COMPARE" && !this._last.spaced) {
          true;
        }
        ;
        this.token(typ, m[0], len);
        return len;
      } else if (m = STYLE_URL.exec(this._chunk)) {
        let len = m[0].length;
        this.token("CSSURL", m[0], len);
        return m[0].length;
      } else if (m = STYLE_IDENTIFIER.exec(this._chunk)) {
        let id = "CSSIDENTIFIER";
        let val = m[0];
        let len = val.length;
        if (m[0].match(/^\-\-/)) {
          id = "CSSVAR";
        } else if (this._last && !this._last.spaced && (ltyp == "}" || ltyp == ")")) {
          id = "CSSUNIT";
        }
        ;
        if (this._chunk[len] == "(") {
          id = "CSSFUNCTION";
        }
        ;
        this.token(id, val, len);
        return len;
      } else if (this._last && !this._last.spaced && (ltyp == "}" || ltyp == ")") && chr == "%") {
        this.token("CSSUNIT", chr, 1);
        return 1;
      }
      ;
      return 0;
    };
    Lexer.prototype.importsToken = function() {
      var match;
      if (match = IMPORTS.exec(this._chunk)) {
        this.token("IMPORTS", match[1], match[1].length, 7);
        return match[0].length;
      }
      ;
      return 0;
    };
    Lexer.prototype.tagToken = function() {
      var match, ary;
      if (!(match = TAG.exec(this._chunk))) {
        return 0;
      }
      ;
      var ary = iter$(match);
      var input = ary[0], type = ary[1], identifier = ary[2];
      if (type == "<") {
        this.token("TAG_START", "<", 1);
        this.pushEnd(INVERSES.TAG_START);
        if (match = TAG_TYPE.exec(this._chunk.substr(1, 40))) {
          let next = this._chunk[match[0].length + 1];
          if (match[0] != "self" && (next != "{" && next != "-")) {
            this.token("TAG_TYPE", match[0], match[0].length, 1);
            return input.length + match[0].length;
          }
          ;
        } else if (this._chunk[1] == ">") {
          this.token("TAG_TYPE", "fragment", 0, 0);
        }
        ;
        if (identifier) {
          if (identifier.substr(0, 1) == "{") {
            return type.length;
          } else {
            this.token("TAG_NAME", input.substr(1), 0);
          }
          ;
        }
        ;
      }
      ;
      return input.length;
    };
    Lexer.prototype.selectorToken = function() {
      var ary;
      var match;
      if (this._end == "%") {
        var chr = this._chunk[0];
        var ctx = this._context;
        var i = 0;
        var part = "";
        var ending = false;
        while (chr = this._chunk[i++]) {
          if (chr == ")" && ctx.parens == 0) {
            ending = true;
            break;
          } else if (chr == "(") {
            ctx.parens++;
            part += "(";
          } else if (chr == ")") {
            ctx.parens--;
            part += ")";
          } else if (chr == "{") {
            break;
          } else {
            part += chr;
          }
          ;
        }
        ;
        if (part) {
          this.token("SELECTOR_PART", part, i - 1);
        }
        ;
        if (ending) {
          this.token("SELECTOR_END", ")", 1, i - 1);
          this.pair("%");
          return i;
        }
        ;
        return i - 1;
      }
      ;
      if (!(match = SELECTOR.exec(this._chunk))) {
        return 0;
      }
      ;
      var ary = iter$(match);
      var input = ary[0], id = ary[1], kind = ary[2];
      if (kind == "(") {
        this.token("SELECTOR_START", id, id.length + 1);
        this.pushEnd("%", { parens: 0 });
        return id.length + 1;
      } else if (id == "%") {
        if (this.context() == "%") {
          return 1;
        }
        ;
        this.token("SELECTOR_START", id, id.length);
        this.pushEnd("%", { open: true });
        return id.length;
      } else {
        return 0;
      }
      ;
    };
    Lexer.prototype.inTag = function() {
      var len = this._ends.length;
      if (len > 0) {
        var ctx0 = this._ends[len - 1];
        var ctx1 = len > 1 ? this._ends[len - 2] : ctx0;
        return ctx0 == "TAG_END" || ctx1 == "TAG_END" && ctx0 == "OUTDENT";
      }
      ;
      return false;
    };
    Lexer.prototype.isKeyword = function(id) {
      var m;
      if (this._lastTyp == "ATTR" || this._lastTyp == "PROP" || this._lastTyp == "DEF") {
        return false;
      }
      ;
      if (id == "when" && this._lastTyp == "CONST") {
        return false;
      }
      ;
      if (id == "get" || id == "set") {
        if (m = this._chunk.match(/^[gs]et ([\$\w\-]+|\[)/)) {
          let ctx = this._contexts[this._contexts.length - 1] || {};
          let before = ctx.opener && this._tokens[this._tokens.indexOf(ctx.opener) - 1];
          if (idx$(this._lastTyp, ["TERMINATOR", "INDENT"]) >= 0) {
            if (before && (before._type == "=" || before._type == "{")) {
              return true;
            }
            ;
          }
          ;
        }
        ;
      }
      ;
      if ((id == "guard" || id == "alter" || id == "watch") && this.getScope() == "PROP") {
        return true;
      }
      ;
      if (id == "css") {
        return true;
        if (idx$(this._lastTyp, ["TERMINATOR"]) >= 0 || !this._lastTyp) {
          return true;
        }
        ;
        if (idx$(this._lastVal, ["global", "local", "export", "default"]) >= 0) {
          return true;
        }
        ;
        if (idx$(this._lastTyp, ["="]) >= 0) {
          return true;
        }
        ;
      }
      ;
      if (id == "attr" || id == "prop" || id == "get" || id == "set" || id == "css" || id == "constructor" || id == "declare") {
        var scop = this.getScope();
        var incls = scop == "CLASS" || scop == "TAG" || scop == "EXTEND";
        if (id == "declare") {
          return incls && idx$(this._lastTyp, ["INDENT", "TERMINATOR", "DECORATOR"]) >= 0;
        }
        ;
        if (id == "constructor") {
          return incls && idx$(this._lastTyp, ["INDENT", "TERMINATOR", "DECORATOR"]) >= 0;
        }
        ;
        if (incls) {
          return true;
        }
        ;
      }
      ;
      return ALL_KEYWORDS.indexOf(id) >= 0;
    };
    Lexer.prototype.identifierToken = function() {
      var ary;
      var match;
      var ctx0 = this._ends.length > 0 ? this._ends[this._ends.length - 1] : null;
      var ctx1 = this._ends.length > 1 ? this._ends[this._ends.length - 2] : null;
      var innerctx = ctx0;
      var typ;
      var reserved = false;
      var addLoc = false;
      var inTag = ctx0 == "TAG_END" || ctx1 == "TAG_END" && ctx0 == "OUTDENT";
      if (!(match = IDENTIFIER.exec(this._chunk))) {
        return 0;
      }
      ;
      var ary = iter$(match);
      var input = ary[0], id = ary[1], typ = ary[2], m3 = ary[3], m4 = ary[4], colon = ary[5];
      var idlen = id.length;
      if (id === "own" && this.lastTokenType() == "FOR") {
        this.token("OWN", id, id.length);
        return id.length;
      }
      ;
      var prev = last(this._tokens);
      var lastTyp = this._lastTyp;
      if (lastTyp == "#") {
        this.token("IDENTIFIER", id, idlen);
        return idlen;
      }
      ;
      var forcedIdentifier = colon || lastTyp == "." || lastTyp == "?.";
      if (colon && lastTyp == "?") {
        forcedIdentifier = false;
      }
      ;
      if (id == "tag" && this._chunk.indexOf("tag(") == 0) {
        forcedIdentifier = true;
      }
      ;
      if (id == "css" && /css\s\:\:/.exec(this._chunk)) {
        input = id + " ";
        colon = null;
        forcedIdentifier = false;
      }
      ;
      var isKeyword = false;
      if (typ == "$" && ARGVAR.test(id)) {
        typ = "ARGVAR";
        id = id.substr(1);
      } else if (typ == "$" && ENV_FLAG.test(id)) {
        typ = "ENV_FLAG";
        id = id.toUpperCase();
      } else if (typ == "@") {
        if (lastTyp == ".") {
          typ = "IDENTIFIER";
        } else {
          typ = "DECORATOR";
        }
        ;
      } else if (typ == "#") {
        typ = "SYMBOLID";
      } else if (typ == "##") {
        typ = "SYMBOLID";
      } else if (typ == "%") {
        let ltyp = this._lastTyp;
        if (ltyp == "TERMINATOR" || ltyp == "INDENT" || ltyp == "EXPORT") {
          this.token("CSS", id, 0);
          this.queueScope("CSS");
          return this.lexStyleRule(0, true);
        }
        ;
        typ = "MIXIN";
      } else if (typ == "$" && !colon) {
        typ = "IDENTIFIER";
      } else if (id == "elif" && !forcedIdentifier) {
        this.token("ELSE", "elif", id.length);
        this.token("IF", "if");
        return id.length;
      } else {
        typ = "IDENTIFIER";
      }
      ;
      if (!forcedIdentifier && (isKeyword = this.isKeyword(id))) {
        if (typeof isKeyword == "string") {
          typ = isKeyword;
        } else {
          typ = id.toUpperCase();
        }
        ;
        addLoc = true;
        if (typ == "MODULE") {
          if (!/^module [a-zA-Z]/.test(this._chunk) || ctx0 == "TAG_ATTR") {
            typ = "IDENTIFIER";
          }
          ;
        }
        ;
        if (typ == "YES") {
          typ = "TRUE";
        } else if (typ == "NO") {
          typ = "FALSE";
        } else if (typ == "NIL") {
          typ = "NULL";
        } else if (typ == "VAR" || typ == "CONST" || typ == "LET") {
          let ltyp = this._lastTyp;
        } else if (typ == "IF" || typ == "ELSE" || typ == "TRUE" || typ == "FALSE" || typ == "NULL") {
          true;
        } else if (typ == "TAG") {
          this.pushEnd("TAG");
        } else if (typ == "DEF" || typ == "GET" || typ == "SET") {
          typ = "DEF";
          this.openDef();
        } else if (typ == "CONSTRUCTOR") {
          this.token("DEF", "", 0);
          typ = "IDENTIFIER";
          this.openDef();
        } else if (typ == "DO") {
          if (this.context() == "DEF")
            this.closeDef();
        } else if (typ === "WHEN" && LINE_BREAK.indexOf(this.lastTokenType()) >= 0) {
          typ = "LEADING_WHEN";
        } else if (typ === "FOR") {
          this._seenFor = true;
        } else if (typ === "UNLESS") {
          typ = "IF";
        } else if (UNARY.indexOf(typ) >= 0) {
          typ = "UNARY";
        } else if (RELATION.indexOf(typ) >= 0) {
          if (typ != "INSTANCEOF" && typ != "ISA" && this._seenFor) {
            typ = "FOR" + typ;
            this._seenFor = false;
          } else {
            typ = "RELATION";
            if (prev._type == "UNARY") {
              prev._type = "NOT";
            }
            ;
          }
          ;
        }
        ;
      }
      ;
      if (!forcedIdentifier) {
        if (this._lastVal == "export" && id == "default") {
          tTs(prev, "EXPORT");
          typ = "DEFAULT";
        }
        ;
        switch (id) {
          case "!":
          case "not": {
            typ = "UNARY";
            break;
          }
          case "==":
          case "!=":
          case "===":
          case "!==":
          case "is":
          case "isnt": {
            typ = "COMPARE";
            break;
          }
          case "&&":
          case "||":
          case "and":
          case "or":
          case "??": {
            typ = "LOGIC";
            break;
          }
          case "super":
          case "break":
          case "continue":
          case "debugger":
          case "arguments": {
            typ = id.toUpperCase();
            break;
          }
        }
        ;
      }
      ;
      var len = input.length;
      if (typ == "CLASS" || typ == "DEF" || typ == "TAG" || typ == "PROP" || typ == "CSS") {
        this.queueScope(typ);
        var i = this._tokens.length;
        while (i) {
          prev = this._tokens[--i];
          var ctrl = "" + tV(prev);
          if (idx$(ctrl, IMBA_CONTEXTUAL_KEYWORDS) >= 0) {
            tTs(prev, ctrl.toUpperCase());
          } else {
            break;
          }
          ;
        }
        ;
      } else if (typ == "IF") {
        this.queueScope(typ);
      } else if (typ == "EXTEND" && !this._chunk.match(/^extend (class|tag)(\s|\n|$)/)) {
        this.queueScope(typ);
      } else if (typ == "IMPORT") {
        let next = this._chunk[idlen];
        if (lastTyp == "AWAIT" || next == "(" || next == ".") {
          typ = "IDENTIFIER";
        } else {
          this.pushEnd("IMPORT");
          this.token(typ, id, idlen);
          return len;
        }
        ;
      } else if (id == "type" && lastTyp == "IMPORT") {
        this.token("TYPEIMPORT", id, idlen);
        return len;
      } else if (typ == "EXPORT") {
        this.pushEnd("EXPORT");
        this.token(typ, id, idlen);
        return len;
      } else if (id == "from" && ctx0 == "IMPORT") {
        typ = "FROM";
        this.pair("IMPORT");
      } else if (id == "from" && ctx0 == "EXPORT") {
        typ = "FROM";
        this.pair("EXPORT");
      } else if (id == "as" && (ctx0 == "IMPORT" || this._lastTyp == "IDENTIFIER" || ctx0 == "EXPORT")) {
        typ = "AS";
      }
      ;
      if (id == "new" && (this._lastTyp != "." && this._chunk.match(/^new\s+[\w\$\(\<\#]/))) {
        typ = "NEW";
      }
      ;
      if (typ == "IDENTIFIER") {
        if (lastTyp == "CATCH") {
          typ = "CATCH_VAR";
        }
        ;
      }
      ;
      if ((lastTyp == "NUMBER" || lastTyp == ")") && !prev.spaced && (typ == "IDENTIFIER" || id == "%")) {
        typ = "UNIT";
      }
      ;
      if (colon) {
        this.token(typ, id, idlen);
        var colonOffset = colon.indexOf(":");
        this.moveCaret(idlen + colonOffset);
        this.token(":", ":", 1);
        this.moveCaret(-(idlen + colonOffset));
      } else {
        this.token(typ, id, idlen);
      }
      ;
      if (typ == "CSS") {
        return len + this.lexStyleRule(len, true);
      }
      ;
      return len;
    };
    Lexer.prototype.numberToken = function() {
      var binaryLiteral;
      var match, number, lexedLength;
      if (!(match = NUMBER.exec(this._chunk))) {
        return 0;
      }
      ;
      number = match[0];
      lexedLength = number.length;
      if (binaryLiteral = /0b([01_]+)/.exec(number)) {
        number = "" + parseInt(binaryLiteral[1].replace(/_/g, ""), 2);
      }
      ;
      var prev = last(this._tokens);
      if (match[0][0] == "." && prev && !prev.spaced && ["IDENTIFIER", ")", "}", "]", "NUMBER"].indexOf(tT(prev)) >= 0) {
        this.token(".", ".");
        number = number.substr(1);
      }
      ;
      this.token("NUMBER", number, lexedLength);
      return lexedLength;
    };
    Lexer.prototype.symbolToken = function() {
      var match, symbol, prev;
      if (!(match = SYMBOL.exec(this._chunk))) {
        return 0;
      }
      ;
      symbol = match[0];
      prev = last(this._tokens);
      if (!prev || prev.spaced || idx$(this._prevVal, ["(", "[", "="]) >= 0) {
        let sym = helpers2.dashToCamelCase(symbol.slice(1));
        this.token("STRING", '"' + sym + '"', match[0].length);
        return match[0].length;
      }
      ;
      return 0;
    };
    Lexer.prototype.escapeStr = function(str, heredoc, q) {
      str = str.replace(MULTILINER, heredoc ? "\\n" : "");
      if (q) {
        var r = RegExp("\\\\[" + q + "]", "g");
        str = str.replace(r, q);
        str = str.replace(RegExp("" + q, "g"), "\\$&");
      }
      ;
      return str;
    };
    Lexer.prototype.stringToken = function() {
      var match, string2;
      switch (this._chunk.charAt(0)) {
        case "'": {
          if (!(match = SIMPLESTR.exec(this._chunk))) {
            return 0;
          }
          ;
          string2 = match[0];
          this.token("STRING", this.escapeStr(string2), string2.length);
          break;
        }
        case '"': {
          if (!(string2 = this.balancedString(this._chunk, '"'))) {
            return 0;
          }
          ;
          if (string2.indexOf("{") >= 0) {
            var len = string2.length;
            this.token("STRING_START", string2.charAt(0), 1);
            this.interpolateString(string2.slice(1, -1));
            this.token("STRING_END", string2.charAt(len - 1), 1, string2.length - 1);
          } else {
            len = string2.length;
            this.token("STRING", this.escapeStr(string2), len);
          }
          ;
          break;
        }
        case "`": {
          if (!(string2 = this.balancedString(this._chunk, "`"))) {
            return 0;
          }
          ;
          if (string2.indexOf("{") >= 0) {
            len = string2.length;
            this.token("STRING_START", string2.charAt(0), 1);
            this.interpolateString(string2.slice(1, -1), { heredoc: true });
            this.token("STRING_END", string2.charAt(len - 1), 1, string2.length - 1);
          } else {
            len = string2.length;
            this.token("STRING", this.escapeStr(string2, true), len);
          }
          ;
          break;
        }
        default:
          return 0;
      }
      ;
      this.moveHead(string2);
      return string2.length;
    };
    Lexer.prototype.heredocToken = function() {
      var match, heredoc, quote, doc;
      if (!(match = HEREDOC.exec(this._chunk))) {
        return 0;
      }
      ;
      heredoc = match[0];
      quote = heredoc.charAt(0);
      var opts = { quote, indent: null, offset: 0 };
      doc = this.sanitizeHeredoc(match[2], opts);
      if (quote == '"' && doc.indexOf("{") >= 0) {
        var open = match[1];
        this.token("STRING_START", open, open.length);
        this.interpolateString(doc, { heredoc: true, offset: open.length + opts.offset, quote, indent: opts.realIndent });
        this.token("STRING_END", open, open.length, heredoc.length - open.length);
      } else {
        this.token("STRING", this.makeString(doc, quote, true), 0);
      }
      ;
      this.moveHead(heredoc);
      return heredoc.length;
    };
    Lexer.prototype.parseMagicalOptions = function(str) {
      var self = this;
      if (str.indexOf("imba$") >= 0) {
        str.replace(/imba\$(\w+)\=(\S*)\b/g, function(m, name, val) {
          if (/^\d+$/.test(val)) {
            val = parseInt(val);
          }
          ;
          return self._opts[name] = val;
        });
      }
      ;
      return self;
    };
    Lexer.prototype.commentToken = function() {
      var match, length, comment, indent, prev;
      var typ = "HERECOMMENT";
      if (match = JS_COMMENT.exec(this._chunk)) {
        this.token("HERECOMMENT", match[1], match[1].length);
        this.token("TERMINATOR", "\n");
        return match[0].length;
      }
      ;
      if (match = INLINE_COMMENT.exec(this._chunk)) {
        length = match[0].length;
        indent = match[1];
        comment = match[2];
        let commentBody = match[4] || "";
        if (comment[0] == "#") {
          commentBody = " " + commentBody;
        }
        ;
        prev = last(this._tokens);
        var pt = prev && tT(prev);
        var note = "//" + commentBody;
        this.parseMagicalOptions(note);
        if (this._last && this._last.spaced) {
          note = " " + note;
        }
        ;
        if (note.match(/^\/\/ \@(type|param)/)) {
          note = "/**" + commentBody + "*/";
        } else if (note.match(/^\/\/ \<(reference)/)) {
          note = "///" + commentBody;
        }
        ;
        if (pt && pt != "INDENT" && pt != "TERMINATOR" || !pt) {
          this.token("TERMINATOR", note, length);
        } else {
          if (pt == "TERMINATOR") {
            tVs(prev, tV(prev) + note);
          } else if (pt == "INDENT") {
            this.addLinebreaks(1, note);
          } else {
            this.token(typ, comment.substr(2), length);
          }
          ;
        }
        ;
        return length;
      }
      ;
      if (!(match = COMMENT.exec(this._chunk))) {
        return 0;
      }
      ;
      comment = match[0];
      var here = match[1];
      if (here) {
        this.token("HERECOMMENT", this.sanitizeHeredoc(here, { herecomment: true, indent: Array(this._indent + 1).join(" ") }), comment.length);
        this.token("TERMINATOR", "\n");
      } else {
        this.token("HERECOMMENT", comment, comment.length);
        this.token("TERMINATOR", "\n");
      }
      ;
      this.moveHead(comment);
      return comment.length;
    };
    Lexer.prototype.regexToken = function() {
      var ary;
      var match, length, prev;
      if (this._chunk.charAt(0) != "/") {
        return 0;
      }
      ;
      if (match = HEREGEX.exec(this._chunk)) {
        length = this.heregexToken(match);
        this.moveHead(match[0]);
        return length;
      }
      ;
      prev = last(this._tokens);
      if (prev && idx$(tT(prev), prev.spaced ? NOT_REGEX : NOT_SPACED_REGEX) >= 0) {
        return 0;
      }
      ;
      if (!(match = REGEX.exec(this._chunk))) {
        return 0;
      }
      ;
      var ary = iter$(match);
      var m = ary[0], regex = ary[1], flags = ary[2];
      this.token("REGEX", "" + regex + flags, m.length);
      return m.length;
    };
    Lexer.prototype.heregexToken = function(match) {
      var ary;
      var ary = iter$(match);
      var heregex = ary[0], body = ary[1], flags = ary[2];
      this.token("REGEX", heregex, heregex.length);
      return heregex.length;
    };
    Lexer.prototype.lineToken = function() {
      var gutter;
      var match;
      if (!(match = MULTI_DENT.exec(this._chunk))) {
        return 0;
      }
      ;
      var indent = match[0];
      var brCount = this.moveHead(indent);
      this._seenFor = false;
      var prev = last(this._tokens, 1);
      let whitespace = indent.substr(indent.lastIndexOf("\n") + 1);
      var noNewlines = this.unfinished();
      if (/^\n#\s/.test(this._chunk)) {
        this.addLinebreaks(1);
        return 0;
      }
      ;
      if (this._state.gutter == void 0) {
        this._state.gutter = whitespace;
      }
      ;
      if (gutter = this._state.gutter || this._opts.gutter) {
        if (whitespace.indexOf(gutter) == 0) {
          whitespace = whitespace.slice(gutter.length);
        } else if (this._chunk[indent.length] === void 0) {
          true;
        } else {
          this.error("incorrect indentation");
        }
        ;
      }
      ;
      var size = whitespace.length;
      if (this._opts.dropIndentation) {
        return size;
      }
      ;
      if (size > 0) {
        if (!this._indentStyle) {
          this._opts.indent = this._indentStyle = whitespace;
          this._indentRegex = new RegExp(whitespace, "g");
        }
        ;
        let indentSize = 0;
        let offset = 0;
        let offsetLoc = this._loc;
        while (true) {
          let idx = whitespace.indexOf(this._indentStyle, offset);
          if (idx == offset) {
            indentSize++;
            offset += this._indentStyle.length;
          } else if (offset == whitespace.length) {
            break;
          } else {
            this._loc += indent.length - whitespace.length;
            let start = this._loc;
            this.token("INDENT", whitespace, whitespace.length);
            this.error("Use tabs for indentation", {
              offset: start + offset,
              length: whitespace.length - offset
            });
          }
          ;
        }
        ;
        size = indentSize;
      }
      ;
      if (size - this._indebt == this._indent) {
        this._scopes.length = this._indents.length;
        if (noNewlines) {
          this.suppressNewlines();
        } else {
          this.newlineToken(brCount, indent);
        }
        ;
        return indent.length;
      }
      ;
      if (size > this._indent) {
        if (noNewlines) {
          this._indebt = size - this._indent;
          this.suppressNewlines();
          return indent.length;
        }
        ;
        if (this.inTag()) {
          return indent.length;
        }
        ;
        var diff = size - this._indent + this._outdebt;
        this.closeDef();
        var expectScope = this._scopes[this._indents.length];
        var immediate = last(this._tokens);
        if (immediate && tT(immediate) == "TERMINATOR") {
          tTs(immediate, "INDENT");
          immediate._meta || (immediate._meta = { pre: tV(immediate), post: "" });
          immediate.scope = expectScope;
        } else {
          this.token("INDENT", "" + diff, 0);
          this._last.scope = expectScope;
        }
        ;
        this._indents.push(diff);
        this.pushEnd("OUTDENT", { opener: this._last });
        this._outdebt = this._indebt = 0;
        this.addLinebreaks(brCount);
      } else if (true) {
        this._indebt = 0;
        let moveOut = this._indent - size;
        let currIndent = this._indent;
        let useTabs = this._indentStyle == "	";
        let lines = indent.replace().split("\n");
        let levels = [];
        let k = lines.length;
        let lvl = 0;
        while (k > 0) {
          let ln = lines[--k];
          let lnlvl = useTabs ? ln.length : ln.replace(this._indentRegex, "	").length;
          if (lnlvl > lvl) {
            lvl = lnlvl;
          }
          ;
          levels[k] = lvl;
        }
        ;
        levels[0] = currIndent;
        let i = 0;
        let toks = [];
        let pre = "";
        for (let idx = 0, items = iter$(lines), len = items.length; idx < len; idx++) {
          let lvl2 = levels[idx];
          while (currIndent > lvl2) {
            if (pre) {
              this.terminatorToken(pre);
              pre = "";
            } else {
              this.terminatorToken("");
            }
            ;
            moveOut--;
            this.outdentToken(1, true);
            currIndent--;
          }
          ;
          pre += "\n" + items[idx];
        }
        ;
        if (pre) {
          this.terminatorToken(pre);
        }
        ;
        while (moveOut > 0) {
          this.outdentToken(1, true);
          moveOut--;
        }
        ;
      }
      ;
      this._indent = size;
      return indent.length;
    };
    Lexer.prototype.outdentToken = function(moveOut, noNewlines, newlineCount) {
      var dent = 0;
      while (moveOut > 0) {
        var len = this._indents.length - 1;
        if (this._indents[len] == void 0) {
          moveOut = 0;
        } else if (this._indents[len] == this._outdebt) {
          moveOut -= this._outdebt;
          this._outdebt = 0;
        } else if (this._indents[len] < this._outdebt) {
          this._outdebt -= this._indents[len];
          moveOut -= this._indents[len];
        } else {
          dent = this._indents.pop() - this._outdebt;
          moveOut -= dent;
          this._outdebt = 0;
          if (!noNewlines) {
            this.addLinebreaks(1);
          }
          ;
          let paired = this.pair("OUTDENT");
          this.token("OUTDENT", "" + dent, 0);
          if (paired[1] && paired[1].opener) {
            let opener = paired[1].opener;
            this._last._opener = opener;
            opener._closer = this._last;
            if (opener._type == "CSS_SEL") {
              this.token("CSS_END", "", 0);
            }
            ;
          }
          ;
        }
        ;
      }
      ;
      if (dent) {
        this._outdebt -= moveOut;
      }
      ;
      while (this.lastTokenValue() == ";") {
        this._tokens.pop();
      }
      ;
      if (!(this.lastTokenType() == "TERMINATOR" || noNewlines)) {
        this.token("TERMINATOR", "\n", 0);
      }
      ;
      this._scopes.length = this._indents.length;
      this.closeDef();
      var ctx = this.context();
      if (ctx == "%" || ctx == "TAG" || ctx == "IMPORT" || ctx == "EXPORT") {
        this.pair(ctx);
      }
      ;
      return this;
    };
    Lexer.prototype.whitespaceToken = function(type) {
      var match, nline, prev;
      if (!((match = WHITESPACE.exec(this._chunk)) || (nline = this._chunk.charAt(0) === "\n"))) {
        return 0;
      }
      ;
      prev = last(this._tokens);
      if (prev) {
        if (match) {
          prev.spaced = true;
          return match[0].length;
        } else {
          prev.newLine = true;
          return 0;
        }
        ;
      }
      ;
    };
    Lexer.prototype.moveHead = function(str) {
      var br = count(str, "\n");
      return br;
    };
    Lexer.prototype.terminatorToken = function(content, loc) {
      if (this._lastTyp == "TERMINATOR") {
        return this._last._value += content;
      } else {
        return this.token("TERMINATOR", content, loc);
      }
      ;
    };
    Lexer.prototype.addLinebreaks = function(count2, raw) {
      var br;
      if (!raw && count2 == 0) {
        return this;
      }
      ;
      var prev = this._last;
      if (!raw) {
        if (count2 == 1) {
          br = "\n";
        } else if (count2 == 2) {
          br = "\n\n";
        } else if (count2 == 3) {
          br = "\n\n\n";
        } else {
          br = repeatString("\n", count2);
        }
        ;
      }
      ;
      if (prev) {
        var t = prev._type;
        var v = tV(prev);
        if (t == "INDENT") {
          var meta = prev._meta || (prev._meta = { pre: "", post: "" });
          meta.post += raw || br;
          return this;
        } else if (t == "TERMINATOR") {
          tVs(prev, v + (raw || br));
          return this;
        }
        ;
      }
      ;
      this.token("TERMINATOR", raw || br, 0);
      return;
    };
    Lexer.prototype.newlineToken = function(lines, raw) {
      this.addLinebreaks(lines, raw);
      this.closeDef();
      var ctx = this.context();
      if (ctx == "TAG" || ctx == "IMPORT" || ctx == "EXPORT") {
        this.pair(ctx);
      }
      ;
      return this;
    };
    Lexer.prototype.suppressNewlines = function() {
      if (this.value() === "\\") {
        this._tokens.pop();
      }
      ;
      return this;
    };
    Lexer.prototype.literalToken = function() {
      var match, value;
      if (match = OPERATOR.exec(this._chunk)) {
        value = match[0];
        if (CODE.test(value))
          this.tagParameters();
      } else {
        value = this._chunk.charAt(0);
      }
      ;
      var end1 = this._ends[this._ends.length - 1];
      var end2 = this._ends[this._ends.length - 2];
      var inTag = end1 == "TAG_END" || end1 == "OUTDENT" && end2 == "TAG_END";
      var tokid = value;
      var prev = last(this._tokens);
      var pt = prev && tT(prev);
      var pv = prev && tV(prev);
      var length = value.length;
      if (value == "=" && prev) {
        if (pv == "||" || pv == "&&") {
          tTs(prev, "COMPOUND_ASSIGN");
          tVs(prev, pv + "=");
          prev._len = this._loc - prev._loc + value.length;
          return value.length;
        }
        ;
      }
      ;
      if (value == "\u0192") {
        tokid = "DO";
      }
      ;
      if (value == "|") {
        if (pv == "(") {
          this.token("DO", "DO", 0);
          this.pushEnd("|");
          this.token("BLOCK_PARAM_START", value, 1);
          return length;
        } else if (pt == "DO") {
          this.pushEnd("|");
          this.token("BLOCK_PARAM_START", value, 1);
          return length;
        } else if (end1 == "|") {
          this.token("BLOCK_PARAM_END", value, 1);
          this.pair("|");
          return length;
        }
        ;
      }
      ;
      if (value === ";") {
        this._seenFor = false;
        tokid = "TERMINATOR";
      }
      ;
      if (value == "(" && pt == "T.") {
        tokid = "STYLE_START";
      } else if (value == "[" && inTag) {
        tokid = "STYLE_START";
      } else if (value === "(" && inTag && pt != "=" && prev.spaced) {
        this.token(",", ",");
      } else if (value === "->" && inTag) {
        tokid = "TAG_END";
        this.pair("TAG_END");
      } else if (value === "=>" && inTag) {
        tokid = "TAG_END";
        this.pair("TAG_END");
      } else if (value === "/>" && inTag) {
        tokid = "TAG_END";
        this.pair("TAG_END");
      } else if (value === ">" && inTag) {
        tokid = "TAG_END";
        this.pair("TAG_END");
      } else if (value === "TERMINATOR" && end1 === "DEF") {
        this.closeDef();
      } else if (value === "&" && this.context() == "DEF") {
        tokid = "BLOCK_ARG";
      } else if (value == "---") {
        tokid = "SEPARATOR";
      } else if (value == "-" && pt == "TERMINATOR" && this._chunk.match(/^\-\s*\n/)) {
        tokid = "SEPARATOR";
      } else if (value == "*" && this._chunk.charAt(1).match(/[A-Za-z\_\@\[]/) && (prev.spaced || [",", "(", "[", "{", "|", "\n", "	"].indexOf(pv) >= 0)) {
        tokid = "SPLAT";
      } else if (value == "*" && (this.context() == "IMPORT" || this.context() == "EXPORT")) {
        tokid = "" + this.context() + "_ALL";
      } else if (value == "," && this.context() == "IMPORT") {
        tokid = "IMPORT_COMMA";
      } else if (value == "!" && prev && !prev.spaced && (["]", ")"].indexOf(pv) >= 0 || (pt == "IDENTIFIER" || pt == "SYMBOLID" || pt == "SUPER"))) {
        tokid = "BANG";
      } else if (value == "&" && this._chunk.match(/^\&\s*[,\)\}\]]/)) {
        tokid = "DO_PLACEHOLDER";
      } else if (value == "&" && this._chunk.match(/^\&(\s*[\.\>\<\=\%\^]|\s+(is|isnt|in|not|isa)\b|[\[\(])/)) {
        tokid = "AMPER_REF";
      } else if (value == "**") {
        tokid = "EXP";
      } else if (value == "%" && (pt == "NUMBER" || pt == ")") && !prev.spaced) {
        tokid = "UNIT";
      } else if (idx$(value, MATH) >= 0) {
        tokid = "MATH";
      } else if (idx$(value, COMPARE) >= 0) {
        tokid = "COMPARE";
      } else if (idx$(value, COMPOUND_ASSIGN) >= 0) {
        tokid = "COMPOUND_ASSIGN";
      } else if (idx$(value, UNARY) >= 0) {
        tokid = "UNARY";
      } else if (idx$(value, SHIFT) >= 0) {
        tokid = "SHIFT";
      } else if (idx$(value, LOGIC) >= 0) {
        tokid = "LOGIC";
      } else if (prev && !prev.spaced) {
        if (value == "{" && pt == "IDENTIFIER") {
          tokid = "{{";
        } else if (value == "{" && pt == "#") {
          tokid = "{{";
        }
        ;
        if (value === "(" && idx$(pt, CALLABLE) >= 0) {
          tokid = "CALL_START";
        } else if (value === "(" && pt == "DO") {
          tokid = "BLOCK_PARAM_START";
        } else if (value === "[" && idx$(pt, INDEXABLE) >= 0) {
          tokid = "INDEX_START";
          if (pt == "?") {
            tTs(prev, "INDEX_SOAK");
          }
          ;
        }
        ;
      }
      ;
      if (pv == "&" && pt != "AMPER_REF") {
        if (!prev.spaced && idx$(tokid, ["COMPARE", ".", "(", "["]) >= 0) {
          tTs(prev, pt = "AMPER_REF");
        } else if (prev.spaced && idx$(tokid, ["COMPARE"]) >= 0) {
          tTs(prev, pt = "AMPER_REF");
        }
        ;
      }
      ;
      let opener = null;
      switch (value) {
        case "(":
        case "{":
        case "[": {
          this.pushEnd(INVERSES[value], { closeType: INVERSES[tokid], i: this._tokens.length });
          break;
        }
        case ")":
        case "}":
        case "]": {
          let paired = this.pair(value);
          if (paired && paired[1].closeType) {
            tokid = paired[1].closeType;
            let other = this._tokens[paired[1].i];
            opener = this._tokens[paired[1].i];
          }
          ;
          break;
        }
      }
      ;
      if (value == "\\") {
        tokid = "TYPE";
        let annotation = this.findTypeAnnotation(this._chunk.slice(1));
        if (annotation) {
          value = value + annotation;
        }
        ;
      }
      ;
      if (value == ".." && !prev.spaced) {
        tokid = "?.";
        value = "?.";
      }
      ;
      if (value == ":" && end1 == "TAG_RULE") {
        tokid = "T:";
      }
      ;
      if (tokid == "-" || tokid == "+") {
        if (/\w|\(|\$/.test(this._chunk[1]) && (!prev || prev.spaced)) {
          tokid = tokid + tokid + tokid;
        }
        ;
      }
      ;
      this.token(tokid, value, value.length);
      if (opener) {
        opener._closer = this._last;
      }
      ;
      if (this._platform == "tsc") {
        let next = this._chunk[1] || "";
        if (value == "." && (!next || TSC_CARET_BEFORE[next])) {
          this.token("IDENTIFIER", "$CARET$", 0, 1);
        } else if (value == "@" && (!next || /[^\$\@\-\.\w]/.test(next)) && false) {
          this.token("IDENTIFIER", "$CARET$", 0, 1);
        }
        ;
      }
      ;
      return value.length;
    };
    Lexer.prototype.sanitizeHeredoc = function(doc, options) {
      var match;
      var indent = options.indent;
      var herecomment = options.herecomment;
      if (herecomment) {
        if (HEREDOC_ILLEGAL.test(doc)) {
          this.error("block comment cannot contain '*/' starting");
        }
        ;
        if (doc.indexOf("\n") <= 0) {
          return doc;
        }
        ;
      } else {
        var length_;
        while (match = HEREDOC_INDENT.exec(doc)) {
          var attempt = match[1];
          if (indent === null || 0 < (length_ = attempt.length) && length_ < indent.length) {
            indent = attempt;
          }
          ;
        }
        ;
      }
      ;
      if (indent) {
        doc = doc.replace(RegExp("\\n" + indent, "g"), "\n");
      }
      ;
      if (!herecomment) {
        if (doc[0] == "\n") {
          options.offset = indent.length + 1;
        }
        ;
        doc = doc.replace(/^\n/, "");
      }
      ;
      options.realIndent = indent;
      return doc;
    };
    Lexer.prototype.tagParameters = function() {
      var tok;
      if (this.lastTokenType() != ")") {
        return this;
      }
      ;
      var stack = [];
      var tokens = this._tokens;
      var i = tokens.length;
      tTs(tokens[--i], "PARAM_END");
      while (tok = tokens[--i]) {
        var t = tT(tok);
        switch (t) {
          case ")": {
            stack.push(tok);
            break;
          }
          case "(":
          case "CALL_START": {
            if (stack.length) {
              stack.pop();
            } else if (t === "(") {
              tTs(tok, "PARAM_START");
              return this;
            } else {
              return this;
            }
            ;
            break;
          }
        }
        ;
      }
      ;
      return this;
    };
    Lexer.prototype.closeIndentation = function() {
      while (true) {
        var ctx = this.context();
        if (ctx == "TAG" || ctx == "IMPORT" || ctx == "EXPORT") {
          this.pair(ctx);
        } else {
          break;
        }
        ;
      }
      ;
      this.closeDef();
      this.closeSelector();
      return this.outdentToken(this._indent, false, 0);
    };
    Lexer.prototype.balancedString = function(str, end) {
      var match, letter, prev;
      var stack = [end];
      var i = 0;
      while (i < str.length - 1) {
        i++;
        letter = str.charAt(i);
        switch (letter) {
          case "\\": {
            i++;
            continue;
            break;
          }
          case end: {
            stack.pop();
            if (!stack.length) {
              var v = str.slice(0, i + 1);
              return v;
            }
            ;
            end = stack[stack.length - 1];
            continue;
            break;
          }
        }
        ;
        if (end === "}" && (letter == '"' || letter == "'" || letter == "`")) {
          stack.push(end = letter);
        } else if (end === "}" && letter === "/" && (match = HEREGEX.exec(str.slice(i)) || REGEX.exec(str.slice(i)))) {
          i += match[0].length - 1;
        } else if (end === "}" && letter === "{") {
          stack.push(end = "}");
        } else if (end === '"' && letter === "{") {
          stack.push(end = "}");
        } else if (end === "`" && letter === "{") {
          stack.push(end = "}");
        }
        ;
        prev = letter;
      }
      ;
      return this.error("missing " + stack.pop() + ", starting");
    };
    Lexer.prototype.interpolateString = function(str, options) {
      if (options === void 0)
        options = {};
      var heredoc = options.heredoc;
      var quote = options.quote;
      var regex = options.regex;
      var prefix = options.prefix;
      var indent = options.indent;
      var startLoc = this._loc;
      var tokens = [];
      var pi = 0;
      var i = -1;
      var locOffset = options.offset || 1;
      var strlen = str.length;
      var letter;
      var expr;
      var isInterpolated = false;
      while (letter = str[i += 1]) {
        if (letter === "\\") {
          i += 1;
          continue;
        }
        ;
        if (letter === "\n" && indent) {
          locOffset += indent.length;
        }
        ;
        if (!(str[i] == "{" && (expr = this.balancedString(str.slice(i), "}")))) {
          continue;
        }
        ;
        isInterpolated = true;
        if (pi < i) {
          var tok = new Token2("NEOSTRING", this.escapeStr(str.slice(pi, i), heredoc, quote), this._loc + pi + locOffset, i - pi);
          tokens.push(tok);
        }
        ;
        tokens.push(new Token2("{{", "{", this._loc + i + locOffset, 1));
        var inner = expr.slice(1, -1);
        inner = inner.replace(/^[^\n\S]+/, "");
        if (inner.length) {
          var spaces = 0;
          var offset = this._loc + i + (expr.length - inner.length) - 1;
          var nested = new Lexer().tokenize(inner, { inline: true, rewrite: false, loc: offset + locOffset }, this._script);
          if (nested[0] && tT(nested[0]) == "TERMINATOR") {
            nested.shift();
          }
          ;
          if (nested.length) {
            tokens.push.apply(tokens, nested);
          }
          ;
        }
        ;
        i += expr.length - 1;
        tokens.push(new Token2("}}", "}", this._loc + i + locOffset, 1));
        pi = i + 1;
      }
      ;
      if (i >= pi && pi < str.length) {
        tokens.push(new Token2("NEOSTRING", this.escapeStr(str.slice(pi), heredoc, quote), this._loc + pi + locOffset, str.length - pi));
      }
      ;
      if (regex) {
        return tokens;
      }
      ;
      if (!tokens.length) {
        return this.token("NEOSTRING", '""');
      }
      ;
      for (let j = 0, len = tokens.length; j < len; j++) {
        this._tokens.push(tokens[j]);
      }
      ;
      return tokens;
    };
    Lexer.prototype.balancedSelector = function(str, end) {
      var prev;
      var letter;
      var stack = [end];
      for (let len = str.length, i = 1, rd = len - i; rd > 0 ? i < len : i > len; rd > 0 ? i++ : i--) {
        switch (letter = str.charAt(i)) {
          case "\\": {
            i++;
            continue;
            break;
          }
          case end: {
            stack.pop();
            if (!stack.length) {
              return str.slice(0, i + 1);
            }
            ;
            end = stack[stack.length - 1];
            continue;
            break;
          }
        }
        ;
        if (end === "}" && letter === ")") {
          stack.push(end = letter);
        } else if (end === "}" && letter === "{") {
          stack.push(end = "}");
        } else if (end === ")" && letter === "{") {
          stack.push(end = "}");
        }
        ;
        prev = letter;
      }
      ;
      return this.error("missing " + stack.pop() + ", starting");
    };
    Lexer.prototype.pair = function(tok) {
      var wanted = last(this._ends);
      if (tok != wanted) {
        if (!("OUTDENT" === wanted)) {
          this.error("unmatched " + tok, { length: tok.length });
        }
        ;
        var size = last(this._indents);
        this._indent -= size;
        this.outdentToken(size, true, 0);
        return this.pair(tok);
      }
      ;
      return this.popEnd();
    };
    Lexer.prototype.token = function(id, value, len, offset) {
      this._lastTyp = id;
      this._lastVal = value;
      var tok = this._last = new Token2(id, value, this._loc + (offset || 0), len || 0);
      this._tokens.push(tok);
      return;
    };
    Lexer.prototype.lastTokenType = function() {
      var token = this._tokens[this._tokens.length - 1];
      return token ? tT(token) : "NONE";
    };
    Lexer.prototype.lastTokenValue = function() {
      var token = this._tokens[this._tokens.length - 1];
      return token ? token._value : "";
    };
    Lexer.prototype.tokid = function(index, val) {
      var tok;
      if (tok = last(this._tokens, index)) {
        if (val) {
          tTs(tok, val);
        }
        ;
        return tT(tok);
      } else {
        return null;
      }
      ;
    };
    Lexer.prototype.value = function(index, val) {
      var tok;
      if (tok = last(this._tokens, index)) {
        if (val) {
          tVs(tok, val);
        }
        ;
        return tV(tok);
      } else {
        return null;
      }
      ;
    };
    Lexer.prototype.unfinished = function() {
      if (LINE_CONTINUER.test(this._chunk) && (!this._context || !this._context.style)) {
        return true;
      }
      ;
      return UNFINISHED.indexOf(this._lastTyp) >= 0 && this._platform != "tsc";
    };
    Lexer.prototype.escapeLines = function(str, heredoc) {
      return str.replace(MULTILINER, heredoc ? "\\n" : "");
    };
    Lexer.prototype.makeString = function(body, quote, heredoc) {
      if (!body) {
        return quote + quote;
      }
      ;
      body = body.replace(/\\([\s\S])/g, function(match, contents) {
        return contents == "\n" || contents == quote ? contents : match;
      });
      body = body.replace(RegExp("" + quote, "g"), "\\$&");
      return quote + this.escapeLines(body, heredoc) + quote;
    };
    Lexer.prototype.error = function(message, params) {
      if (params === void 0)
        params = {};
      let loc = params.offset || this._loc;
      let err = this._script.addDiagnostic("error", {
        message,
        source: params.source || "imba-lexer",
        range: params.range || this._script.rangeAt(loc, loc + (params.length || len$(this)))
      });
      throw err.toError();
    };
  }
});
var require_rewriter = __commonJS({
  "src/compiler/rewriter.imba1"(exports) {
    function idx$(a, b) {
      return b && b.indexOf ? b.indexOf(a) : [].indexOf.call(a, b);
    }
    function iter$(a) {
      return a ? a.toArray ? a.toArray() : a : [];
    }
    var T = require_token();
    var Token2 = T.Token;
    var constants$ = require_constants();
    var INVERSES = constants$.INVERSES;
    var BALANCED_PAIRS = constants$.BALANCED_PAIRS;
    var TOK = constants$.TOK;
    var TERMINATOR = "TERMINATOR";
    var INDENT = "INDENT";
    var OUTDENT = "OUTDENT";
    var THEN = "THEN";
    var CATCH = "CATCH";
    var EOF = { _type: "EOF", _value: "" };
    var arrayToHash2 = function(ary) {
      var hash = {};
      for (let i = 0, items = iter$(ary), len = items.length; i < len; i++) {
        hash[items[i]] = 1;
      }
      ;
      return hash;
    };
    var EXPRESSION_CLOSE = [")", "]", "}", "STYLE_END", "OUTDENT", "CALL_END", "PARAM_END", "INDEX_END", "BLOCK_PARAM_END", "STRING_END", "}}", "TAG_END", "CATCH", "WHEN", "ELSE", "FINALLY"];
    var EXPRESSION_CLOSE_HASH = arrayToHash2(EXPRESSION_CLOSE);
    var EXPRESSION_START = {
      "(": 1,
      "[": 1,
      "{": 1,
      "{{": 1,
      "INDENT": 1,
      "CALL_START": 1,
      "PARAM_START": 1,
      "INDEX_START": 1,
      "BLOCK_PARAM_START": 1,
      "STRING_START": 1,
      "TAG_START": 1
    };
    var EXPRESSION_END = {
      ")": 1,
      "]": 1,
      "}": 1,
      "}}": 1,
      "OUTDENT": 1,
      "CALL_END": 1,
      "PARAM_END": 1,
      "INDEX_END": 1,
      "BLOCK_PARAM_END": 1,
      "STRING_END": 1,
      "TAG_END": 1
    };
    var NO_IMPLICIT_PARENS = ["STYLE_START"];
    var NO_IMPLICIT_BRACES = ["STYLE_START"];
    var SINGLE_LINERS = {
      ELSE: 1,
      TRY: 1,
      FINALLY: 1,
      THEN: 1,
      BLOCK_PARAM_END: 1,
      DO: 1,
      BEGIN: 1,
      CATCH_VAR: 1
    };
    var SINGLE_CLOSERS_MAP = {
      TERMINATOR: true,
      CATCH: true,
      FINALLY: true,
      ELSE: true,
      OUTDENT: true,
      LEADING_WHEN: true
    };
    var IMPLICIT_FUNC_MAP = {
      "IDENTIFIER": 1,
      "TYPE": 1,
      "SYMBOLID": 1,
      "SUPER": 1,
      "THIS": 1,
      "SELF": 1,
      "TAG_END": 1,
      "IVAR": 1,
      "CVAR": 1,
      "ARGVAR": 1,
      "BREAK": 1,
      "CONTINUE": 1,
      "RETURN": 1,
      "INDEX_END": 1,
      "]": 1,
      "BANG": 1
    };
    var IMPLICIT_CALL_MAP = {
      "SELECTOR": 1,
      "IDENTIFIER": 1,
      "SYMBOLID": 1,
      "NUMBER": 1,
      "STRING": 1,
      "SYMBOL": 1,
      "JS": 1,
      "REGEX": 1,
      "NEW": 1,
      "CLASS": 1,
      "IF": 1,
      "AWAIT": 1,
      "UNLESS": 1,
      "TRY": 1,
      "SWITCH": 1,
      "THIS": 1,
      "BOOL": 1,
      "TRUE": 1,
      "FALSE": 1,
      "NULL": 1,
      "UNDEFINED": 1,
      "UNARY": 1,
      "SUPER": 1,
      "IVAR": 1,
      "ARGVAR": 1,
      "SELF": 1,
      "[": 1,
      "(": 1,
      "{": 1,
      "--": 1,
      "++": 1,
      "---": 1,
      "+++": 1,
      "#": 1,
      "TAG_START": 1,
      "PARAM_START": 1,
      "SELECTOR_START": 1,
      "STRING_START": 1,
      "IDREF": 1,
      "SPLAT": 1,
      "DO": 1,
      "AMPER_REF": 1,
      "BLOCK_ARG": 1,
      "FOR": 1,
      "CONTINUE": 1,
      "BREAK": 1,
      "LET": 1,
      "VAR": 1,
      "CONST": 1,
      "CSS": 1,
      "ENV_FLAG": 1
    };
    var IMPLICIT_UNSPACED_CALL = ["+", "-"];
    var IMPLICIT_BLOCK = ["{", "[", ",", "BLOCK_PARAM_END", "DO"];
    var IMPLICIT_BLOCK_MAP = arrayToHash2(IMPLICIT_BLOCK);
    var NO_CALL_TAG = ["CLASS", "IF", "UNLESS", "TAG", "WHILE", "FOR", "UNTIL", "CATCH", "FINALLY", "MODULE", "LEADING_WHEN", "STRUCT"];
    var NO_CALL_TAG_MAP = arrayToHash2(NO_CALL_TAG);
    var IMPLICIT_END_MAP = {
      POST_IF: true,
      POST_UNLESS: true,
      POST_FOR: true,
      WHILE: true,
      UNTIL: true,
      WHEN: true,
      BY: true,
      LOOP: true,
      TERMINATOR: true,
      DEF_BODY: true
    };
    var CALLCOUNT = 0;
    function Rewriter() {
      this._tokens = [];
      this._options = {};
      this._len = 0;
      this._starter = null;
      this;
    }
    exports.Rewriter = Rewriter;
    Rewriter.prototype.reset = function() {
      this._starter = null;
      this._len = 0;
      return this;
    };
    Rewriter.prototype.tokens = function() {
      return this._tokens;
    };
    Rewriter.prototype.rewrite = function(tokens, opts) {
      if (opts === void 0)
        opts = {};
      this.reset();
      this._tokens = tokens;
      this._options = opts;
      this._platform = opts.platform || opts.target;
      var i = 0;
      var k = tokens.length;
      while (i < k - 1) {
        var token = tokens[i];
        if (token._type == "DEF_BODY") {
          var next = tokens[i + 1];
          if (next && next._type == TERMINATOR) {
            token._type = "DEF_EMPTY";
          }
          ;
        }
        ;
        i++;
      }
      ;
      this.step("all");
      if (CALLCOUNT) {
        console.log(CALLCOUNT);
      }
      ;
      return this._tokens;
    };
    Rewriter.prototype.all = function() {
      this.step("ensureFirstLine");
      this.step("removeLeadingNewlines");
      if (this._platform == "tsc") {
        this.step("addPlaceholderIdentifiers");
      }
      ;
      this.step("removeMidExpressionNewlines");
      this.step("tagDefArguments");
      this.step("closeOpenTags");
      this.step("addImplicitIndentation");
      this.step("tagPostfixConditionals");
      this.step("addImplicitBraces");
      return this.step("addImplicitParentheses");
    };
    Rewriter.prototype.step = function(fn) {
      this[fn]();
      return;
    };
    Rewriter.prototype.scanTokens = function(block) {
      var tokens = this._tokens;
      var i = 0;
      while (i < tokens.length) {
        i += block.call(this, tokens[i], i, tokens);
      }
      ;
      return true;
    };
    Rewriter.prototype.detectEnd = function(i, condition, action, state) {
      if (state === void 0)
        state = {};
      var tokens = this._tokens;
      var levels = 0;
      var token;
      var t, v;
      while (i < tokens.length) {
        token = tokens[i];
        if (levels == 0 && condition.call(this, token, i, tokens, state)) {
          return action.call(this, token, i, tokens, state);
        }
        ;
        if (!token || levels < 0) {
          return action.call(this, token, i - 1, tokens, state);
        }
        ;
        t = token._type;
        if (EXPRESSION_START[t]) {
          levels += 1;
        } else if (EXPRESSION_END[t]) {
          levels -= 1;
        }
        ;
        i += 1;
      }
      ;
      return i - 1;
    };
    Rewriter.prototype.ensureFirstLine = function() {
      var token = this._tokens[0];
      if (!token || token._type === TERMINATOR) {
        this._tokens.unshift(T.token("BODYSTART", "BODYSTART"));
      }
      ;
      return;
    };
    Rewriter.prototype.addPlaceholderIdentifiers = function() {
      let nextTest = /^([\,\]\)\}]|\}\})$/;
      return this.scanTokens(function(token, i, tokens) {
        var prev = tokens[i - 1] || EOF;
        var next = tokens[i + 1] || EOF;
        if (prev._type == "=" || prev._type == ":") {
          if (token._type === TERMINATOR && next._type != "INDENT" || token._type == "," || token._type == "DEF_BODY") {
            tokens.splice(i, 0, new Token2("IDENTIFIER", "$CARET$", token._loc, 0));
            return 2;
          }
          ;
        } else if (prev._type == ".") {
          if (token._type === TERMINATOR && next._type != "INDENT" || nextTest.test(token._value)) {
            tokens.splice(i, 0, new Token2("IDENTIFIER", "$CARET$", token._loc, 0));
            return 2;
          }
          ;
        }
        ;
        return 1;
      });
    };
    Rewriter.prototype.removeLeadingNewlines = function() {
      var at = 0;
      var i = 0;
      var tokens = this._tokens;
      var token;
      var l = tokens.length;
      while (i < l) {
        token = tokens[i];
        if (token._type !== TERMINATOR) {
          at = i;
          break;
        }
        ;
        i++;
      }
      ;
      if (at) {
        tokens.splice(0, at);
      }
      ;
      return;
    };
    Rewriter.prototype.removeMidExpressionNewlines = function() {
      return this.scanTokens(function(token, i, tokens) {
        var next = tokens.length > i + 1 ? tokens[i + 1] : null;
        if (!(token._type === TERMINATOR && next && EXPRESSION_CLOSE_HASH[next._type])) {
          return 1;
        }
        ;
        if (next && next._type == OUTDENT) {
          return 1;
        }
        ;
        tokens.splice(i, 1);
        return 0;
      });
    };
    Rewriter.prototype.tagDefArguments = function() {
      return true;
    };
    Rewriter.prototype.closeOpenTags = function() {
      var self = this;
      var condition = function(token, i) {
        return token._type == ">" || token._type == "TAG_END";
      };
      var action = function(token, i) {
        return token._type = "TAG_END";
      };
      return self.scanTokens(function(token, i, tokens) {
        if (token._type === "TAG_START") {
          self.detectEnd(i + 1, condition, action);
        }
        ;
        return 1;
      });
    };
    Rewriter.prototype.addImplicitBlockCalls = function() {
      var i = 1;
      var tokens = this._tokens;
      while (i < tokens.length) {
        var token = tokens[i];
        var t = token._type;
        var v = token._value;
        if (t == "DO" && (v == "INDEX_END" || v == "IDENTIFIER" || v == "NEW")) {
          tokens.splice(i + 1, 0, T.token("CALL_END", ")"));
          tokens.splice(i + 1, 0, T.token("CALL_START", "("));
          i++;
        }
        ;
        i++;
      }
      ;
      return;
    };
    Rewriter.prototype.addLeftBrace = function() {
      return this;
    };
    Rewriter.prototype.addImplicitBraces = function() {
      var self = this;
      var stack = [];
      var prevStack = null;
      var start = null;
      var startIndent = 0;
      var startIdx = null;
      var baseCtx = ["ROOT", 0];
      var defType = "DEF";
      var noBraceContext = ["IF", "TERNARY", "FOR", defType];
      var noBrace = false;
      var action = function(token, i) {
        return self._tokens.splice(i, 0, T.RBRACKET);
      };
      var open = function(token, i, scope) {
        let tok = new Token2("{", "{", 0, 0, 0);
        tok.generated = true;
        tok.scope = scope;
        return self._tokens.splice(i, 0, tok);
      };
      var close = function(token, i, scope) {
        let tok = new Token2("}", "}", 0, 0, 0);
        tok.generated = true;
        tok.scope = scope;
        return self._tokens.splice(i, 0, tok);
      };
      var stackToken = function(a, b) {
        return [a, b];
      };
      var indents = [];
      var balancedStack = [];
      return self.scanTokens(function(token, i, tokens) {
        var type = token._type;
        var v = token._value;
        if (type == "CSS_SEL" && token._closer) {
          let idx2 = tokens.indexOf(token._closer);
          return idx2 - i + 1;
        }
        ;
        if (type == "STYLE_START" && token._closer) {
          return tokens.indexOf(token._closer) - i;
        }
        ;
        if (BALANCED_PAIRS[type]) {
          balancedStack.unshift(type);
        } else if (INVERSES[type] && INVERSES[type] == balancedStack[0]) {
          balancedStack.shift();
        }
        ;
        if (NO_IMPLICIT_BRACES.indexOf(balancedStack[0]) >= 0) {
          return 1;
        }
        ;
        var ctx = stack.length ? stack[stack.length - 1] : baseCtx;
        var idx;
        if (type == "INDENT") {
          indents.unshift(token.scope);
        } else if (type == "OUTDENT") {
          indents.shift();
        }
        ;
        if (noBraceContext.indexOf(type) >= 0 && type != defType) {
          stack.push(stackToken(type, i));
          return 1;
        }
        ;
        if (v == "?") {
          stack.push(stackToken("TERNARY", i));
          return 1;
        }
        ;
        if (EXPRESSION_START[type]) {
          if (type === INDENT && noBraceContext.indexOf(ctx[0]) >= 0) {
            stack.pop();
          }
          ;
          let tt = self.tokenType(i - 1);
          if (type === INDENT && (tt == "{" || tt == "STYLE_START")) {
            stack.push(stackToken("{", i));
          } else {
            stack.push(stackToken(type, i));
          }
          ;
          return 1;
        }
        ;
        if (EXPRESSION_END[type]) {
          if (ctx[0] == "TERNARY") {
            stack.pop();
          }
          ;
          start = stack.pop();
          start[2] = i;
          if (start[0] == "{" && start.generated) {
            close(token, i);
            return 1;
          }
          ;
          return 1;
        }
        ;
        if (ctx[0] == "TERNARY" && (type === TERMINATOR || type === OUTDENT)) {
          stack.pop();
          return 1;
        }
        ;
        if (noBraceContext.indexOf(ctx[0]) >= 0 && type === INDENT) {
          stack.pop();
          return 1;
        }
        ;
        if (type == ",") {
          if (ctx[0] == "{" && ctx.generated) {
            close(token, i, stack.pop());
            return 2;
          } else {
            return 1;
          }
          ;
          true;
        }
        ;
        let isDefInObject = type == defType && idx$(indents[0], ["CLASS", "DEF", "MODULE", "TAG", "STRUCT"]) == -1;
        if ((type == ":" || isDefInObject) && ctx[0] != "{" && ctx[0] != "TERNARY" && (noBraceContext.indexOf(ctx[0]) == -1 || ctx[0] == defType)) {
          var tprev = tokens[i - 2];
          let autoClose = false;
          if (type == defType) {
            idx = i - 1;
            tprev = tokens[idx];
          } else if (start && start[2] == i - 1) {
            idx = start[1] - 1;
          } else {
            idx = i - 2;
          }
          ;
          while (self.tokenType(idx - 1) === "HERECOMMENT") {
            idx -= 2;
          }
          ;
          var t0 = tokens[idx - 1];
          var t1 = tokens[idx];
          if (!tprev || idx$(tprev._type, ["INDENT", "TERMINATOR"]) == -1) {
            autoClose = true;
          }
          ;
          if (indents[0] && idx$(indents[0], ["CLASS", "DEF", "MODULE", "TAG", "STRUCT"]) >= 0) {
            autoClose = true;
          }
          ;
          if (t0 && T.typ(t0) == "}" && t0.generated && (t1._type == "," && !t1.generated || !(t0.scope && t0.scope.autoClose))) {
            tokens.splice(idx - 1, 1);
            var s = stackToken("{", i - 1);
            s.generated = true;
            stack.push(s);
            if (type == defType) {
              stack.push(stackToken(defType, i));
              return 1;
            }
            ;
            return 0;
          } else if (t0 && T.typ(t0) == "," && self.tokenType(idx - 2) == "}") {
            tokens.splice(idx - 2, 1);
            s = stackToken("{");
            s.generated = true;
            stack.push(s);
            if (type == defType) {
              stack.push(stackToken(defType, i));
              return 1;
            }
            ;
            return 0;
          } else {
            if (type == defType && (!t0 || t0._type != "=")) {
              stack.push(stackToken(defType, i));
              return 1;
            }
            ;
            s = stackToken("{");
            s.generated = true;
            s.autoClose = autoClose;
            stack.push(s);
            open(token, idx + 1);
            if (type == defType) {
              stack.push(stackToken(defType, i));
              return 3;
            }
            ;
            return 2;
          }
          ;
        }
        ;
        if (type == "DO") {
          var prev = T.typ(tokens[i - 1]);
          if (["NUMBER", "STRING", "REGEX", "SYMBOL", "]", "}", ")", "STRING_END"].indexOf(prev) >= 0) {
            var tok = T.token(",", ",");
            tok.generated = true;
            tokens.splice(i, 0, tok);
            if (ctx.generated) {
              close(token, i);
              stack.pop();
              return 2;
            }
            ;
          }
          ;
        }
        ;
        if (ctx.generated && (type === TERMINATOR || type === OUTDENT || type === "DEF_BODY")) {
          prevStack = stack.pop();
          close(token, i, prevStack);
          return 2;
        }
        ;
        return 1;
      });
    };
    Rewriter.prototype.generateToken = function(typ, val) {
      let tok = T.token(typ, val);
      tok.generated = true;
      return tok;
    };
    Rewriter.prototype.addImplicitParentheses = function() {
      var self = this;
      var tokens = self._tokens;
      var noCall = false;
      var seenFor = false;
      var seenTagClose = false;
      var endCallAtTerminator = false;
      var seenSingle = false;
      var seenControl = false;
      var callObject = false;
      var callIndent = false;
      var i = 0;
      let stack = [];
      let currPair = null;
      var parensAction = function(token2, i2, tokens2) {
        return tokens2.splice(i2, 0, self.generateToken("CALL_END", ")"));
      };
      var parensCond = function(token2, i2, tokens2) {
        var type2 = token2._type;
        if (!seenSingle && token2.fromThen) {
          return true;
        }
        ;
        var ifelse = type2 == "IF" || type2 == "UNLESS" || type2 == "ELSE";
        if (ifelse || type2 === "CATCH") {
          seenSingle = true;
        }
        ;
        if (ifelse || type2 === "SWITCH" || type2 == "TRY") {
          seenControl = true;
        }
        ;
        var prev2 = self.tokenType(i2 - 1);
        if ((type2 == "." || type2 == "?." || type2 == "::") && prev2 === OUTDENT) {
          return true;
        }
        ;
        if (type2 == ":" && stack[stack.length - 1] == "?" && tokens2[i2 - 1].spaced) {
          return true;
        }
        ;
        if (endCallAtTerminator && (type2 === INDENT || type2 === TERMINATOR)) {
          return true;
        }
        ;
        if ((type2 == "WHEN" || type2 == "BY") && !seenFor) {
          return false;
        }
        ;
        var post = tokens2.length > i2 + 1 ? tokens2[i2 + 1] : null;
        var postTyp = post && post._type;
        if (token2.generated || prev2 === ",") {
          return false;
        }
        ;
        var cond1 = IMPLICIT_END_MAP[type2] || type2 == INDENT && !seenControl || type2 == "DOS" && prev2 != "=";
        if (!cond1) {
          return false;
        }
        ;
        if (type2 !== INDENT) {
          return true;
        }
        ;
        if (!IMPLICIT_BLOCK_MAP[prev2] && self.tokenType(i2 - 2) != "CLASS" && !(post && (post.generated && postTyp == "{" || IMPLICIT_CALL_MAP[postTyp]))) {
          return true;
        }
        ;
        return false;
      };
      while (tokens.length > i + 1) {
        var token = tokens[i];
        var type = token._type;
        if (type == "?") {
          stack.push(type);
        }
        ;
        if ((type == "STYLE_START" || type == "CSS_SEL") && token._closer) {
          i = tokens.indexOf(token._closer) + 1;
          continue;
        }
        ;
        if (BALANCED_PAIRS[type]) {
          stack.push(currPair = type);
        } else if (INVERSES[type] && INVERSES[type] == currPair) {
          stack.pop();
          currPair = stack[stack.length - 1];
        }
        ;
        if (NO_IMPLICIT_PARENS.indexOf(currPair) >= 0) {
          i++;
          continue;
        }
        ;
        if (type == ":" && tokens[i - 1].spaced && stack[stack.length - 1] == "?") {
          stack.pop();
        }
        ;
        var prev = i > 0 ? tokens[i - 1] : null;
        var next = tokens[i + 1];
        var pt = prev && prev._type;
        var nt = next && next._type;
        if (type === INDENT && (pt == ")" || pt == "]")) {
          noCall = true;
        }
        ;
        if (pt == INDENT) {
          seenTagClose = false;
        }
        ;
        if (pt == "TAG_END") {
          seenTagClose = prev;
        }
        ;
        if (NO_CALL_TAG_MAP[pt]) {
          endCallAtTerminator = true;
          noCall = true;
          if (pt == "FOR") {
            seenFor = true;
          }
          ;
        }
        ;
        callObject = false;
        callIndent = false;
        if (!noCall && type == INDENT && next) {
          var prevImpFunc = pt && IMPLICIT_FUNC_MAP[pt];
          var nextImpCall = nt && IMPLICIT_CALL_MAP[nt];
          callObject = (next.generated && nt == "{" || nextImpCall) && prevImpFunc;
          callIndent = nextImpCall && prevImpFunc;
          if (nt == "TAG_START" && pt != "TAG_END" && nextImpCall) {
            callIndent = false;
          }
          ;
        }
        ;
        seenSingle = false;
        seenControl = false;
        if (type == TERMINATOR || type == OUTDENT || type == INDENT) {
          endCallAtTerminator = false;
          noCall = false;
        }
        ;
        if (type == TERMINATOR) {
          seenTagClose = false;
        }
        ;
        if (type == "?" && prev && !prev.spaced) {
          token.call = true;
        }
        ;
        if (token.fromThen) {
          i += 1;
          continue;
        }
        ;
        if (!(callObject || callIndent || prev && prev.spaced && (prev.call || IMPLICIT_FUNC_MAP[pt]) && (IMPLICIT_CALL_MAP[type] || !(token.spaced || token.newLine) && IMPLICIT_UNSPACED_CALL.indexOf(type) >= 0))) {
          i += 1;
          continue;
        }
        ;
        if (type === INDENT && nt == "TAG_START" && IMPLICIT_FUNC_MAP[pt] && pt != "TAG_END") {
          i += 1;
          continue;
        }
        ;
        if (seenTagClose && nt !== "TAG_START" && pt !== "TAG_END") {
          if (type === INDENT) {
            i += 1;
            continue;
          }
          ;
          endCallAtTerminator = true;
        }
        ;
        tokens.splice(i, 0, self.generateToken("CALL_START", "("));
        self.detectEnd(i + 1, parensCond, parensAction);
        if (prev._type == "?") {
          prev._type = "FUNC_EXIST";
        }
        ;
        i += 2;
        endCallAtTerminator = false;
        noCall = false;
        seenFor = false;
      }
      ;
      return;
    };
    Rewriter.prototype.indentCondition = function(token, i, tokens) {
      var t = token._type;
      return SINGLE_CLOSERS_MAP[t] && token._value !== ";" && !(t == "ELSE" && this._starter != "IF" && this._starter != "THEN");
    };
    Rewriter.prototype.indentAction = function(token, i, tokens) {
      var idx = this.tokenType(i - 1) === "," ? i - 1 : i;
      tokens.splice(idx, 0, T.OUTDENT);
      return;
    };
    Rewriter.prototype.addImplicitIndentation = function() {
      var lookup1 = {
        OUTDENT: 1,
        TERMINATOR: 1,
        FINALLY: 1
      };
      var i = 0;
      var tokens = this._tokens;
      var starter;
      while (i < tokens.length) {
        var token = tokens[i];
        var type = token._type;
        var next = this.tokenType(i + 1);
        if (type === TERMINATOR && next === THEN) {
          tokens.splice(i, 1);
          continue;
        }
        ;
        if ((type === CATCH || type === "CATCH_VAR") && lookup1[this.tokenType(i + 1)]) {
          tokens.splice(i + 1, 0, T.token(INDENT, "2"), T.token(OUTDENT, "2"));
          i += 3;
          continue;
        }
        ;
        if (SINGLE_LINERS[type] && (next != INDENT && next != "BLOCK_PARAM_START") && !(type == "ELSE" && next == "IF") && type != "ELIF") {
          this._starter = starter = type;
          var indent = T.token(INDENT, "2");
          if (starter === THEN) {
            indent.fromThen = true;
          }
          ;
          indent.generated = true;
          tokens.splice(i + 1, 0, indent);
          this.detectEnd(i + 2, this.indentCondition, this.indentAction);
          if (type === THEN) {
            tokens.splice(i, 1);
          }
          ;
        }
        ;
        i++;
      }
      ;
      return;
    };
    Rewriter.prototype.tagPostfixConditionals = function() {
      var self = this;
      var condition = function(token, i, tokens) {
        return token._type === TERMINATOR || token._type === INDENT;
      };
      var action = function(token, i, tokens, s) {
        if (token._type != INDENT) {
          if (s.unfinished) {
            let tok = T.token("EMPTY_BLOCK", "");
            return tokens.splice(i, 0, tok);
          } else {
            return T.setTyp(s.original, "POST_" + s.original._type);
          }
          ;
        }
        ;
      };
      return self.scanTokens(function(token, i, tokens) {
        var typ = token._type;
        if (!(typ == "IF" || typ == "FOR")) {
          return 1;
        }
        ;
        let unfinished = tokens[i - 1] && condition(tokens[i - 1]);
        self.detectEnd(i + 1, condition, action, { original: token, unfinished });
        return 1;
      });
    };
    Rewriter.prototype.type = function(i) {
      throw "deprecated";
      var tok = this._tokens[i];
      return tok && tok._type;
    };
    Rewriter.prototype.injectToken = function(index, token) {
      return this;
    };
    Rewriter.prototype.tokenType = function(i) {
      if (i < 0 || i >= this._tokens.length) {
        return null;
      }
      ;
      var tok = this._tokens[i];
      return tok && tok._type;
    };
  }
});
var require_parser = __commonJS({
  "build/parser.js"(exports) {
    var parser3 = function() {
      var o = function(k, v, o2, l) {
        for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v)
          ;
        return o2;
      }, $V0 = [1, 4], $V1 = [1, 6], $V2 = [1, 7], $V3 = [1, 39], $V4 = [1, 40], $V5 = [1, 41], $V6 = [1, 42], $V7 = [1, 80], $V8 = [1, 45], $V9 = [1, 126], $Va = [1, 44], $Vb = [1, 128], $Vc = [1, 106], $Vd = [1, 134], $Ve = [1, 135], $Vf = [1, 104], $Vg = [1, 125], $Vh = [1, 132], $Vi = [1, 138], $Vj = [1, 127], $Vk = [1, 139], $Vl = [1, 94], $Vm = [1, 95], $Vn = [1, 96], $Vo = [1, 97], $Vp = [1, 98], $Vq = [1, 99], $Vr = [1, 100], $Vs = [1, 87], $Vt = [1, 105], $Vu = [1, 83], $Vv = [1, 46], $Vw = [1, 17], $Vx = [1, 18], $Vy = [1, 69], $Vz = [1, 68], $VA = [1, 101], $VB = [1, 65], $VC = [1, 124], $VD = [1, 102], $VE = [1, 35], $VF = [1, 36], $VG = [1, 110], $VH = [1, 109], $VI = [1, 108], $VJ = [1, 131], $VK = [1, 84], $VL = [1, 85], $VM = [1, 86], $VN = [1, 111], $VO = [1, 92], $VP = [1, 47], $VQ = [1, 53], $VR = [1, 60], $VS = [1, 123], $VT = [1, 103], $VU = [1, 133], $VV = [1, 75], $VW = [1, 88], $VX = [1, 118], $VY = [1, 119], $VZ = [1, 120], $V_ = [1, 136], $V$ = [1, 137], $V01 = [1, 79], $V11 = [1, 117], $V21 = [1, 64], $V31 = [1, 66], $V41 = [1, 67], $V51 = [1, 70], $V61 = [1, 71], $V71 = [1, 141], $V81 = [1, 6, 14], $V91 = [1, 6, 12, 13, 14, 27, 28, 38, 42, 60, 88, 98, 107, 140, 145, 146, 147, 159, 167, 179, 189, 193, 195, 205, 212, 215, 223, 224, 245, 247, 248, 257, 266, 283, 287, 294, 295, 299, 300, 301, 305, 307, 308, 316, 320, 323, 324, 325, 331, 332, 333], $Va1 = [1, 149], $Vb1 = [1, 146], $Vc1 = [1, 147], $Vd1 = [1, 151], $Ve1 = [1, 152], $Vf1 = [1, 154], $Vg1 = [1, 155], $Vh1 = [1, 156], $Vi1 = [1, 148], $Vj1 = [1, 150], $Vk1 = [1, 153], $Vl1 = [1, 159], $Vm1 = [1, 160], $Vn1 = [1, 168], $Vo1 = [1, 169], $Vp1 = [1, 6, 12, 13, 14, 28, 38, 42, 60, 88, 107, 140, 145, 146, 147, 159, 167, 179, 189, 193, 195, 205, 215, 223, 224, 247, 266, 287, 299, 300, 301, 307, 308, 316, 324, 325, 331, 332, 333], $Vq1 = [2, 442], $Vr1 = [1, 180], $Vs1 = [1, 177], $Vt1 = [1, 178], $Vu1 = [1, 173], $Vv1 = [1, 179], $Vw1 = [1, 185], $Vx1 = [1, 6, 13, 14, 27, 28, 38, 60, 86, 89, 122, 142, 158, 159, 169, 170, 171, 172, 173, 174, 176, 177, 178, 182, 205, 206, 207, 247], $Vy1 = [1, 6, 14, 299, 301, 307, 308, 324], $Vz1 = [1, 6, 14, 83, 85, 86, 88, 216, 217, 268, 278, 279], $VA1 = [1, 188], $VB1 = [1, 194], $VC1 = [1, 196], $VD1 = [1, 213], $VE1 = [1, 212], $VF1 = [1, 6, 12, 13, 14, 27, 28, 38, 42, 60, 88, 98, 107, 140, 145, 146, 147, 159, 167, 179, 189, 193, 195, 205, 212, 215, 223, 224, 245, 247, 248, 257, 266, 283, 287, 299, 300, 301, 307, 308, 316, 324, 325, 331, 332, 333], $VG1 = [2, 351], $VH1 = [1, 216], $VI1 = [1, 6, 12, 13, 14, 27, 28, 38, 42, 60, 88, 98, 107, 140, 142, 145, 146, 147, 159, 167, 179, 189, 193, 195, 205, 212, 215, 223, 224, 245, 247, 248, 257, 266, 283, 287, 299, 300, 301, 307, 308, 316, 324, 325, 331, 332, 333], $VJ1 = [2, 345], $VK1 = [6, 27, 86, 89, 122, 142, 158, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 182, 206, 207], $VL1 = [1, 253], $VM1 = [1, 252], $VN1 = [36, 83, 204], $VO1 = [1, 256], $VP1 = [1, 6, 14, 83, 85, 86, 88, 98, 216, 217, 268, 278, 279], $VQ1 = [1, 262], $VR1 = [1, 267], $VS1 = [1, 268], $VT1 = [1, 264], $VU1 = [1, 272], $VV1 = [1, 270], $VW1 = [1, 275], $VX1 = [1, 6, 12, 13, 14, 27, 28, 36, 38, 42, 60, 88, 98, 107, 118, 119, 140, 145, 146, 147, 159, 167, 179, 189, 193, 195, 205, 212, 215, 223, 224, 245, 247, 248, 257, 266, 283, 287, 299, 300, 301, 307, 308, 316, 324, 325, 331, 332, 333], $VY1 = [1, 6, 11, 12, 13, 14, 27, 28, 38, 42, 57, 60, 88, 98, 103, 107, 140, 142, 145, 146, 147, 159, 167, 179, 189, 193, 195, 205, 212, 215, 223, 224, 245, 247, 248, 257, 266, 276, 283, 287, 299, 300, 301, 307, 308, 316, 324, 325, 329, 330, 331, 332, 333], $VZ1 = [1, 305], $V_1 = [1, 306], $V$1 = [1, 308], $V02 = [2, 367], $V12 = [1, 322], $V22 = [1, 317], $V32 = [1, 311], $V42 = [1, 316], $V52 = [1, 324], $V62 = [1, 326], $V72 = [1, 334], $V82 = [1, 6, 11, 12, 13, 14, 27, 28, 36, 38, 42, 57, 60, 83, 86, 88, 98, 103, 107, 140, 142, 145, 146, 147, 159, 167, 179, 189, 193, 195, 204, 205, 212, 215, 223, 224, 234, 245, 247, 248, 257, 266, 276, 283, 287, 299, 300, 301, 307, 308, 316, 324, 325, 329, 330, 331, 332, 333], $V92 = [36, 83, 204, 252, 312], $Va2 = [1, 6, 12, 13, 14, 27, 28, 38, 42, 60, 88, 98, 104, 105, 106, 107, 140, 145, 146, 147, 159, 167, 179, 189, 193, 195, 205, 212, 215, 223, 224, 245, 247, 248, 257, 266, 283, 287, 299, 300, 301, 307, 308, 316, 324, 325, 331, 332, 333], $Vb2 = [2, 8], $Vc2 = [83, 85, 86], $Vd2 = [1, 6, 14, 142], $Ve2 = [1, 371], $Vf2 = [1, 375], $Vg2 = [1, 376], $Vh2 = [1, 385], $Vi2 = [1, 387], $Vj2 = [1, 389], $Vk2 = [1, 6, 12, 13, 14, 28, 38, 42, 60, 88, 107, 140, 145, 146, 147, 159, 167, 179, 189, 193, 195, 205, 215, 223, 224, 247, 266, 287, 299, 300, 301, 307, 308, 316, 324, 325, 331, 332], $Vl2 = [1, 6, 11, 12, 13, 14, 27, 28, 38, 42, 60, 88, 98, 107, 140, 145, 146, 147, 159, 167, 179, 189, 193, 195, 205, 212, 215, 223, 224, 245, 247, 248, 257, 266, 283, 287, 299, 300, 301, 307, 308, 316, 324, 325, 331, 332, 333], $Vm2 = [1, 6, 12, 13, 14, 28, 38, 42, 60, 88, 107, 140, 146, 147, 159, 167, 179, 189, 193, 195, 205, 215, 223, 224, 247, 266, 287, 299, 300, 301, 307, 308, 316, 324, 325, 332], $Vn2 = [6, 14, 27, 42, 88, 98, 179, 212, 245, 248, 257, 283], $Vo2 = [1, 401], $Vp2 = [1, 406], $Vq2 = [6, 27, 86, 89, 122, 142, 158, 169, 170, 171, 172, 173, 174, 176, 177, 178, 182, 206, 207], $Vr2 = [1, 428], $Vs2 = [1, 427], $Vt2 = [6, 27, 36, 86, 89, 122, 142, 158, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 180, 182, 206, 207], $Vu2 = [1, 6, 11, 12, 13, 14, 27, 28, 38, 42, 60, 88, 98, 107, 140, 142, 145, 146, 147, 159, 167, 179, 189, 193, 195, 205, 212, 215, 223, 224, 245, 247, 248, 257, 266, 283, 287, 299, 300, 301, 307, 308, 314, 315, 316, 324, 325, 331, 332, 333], $Vv2 = [6, 13], $Vw2 = [2, 295], $Vx2 = [1, 433], $Vy2 = [6, 13, 14, 60, 159], $Vz2 = [2, 462], $VA2 = [1, 440], $VB2 = [6, 13, 14, 28, 60, 159, 205, 247], $VC2 = [2, 299], $VD2 = [1, 451], $VE2 = [1, 452], $VF2 = [1, 6, 12, 13, 14, 28, 38, 42, 60, 88, 107, 140, 159, 179, 189, 193, 205, 215, 223, 224, 247, 287, 308, 316, 324], $VG2 = [1, 6, 12, 13, 14, 28, 38, 42, 60, 88, 107, 140, 159, 179, 189, 193, 205, 215, 223, 224, 247, 287, 300, 308, 316, 324], $VH2 = [314, 315], $VI2 = [60, 314, 315], $VJ2 = [1, 6, 12, 14, 28, 38, 42, 60, 88, 107, 140, 145, 146, 147, 159, 179, 189, 193, 195, 205, 215, 223, 224, 247, 266, 287, 299, 300, 301, 307, 308, 316, 324, 325, 331, 332, 333], $VK2 = [1, 465], $VL2 = [1, 6, 12, 13, 14, 28, 38, 42, 60, 88, 98, 107, 140, 145, 146, 147, 159, 167, 179, 189, 193, 195, 205, 215, 223, 224, 247, 266, 287, 299, 300, 301, 307, 308, 316, 324, 325, 331, 332, 333], $VM2 = [1, 477], $VN2 = [1, 474], $VO2 = [1, 478], $VP2 = [1, 483], $VQ2 = [1, 484], $VR2 = [1, 490], $VS2 = [6, 13, 14, 38, 60], $VT2 = [6, 13, 14, 38, 60, 140], $VU2 = [6, 13, 14, 38, 60, 140, 142], $VV2 = [60, 223, 224], $VW2 = [1, 503], $VX2 = [2, 292], $VY2 = [86, 98], $VZ2 = [11, 27, 36, 60, 83, 86, 98, 193, 204, 223, 224, 234], $V_2 = [1, 6, 12, 13, 14, 28, 38, 42, 60, 88, 107, 140, 145, 146, 147, 159, 167, 179, 189, 193, 195, 205, 215, 223, 224, 247, 266, 287, 299, 300, 301, 307, 308, 316, 324, 325, 332], $V$2 = [1, 6, 12, 13, 14, 28, 38, 42, 60, 88, 107, 140, 159, 179, 189, 193, 205, 215, 223, 224, 247, 287, 300, 316], $V03 = [1, 6, 12, 13, 14, 28, 38, 42, 60, 88, 107, 140, 159, 179, 189, 193, 205, 215, 223, 224, 247, 287, 299, 300, 301, 307, 308, 316, 324], $V13 = [1, 521], $V23 = [6, 14, 132, 143, 175], $V33 = [1, 6, 12, 13, 14, 28, 38, 42, 60, 88, 107, 140, 145, 146, 147, 159, 167, 179, 189, 193, 195, 205, 215, 223, 224, 247, 266, 287, 299, 300, 301, 305, 307, 308, 316, 323, 324, 325, 331, 332, 333], $V43 = [14, 305, 320], $V53 = [1, 6, 12, 14, 28, 38, 42, 60, 88, 107, 140, 145, 146, 147, 159, 167, 179, 189, 193, 195, 205, 215, 223, 224, 247, 266, 287, 299, 300, 301, 307, 308, 316, 324, 325, 331, 332, 333], $V63 = [1, 6, 12, 13, 14, 27, 28, 38, 42, 60, 83, 85, 86, 88, 98, 107, 140, 142, 145, 146, 147, 159, 167, 179, 189, 193, 195, 205, 212, 215, 216, 217, 223, 224, 245, 247, 248, 257, 266, 268, 278, 279, 283, 287, 299, 300, 301, 307, 308, 316, 324, 325, 331, 332, 333], $V73 = [6, 13, 14], $V83 = [2, 296], $V93 = [1, 580], $Va3 = [25, 26, 29, 30, 32, 36, 57, 65, 83, 85, 86, 93, 95, 100, 103, 108, 109, 110, 111, 112, 113, 114, 115, 117, 120, 133, 134, 146, 147, 158, 181, 197, 204, 211, 212, 216, 217, 237, 238, 239, 242, 250, 252, 254, 256, 261, 284, 285, 291, 297, 299, 301, 303, 307, 308, 317, 322, 326, 327, 328, 329, 330], $Vb3 = [1, 585], $Vc3 = [1, 586], $Vd3 = [1, 6, 11, 12, 13, 14, 27, 28, 36, 38, 42, 57, 60, 83, 86, 88, 98, 103, 104, 105, 106, 107, 140, 142, 145, 146, 147, 159, 167, 179, 189, 193, 195, 204, 205, 212, 215, 223, 224, 234, 245, 247, 248, 257, 266, 276, 283, 287, 299, 300, 301, 307, 308, 316, 324, 325, 329, 330, 331, 332, 333], $Ve3 = [1, 591], $Vf3 = [28, 60, 215, 223, 224], $Vg3 = [28, 60, 142, 215, 223, 224], $Vh3 = [1, 6, 12, 13, 14, 28, 38, 42, 60, 88, 107, 140, 159, 179, 189, 193, 205, 215, 223, 224, 247, 287, 299, 301, 307, 308, 316, 324], $Vi3 = [6, 14], $Vj3 = [1, 618], $Vk3 = [1, 621], $Vl3 = [1, 622], $Vm3 = [6, 14, 42, 88, 179], $Vn3 = [6, 11, 14, 27, 42, 88, 142, 179, 276], $Vo3 = [1, 633], $Vp3 = [83, 85, 86, 88, 204], $Vq3 = [1, 643], $Vr3 = [1, 644], $Vs3 = [223, 224], $Vt3 = [1, 650], $Vu3 = [1, 659], $Vv3 = [1, 660], $Vw3 = [1, 688], $Vx3 = [1, 680], $Vy3 = [1, 687], $Vz3 = [1, 676], $VA3 = [1, 677], $VB3 = [1, 678], $VC3 = [1, 679], $VD3 = [1, 683], $VE3 = [1, 684], $VF3 = [1, 685], $VG3 = [1, 686], $VH3 = [1, 6, 12, 13, 14, 28, 38, 42, 60, 88, 107, 140, 145, 146, 147, 159, 167, 179, 189, 193, 195, 205, 215, 223, 224, 247, 266, 287, 294, 299, 300, 301, 307, 308, 316, 324, 325, 331, 332, 333], $VI3 = [12, 13, 60], $VJ3 = [1, 702], $VK3 = [1, 704], $VL3 = [1, 706], $VM3 = [6, 14, 27, 42, 88, 98, 142, 179, 212, 245], $VN3 = [1, 766], $VO3 = [1, 6, 12, 13, 14, 28, 38, 42, 60, 88, 107, 132, 140, 143, 145, 146, 147, 159, 167, 175, 179, 189, 193, 195, 205, 215, 223, 224, 247, 266, 287, 299, 300, 301, 307, 308, 316, 324, 325, 331, 332, 333], $VP3 = [1, 779], $VQ3 = [6, 14, 60, 132, 143, 175], $VR3 = [1, 783], $VS3 = [1, 784], $VT3 = [1, 785], $VU3 = [1, 782], $VV3 = [6, 14, 36, 57, 60, 100, 132, 143, 145, 146, 147, 150, 158, 160, 161, 162, 163, 164, 165, 166, 167, 175], $VW3 = [6, 14, 36, 57, 60, 100, 132, 143, 145, 146, 147, 150, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 175], $VX3 = [1, 799], $VY3 = [6, 13, 14, 28, 60], $VZ3 = [6, 14, 36, 57, 60, 100, 132, 143, 145, 146, 147, 150, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 175], $V_3 = [1, 837], $V$3 = [1, 838], $V04 = [60, 159], $V14 = [1, 855], $V24 = [36, 57, 60, 100, 145, 146, 147, 150, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], $V34 = [145, 146, 147, 159];
      var parser4 = {
        trace: function trace() {
        },
        yy: {},
        symbols_: { "error": 2, "Root": 3, "Body": 4, "Block": 5, "TERMINATOR": 6, "BODYSTART": 7, "Line": 8, "Terminator": 9, "Type": 10, "TYPE": 11, "EMPTY_BLOCK": 12, "INDENT": 13, "OUTDENT": 14, "CSSDeclaration": 15, "Expression": 16, "VarDecl": 17, "Comment": 18, "Statement": 19, "Decorators": 20, "ImportDeclaration": 21, "ExportDeclaration": 22, "Return": 23, "Throw": 24, "STATEMENT": 25, "BREAK": 26, "CALL_START": 27, "CALL_END": 28, "CONTINUE": 29, "DEBUGGER": 30, "ExtendObject": 31, "EXTEND": 32, "Identifier": 33, "ClassBody": 34, "EXPORT": 35, "{": 36, "ImportSpecifierList": 37, "}": 38, "FROM": 39, "String": 40, "EXPORT_ALL": 41, "AS": 42, "Exportable": 43, "DEFAULT": 44, "DefaultExportable": 45, "MethodDeclaration": 46, "Class": 47, "TagDeclaration": 48, "VarAssign": 49, "ImportOrExport": 50, "IMPORT": 51, "ImportDefaultSpecifier": 52, "TYPEIMPORT": 53, "ImportNamespaceSpecifier": 54, "IMPORT_COMMA": 55, "ImportFrom": 56, "STRING": 57, "IMPORT_ALL": 58, "ImportSpecifier": 59, ",": 60, "OptComma": 61, "DecoratorIdentifier": 62, "MixinIdentifier": 63, "Require": 64, "REQUIRE": 65, "RequireArg": 66, "Literal": 67, "Parenthetical": 68, "Await": 69, "Value": 70, "Code": 71, "Operation": 72, "Assign": 73, "If": 74, "Ternary": 75, "Try": 76, "While": 77, "For": 78, "Switch": 79, "Tag": 80, "ExpressionBlock": 81, "Outdent": 82, "IDENTIFIER": 83, "SymbolIdentifier": 84, "SYMBOLID": 85, "#": 86, "Interpolation": 87, "DECORATOR": 88, "MIXIN": 89, "Key": 90, "KEY": 91, "Argvar": 92, "ARGVAR": 93, "Symbol": 94, "SYMBOL": 95, "Decorator": 96, "Arguments": 97, ".": 98, "AlphaNumeric": 99, "NUMBER": 100, "UNIT": 101, "InterpolatedString": 102, "STRING_START": 103, "NEOSTRING": 104, "STRING_END": 105, "{{": 106, "}}": 107, "JS": 108, "REGEX": 109, "BOOL": 110, "TRUE": 111, "FALSE": 112, "NULL": 113, "UNDEFINED": 114, "RETURN": 115, "Selector": 116, "SELECTOR_START": 117, "SELECTOR_PART": 118, "SELECTOR_END": 119, "TAG_START": 120, "TagOptions": 121, "TAG_END": 122, "TagBody": 123, "TagTypeName": 124, "Self": 125, "TAG_TYPE": 126, "TagIdentifier": 127, "StyleBlockDeclaration": 128, "CSS": 129, "CSS_SEL": 130, "StyleBody": 131, "CSS_END": 132, "GLOBAL": 133, "LOCAL": 134, "StyleBlockBody": 135, "OptStyleBody": 136, "StyleNode": 137, "StyleDeclaration": 138, "StyleProperty": 139, ":": 140, "StyleExpressions": 141, "=": 142, "CSSPROP": 143, "StyleOperator": 144, "MATH": 145, "+": 146, "-": 147, "StyleExpression": 148, "StyleTerm": 149, "/": 150, "StyleValue": 151, "StyleOperation": 152, "StyleFunctionArgs": 153, "StyleFunctionArg": 154, "StyleTermPlaceholder": 155, "CSSUNIT": 156, "StyleParens": 157, "(": 158, ")": 159, "CSSVAR": 160, "DIMENSION": 161, "COLOR": 162, "PERCENTAGE": 163, "CSSURL": 164, "CSSFUNCTION": 165, "CSSIDENTIFIER": 166, "COMPARE": 167, "TAG_REF": 168, "TAG_ID": 169, "TAG_SYMBOL_ID": 170, "SYMBOL_ID": 171, "TAG_FLAG": 172, "TAG_ATTR": 173, "STYLE_START": 174, "STYLE_END": 175, "T.": 176, "T:": 177, "T@": 178, "@": 179, "TAG_LITERAL": 180, "UNARY": 181, "TAG_WS": 182, "ArgList": 183, "TagAttrValue": 184, "TagFlag": 185, "%": 186, "TagPartIdentifier": 187, "VALUE_START": 188, "VALUE_END": 189, "TagBodyList": 190, "TagBodyItem": 191, "SEPARATOR": 192, "...": 193, "Splat": 194, "LOGIC": 195, "TagDeclarationBlock": 196, "TAG": 197, "TagType": 198, "TagId": 199, "Assignable": 200, "AssignObj": 201, "ObjAssignable": 202, "SimpleObjAssignable": 203, "[": 204, "]": 205, "HERECOMMENT": 206, "COMMENT": 207, "Method": 208, "Do": 209, "Begin": 210, "BEGIN": 211, "DO": 212, "BLOCK_PARAM_START": 213, "ParamList": 214, "BLOCK_PARAM_END": 215, "STATIC": 216, "DEF": 217, "MethodScope": 218, "MethodScopeType": 219, "MethodIdentifier": 220, "MethodParams": 221, "MethodBody": 222, "DEF_BODY": 223, "DEF_EMPTY": 224, "This": 225, "OptSemicolon": 226, ";": 227, "Param": 228, "ParamExpression": 229, "ParamValue": 230, "Object": 231, "Array": 232, "ParamVar": 233, "BLOCK_ARG": 234, "SPLAT": 235, "VarKeyword": 236, "VAR": 237, "LET": 238, "CONST": 239, "VarAssignable": 240, "SimpleAssignable": 241, "ENV_FLAG": 242, "Access": 243, "SoakableOp": 244, "INDEX_START": 245, "IndexValue": 246, "INDEX_END": 247, "?.": 248, "Super": 249, "SUPER": 250, "TaggedTemplate": 251, "AWAIT": 252, "Range": 253, "ARGUMENTS": 254, "Invocation": 255, "AMPER_REF": 256, "BANG": 257, "AssignList": 258, "ExpressionList": 259, "ClassStart": 260, "CLASS": 261, "ClassName": 262, "ClassBodyBlock": 263, "ClassBodyLine": 264, "ClassDeclLine": 265, "RELATION": 266, "ClassFieldDeclaration": 267, "DECLARE": 268, "ClassField": 269, "ClassFieldOp": 270, "AccessorBody": 271, "FieldDescriptorFull": 272, "FieldDescriptor": 273, "ClassFieldDecoration": 274, "WatchBody": 275, "COMPOUND_ASSIGN": 276, "ClassFieldIdentifier": 277, "PROP": 278, "ATTR": 279, "ClassFieldBody": 280, "WATCH": 281, "OptFuncExist": 282, "FUNC_EXIST": 283, "THIS": 284, "SELF": 285, "RangeDots": 286, "..": 287, "Arg": 288, "DO_PLACEHOLDER": 289, "SimpleArgs": 290, "TRY": 291, "Catch": 292, "Finally": 293, "FINALLY": 294, "CATCH": 295, "CATCH_VAR": 296, "THROW": 297, "WhileSource": 298, "WHILE": 299, "WHEN": 300, "UNTIL": 301, "Loop": 302, "LOOP": 303, "ForBody": 304, "ELSE": 305, "ForKeyword": 306, "FOR": 307, "POST_FOR": 308, "ForStart": 309, "ForSource": 310, "ForVariables": 311, "OWN": 312, "ForValue": 313, "FORIN": 314, "FOROF": 315, "BY": 316, "SWITCH": 317, "Whens": 318, "When": 319, "LEADING_WHEN": 320, "IfBlock": 321, "IF": 322, "ELIF": 323, "POST_IF": 324, "?": 325, "NEW": 326, "---": 327, "+++": 328, "--": 329, "++": 330, "EXP": 331, "SHIFT": 332, "NOT": 333, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 6: "TERMINATOR", 7: "BODYSTART", 11: "TYPE", 12: "EMPTY_BLOCK", 13: "INDENT", 14: "OUTDENT", 25: "STATEMENT", 26: "BREAK", 27: "CALL_START", 28: "CALL_END", 29: "CONTINUE", 30: "DEBUGGER", 32: "EXTEND", 35: "EXPORT", 36: "{", 38: "}", 39: "FROM", 41: "EXPORT_ALL", 42: "AS", 44: "DEFAULT", 51: "IMPORT", 53: "TYPEIMPORT", 55: "IMPORT_COMMA", 57: "STRING", 58: "IMPORT_ALL", 60: ",", 65: "REQUIRE", 83: "IDENTIFIER", 85: "SYMBOLID", 86: "#", 88: "DECORATOR", 89: "MIXIN", 91: "KEY", 93: "ARGVAR", 95: "SYMBOL", 98: ".", 100: "NUMBER", 101: "UNIT", 103: "STRING_START", 104: "NEOSTRING", 105: "STRING_END", 106: "{{", 107: "}}", 108: "JS", 109: "REGEX", 110: "BOOL", 111: "TRUE", 112: "FALSE", 113: "NULL", 114: "UNDEFINED", 115: "RETURN", 117: "SELECTOR_START", 118: "SELECTOR_PART", 119: "SELECTOR_END", 120: "TAG_START", 122: "TAG_END", 126: "TAG_TYPE", 129: "CSS", 130: "CSS_SEL", 132: "CSS_END", 133: "GLOBAL", 134: "LOCAL", 140: ":", 142: "=", 143: "CSSPROP", 145: "MATH", 146: "+", 147: "-", 150: "/", 156: "CSSUNIT", 158: "(", 159: ")", 160: "CSSVAR", 161: "DIMENSION", 162: "COLOR", 163: "PERCENTAGE", 164: "CSSURL", 165: "CSSFUNCTION", 166: "CSSIDENTIFIER", 167: "COMPARE", 168: "TAG_REF", 169: "TAG_ID", 170: "TAG_SYMBOL_ID", 171: "SYMBOL_ID", 172: "TAG_FLAG", 173: "TAG_ATTR", 174: "STYLE_START", 175: "STYLE_END", 176: "T.", 177: "T:", 178: "T@", 179: "@", 180: "TAG_LITERAL", 181: "UNARY", 182: "TAG_WS", 186: "%", 187: "TagPartIdentifier", 188: "VALUE_START", 189: "VALUE_END", 192: "SEPARATOR", 193: "...", 195: "LOGIC", 197: "TAG", 204: "[", 205: "]", 206: "HERECOMMENT", 207: "COMMENT", 211: "BEGIN", 212: "DO", 213: "BLOCK_PARAM_START", 215: "BLOCK_PARAM_END", 216: "STATIC", 217: "DEF", 223: "DEF_BODY", 224: "DEF_EMPTY", 227: ";", 234: "BLOCK_ARG", 235: "SPLAT", 237: "VAR", 238: "LET", 239: "CONST", 242: "ENV_FLAG", 245: "INDEX_START", 247: "INDEX_END", 248: "?.", 250: "SUPER", 252: "AWAIT", 254: "ARGUMENTS", 256: "AMPER_REF", 257: "BANG", 261: "CLASS", 266: "RELATION", 268: "DECLARE", 276: "COMPOUND_ASSIGN", 278: "PROP", 279: "ATTR", 281: "WATCH", 283: "FUNC_EXIST", 284: "THIS", 285: "SELF", 287: "..", 289: "DO_PLACEHOLDER", 291: "TRY", 294: "FINALLY", 295: "CATCH", 296: "CATCH_VAR", 297: "THROW", 299: "WHILE", 300: "WHEN", 301: "UNTIL", 303: "LOOP", 305: "ELSE", 307: "FOR", 308: "POST_FOR", 312: "OWN", 314: "FORIN", 315: "FOROF", 316: "BY", 317: "SWITCH", 320: "LEADING_WHEN", 322: "IF", 323: "ELIF", 324: "POST_IF", 325: "?", 326: "NEW", 327: "---", 328: "+++", 329: "--", 330: "++", 331: "EXP", 332: "SHIFT", 333: "NOT" },
        productions_: [0, [3, 0], [3, 1], [3, 2], [4, 1], [4, 1], [4, 3], [4, 2], [9, 1], [10, 1], [5, 1], [5, 2], [5, 3], [5, 4], [8, 1], [8, 1], [8, 1], [8, 1], [8, 1], [8, 1], [8, 1], [8, 1], [19, 1], [19, 1], [19, 1], [19, 1], [19, 4], [19, 1], [19, 4], [19, 1], [31, 3], [22, 4], [22, 6], [22, 4], [22, 6], [22, 2], [22, 3], [43, 1], [43, 1], [43, 1], [43, 1], [43, 1], [45, 1], [50, 1], [50, 1], [52, 1], [21, 2], [21, 4], [21, 5], [21, 4], [21, 5], [21, 6], [21, 7], [21, 6], [21, 8], [56, 1], [54, 3], [37, 1], [37, 3], [37, 4], [37, 4], [37, 5], [37, 6], [59, 1], [59, 1], [59, 1], [59, 3], [59, 1], [59, 3], [64, 2], [66, 1], [66, 1], [66, 0], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [81, 1], [81, 3], [33, 1], [84, 1], [84, 2], [62, 1], [63, 1], [90, 1], [92, 1], [94, 1], [96, 1], [96, 2], [96, 3], [20, 1], [20, 2], [99, 2], [99, 1], [99, 1], [99, 1], [99, 1], [40, 1], [102, 1], [102, 2], [102, 2], [102, 2], [87, 2], [87, 3], [67, 1], [67, 1], [67, 1], [67, 1], [67, 1], [67, 1], [67, 1], [67, 1], [23, 2], [23, 2], [23, 1], [116, 1], [116, 2], [116, 4], [116, 2], [80, 3], [80, 4], [124, 1], [124, 1], [124, 1], [124, 1], [124, 0], [128, 4], [15, 1], [15, 2], [15, 2], [135, 3], [135, 3], [136, 0], [136, 1], [131, 1], [131, 2], [131, 3], [131, 3], [137, 1], [137, 3], [138, 3], [138, 3], [139, 1], [144, 1], [144, 1], [144, 1], [141, 1], [141, 3], [148, 1], [148, 2], [148, 2], [148, 3], [151, 1], [151, 1], [152, 3], [152, 3], [153, 1], [153, 3], [154, 1], [154, 2], [154, 2], [154, 3], [155, 3], [155, 2], [157, 3], [157, 2], [149, 1], [149, 1], [149, 1], [149, 1], [149, 1], [149, 1], [149, 1], [149, 1], [149, 1], [149, 4], [149, 1], [149, 2], [121, 2], [121, 1], [121, 2], [121, 2], [121, 2], [121, 2], [121, 2], [121, 3], [121, 4], [121, 5], [121, 2], [121, 3], [121, 3], [121, 4], [121, 4], [121, 3], [121, 3], [121, 3], [121, 3], [121, 4], [121, 3], [121, 4], [121, 2], [121, 2], [121, 2], [121, 3], [127, 1], [127, 3], [127, 2], [127, 4], [185, 1], [185, 2], [184, 3], [123, 2], [123, 3], [123, 3], [123, 1], [190, 1], [190, 3], [190, 4], [190, 6], [190, 4], [190, 6], [191, 1], [191, 2], [191, 1], [191, 1], [191, 1], [191, 1], [48, 1], [48, 2], [48, 2], [48, 2], [196, 2], [196, 3], [196, 4], [196, 5], [198, 1], [199, 2], [73, 1], [73, 3], [73, 5], [201, 2], [201, 1], [201, 1], [201, 3], [201, 5], [201, 3], [201, 5], [201, 1], [203, 1], [203, 2], [203, 1], [203, 1], [202, 1], [202, 3], [202, 3], [202, 1], [18, 1], [18, 1], [71, 1], [71, 1], [71, 1], [210, 2], [209, 2], [209, 5], [208, 1], [208, 2], [208, 2], [46, 6], [46, 4], [221, 1], [221, 3], [219, 1], [219, 1], [220, 1], [220, 1], [220, 1], [220, 3], [220, 2], [222, 2], [222, 3], [222, 1], [218, 1], [218, 1], [218, 1], [61, 0], [61, 1], [226, 0], [226, 1], [214, 0], [214, 1], [214, 3], [229, 1], [229, 1], [229, 1], [229, 1], [229, 1], [229, 1], [230, 1], [228, 1], [228, 1], [228, 1], [228, 2], [228, 2], [228, 3], [228, 3], [228, 3], [228, 1], [233, 1], [233, 2], [194, 2], [236, 1], [236, 1], [236, 1], [240, 1], [240, 2], [240, 1], [240, 1], [17, 2], [49, 3], [49, 5], [241, 1], [241, 1], [241, 1], [241, 1], [241, 1], [241, 1], [241, 2], [243, 3], [243, 3], [243, 4], [243, 5], [244, 1], [244, 1], [249, 1], [200, 1], [200, 1], [200, 1], [251, 2], [251, 2], [69, 2], [70, 1], [70, 1], [70, 1], [70, 1], [70, 1], [70, 1], [70, 1], [70, 1], [70, 1], [70, 1], [70, 1], [70, 1], [70, 1], [70, 2], [246, 1], [231, 4], [258, 0], [258, 1], [258, 3], [258, 4], [258, 6], [259, 1], [259, 3], [259, 4], [259, 4], [259, 6], [47, 1], [47, 2], [47, 2], [47, 2], [260, 3], [260, 2], [260, 2], [260, 4], [260, 5], [260, 4], [262, 1], [262, 1], [262, 1], [262, 3], [262, 3], [34, 2], [34, 3], [34, 4], [263, 1], [263, 3], [263, 2], [264, 1], [264, 1], [264, 2], [264, 1], [264, 2], [264, 1], [264, 1], [265, 2], [265, 3], [265, 2], [265, 2], [265, 2], [265, 3], [265, 1], [265, 1], [267, 3], [267, 1], [267, 3], [267, 2], [273, 1], [273, 4], [273, 2], [273, 4], [273, 3], [272, 1], [272, 3], [272, 2], [271, 1], [271, 1], [274, 3], [275, 1], [275, 1], [270, 1], [270, 1], [269, 1], [269, 2], [269, 2], [269, 2], [269, 3], [277, 1], [277, 1], [280, 3], [255, 3], [255, 2], [282, 0], [282, 1], [97, 2], [97, 4], [225, 1], [125, 1], [232, 2], [232, 4], [232, 2], [286, 1], [286, 1], [253, 5], [183, 1], [183, 3], [183, 4], [183, 6], [183, 4], [183, 6], [82, 2], [82, 1], [288, 1], [288, 2], [288, 1], [288, 1], [288, 1], [290, 1], [290, 3], [76, 2], [76, 3], [76, 3], [76, 4], [293, 2], [292, 3], [292, 2], [24, 2], [68, 3], [68, 4], [68, 2], [298, 2], [298, 4], [298, 2], [298, 4], [77, 2], [77, 2], [77, 2], [77, 1], [302, 2], [302, 2], [78, 2], [78, 2], [78, 2], [78, 4], [306, 1], [306, 1], [304, 2], [304, 2], [309, 2], [309, 3], [309, 3], [313, 1], [313, 2], [313, 1], [313, 1], [311, 1], [311, 3], [311, 5], [310, 2], [310, 2], [310, 4], [310, 4], [310, 4], [310, 6], [310, 6], [79, 5], [79, 7], [79, 4], [79, 6], [318, 1], [318, 2], [319, 3], [319, 4], [321, 3], [321, 5], [321, 4], [321, 3], [74, 1], [74, 3], [74, 3], [75, 5], [72, 2], [72, 2], [72, 2], [72, 2], [72, 2], [72, 2], [72, 2], [72, 2], [72, 2], [72, 2], [72, 3], [72, 3], [72, 3], [72, 3], [72, 3], [72, 3], [72, 3], [72, 4], [72, 3], [72, 3], [72, 5]],
        performAction: function performAction(self, yytext, yy, yystate, $$) {
          var $0 = $$.length - 1;
          switch (yystate) {
            case 1:
              return self.$ = new yy.Root([]);
              break;
            case 2:
              return self.$ = new yy.Root($$[$0]);
              break;
            case 3:
              return self.$ = $$[$0 - 1];
              break;
            case 4:
            case 10:
              self.$ = new yy.Block([]);
              break;
            case 5:
              self.$ = new yy.Block([]).add($$[$0]);
              break;
            case 6:
            case 396:
              self.$ = $$[$0 - 2].break($$[$0 - 1]).add($$[$0]);
              break;
            case 7:
            case 397:
              self.$ = $$[$0 - 1].break($$[$0]);
              break;
            case 8:
              self.$ = new yy.Terminator($$[$0]);
              break;
            case 9:
              self.$ = new yy.TypeAnnotation($$[$0]);
              break;
            case 11:
              self.$ = new yy.Block([]).indented($$[$0 - 1], $$[$0]);
              break;
            case 12:
            case 89:
            case 142:
            case 148:
            case 223:
            case 393:
              self.$ = $$[$0 - 1].indented($$[$0 - 2], $$[$0]);
              break;
            case 13:
            case 394:
              self.$ = $$[$0 - 1].prebreak($$[$0 - 2]).indented($$[$0 - 3], $$[$0]);
              break;
            case 14:
            case 15:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 55:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 106:
            case 107:
            case 115:
            case 132:
            case 144:
            case 149:
            case 154:
            case 155:
            case 156:
            case 163:
            case 164:
            case 177:
            case 183:
            case 184:
            case 232:
            case 234:
            case 235:
            case 236:
            case 238:
            case 248:
            case 258:
            case 259:
            case 261:
            case 262:
            case 263:
            case 266:
            case 269:
            case 270:
            case 271:
            case 275:
            case 280:
            case 284:
            case 285:
            case 289:
            case 290:
            case 292:
            case 293:
            case 294:
            case 295:
            case 296:
            case 297:
            case 298:
            case 302:
            case 303:
            case 304:
            case 305:
            case 306:
            case 307:
            case 308:
            case 311:
            case 321:
            case 322:
            case 323:
            case 324:
            case 326:
            case 327:
            case 332:
            case 333:
            case 336:
            case 345:
            case 346:
            case 347:
            case 351:
            case 352:
            case 353:
            case 354:
            case 355:
            case 357:
            case 358:
            case 359:
            case 360:
            case 361:
            case 362:
            case 377:
            case 387:
            case 398:
            case 399:
            case 401:
            case 403:
            case 404:
            case 411:
            case 412:
            case 414:
            case 422:
            case 428:
            case 429:
            case 437:
            case 438:
            case 461:
            case 462:
            case 464:
            case 466:
            case 467:
            case 487:
            case 494:
            case 495:
            case 501:
            case 503:
            case 504:
            case 519:
            case 527:
              self.$ = $$[$0];
              break;
            case 16:
              self.$ = $$[$0].option("block", true);
              break;
            case 24:
            case 116:
              self.$ = new yy.Literal($$[$0]);
              break;
            case 25:
              self.$ = new yy.BreakStatement($$[$0]);
              break;
            case 26:
              self.$ = new yy.BreakStatement($$[$0 - 3], $$[$0 - 1]);
              break;
            case 27:
              self.$ = new yy.ContinueStatement($$[$0]);
              break;
            case 28:
              self.$ = new yy.ContinueStatement($$[$0 - 3], $$[$0 - 1]);
              break;
            case 29:
              self.$ = new yy.DebuggerStatement($$[$0]);
              break;
            case 30:
              self.$ = new yy.ExtendDeclaration($$[$0 - 1], null, $$[$0]).set({ instanceOnly: true, extension: $$[$0 - 2] });
              break;
            case 31:
              self.$ = new yy.ExportNamedDeclaration($$[$0 - 3], [$$[$0 - 1]]);
              break;
            case 32:
              self.$ = new yy.ExportNamedDeclaration($$[$0 - 5], [$$[$0 - 3]], $$[$0]);
              break;
            case 33:
              self.$ = new yy.ExportAllDeclaration($$[$0 - 3], [new yy.ExportAllSpecifier($$[$0 - 2])], $$[$0]);
              break;
            case 34:
              self.$ = new yy.ExportAllDeclaration($$[$0 - 5], [new yy.ExportAllSpecifier($$[$0 - 4], $$[$0 - 2])], $$[$0]);
              break;
            case 35:
              self.$ = new yy.Export($$[$0]).set({ keyword: $$[$0 - 1] });
              break;
            case 36:
              self.$ = new yy.Export($$[$0]).set({ keyword: $$[$0 - 2], "default": $$[$0 - 1] });
              break;
            case 45:
              self.$ = new yy.ImportDefaultSpecifier($$[$0]);
              break;
            case 46:
              self.$ = new yy.ImportDeclaration($$[$0 - 1], null, $$[$0]);
              break;
            case 47:
            case 49:
              self.$ = new yy.ImportDeclaration($$[$0 - 3], [$$[$0 - 2]], $$[$0]);
              break;
            case 48:
              self.$ = new yy.ImportTypeDeclaration($$[$0 - 4], [$$[$0 - 2]], $$[$0]);
              break;
            case 50:
              self.$ = new yy.ImportDeclaration($$[$0 - 4], null, $$[$0]);
              break;
            case 51:
              self.$ = new yy.ImportDeclaration($$[$0 - 5], [$$[$0 - 3]], $$[$0]);
              break;
            case 52:
              self.$ = new yy.ImportTypeDeclaration($$[$0 - 6], [$$[$0 - 3]], $$[$0]);
              break;
            case 53:
              self.$ = new yy.ImportDeclaration($$[$0 - 5], [$$[$0 - 4], $$[$0 - 2]], $$[$0]);
              break;
            case 54:
              self.$ = new yy.ImportDeclaration($$[$0 - 7], [$$[$0 - 6], $$[$0 - 3]], $$[$0]);
              break;
            case 56:
              self.$ = new yy.ImportNamespaceSpecifier(new yy.Literal($$[$0 - 2]), $$[$0]);
              break;
            case 57:
              self.$ = new yy.ESMSpecifierList([]).add($$[$0]);
              break;
            case 58:
            case 100:
            case 147:
            case 158:
            case 168:
            case 227:
            case 369:
            case 373:
            case 421:
            case 455:
              self.$ = $$[$0 - 2].add($$[$0]);
              break;
            case 59:
              self.$ = $$[$0 - 3].add($$[$0]);
              break;
            case 60:
            case 196:
              self.$ = $$[$0 - 2];
              break;
            case 61:
              self.$ = $$[$0 - 3];
              break;
            case 62:
            case 231:
            case 376:
            case 459:
              self.$ = $$[$0 - 5].concat($$[$0 - 2]);
              break;
            case 63:
            case 64:
            case 65:
              self.$ = new yy.ImportSpecifier($$[$0]);
              break;
            case 66:
              self.$ = new yy.ImportSpecifier($$[$0 - 2], $$[$0]);
              break;
            case 67:
              self.$ = new yy.ImportSpecifier(new yy.Literal($$[$0]));
              break;
            case 68:
              self.$ = new yy.ImportSpecifier(new yy.Literal($$[$0 - 2]), $$[$0]);
              break;
            case 69:
              self.$ = new yy.Require($$[$0]).set({ keyword: $$[$0 - 1] });
              break;
            case 90:
            case 95:
              self.$ = new yy.Identifier($$[$0]);
              break;
            case 91:
              self.$ = new yy.SymbolIdentifier($$[$0]);
              break;
            case 92:
              self.$ = new yy.InterpolatedSymbolIdentifier($$[$0 - 1], $$[$0]);
              break;
            case 93:
              self.$ = new yy.DecoratorIdentifier($$[$0]);
              break;
            case 94:
              self.$ = new yy.MixinIdentifier($$[$0]);
              break;
            case 96:
              self.$ = new yy.Argvar($$[$0]).setEnds($$[$0], $$[$0]);
              break;
            case 97:
              self.$ = new yy.Symbol($$[$0]);
              break;
            case 98:
              self.$ = new yy.Decorator($$[$0]);
              break;
            case 99:
              self.$ = new yy.Decorator($$[$0 - 1]).set({ params: $$[$0] });
              break;
            case 101:
            case 300:
            case 505:
              self.$ = [$$[$0]];
              break;
            case 102:
            case 520:
              self.$ = $$[$0 - 1].concat($$[$0]);
              break;
            case 103:
              self.$ = new yy.NumWithUnit($$[$0 - 1], $$[$0]);
              break;
            case 104:
              self.$ = new yy.Num($$[$0]);
              break;
            case 105:
            case 108:
              self.$ = new yy.Str($$[$0]);
              break;
            case 109:
              self.$ = new yy.InterpolatedString([], { open: $$[$0] });
              break;
            case 110:
            case 127:
            case 146:
            case 160:
            case 161:
            case 170:
            case 171:
            case 217:
            case 220:
              self.$ = $$[$0 - 1].add($$[$0]);
              break;
            case 111:
              self.$ = $$[$0] ? $$[$0 - 1].add($$[$0]) : $$[$0 - 1];
              break;
            case 112:
            case 129:
              self.$ = $$[$0 - 1].option("close", $$[$0]);
              break;
            case 113:
              self.$ = null;
              break;
            case 114:
            case 212:
            case 213:
            case 221:
            case 224:
            case 281:
            case 460:
              self.$ = $$[$0 - 1];
              break;
            case 117:
              self.$ = new yy.RegExp($$[$0]);
              break;
            case 118:
              self.$ = new yy.Bool($$[$0]);
              break;
            case 119:
              self.$ = new yy.True($$[$0]);
              break;
            case 120:
              self.$ = new yy.False($$[$0]);
              break;
            case 121:
              self.$ = new yy.Nil($$[$0]);
              break;
            case 122:
              self.$ = new yy.Undefined($$[$0]);
              break;
            case 123:
            case 124:
              self.$ = new yy.Return($$[$0]).set({ keyword: $$[$0 - 1] });
              break;
            case 125:
              self.$ = new yy.Return().set({ keyword: $$[$0] });
              break;
            case 126:
              self.$ = new yy.Selector([], { type: $$[$0], open: $$[$0] });
              break;
            case 128:
            case 218:
              self.$ = $$[$0 - 3].add($$[$0 - 1]);
              break;
            case 130:
              self.$ = $$[$0 - 1].setEnds({ open: $$[$0 - 2], close: $$[$0] }).setEnds($$[$0 - 2], $$[$0]);
              break;
            case 131:
              self.$ = $$[$0 - 2].set({ body: $$[$0], open: $$[$0 - 3], close: $$[$0 - 1] });
              break;
            case 133:
            case 134:
            case 246:
              self.$ = new yy.TagTypeIdentifier($$[$0]);
              break;
            case 135:
              self.$ = new yy.ExpressionNode($$[$0]);
              break;
            case 136:
              self.$ = new yy.TagTypeIdentifier("div");
              break;
            case 137:
              self.$ = new yy.StyleRuleSet($$[$0 - 2], $$[$0 - 1]).set({ name: $$[$0 - 3] });
              break;
            case 138:
              self.$ = $$[$0].set({ toplevel: true });
              break;
            case 139:
            case 241:
            case 276:
            case 380:
              self.$ = $$[$0].set({ global: $$[$0 - 1] });
              break;
            case 140:
            case 379:
              self.$ = $$[$0].set({ local: $$[$0 - 1] });
              break;
            case 141:
              self.$ = new yy.StyleBody([]).indented($$[$0 - 2], $$[$0]);
              break;
            case 143:
              self.$ = new yy.StyleBody([]);
              break;
            case 145:
              self.$ = new yy.StyleBody([$$[$0]]);
              break;
            case 150:
              self.$ = new yy.StyleRuleSet($$[$0 - 2], $$[$0 - 1]);
              break;
            case 151:
            case 152:
              self.$ = new yy.StyleDeclaration($$[$0 - 2], $$[$0].set({ parens: false }));
              break;
            case 153:
              self.$ = new yy.StyleProperty([$$[$0]]);
              break;
            case 157:
            case 167:
              self.$ = new yy.StyleExpressions([$$[$0]]);
              break;
            case 159:
            case 169:
              self.$ = new yy.StyleExpression().add($$[$0]);
              break;
            case 162:
            case 172:
              self.$ = $$[$0 - 2].addParam($$[$0], $$[$0 - 1]);
              break;
            case 165:
              self.$ = new yy.StyleOperation([$$[$0 - 2], $$[$0 - 1], $$[$0]]);
              break;
            case 166:
              self.$ = $$[$0 - 2].add([$$[$0 - 1], $$[$0]]);
              break;
            case 173:
              self.$ = new yy.StyleInterpolationExpression($$[$0 - 1]).setEnds($$[$0 - 2], $$[$0]);
              break;
            case 174:
            case 176:
              self.$ = $$[$0 - 1].set({ unit: $$[$0] });
              break;
            case 175:
              self.$ = new yy.StyleParens($$[$0 - 1]).setEnds($$[$0 - 2], $$[$0]);
              break;
            case 178:
              self.$ = new yy.StyleVar($$[$0]);
              break;
            case 179:
            case 181:
              self.$ = new yy.StyleDimension($$[$0]);
              break;
            case 180:
              self.$ = new yy.StyleColor($$[$0]);
              break;
            case 182:
              self.$ = new yy.StyleNumber($$[$0]);
              break;
            case 185:
              self.$ = new yy.StyleURL($$[$0]);
              break;
            case 186:
              self.$ = new yy.StyleFunction($$[$0 - 3], $$[$0 - 1]);
              break;
            case 187:
              self.$ = new yy.StyleIdentifier($$[$0]);
              break;
            case 188:
              self.$ = $$[$0].set({ op: $$[$0 - 1] });
              break;
            case 189:
              self.$ = new yy.Tag({ type: $$[$0 - 1], reference: $$[$0] });
              break;
            case 190:
              self.$ = new yy.Tag({ type: $$[$0] });
              break;
            case 191:
              self.$ = $$[$0 - 1].addPart($$[$0], yy.TagId);
              break;
            case 192:
            case 193:
              self.$ = $$[$0 - 1].addPart(new yy.IdentifierExpression($$[$0].cloneSlice(1)), yy.TagId);
              break;
            case 194:
              self.$ = $$[$0 - 1].addPart($$[$0], yy.TagFlag);
              break;
            case 195:
              self.$ = $$[$0 - 1].addPart($$[$0], yy.TagAttr);
              break;
            case 197:
              self.$ = $$[$0 - 3].addPart(new yy.StyleRuleSet(null, $$[$0 - 1]), yy.TagFlag);
              break;
            case 198:
              self.$ = $$[$0 - 4].addPart(new yy.StyleRuleSet(null, $$[$0 - 1]), yy.TagFlag);
              break;
            case 199:
              self.$ = $$[$0 - 1].addPart(new yy.MixinIdentifier($$[$0]), yy.TagFlag);
              break;
            case 200:
            case 201:
              self.$ = $$[$0 - 2].addPart($$[$0], yy.TagHandler);
              break;
            case 202:
              self.$ = $$[$0 - 3].addPart($$[$0].prepend("_"), yy.TagFlag);
              break;
            case 203:
              self.$ = $$[$0 - 3].addPart($$[$0].prepend("!"), yy.TagFlag);
              break;
            case 204:
              self.$ = $$[$0 - 2].addPart($$[$0], yy.TagFlag);
              break;
            case 205:
              self.$ = $$[$0 - 2].addPart($$[$0], yy.TagId);
              break;
            case 206:
              self.$ = $$[$0 - 2].addPart($$[$0 - 1], yy.TagSep).addPart($$[$0], yy.TagAttr);
              break;
            case 207:
              self.$ = $$[$0 - 2].addPart(new yy.ArgList([]), yy.TagArgList);
              break;
            case 208:
            case 210:
              self.$ = $$[$0 - 3].addPart($$[$0 - 1], yy.TagArgList);
              break;
            case 209:
              self.$ = $$[$0 - 2].addPart(null, yy.TagArgList);
              break;
            case 211:
              self.$ = $$[$0 - 1].addPart($$[$0], yy.TagSep);
              break;
            case 214:
              self.$ = $$[$0 - 2].addPart($$[$0], yy.TagAttrValue, $$[$0 - 1]);
              break;
            case 215:
              self.$ = new yy.IdentifierExpression($$[$0]);
              break;
            case 216:
            case 264:
            case 265:
              self.$ = new yy.IdentifierExpression($$[$0 - 1]);
              break;
            case 219:
              self.$ = new yy.TagFlag();
              break;
            case 222:
              self.$ = new yy.TagBody([]).indented($$[$0 - 1], $$[$0]);
              break;
            case 225:
              self.$ = new yy.TagBody([$$[$0]]);
              break;
            case 226:
              self.$ = new yy.TagBody([]).add($$[$0]);
              break;
            case 228:
            case 370:
            case 374:
            case 456:
              self.$ = $$[$0 - 3].add($$[$0 - 1]).add($$[$0]);
              break;
            case 229:
            case 457:
              self.$ = $$[$0 - 5].add($$[$0 - 1]).add($$[$0]);
              break;
            case 230:
            case 375:
            case 458:
              self.$ = $$[$0 - 2].indented($$[$0 - 3], $$[$0]);
              break;
            case 233:
            case 463:
              self.$ = new yy.Splat($$[$0]).set({ keyword: $$[$0 - 1] });
              break;
            case 237:
              self.$ = $$[$0].set({ inTagTree: true });
              break;
            case 239:
              self.$ = $$[$0].set({ extension: true });
              break;
            case 240:
              self.$ = $$[$0].set({ local: true });
              break;
            case 242:
              self.$ = new yy.TagDeclaration($$[$0]).set({ keyword: $$[$0 - 1] });
              break;
            case 243:
              self.$ = new yy.TagDeclaration($$[$0 - 1], null, $$[$0]).set({ keyword: $$[$0 - 2] });
              break;
            case 244:
              self.$ = new yy.TagDeclaration($$[$0 - 2], $$[$0]).set({ keyword: $$[$0 - 3] });
              break;
            case 245:
              self.$ = new yy.TagDeclaration($$[$0 - 3], $$[$0 - 1], $$[$0]).set({ keyword: $$[$0 - 4] });
              break;
            case 247:
              self.$ = new yy.TagIdRef($$[$0]);
              break;
            case 249:
              self.$ = new yy.Assign($$[$0 - 1], $$[$0 - 2], $$[$0]).setEnds($$[$0 - 2], $$[$0]);
              break;
            case 250:
            case 330:
              self.$ = new yy.Assign($$[$0 - 3], $$[$0 - 4], $$[$0 - 1].indented($$[$0 - 2], $$[$0]));
              break;
            case 251:
              self.$ = new yy.ObjRestAttr($$[$0]).set({ spread: $$[$0 - 1] });
              break;
            case 252:
              self.$ = $$[$0].set({ inObject: true });
              break;
            case 253:
              self.$ = new yy.ObjAttr($$[$0]);
              break;
            case 254:
              self.$ = new yy.ObjAttr($$[$0 - 2], $$[$0]);
              break;
            case 255:
              self.$ = new yy.ObjAttr($$[$0 - 4], $$[$0 - 1].indented($$[$0 - 2], $$[$0]));
              break;
            case 256:
              self.$ = new yy.ObjAttr($$[$0 - 2], null, $$[$0]);
              break;
            case 257:
              self.$ = new yy.ObjAttr($$[$0 - 4], null, $$[$0 - 1].indented($$[$0 - 2], $$[$0]));
              break;
            case 260:
            case 288:
            case 325:
            case 337:
            case 435:
            case 450:
            case 479:
            case 502:
              self.$ = $$[$0 - 1].set({ datatype: $$[$0] });
              break;
            case 267:
              self.$ = new yy.Comment($$[$0], true);
              break;
            case 268:
              self.$ = new yy.Comment($$[$0], false);
              break;
            case 272:
              self.$ = new yy.Begin($$[$0]);
              break;
            case 273:
              self.$ = new yy.Lambda([], $$[$0], null, null, { bound: true, keyword: $$[$0 - 1] });
              break;
            case 274:
              self.$ = new yy.Lambda($$[$0 - 2], $$[$0], null, null, { bound: true, keyword: $$[$0 - 4] });
              break;
            case 277:
            case 405:
            case 408:
              self.$ = $$[$0].set({ static: $$[$0 - 1] });
              break;
            case 278:
              self.$ = new yy.MethodDeclaration($$[$0 - 1], $$[$0], $$[$0 - 2], $$[$0 - 4], $$[$0 - 3]).set({ def: $$[$0 - 5], keyword: $$[$0 - 5], datatype: $$[$0 - 2].option("datatype") });
              break;
            case 279:
              self.$ = new yy.MethodDeclaration($$[$0 - 1], $$[$0], $$[$0 - 2], null).set({ def: $$[$0 - 3], keyword: $$[$0 - 3], datatype: $$[$0 - 2].option("datatype") });
              break;
            case 282:
              self.$ = { static: true };
              break;
            case 283:
              self.$ = {};
              break;
            case 286:
              self.$ = $$[$0].set({ as: "property" });
              break;
            case 287:
              self.$ = new yy.InterpolatedIdentifier($$[$0 - 1]);
              break;
            case 291:
              self.$ = new yy.Block([]).set({ end: $$[$0]._loc });
              break;
            case 299:
              self.$ = [];
              break;
            case 301:
              self.$ = $$[$0 - 2].concat($$[$0]);
              break;
            case 309:
            case 310:
            case 318:
              self.$ = new yy.Param($$[$0]);
              break;
            case 312:
              self.$ = $$[$0].set({ splat: $$[$0 - 1] });
              break;
            case 313:
              self.$ = $$[$0].set({ blk: $$[$0 - 1] });
              break;
            case 314:
              self.$ = new yy.Param($$[$0 - 2].value(), $$[$0]).set({ datatype: $$[$0 - 2].option("datatype") });
              break;
            case 315:
            case 316:
              self.$ = new yy.Param($$[$0 - 2], $$[$0]);
              break;
            case 317:
              self.$ = new yy.RestParam($$[$0]);
              break;
            case 319:
              self.$ = new yy.Param($$[$0 - 1]).set({ datatype: $$[$0] });
              break;
            case 320:
              self.$ = yy.SPLAT($$[$0]);
              break;
            case 328:
              self.$ = new yy.VarReference($$[$0], $$[$0 - 1]);
              break;
            case 329:
              self.$ = new yy.Assign($$[$0 - 1], $$[$0 - 2], $$[$0]);
              break;
            case 331:
              self.$ = new yy.EnvFlag($$[$0]);
              break;
            case 334:
            case 388:
              self.$ = new yy.VarOrAccess($$[$0]);
              break;
            case 335:
            case 389:
              self.$ = new yy.Access(".", null, $$[$0]);
              break;
            case 338:
            case 390:
            case 550:
              self.$ = yy.OP($$[$0 - 1], $$[$0 - 2], $$[$0]);
              break;
            case 339:
            case 391:
              self.$ = new yy.IndexAccess($$[$0 - 1], $$[$0 - 2], $$[$0]);
              break;
            case 340:
              self.$ = new yy.IndexAccess(".", $$[$0 - 3], $$[$0 - 1].setEnds($$[$0 - 2], $$[$0]));
              break;
            case 341:
              self.$ = yy.OP($$[$0 - 3], $$[$0 - 4], $$[$0 - 1]);
              break;
            case 344:
              self.$ = new yy.Super($$[$0]);
              break;
            case 348:
            case 349:
              self.$ = new yy.TaggedTemplate($$[$0 - 1], $$[$0]);
              break;
            case 350:
              self.$ = new yy.Await($$[$0]).set({ keyword: $$[$0 - 1] });
              break;
            case 356:
              self.$ = yy.ARGUMENTS;
              break;
            case 363:
              self.$ = new yy.AmperRef($$[$0]);
              break;
            case 364:
              self.$ = new yy.BangCall($$[$0 - 1]).set({ keyword: $$[$0] });
              break;
            case 365:
              self.$ = new yy.Index($$[$0]);
              break;
            case 366:
              self.$ = new yy.Obj($$[$0 - 2], $$[$0 - 3].generated).setEnds($$[$0 - 3], $$[$0]);
              break;
            case 367:
              self.$ = new yy.AssignList([]);
              break;
            case 368:
              self.$ = new yy.AssignList([$$[$0]]);
              break;
            case 371:
              self.$ = $$[$0 - 5].concat($$[$0 - 2].indented($$[$0 - 3], $$[$0]));
              break;
            case 372:
              self.$ = new yy.ExpressionList([]).add($$[$0]);
              break;
            case 378:
              self.$ = $$[$0].set({ extension: $$[$0 - 1] });
              break;
            case 381:
              self.$ = new yy.ClassDeclaration($$[$0 - 1], null, $$[$0]).set({ keyword: $$[$0 - 2] });
              break;
            case 382:
              self.$ = new yy.ClassDeclaration($$[$0], null, []).set({ keyword: $$[$0 - 1] });
              break;
            case 383:
              self.$ = new yy.ClassDeclaration(null, null, $$[$0]).set({ keyword: $$[$0 - 1] });
              break;
            case 384:
              self.$ = new yy.ClassDeclaration($$[$0 - 2], $$[$0], []).set({ keyword: $$[$0 - 3] });
              break;
            case 385:
              self.$ = new yy.ClassDeclaration($$[$0 - 3], $$[$0 - 1], $$[$0]).set({ keyword: $$[$0 - 4] });
              break;
            case 386:
              self.$ = new yy.ClassDeclaration(null, $$[$0 - 1], $$[$0]).set({ keyword: $$[$0 - 3] });
              break;
            case 392:
              self.$ = new yy.ClassBody([]).indented($$[$0 - 1], $$[$0]);
              break;
            case 395:
              self.$ = new yy.ClassBody([]).add($$[$0]);
              break;
            case 400:
              self.$ = $$[$0 - 1].concat([$$[$0]]);
              break;
            case 402:
              self.$ = new yy.ClassRelation($$[$0]).set({ keyword: $$[$0 - 1] });
              break;
            case 406:
              self.$ = $$[$0].set({ static: $$[$0 - 1], declareOnly: $$[$0 - 2] });
              break;
            case 407:
            case 409:
              self.$ = $$[$0].set({ declareOnly: $$[$0 - 1] });
              break;
            case 410:
              self.$ = $$[$0 - 1].set({ static: $$[$0 - 1], declareOnly: $$[$0 - 2] });
              break;
            case 413:
              self.$ = $$[$0 - 2].set({ value: $$[$0], op: $$[$0 - 1] });
              break;
            case 415:
              self.$ = $$[$0 - 2].set({ wrapper: $$[$0] });
              break;
            case 416:
              self.$ = $$[$0 - 1].set({ wrapper: $$[$0] });
              break;
            case 417:
              self.$ = new yy.Descriptor($$[$0]);
              break;
            case 418:
              self.$ = new yy.Descriptor($$[$0 - 1]);
              break;
            case 419:
              self.$ = $$[$0 - 1].add($$[$0], "!");
              break;
            case 420:
              self.$ = $$[$0 - 3].add($$[$0 - 1], "=");
              break;
            case 423:
              self.$ = $$[$0 - 2].set({ "default": $$[$0] });
              break;
            case 424:
              self.$ = $$[$0 - 1].set({ callback: $$[$0] });
              break;
            case 427:
              self.$ = $$[$0 - 2].set({ watch: $$[$0] });
              break;
            case 432:
              self.$ = new yy.ClassField($$[$0]);
              break;
            case 433:
              self.$ = new yy.ClassProperty($$[$0]).set({ keyword: $$[$0 - 1] });
              break;
            case 434:
              self.$ = new yy.ClassAttribute($$[$0]).set({ keyword: $$[$0 - 1] });
              break;
            case 436:
              self.$ = $$[$0 - 2].set({ controller: $$[$0 - 1] });
              break;
            case 439:
              self.$ = [$$[$0 - 2], $$[$0 - 1]];
              break;
            case 440:
              self.$ = new yy.Call($$[$0 - 2], $$[$0], $$[$0 - 1]);
              break;
            case 441:
              self.$ = $$[$0 - 1].addBlock($$[$0]);
              break;
            case 442:
              self.$ = false;
              break;
            case 443:
              self.$ = true;
              break;
            case 444:
              self.$ = new yy.ArgList([]).setEnds($$[$0 - 1], $$[$0]);
              break;
            case 445:
              self.$ = $$[$0 - 2].setEnds($$[$0 - 3], $$[$0]);
              break;
            case 446:
              self.$ = new yy.This($$[$0]);
              break;
            case 447:
              self.$ = new yy.Self($$[$0]);
              break;
            case 448:
              self.$ = new yy.Arr(new yy.ArgList([])).setEnds($$[$0 - 1], $$[$0]);
              break;
            case 449:
              self.$ = new yy.Arr($$[$0 - 2]).setEnds($$[$0 - 3], $$[$0]);
              break;
            case 451:
              self.$ = "..";
              break;
            case 452:
              self.$ = "...";
              break;
            case 453:
              self.$ = yy.OP($$[$0 - 2], $$[$0 - 3], $$[$0 - 1]);
              break;
            case 454:
              self.$ = new yy.ArgList([$$[$0]]);
              break;
            case 465:
              self.$ = new yy.DoPlaceholder($$[$0]);
              break;
            case 468:
              self.$ = [].concat($$[$0 - 2], $$[$0]);
              break;
            case 469:
              self.$ = new yy.Try($$[$0]);
              break;
            case 470:
              self.$ = new yy.Try($$[$0 - 1], $$[$0]);
              break;
            case 471:
              self.$ = new yy.Try($$[$0 - 1], null, $$[$0]);
              break;
            case 472:
              self.$ = new yy.Try($$[$0 - 2], $$[$0 - 1], $$[$0]);
              break;
            case 473:
              self.$ = new yy.Finally($$[$0]);
              break;
            case 474:
              self.$ = new yy.Catch($$[$0], $$[$0 - 1]);
              break;
            case 475:
              self.$ = new yy.Catch($$[$0], null);
              break;
            case 476:
              self.$ = new yy.Throw($$[$0]);
              break;
            case 477:
              self.$ = new yy.Parens($$[$0 - 1], $$[$0 - 2], $$[$0]);
              break;
            case 478:
              self.$ = new yy.ExpressionWithUnit(new yy.Parens($$[$0 - 2], $$[$0 - 3], $$[$0 - 1]), $$[$0]);
              break;
            case 480:
              self.$ = new yy.While($$[$0], { keyword: $$[$0 - 1] });
              break;
            case 481:
              self.$ = new yy.While($$[$0 - 2], { guard: $$[$0], keyword: $$[$0 - 3] });
              break;
            case 482:
              self.$ = new yy.While($$[$0], { invert: true, keyword: $$[$0 - 1] });
              break;
            case 483:
              self.$ = new yy.While($$[$0 - 2], { invert: true, guard: $$[$0], keyword: $$[$0 - 3] });
              break;
            case 484:
            case 492:
              self.$ = $$[$0 - 1].addBody($$[$0]);
              break;
            case 485:
            case 486:
              self.$ = $$[$0].addBody(yy.Block.wrap([$$[$0 - 1]]));
              break;
            case 488:
              self.$ = new yy.While(new yy.Literal("true", { keyword: $$[$0 - 1] })).addBody($$[$0]);
              break;
            case 489:
              self.$ = new yy.While(new yy.Literal("true", { keyword: $$[$0 - 1] })).addBody(yy.Block.wrap([$$[$0]]));
              break;
            case 490:
            case 491:
              self.$ = $$[$0].addBody([$$[$0 - 1]]);
              break;
            case 493:
              self.$ = $$[$0 - 3].addBody($$[$0 - 2]).addElse($$[$0]);
              break;
            case 496:
              self.$ = { source: new yy.ValueNode($$[$0]) };
              break;
            case 497:
              self.$ = $$[$0].configure({ own: $$[$0 - 1].own, await: $$[$0 - 1].await, name: $$[$0 - 1][0], index: $$[$0 - 1][1], keyword: $$[$0 - 1].keyword, params: $$[$0 - 1] });
              break;
            case 498:
              self.$ = ($$[$0].keyword = $$[$0 - 1]) && $$[$0];
              break;
            case 499:
              self.$ = ($$[$0].await = $$[$0 - 1]) && ($$[$0].keyword = $$[$0 - 2]) && $$[$0];
              break;
            case 500:
              self.$ = ($$[$0].own = true) && ($$[$0].keyword = $$[$0 - 2]) && $$[$0];
              break;
            case 506:
              self.$ = [$$[$0 - 2], $$[$0]];
              break;
            case 507:
              self.$ = [$$[$0 - 4], $$[$0 - 2], $$[$0]];
              break;
            case 508:
              self.$ = new yy.ForIn({ source: $$[$0] });
              break;
            case 509:
              self.$ = new yy.ForOf({ source: $$[$0], object: true });
              break;
            case 510:
              self.$ = new yy.ForIn({ source: $$[$0 - 2], guard: $$[$0] });
              break;
            case 511:
              self.$ = new yy.ForOf({ source: $$[$0 - 2], guard: $$[$0], object: true });
              break;
            case 512:
              self.$ = new yy.ForIn({ source: $$[$0 - 2], step: $$[$0] });
              break;
            case 513:
              self.$ = new yy.ForIn({ source: $$[$0 - 4], guard: $$[$0 - 2], step: $$[$0] });
              break;
            case 514:
              self.$ = new yy.ForIn({ source: $$[$0 - 4], step: $$[$0 - 2], guard: $$[$0] });
              break;
            case 515:
              self.$ = new yy.Switch($$[$0 - 3], $$[$0 - 1]);
              break;
            case 516:
              self.$ = new yy.Switch($$[$0 - 5], $$[$0 - 3], $$[$0 - 1]);
              break;
            case 517:
              self.$ = new yy.Switch(null, $$[$0 - 1]);
              break;
            case 518:
              self.$ = new yy.Switch(null, $$[$0 - 3], $$[$0 - 1]);
              break;
            case 521:
              self.$ = [new yy.SwitchCase($$[$0 - 1], $$[$0])];
              break;
            case 522:
              self.$ = [new yy.SwitchCase($$[$0 - 2], $$[$0 - 1])];
              break;
            case 523:
              self.$ = new yy.If($$[$0 - 1], $$[$0], { type: $$[$0 - 2] });
              break;
            case 524:
              self.$ = $$[$0 - 4].addElse(new yy.If($$[$0 - 1], $$[$0], { type: $$[$0 - 2] }));
              break;
            case 525:
              self.$ = $$[$0 - 3].addElse(new yy.If($$[$0 - 1], $$[$0], { type: $$[$0 - 2] }));
              break;
            case 526:
              self.$ = $$[$0 - 2].addElse($$[$0].set({ keyword: $$[$0 - 1] }));
              break;
            case 528:
              self.$ = new yy.If($$[$0], new yy.Block([$$[$0 - 2]]), { type: $$[$0 - 1], statement: true });
              break;
            case 529:
              self.$ = new yy.If($$[$0], new yy.Block([$$[$0 - 2]]), { type: $$[$0 - 1] });
              break;
            case 530:
              self.$ = yy.If.ternary($$[$0 - 4], $$[$0 - 2], $$[$0]);
              break;
            case 531:
              self.$ = yy.Instantiation.for($$[$0], $$[$0 - 1]).setEnds($$[$0 - 1], $$[$0]);
              break;
            case 532:
            case 533:
            case 534:
            case 535:
            case 536:
              self.$ = yy.OP($$[$0 - 1], $$[$0]).setEnds($$[$0 - 1], $$[$0]);
              break;
            case 537:
            case 538:
              self.$ = new yy.UnaryOp($$[$0 - 1], null, $$[$0]).setEnds($$[$0 - 1], $$[$0]);
              break;
            case 539:
            case 540:
              self.$ = new yy.UnaryOp($$[$0], $$[$0 - 1], null, true).setEnds($$[$0 - 1], $$[$0]);
              break;
            case 541:
            case 542:
              self.$ = new yy.Op($$[$0 - 1], $$[$0 - 2], $$[$0]).setEnds($$[$0 - 2], $$[$0]);
              break;
            case 543:
            case 544:
            case 545:
            case 546:
            case 547:
            case 549:
              self.$ = yy.OP($$[$0 - 1], $$[$0 - 2], $$[$0]).setEnds($$[$0 - 2], $$[$0]);
              break;
            case 548:
              self.$ = yy.OP($$[$0 - 1], $$[$0 - 3], $$[$0]).invert($$[$0 - 2]);
              break;
            case 551:
              self.$ = yy.OP($$[$0 - 3], $$[$0 - 4], $$[$0 - 1].indented($$[$0 - 2], $$[$0]));
              break;
          }
        },
        table: [{ 1: [2, 1], 3: 1, 4: 2, 5: 3, 7: $V0, 8: 5, 12: $V1, 13: $V2, 15: 8, 16: 9, 17: 10, 18: 11, 19: 12, 20: 13, 21: 14, 22: 15, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 35: $V8, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 51: $Va, 57: $Vb, 62: 89, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 88: $Vg, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 96: 43, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 128: 16, 129: $Vv, 133: $Vw, 134: $Vx, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 1: [3] }, { 1: [2, 2], 6: $V71, 9: 140 }, { 6: [1, 142] }, o($V81, [2, 4]), o($V81, [2, 5]), o($V91, [2, 10]), { 4: 144, 6: [1, 145], 7: $V0, 8: 5, 14: [1, 143], 15: 8, 16: 9, 17: 10, 18: 11, 19: 12, 20: 13, 21: 14, 22: 15, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 35: $V8, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 51: $Va, 57: $Vb, 62: 89, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 88: $Vg, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 96: 43, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 128: 16, 129: $Vv, 133: $Vw, 134: $Vx, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($V81, [2, 14]), o($V81, [2, 15], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($V81, [2, 16], { 142: $Vl1 }), o($V81, [2, 17]), o($V81, [2, 18], { 306: 121, 309: 122, 298: 161, 304: 162, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vm1 }), o($V81, [2, 19], { 62: 89, 96: 163, 88: $Vg }), o($V81, [2, 20]), o($V81, [2, 21]), o($V81, [2, 138]), { 15: 164, 46: 167, 128: 16, 129: $Vv, 133: $Vn1, 134: $Vo1, 196: 166, 197: $VC, 217: $VJ, 260: 165, 261: $VS }, { 15: 170, 128: 16, 129: $Vv, 133: $Vn1, 134: $Vo1, 196: 172, 197: $VC, 260: 171, 261: $VS }, o($Vp1, [2, 73]), o($Vp1, [2, 74], { 282: 174, 209: 175, 244: 176, 27: $Vq1, 98: $Vr1, 212: $VH, 245: $Vs1, 248: $Vt1, 257: $Vu1, 283: $Vv1 }), o($Vp1, [2, 75]), o($Vp1, [2, 76]), o($Vp1, [2, 77]), o($Vp1, [2, 78]), o($Vp1, [2, 79]), o($Vp1, [2, 80]), o($Vp1, [2, 81]), o($Vp1, [2, 82]), o($Vp1, [2, 83]), o($Vp1, [2, 84]), o($Vp1, [2, 85]), o($Vp1, [2, 86]), o($Vp1, [2, 87]), { 33: 182, 36: $V9, 83: $Vd, 204: $Vw1, 231: 184, 232: 183, 240: 181 }, o($Vx1, [2, 267]), o($Vx1, [2, 268]), o($Vy1, [2, 22]), o($Vy1, [2, 23]), o($Vy1, [2, 24]), o($Vy1, [2, 25], { 27: [1, 186] }), o($Vy1, [2, 27], { 27: [1, 187] }), o($Vy1, [2, 29]), o($Vz1, [2, 101], { 98: $VA1 }), { 33: 195, 36: [1, 193], 40: 189, 52: 190, 53: [1, 191], 54: 192, 57: $VB1, 58: $VC1, 83: $Vd }, { 15: 203, 17: 208, 32: [1, 206], 36: [1, 197], 41: [1, 198], 43: 199, 44: [1, 200], 46: 201, 47: 202, 48: 204, 49: 205, 128: 16, 129: $Vv, 133: [1, 207], 134: $Vx, 196: 82, 197: $VC, 217: $VJ, 236: 34, 237: $VK, 238: $VL, 239: $VM, 260: 81, 261: $VS }, { 130: [1, 209] }, { 16: 210, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($VF1, $VG1, { 142: [1, 214] }), o($VF1, [2, 352]), o($VF1, [2, 353]), o($VF1, [2, 354], { 10: 215, 11: $VH1 }), o($VF1, [2, 355]), o($VF1, [2, 356]), o($VF1, [2, 357]), o($VF1, [2, 358]), o($VF1, [2, 359], { 36: [1, 218], 118: [1, 217], 119: [1, 219] }), o($VF1, [2, 360]), o($VF1, [2, 361]), o($VF1, [2, 362]), o($VF1, [2, 363]), o($Vp1, [2, 269]), o($Vp1, [2, 270]), o($Vp1, [2, 271]), { 16: 220, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 221, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 222, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 223, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 224, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 225, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 33: 114, 36: $V9, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 70: 227, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 116: 56, 117: $Vt, 125: 113, 158: $VA, 199: 55, 200: 228, 204: $VD, 225: 54, 231: 91, 232: 90, 241: 226, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 253: 52, 254: $VQ, 255: 57, 256: $VR, 284: $VT, 285: $VU }, { 33: 114, 36: $V9, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 70: 227, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 116: 56, 117: $Vt, 125: 113, 158: $VA, 199: 55, 200: 228, 204: $VD, 225: 54, 231: 91, 232: 90, 241: 229, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 253: 52, 254: $VQ, 255: 57, 256: $VR, 284: $VT, 285: $VU }, o($VI1, $VJ1, { 102: 233, 40: 234, 10: 235, 11: $VH1, 57: $VB1, 103: $Vk, 276: [1, 232], 329: [1, 230], 330: [1, 231] }), o($Vp1, [2, 248]), o($Vp1, [2, 527], { 305: [1, 236], 323: [1, 237] }), { 5: 238, 12: $V1, 13: $V2 }, { 5: 239, 12: $V1, 13: $V2 }, o($Vp1, [2, 487]), { 5: 240, 12: $V1, 13: $V2 }, { 13: [1, 242], 16: 241, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 33: 243, 83: $Vd, 196: 245, 197: $VC, 260: 244, 261: $VS }, o($Vp1, [2, 377]), o($Vp1, [2, 238]), o($VK1, [2, 136], { 121: 246, 124: 247, 125: 248, 127: 251, 36: $VL1, 83: [1, 249], 126: [1, 250], 180: $VM1, 285: $VU }), o($VN1, [2, 321]), o($VN1, [2, 322]), o($VN1, [2, 323]), o($Vy1, [2, 125], { 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 31: 30, 47: 31, 48: 32, 80: 33, 236: 34, 23: 37, 24: 38, 200: 48, 249: 49, 67: 50, 68: 51, 253: 52, 225: 54, 199: 55, 116: 56, 255: 57, 251: 58, 64: 59, 208: 61, 209: 62, 210: 63, 241: 72, 49: 73, 321: 74, 298: 76, 302: 77, 304: 78, 260: 81, 196: 82, 232: 90, 231: 91, 99: 93, 46: 107, 92: 112, 125: 113, 33: 114, 84: 115, 243: 116, 306: 121, 309: 122, 94: 129, 102: 130, 17: 208, 19: 211, 16: 254, 97: 255, 25: $V3, 26: $V4, 27: $VO1, 29: $V5, 30: $V6, 32: $V7, 36: $V9, 57: $Vb, 65: $Vc, 83: $Vd, 85: $Ve, 86: $Vf, 93: $Vh, 95: $Vi, 100: $Vj, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 117: $Vt, 120: $Vu, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 197: $VC, 204: $VD, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 237: $VK, 238: $VL, 239: $VM, 242: $VN, 250: $VO, 252: $VP, 254: $VQ, 256: $VR, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 303: $VZ, 317: $V01, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }), { 16: 257, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($VP1, [2, 98], { 97: 258, 27: $VO1 }), o($VI1, [2, 346], { 10: 259, 11: $VH1 }), o($VI1, [2, 347]), o($VF1, [2, 344]), o($VF1, [2, 115]), o($VF1, [2, 116]), o($VF1, [2, 117]), o($VF1, [2, 118]), o($VF1, [2, 119]), o($VF1, [2, 120]), o($VF1, [2, 121]), o($VF1, [2, 122]), { 13: $VQ1, 16: 261, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 259: 260, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 13: $VR1, 16: 263, 17: 208, 18: 271, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 183: 265, 193: $VS1, 194: 269, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 205: $VT1, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 235: $VU1, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 288: 266, 289: $VV1, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o([1, 6, 12, 13, 14, 27, 28, 38, 42, 60, 86, 88, 98, 107, 140, 145, 146, 147, 159, 167, 179, 189, 193, 195, 205, 212, 215, 223, 224, 245, 247, 248, 257, 266, 283, 287, 299, 300, 301, 307, 308, 316, 324, 325, 331, 332, 333], [2, 446]), { 83: [1, 273], 87: 274, 106: $VW1 }, o($VX1, [2, 126]), o($VF1, [2, 72], { 99: 93, 94: 129, 102: 130, 66: 276, 67: 277, 68: 278, 57: $Vb, 95: $Vi, 100: $Vj, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 158: $VA }), o($Vp1, [2, 275]), { 46: 279, 217: $VJ }, { 5: 280, 12: $V1, 13: $V2, 213: [1, 281] }, { 5: 282, 12: $V1, 13: $V2 }, o($VY1, [2, 331]), o($VY1, [2, 332]), o($VY1, [2, 333]), o($VY1, [2, 334]), o($VY1, [2, 335]), o($VY1, [2, 336]), { 16: 283, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 284, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 285, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 5: 286, 12: $V1, 13: $V2, 16: 287, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 33: 293, 36: $V9, 83: $Vd, 204: $VD, 231: 295, 232: 294, 252: [1, 290], 253: 288, 311: 289, 312: [1, 291], 313: 292 }, { 310: 296, 314: [1, 297], 315: [1, 298] }, { 13: $VZ1, 33: 303, 34: 300, 62: 302, 83: $Vd, 84: 304, 85: $Ve, 86: $V_1, 88: $Vg, 167: [1, 301], 262: 299 }, { 126: $V$1, 198: 307 }, o([1, 6, 11, 12, 13, 14, 27, 28, 36, 38, 42, 60, 83, 85, 86, 88, 98, 107, 140, 145, 146, 147, 159, 167, 179, 189, 193, 195, 204, 205, 215, 216, 217, 223, 224, 234, 247, 266, 268, 278, 279, 287, 299, 300, 301, 307, 308, 316, 324, 325, 331, 332, 333], [2, 93]), o([6, 13, 38, 60], $V02, { 94: 129, 102: 130, 258: 309, 201: 310, 46: 312, 202: 313, 203: 314, 18: 315, 99: 318, 33: 319, 84: 320, 90: 321, 57: $Vb, 83: $Vd, 85: $Ve, 86: $V_1, 91: $V12, 95: $Vi, 100: $Vj, 103: $Vk, 158: $V22, 193: $V32, 204: $V42, 206: $VE, 207: $VF, 217: $VJ }), o($VF1, [2, 104], { 101: [1, 323] }), o($VF1, [2, 105]), o($VF1, [2, 106]), o($VF1, [2, 107], { 87: 325, 104: $V52, 105: $V62, 106: $VW1 }), { 33: 331, 62: 332, 83: $Vd, 84: 333, 85: $Ve, 86: $V_1, 88: $Vg, 125: 330, 204: $V72, 218: 327, 220: 328, 225: 329, 284: $VT, 285: $VU }, o($VY1, [2, 96]), o([1, 6, 11, 12, 13, 14, 27, 28, 38, 42, 57, 60, 86, 88, 89, 98, 103, 107, 122, 140, 142, 145, 146, 147, 158, 159, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 182, 189, 193, 195, 205, 206, 207, 212, 215, 223, 224, 245, 247, 248, 257, 266, 276, 283, 287, 299, 300, 301, 307, 308, 316, 324, 325, 329, 330, 331, 332, 333], [2, 447]), o([1, 6, 11, 12, 13, 14, 27, 28, 36, 38, 39, 42, 55, 57, 60, 83, 85, 86, 88, 98, 103, 107, 140, 142, 145, 146, 147, 159, 167, 179, 189, 193, 195, 204, 205, 212, 215, 216, 217, 223, 224, 234, 245, 247, 248, 257, 266, 268, 276, 278, 279, 283, 287, 299, 300, 301, 307, 308, 314, 315, 316, 324, 325, 329, 330, 331, 332, 333], [2, 90]), o($V82, [2, 91]), o($V92, [2, 494]), o($V92, [2, 495]), o($VF1, [2, 97]), o($Va2, [2, 109]), o($V81, [2, 7], { 15: 8, 16: 9, 17: 10, 18: 11, 19: 12, 20: 13, 21: 14, 22: 15, 128: 16, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 31: 30, 47: 31, 48: 32, 80: 33, 236: 34, 23: 37, 24: 38, 96: 43, 200: 48, 249: 49, 67: 50, 68: 51, 253: 52, 225: 54, 199: 55, 116: 56, 255: 57, 251: 58, 64: 59, 208: 61, 209: 62, 210: 63, 241: 72, 49: 73, 321: 74, 298: 76, 302: 77, 304: 78, 260: 81, 196: 82, 62: 89, 232: 90, 231: 91, 99: 93, 46: 107, 92: 112, 125: 113, 33: 114, 84: 115, 243: 116, 306: 121, 309: 122, 94: 129, 102: 130, 8: 335, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 32: $V7, 35: $V8, 36: $V9, 51: $Va, 57: $Vb, 65: $Vc, 83: $Vd, 85: $Ve, 86: $Vf, 88: $Vg, 93: $Vh, 95: $Vi, 100: $Vj, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 117: $Vt, 120: $Vu, 129: $Vv, 133: $Vw, 134: $Vx, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 197: $VC, 204: $VD, 206: $VE, 207: $VF, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 237: $VK, 238: $VL, 239: $VM, 242: $VN, 250: $VO, 252: $VP, 254: $VQ, 256: $VR, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 299: $VX, 301: $VY, 303: $VZ, 307: $V_, 308: $V$, 317: $V01, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }), o([1, 6, 14, 25, 26, 29, 30, 32, 35, 36, 51, 57, 65, 83, 85, 86, 88, 91, 93, 95, 100, 103, 108, 109, 110, 111, 112, 113, 114, 115, 117, 120, 129, 130, 133, 134, 143, 146, 147, 158, 181, 193, 195, 197, 204, 206, 207, 211, 212, 216, 217, 235, 237, 238, 239, 242, 250, 252, 254, 256, 261, 266, 268, 278, 279, 284, 285, 289, 291, 297, 299, 301, 303, 307, 308, 317, 322, 326, 327, 328, 329, 330], $Vb2), { 1: [2, 3] }, o($V91, [2, 11]), { 6: $V71, 9: 140, 14: [1, 336] }, { 4: 337, 7: $V0, 8: 5, 15: 8, 16: 9, 17: 10, 18: 11, 19: 12, 20: 13, 21: 14, 22: 15, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 35: $V8, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 51: $Va, 57: $Vb, 62: 89, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 88: $Vg, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 96: 43, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 128: 16, 129: $Vv, 133: $Vw, 134: $Vx, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 338, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 339, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 340, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 341, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 342, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 343, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 344, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 266: [1, 345] }, { 16: 346, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 347, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 348, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($Vp1, [2, 486]), o($Vp1, [2, 491]), { 13: [1, 350], 16: 349, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 351, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($Vp1, [2, 485]), o($Vp1, [2, 490]), o($Vz1, [2, 102], { 98: $VA1 }), o($V81, [2, 139]), o($Vp1, [2, 380]), o($Vp1, [2, 241]), o($Vp1, [2, 276]), { 15: 164, 128: 16, 129: $Vv, 133: $Vn1, 134: $Vo1 }, { 15: 170, 128: 16, 129: $Vv, 133: $Vn1, 134: $Vo1 }, o($V81, [2, 140]), o($Vp1, [2, 379]), o($Vp1, [2, 240]), o($VF1, [2, 364]), { 27: $VO1, 97: 352 }, o($VF1, [2, 441]), { 33: 353, 83: $Vd, 84: 354, 85: $Ve, 86: $V_1 }, { 16: 356, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 246: 355, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($Vc2, [2, 343], { 204: [1, 357] }), { 27: [2, 443] }, o($Vc2, [2, 342]), o($Vd2, [2, 328]), o($Vd2, [2, 324], { 10: 358, 11: $VH1 }), o($Vd2, [2, 326], { 10: 259, 11: $VH1 }), o($Vd2, [2, 327]), { 13: $VR1, 16: 359, 17: 208, 18: 271, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 183: 265, 193: $VS1, 194: 269, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 205: $VT1, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 235: $VU1, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 288: 266, 289: $VV1, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 360, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 361, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 33: 362, 83: $Vd }, o($V81, [2, 46]), { 39: [1, 363], 55: [1, 364] }, { 33: 195, 36: [1, 366], 52: 365, 83: $Vd }, { 39: [1, 367] }, { 13: $Ve2, 33: 372, 37: 369, 38: [1, 368], 44: $Vf2, 59: 370, 62: 373, 63: 374, 83: $Vd, 88: $Vg, 89: $Vg2 }, o([1, 6, 12, 13, 14, 27, 28, 36, 38, 42, 57, 60, 88, 98, 100, 107, 132, 140, 143, 145, 146, 147, 150, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 175, 179, 189, 193, 195, 205, 212, 215, 223, 224, 245, 247, 248, 257, 266, 283, 287, 299, 300, 301, 307, 308, 316, 324, 325, 331, 332, 333], [2, 108]), o([39, 55], [2, 45]), { 42: [1, 377] }, { 13: $Ve2, 33: 372, 37: 378, 44: $Vf2, 59: 370, 62: 373, 63: 374, 83: $Vd, 88: $Vg, 89: $Vg2 }, { 39: [1, 379], 42: [1, 380] }, o($V81, [2, 35]), { 16: 382, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 45: 381, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($V81, [2, 37]), o($V81, [2, 38]), o($V81, [2, 39]), o($V81, [2, 40]), o($V81, [2, 41]), { 196: 245, 197: $VC, 260: 244, 261: $VS }, { 15: 164, 128: 16, 129: $Vv, 133: $Vn1, 134: $Vo1, 196: 166, 197: $VC, 260: 165, 261: $VS }, { 142: $Vl1 }, { 13: $Vh2, 130: $Vi2, 131: 383, 137: 384, 138: 386, 139: 388, 143: $Vj2 }, o($Vk2, [2, 350], { 306: 121, 309: 122, 298: 157, 304: 158, 333: $Vk1 }), { 298: 161, 299: $VX, 301: $VY, 304: 162, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vm1 }, { 196: 172, 197: $VC, 260: 171, 261: $VS }, { 46: 167, 196: 166, 197: $VC, 217: $VJ, 260: 165, 261: $VS }, { 13: [1, 391], 16: 390, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($Vl2, [2, 479]), o([1, 6, 11, 12, 13, 14, 27, 28, 36, 38, 42, 57, 60, 83, 86, 88, 98, 103, 107, 140, 142, 145, 146, 147, 159, 167, 179, 189, 193, 195, 204, 205, 212, 215, 223, 224, 234, 245, 247, 248, 257, 266, 276, 283, 287, 299, 300, 301, 307, 308, 314, 315, 316, 324, 325, 329, 330, 331, 332, 333], [2, 9]), o($VX1, [2, 127]), { 16: 392, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($VX1, [2, 129]), o($Vk2, [2, 531], { 306: 121, 309: 122, 298: 157, 304: 158, 333: $Vk1 }), o($Vk2, [2, 532], { 306: 121, 309: 122, 298: 157, 304: 158, 333: $Vk1 }), o($Vm2, [2, 533], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 331: $Vi1, 333: $Vk1 }), o($Vm2, [2, 534], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 331: $Vi1, 333: $Vk1 }), o($Vk2, [2, 535], { 306: 121, 309: 122, 298: 157, 304: 158, 333: $Vk1 }), o($Vk2, [2, 536], { 306: 121, 309: 122, 298: 157, 304: 158, 333: $Vk1 }), o($Vp1, [2, 537], { 102: 233, 40: 234, 10: 235, 11: $VH1, 27: $VJ1, 98: $VJ1, 212: $VJ1, 245: $VJ1, 248: $VJ1, 257: $VJ1, 283: $VJ1, 57: $VB1, 103: $Vk }), { 27: $Vq1, 98: $Vr1, 209: 175, 212: $VH, 244: 176, 245: $Vs1, 248: $Vt1, 257: $Vu1, 282: 174, 283: $Vv1 }, o($Vn2, $VG1), o($Vp1, [2, 538], { 102: 233, 40: 234, 10: 235, 11: $VH1, 27: $VJ1, 98: $VJ1, 212: $VJ1, 245: $VJ1, 248: $VJ1, 257: $VJ1, 283: $VJ1, 57: $VB1, 103: $Vk }), o($Vp1, [2, 539]), o($Vp1, [2, 540]), { 13: [1, 394], 16: 393, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($VF1, [2, 348], { 87: 325, 104: $V52, 105: $V62, 106: $VW1 }), o($VF1, [2, 349]), o($VY1, [2, 337]), { 5: 396, 12: $V1, 13: $V2, 322: [1, 395] }, { 16: 397, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($Vp1, [2, 469], { 292: 398, 293: 399, 294: $Vo2, 295: [1, 400] }), o($Vp1, [2, 484]), o($Vp1, [2, 492], { 305: [1, 402] }), { 13: [1, 403], 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, { 318: 404, 319: 405, 320: $Vp2 }, { 13: $VZ1, 34: 407 }, o($Vp1, [2, 378]), o($Vp1, [2, 239]), { 6: [1, 424], 18: 423, 27: [1, 422], 86: [1, 419], 89: [1, 416], 122: [1, 408], 142: [1, 425], 158: [1, 421], 169: [1, 409], 170: [1, 410], 171: [1, 411], 172: [1, 412], 173: [1, 413], 174: [1, 414], 176: [1, 415], 177: [1, 417], 178: [1, 418], 182: [1, 420], 206: $VE, 207: $VF }, o($Vq2, [2, 190], { 168: [1, 426] }), o($VK1, [2, 132]), o($VK1, [2, 133]), o($VK1, [2, 134]), o($VK1, [2, 135], { 36: $Vr2, 180: $Vs2 }), o($Vt2, [2, 215]), { 16: 429, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($Vy1, [2, 123], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($Vy1, [2, 124]), { 13: $VR1, 16: 359, 17: 208, 18: 271, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 28: [1, 430], 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 183: 431, 193: $VS1, 194: 269, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 235: $VU1, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 288: 266, 289: $VV1, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($Vy1, [2, 476], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($VP1, [2, 99]), o($Vu2, [2, 450]), o($Vv2, $Vw2, { 61: 434, 60: $Vx2, 159: [1, 432] }), o($Vy2, [2, 372], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), { 13: $VQ1, 16: 261, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 259: 435, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o([6, 13, 60, 205], $Vz2, { 306: 121, 309: 122, 298: 157, 304: 158, 286: 436, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 193: [1, 438], 195: $Ve1, 266: $Vf1, 287: [1, 437], 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($Vu2, [2, 448]), o([6, 13, 205], $Vw2, { 61: 439, 60: $VA2 }), o($VB2, [2, 454]), { 13: $VR1, 16: 359, 17: 208, 18: 271, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 183: 441, 193: $VS1, 194: 269, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 235: $VU1, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 288: 266, 289: $VV1, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 442, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($VB2, [2, 464]), o($VB2, [2, 465]), o($VB2, [2, 466]), { 16: 443, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($VF1, [2, 247]), o($V82, [2, 92]), { 16: 445, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 107: [1, 444], 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($VF1, [2, 69]), o($VF1, [2, 70]), o($VF1, [2, 71], { 10: 215, 11: $VH1 }), o($Vp1, [2, 277]), o($VF1, [2, 273]), o([60, 215], $VC2, { 214: 446, 228: 447, 231: 448, 232: 449, 233: 450, 33: 453, 36: $V9, 83: $Vd, 193: $VD2, 204: $Vw1, 234: $VE2 }), o($Vp1, [2, 272]), { 5: 454, 12: $V1, 13: $V2, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, o($VF2, [2, 480], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 300: [1, 455], 301: $VY, 307: $V_, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($VF2, [2, 482], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 300: [1, 456], 301: $VY, 307: $V_, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($Vp1, [2, 488]), o($VG2, [2, 489], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($Vp1, [2, 496]), o($VH2, [2, 498]), { 33: 293, 36: $V9, 83: $Vd, 204: $Vw1, 231: 295, 232: 294, 311: 457, 313: 292 }, { 33: 293, 36: $V9, 83: $Vd, 204: $Vw1, 231: 295, 232: 294, 311: 458, 313: 292 }, o($VH2, [2, 505], { 60: [1, 459] }), o($VI2, [2, 501], { 10: 460, 11: $VH1 }), o($VI2, [2, 503], { 10: 259, 11: $VH1 }), o($VI2, [2, 504]), o($Vp1, [2, 497]), { 16: 461, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 462, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($VJ2, [2, 382], { 34: 463, 13: $VZ1, 98: $VK2, 167: [1, 464] }), o($Vp1, [2, 383]), { 16: 466, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($VL2, [2, 387]), o($VL2, [2, 388]), o($VL2, [2, 389]), { 6: [1, 469], 14: [1, 467], 15: 473, 18: 475, 20: 471, 33: 485, 46: 479, 62: 89, 80: 476, 83: $Vd, 84: 486, 85: $Ve, 86: $V_1, 88: $Vg, 96: 43, 120: $Vu, 128: 16, 129: $Vv, 133: $Vn1, 134: $Vo1, 206: $VE, 207: $VF, 216: $VM2, 217: $VJ, 263: 468, 264: 470, 265: 472, 266: $VN2, 267: 480, 268: $VO2, 269: 481, 277: 482, 278: $VP2, 279: $VQ2 }, { 87: 274, 106: $VW1 }, o($VJ2, [2, 242], { 34: 487, 13: $VZ1, 167: [1, 488] }), o($Vp1, [2, 246]), o([6, 13, 38], $Vw2, { 61: 489, 60: $VR2 }), o($VS2, [2, 368]), { 16: 491, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($VS2, [2, 252]), o($VS2, [2, 253], { 140: [1, 492] }), o($VT2, [2, 263], { 142: [1, 493] }), o($VS2, [2, 258]), { 16: 494, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 495, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($VT2, [2, 266]), o($VU2, [2, 259], { 10: 496, 11: $VH1 }), o($VU2, [2, 261]), o($VU2, [2, 262]), o($VU2, [2, 95]), o($VF1, [2, 103]), o($Va2, [2, 110]), o($Va2, [2, 111]), o($Va2, [2, 112]), { 86: [1, 499], 98: [1, 498], 219: 497 }, o($VV2, $VC2, { 228: 447, 231: 448, 232: 449, 233: 450, 33: 453, 221: 500, 10: 501, 214: 502, 11: $VH1, 27: $VW2, 36: $V9, 83: $Vd, 86: $VX2, 98: $VX2, 193: $VD2, 204: $Vw1, 234: $VE2 }), o($VY2, [2, 293]), o($VY2, [2, 294]), o($VZ2, [2, 284]), o($VZ2, [2, 285]), o($VZ2, [2, 286]), { 16: 504, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($V81, [2, 6]), o($V91, [2, 12]), { 6: $V71, 9: 140, 14: [1, 505] }, o($Vm2, [2, 541], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 331: $Vi1, 333: $Vk1 }), o($Vm2, [2, 542], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 331: $Vi1, 333: $Vk1 }), o($V_2, [2, 543], { 306: 121, 309: 122, 298: 157, 304: 158, 331: $Vi1, 333: $Vk1 }), o($V_2, [2, 544], { 306: 121, 309: 122, 298: 157, 304: 158, 331: $Vi1, 333: $Vk1 }), o([1, 6, 12, 13, 14, 28, 38, 42, 60, 88, 107, 140, 159, 167, 179, 189, 193, 195, 205, 215, 223, 224, 247, 266, 287, 299, 300, 301, 307, 308, 316, 324, 325, 332], [2, 545], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 331: $Vi1, 333: $Vk1 }), o([1, 6, 12, 13, 14, 28, 38, 42, 60, 88, 107, 140, 159, 167, 179, 189, 193, 195, 205, 215, 223, 224, 247, 287, 299, 300, 301, 307, 308, 316, 324, 325], [2, 546], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 266: $Vf1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o([1, 6, 12, 13, 14, 28, 38, 42, 60, 88, 107, 140, 159, 179, 189, 193, 195, 205, 215, 223, 224, 247, 287, 299, 300, 301, 307, 308, 316, 324, 325], [2, 547], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 266: $Vf1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), { 16: 506, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o([1, 6, 12, 13, 14, 28, 38, 42, 60, 88, 107, 140, 159, 167, 179, 189, 193, 195, 205, 215, 223, 224, 247, 266, 287, 299, 300, 301, 307, 308, 316, 324, 325], [2, 549], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($V$2, [2, 529], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), { 140: [1, 507], 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, o($V03, [2, 329], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), { 16: 508, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($V$2, [2, 528], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($VF1, [2, 440]), o($VY1, [2, 338]), o($VY1, [2, 339]), { 247: [1, 509] }, o([205, 247], [2, 365], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), { 16: 356, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 246: 510, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($Vd2, [2, 325]), o($VB2, $Vz2, { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), { 28: [1, 511], 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, { 28: [1, 512], 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, o($VP1, [2, 100]), { 40: 513, 57: $VB1 }, { 36: [1, 515], 54: 514, 58: $VC1 }, { 39: [1, 516] }, { 13: $Ve2, 33: 372, 37: 517, 44: $Vf2, 59: 370, 62: 373, 63: 374, 83: $Vd, 88: $Vg, 89: $Vg2 }, { 40: 518, 57: $VB1 }, { 39: [1, 519] }, o($Vv2, $Vw2, { 61: 522, 38: [1, 520], 60: $V13 }), o($VS2, [2, 57]), { 13: $Ve2, 33: 372, 37: 523, 44: $Vf2, 59: 370, 62: 373, 63: 374, 83: $Vd, 88: $Vg, 89: $Vg2 }, o($VS2, [2, 63], { 42: [1, 524] }), o($VS2, [2, 64]), o($VS2, [2, 65]), o($VS2, [2, 67], { 42: [1, 525] }), o($VS2, [2, 94]), { 33: 526, 83: $Vd }, o($Vv2, $Vw2, { 61: 522, 38: [1, 527], 60: $V13 }), { 40: 528, 57: $VB1 }, { 33: 529, 83: $Vd }, o($V81, [2, 36]), o($V81, [2, 42], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), { 6: $V71, 9: 532, 132: [1, 530], 138: 531, 139: 388, 143: $Vj2 }, o($V23, [2, 145]), { 13: $Vh2, 130: $Vi2, 131: 533, 137: 384, 138: 386, 139: 388, 143: $Vj2 }, o($V23, [2, 149]), { 13: [1, 535], 135: 534 }, { 140: [1, 536], 142: [1, 537] }, o([140, 142], [2, 153]), o($V03, [2, 249], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), { 16: 538, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 38: [1, 539], 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, o($V03, [2, 550], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), { 16: 540, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 541, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($V33, [2, 526]), { 5: 542, 12: $V1, 13: $V2, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, o($Vp1, [2, 470], { 293: 543, 294: $Vo2 }), o($Vp1, [2, 471]), { 5: 545, 12: $V1, 13: $V2, 296: [1, 544] }, { 5: 546, 12: $V1, 13: $V2 }, { 5: 547, 12: $V1, 13: $V2 }, { 318: 548, 319: 405, 320: $Vp2 }, { 14: [1, 549], 305: [1, 550], 319: 551, 320: $Vp2 }, o($V43, [2, 519]), { 16: 553, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 290: 552, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($Vp1, [2, 30]), o($V53, [2, 130], { 123: 554, 80: 557, 13: [1, 555], 27: [1, 556], 120: $Vu }), o($Vq2, [2, 191]), o($Vq2, [2, 192]), o($Vq2, [2, 193]), o($Vq2, [2, 194]), o($Vq2, [2, 195]), { 13: $Vh2, 130: $Vi2, 131: 559, 137: 384, 138: 386, 139: 388, 143: $Vj2, 175: [1, 558] }, { 36: $VL1, 127: 563, 174: [1, 560], 179: [1, 561], 180: $VM1, 181: [1, 562] }, o($Vq2, [2, 199]), { 36: $VL1, 127: 564, 180: $VM1 }, { 36: $VL1, 127: 565, 180: $VM1 }, { 36: $VL1, 127: 566, 180: $VM1 }, o($Vq2, [2, 211], { 127: 567, 36: $VL1, 180: $VM1 }), { 13: $VR1, 16: 359, 17: 208, 18: 271, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 159: [1, 568], 181: $VB, 183: 569, 193: $VS1, 194: 269, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 235: $VU1, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 288: 266, 289: $VV1, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 13: $VR1, 16: 359, 17: 208, 18: 271, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 28: [1, 570], 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 183: 571, 193: $VS1, 194: 269, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 235: $VU1, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 288: 266, 289: $VV1, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($Vq2, [2, 212]), o($Vq2, [2, 213]), { 184: 572, 188: [1, 573] }, o($Vq2, [2, 189]), o($Vt2, [2, 217]), { 16: 574, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 38: [1, 575], 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, o($V63, [2, 444]), o([6, 13, 28], $Vw2, { 61: 576, 60: $VA2 }), o($Vl2, [2, 477], { 101: [1, 577] }), o($V73, $V83, { 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 31: 30, 47: 31, 48: 32, 80: 33, 236: 34, 23: 37, 24: 38, 200: 48, 249: 49, 67: 50, 68: 51, 253: 52, 225: 54, 199: 55, 116: 56, 255: 57, 251: 58, 64: 59, 208: 61, 209: 62, 210: 63, 241: 72, 49: 73, 321: 74, 298: 76, 302: 77, 304: 78, 260: 81, 196: 82, 232: 90, 231: 91, 99: 93, 46: 107, 92: 112, 125: 113, 33: 114, 84: 115, 243: 116, 306: 121, 309: 122, 94: 129, 102: 130, 17: 208, 19: 211, 16: 578, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 32: $V7, 36: $V9, 57: $Vb, 65: $Vc, 83: $Vd, 85: $Ve, 86: $Vf, 93: $Vh, 95: $Vi, 100: $Vj, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 117: $Vt, 120: $Vu, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 197: $VC, 204: $VD, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 237: $VK, 238: $VL, 239: $VM, 242: $VN, 250: $VO, 252: $VP, 254: $VQ, 256: $VR, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 299: $VX, 301: $VY, 303: $VZ, 307: $V_, 308: $V$, 317: $V01, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }), { 6: $V71, 9: 579, 13: $V93 }, o($V73, $Vw2, { 61: 581, 60: $Vx2 }), { 16: 582, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($Va3, [2, 451]), o($Va3, [2, 452]), { 6: $Vb3, 9: 584, 13: $Vc3, 205: [1, 583] }, o([6, 13, 14, 28, 205], $V83, { 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 31: 30, 47: 31, 48: 32, 80: 33, 236: 34, 23: 37, 24: 38, 200: 48, 249: 49, 67: 50, 68: 51, 253: 52, 225: 54, 199: 55, 116: 56, 255: 57, 251: 58, 64: 59, 208: 61, 209: 62, 210: 63, 241: 72, 49: 73, 321: 74, 298: 76, 302: 77, 304: 78, 260: 81, 196: 82, 232: 90, 231: 91, 99: 93, 46: 107, 92: 112, 125: 113, 33: 114, 84: 115, 243: 116, 306: 121, 309: 122, 94: 129, 102: 130, 17: 208, 19: 211, 194: 269, 18: 271, 16: 359, 288: 587, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 32: $V7, 36: $V9, 57: $Vb, 65: $Vc, 83: $Vd, 85: $Ve, 86: $Vf, 93: $Vh, 95: $Vi, 100: $Vj, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 117: $Vt, 120: $Vu, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 193: $VS1, 197: $VC, 204: $VD, 206: $VE, 207: $VF, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 235: $VU1, 237: $VK, 238: $VL, 239: $VM, 242: $VN, 250: $VO, 252: $VP, 254: $VQ, 256: $VR, 261: $VS, 284: $VT, 285: $VU, 289: $VV1, 291: $VV, 297: $VW, 299: $VX, 301: $VY, 303: $VZ, 307: $V_, 308: $V$, 317: $V01, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }), o($V73, $Vw2, { 61: 588, 60: $VA2 }), o($VB2, [2, 463], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($VB2, [2, 320], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($Vd3, [2, 113]), { 107: [1, 589], 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, { 60: $Ve3, 215: [1, 590] }, o($Vf3, [2, 300]), o($Vf3, [2, 309], { 142: [1, 592] }), o($Vf3, [2, 310], { 10: 259, 11: $VH1, 142: [1, 593] }), o($Vf3, [2, 311], { 142: [1, 594] }), o($Vf3, [2, 317], { 33: 453, 233: 595, 83: $Vd }), { 33: 453, 83: $Vd, 233: 596 }, o($Vg3, [2, 318], { 10: 597, 11: $VH1 }), o($V33, [2, 523]), { 16: 598, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 599, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($VH2, [2, 499]), o($VH2, [2, 500]), { 33: 293, 36: $V9, 83: $Vd, 204: $Vw1, 231: 295, 232: 294, 313: 600 }, o($VI2, [2, 502]), o([1, 6, 12, 13, 14, 28, 38, 42, 60, 88, 107, 140, 159, 179, 189, 193, 205, 215, 223, 224, 247, 287, 299, 301, 307, 308, 324], [2, 508], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 300: [1, 601], 316: [1, 602], 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($Vh3, [2, 509], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 300: [1, 603], 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($Vp1, [2, 381]), { 16: 604, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 33: 605, 83: $Vd, 84: 606, 85: $Ve, 86: $V_1 }, { 13: $VZ1, 34: 607, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, o($Vp1, [2, 392]), { 6: $V71, 9: 609, 14: [1, 608] }, { 15: 473, 18: 475, 20: 471, 33: 485, 46: 479, 62: 89, 80: 476, 83: $Vd, 84: 486, 85: $Ve, 86: $V_1, 88: $Vg, 96: 43, 120: $Vu, 128: 16, 129: $Vv, 133: $Vn1, 134: $Vo1, 206: $VE, 207: $VF, 216: $VM2, 217: $VJ, 263: 610, 264: 470, 265: 472, 266: $VN2, 267: 480, 268: $VO2, 269: 481, 277: 482, 278: $VP2, 279: $VQ2 }, o($Vi3, [2, 395]), o($Vi3, [2, 398], { 62: 89, 96: 163, 46: 479, 267: 480, 269: 481, 277: 482, 33: 485, 84: 486, 265: 611, 83: $Vd, 85: $Ve, 86: $V_1, 88: $Vg, 216: $VM2, 217: $VJ, 268: $VO2, 278: $VP2, 279: $VQ2 }), o($Vi3, [2, 399]), o($Vi3, [2, 401]), { 33: 303, 62: 302, 83: $Vd, 84: 304, 85: $Ve, 86: $V_1, 88: $Vg, 262: 612 }, o($Vi3, [2, 403]), o($Vi3, [2, 404]), { 33: 485, 46: 614, 83: $Vd, 84: 486, 85: $Ve, 86: $V_1, 217: $VJ, 267: 613, 269: 481, 277: 482, 278: $VP2, 279: $VQ2 }, { 33: 485, 46: 617, 83: $Vd, 84: 486, 85: $Ve, 86: $V_1, 216: [1, 615], 217: $VJ, 267: 616, 269: 481, 277: 482, 278: $VP2, 279: $VQ2 }, o($Vi3, [2, 411]), o($Vi3, [2, 412], { 272: 619, 273: 620, 42: $Vj3, 88: $Vk3, 179: $Vl3 }), o($Vm3, [2, 414], { 270: 623, 10: 624, 11: $VH1, 27: [1, 625], 142: [1, 626], 276: [1, 627] }), o($Vn3, [2, 432]), { 33: 485, 83: $Vd, 84: 486, 85: $Ve, 86: $V_1, 277: 628 }, { 33: 485, 83: $Vd, 84: 486, 85: $Ve, 86: $V_1, 277: 629 }, o($Vn3, [2, 437]), o($Vn3, [2, 438]), o($Vp1, [2, 243]), { 126: $V$1, 198: 630 }, { 6: $V71, 9: 632, 13: $Vo3, 38: [1, 631] }, o([6, 13, 14, 38], $V83, { 94: 129, 102: 130, 46: 312, 202: 313, 203: 314, 18: 315, 99: 318, 33: 319, 84: 320, 90: 321, 201: 634, 57: $Vb, 83: $Vd, 85: $Ve, 86: $V_1, 91: $V12, 95: $Vi, 100: $Vj, 103: $Vk, 158: $V22, 193: $V32, 204: $V42, 206: $VE, 207: $VF, 217: $VJ }), o($VS2, [2, 251], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), { 13: [1, 636], 16: 635, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 13: [1, 638], 16: 637, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 205: [1, 639], 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, { 145: $Va1, 146: $Vb1, 147: $Vc1, 159: [1, 640], 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, o($VU2, [2, 260]), { 33: 331, 62: 332, 83: $Vd, 84: 333, 85: $Ve, 86: $V_1, 88: $Vg, 204: $V72, 220: 641 }, o($Vp3, [2, 282]), o($Vp3, [2, 283]), { 222: 642, 223: $Vq3, 224: $Vr3 }, o($VZ2, [2, 288]), o($Vs3, [2, 280], { 60: $Ve3 }), o([28, 60], $VC2, { 228: 447, 231: 448, 232: 449, 233: 450, 33: 453, 214: 645, 36: $V9, 83: $Vd, 193: $VD2, 204: $Vw1, 234: $VE2 }), { 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 205: [1, 646], 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, o($V91, [2, 13]), o($Vk2, [2, 548], { 306: 121, 309: 122, 298: 157, 304: 158, 333: $Vk1 }), { 16: 647, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 6: $V71, 9: 649, 14: $Vt3, 82: 648, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, o($VY1, [2, 340]), { 205: [1, 651] }, o($Vy1, [2, 26]), o($Vy1, [2, 28]), o($V81, [2, 47]), { 39: [1, 652] }, { 13: $Ve2, 33: 372, 37: 653, 44: $Vf2, 59: 370, 62: 373, 63: 374, 83: $Vd, 88: $Vg, 89: $Vg2 }, { 40: 654, 57: $VB1 }, o($Vv2, $Vw2, { 61: 522, 38: [1, 655], 60: $V13 }), o($V81, [2, 49]), { 40: 656, 57: $VB1 }, { 39: [1, 657] }, o($V73, $V83, { 33: 372, 62: 373, 63: 374, 59: 658, 44: $Vf2, 83: $Vd, 88: $Vg, 89: $Vg2 }), { 6: $Vu3, 13: $Vv3 }, o($V73, $Vw2, { 61: 661, 60: $V13 }), { 33: 662, 83: $Vd }, { 33: 663, 83: $Vd }, { 39: [2, 56] }, o($V81, [2, 31], { 39: [1, 664] }), o($V81, [2, 33]), { 39: [1, 665] }, o([1, 6, 13, 14, 28, 60], [2, 137]), o($V23, [2, 146]), { 130: $Vi2, 137: 666, 138: 386, 139: 388, 143: $Vj2 }, { 6: $V71, 9: 668, 14: $Vt3, 82: 667, 138: 531, 139: 388, 143: $Vj2 }, { 132: [1, 669] }, { 6: $V71, 9: 670, 13: $Vh2, 130: $Vi2, 131: 671, 137: 384, 138: 386, 139: 388, 143: $Vj2 }, { 36: $Vw3, 40: 681, 57: $VB1, 100: $Vx3, 141: 672, 148: 673, 149: 674, 155: 682, 157: 675, 158: $Vy3, 160: $Vz3, 161: $VA3, 162: $VB3, 163: $VC3, 164: $VD3, 165: $VE3, 166: $VF3, 167: $VG3 }, { 36: $Vw3, 40: 681, 57: $VB1, 100: $Vx3, 141: 689, 148: 673, 149: 674, 155: 682, 157: 675, 158: $Vy3, 160: $Vz3, 161: $VA3, 162: $VB3, 163: $VC3, 164: $VD3, 165: $VE3, 166: $VF3, 167: $VG3 }, { 6: $V71, 9: 649, 14: $Vt3, 82: 690, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, o($VX1, [2, 128]), { 6: $V71, 9: 649, 14: $Vt3, 82: 691, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, { 5: 692, 12: $V1, 13: $V2, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, o($V33, [2, 525]), o($Vp1, [2, 472]), { 5: 693, 12: $V1, 13: $V2 }, o($VH3, [2, 475]), o($Vp1, [2, 473]), o($Vp1, [2, 493]), { 14: [1, 694], 305: [1, 695], 319: 551, 320: $Vp2 }, o($Vp1, [2, 517]), { 5: 696, 12: $V1, 13: $V2 }, o($V43, [2, 520]), { 5: 697, 12: $V1, 13: $V2, 60: [1, 698] }, o($VI3, [2, 467], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($Vp1, [2, 131]), { 13: $VJ3, 14: [1, 699], 16: 703, 17: 208, 18: 707, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 128: 708, 129: $Vv, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 190: 700, 191: 701, 193: $VK3, 194: 705, 195: $VL3, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 235: $VU1, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 13: $VJ3, 16: 703, 17: 208, 18: 707, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 128: 708, 129: $Vv, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 190: 709, 191: 701, 193: $VK3, 194: 705, 195: $VL3, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 235: $VU1, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($Vp1, [2, 225]), o($Vq2, [2, 196]), { 6: $V71, 9: 532, 138: 531, 139: 388, 143: $Vj2, 175: [1, 710] }, { 13: $Vh2, 130: $Vi2, 131: 711, 137: 384, 138: 386, 139: 388, 143: $Vj2 }, { 180: [1, 712] }, { 180: [1, 713] }, o($Vq2, [2, 204], { 36: $Vr2, 180: $Vs2 }), o($Vq2, [2, 200], { 36: $Vr2, 180: $Vs2 }), o($Vq2, [2, 201], { 36: $Vr2, 180: $Vs2 }), o($Vq2, [2, 205], { 36: $Vr2, 180: $Vs2 }), o($Vq2, [2, 206], { 36: $Vr2, 180: $Vs2 }), o($Vq2, [2, 207]), o($Vv2, $Vw2, { 61: 715, 60: $VA2, 159: [1, 714] }), o($Vq2, [2, 209]), o($Vv2, $Vw2, { 61: 715, 28: [1, 716], 60: $VA2 }), o($Vq2, [2, 214]), { 16: 717, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 38: [1, 718], 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, o($Vt2, [2, 216]), { 6: $Vb3, 9: 584, 13: $Vc3, 28: [1, 719] }, o($Vl2, [2, 478]), o($Vy2, [2, 373], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), { 16: 720, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 13: $VQ1, 16: 261, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 259: 721, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 6: $V71, 9: 723, 13: $V93, 14: $Vt3, 82: 722 }, { 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 205: [1, 724], 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, o($Vu2, [2, 449]), { 16: 359, 17: 208, 18: 271, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 193: $VS1, 194: 269, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 235: $VU1, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 288: 725, 289: $VV1, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o([14, 25, 26, 29, 30, 32, 36, 57, 65, 83, 85, 86, 93, 95, 100, 103, 108, 109, 110, 111, 112, 113, 114, 115, 117, 120, 133, 134, 146, 147, 158, 181, 193, 197, 204, 206, 207, 211, 212, 216, 217, 235, 237, 238, 239, 242, 250, 252, 254, 256, 261, 284, 285, 289, 291, 297, 299, 301, 303, 307, 308, 317, 322, 326, 327, 328, 329, 330], $Vb2, { 192: [1, 726] }), { 13: $VR1, 16: 359, 17: 208, 18: 271, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 183: 727, 193: $VS1, 194: 269, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 235: $VU1, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 288: 266, 289: $VV1, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($VB2, [2, 455]), { 6: $Vb3, 9: 729, 13: $Vc3, 14: $Vt3, 82: 728 }, o($Vd3, [2, 114]), { 5: 730, 12: $V1, 13: $V2 }, { 33: 453, 36: $V9, 83: $Vd, 193: $VD2, 204: $Vw1, 228: 731, 231: 448, 232: 449, 233: 450, 234: $VE2 }, { 16: 733, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 230: 732, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 733, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 230: 734, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 733, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 230: 735, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($Vf3, [2, 312]), o($Vf3, [2, 313]), o($Vg3, [2, 319]), o($VG2, [2, 481], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($VG2, [2, 483], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($VH2, [2, 506], { 60: [1, 736] }), { 16: 737, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 738, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 739, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o([1, 6, 12, 14, 28, 38, 42, 60, 88, 107, 140, 159, 179, 189, 193, 205, 215, 223, 224, 247, 287, 300, 308, 316, 324], [2, 384], { 306: 121, 309: 122, 298: 157, 304: 158, 34: 740, 13: $VZ1, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($VL2, [2, 390]), o($VL2, [2, 391]), o($Vp1, [2, 386]), o($Vp1, [2, 393]), o($Vi3, [2, 397], { 128: 16, 96: 43, 62: 89, 20: 471, 265: 472, 15: 473, 18: 475, 80: 476, 46: 479, 267: 480, 269: 481, 277: 482, 33: 485, 84: 486, 264: 741, 83: $Vd, 85: $Ve, 86: $V_1, 88: $Vg, 120: $Vu, 129: $Vv, 133: $Vn1, 134: $Vo1, 206: $VE, 207: $VF, 216: $VM2, 217: $VJ, 266: $VN2, 268: $VO2, 278: $VP2, 279: $VQ2 }), { 6: $V71, 9: 609, 14: [1, 742] }, o($Vi3, [2, 400]), o($Vi3, [2, 402], { 98: $VK2 }), o($Vi3, [2, 405], { 272: 619, 273: 620, 42: $Vj3, 88: $Vk3, 179: $Vl3 }), o($Vi3, [2, 408]), { 33: 485, 46: 744, 83: $Vd, 84: 486, 85: $Ve, 86: $V_1, 217: $VJ, 267: 743, 269: 481, 277: 482, 278: $VP2, 279: $VQ2 }, o($Vi3, [2, 407], { 272: 619, 273: 620, 42: $Vj3, 88: $Vk3, 179: $Vl3 }), o($Vi3, [2, 409]), { 33: 114, 36: $V9, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 70: 747, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 88: $Vk3, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 116: 56, 117: $Vt, 125: 113, 158: $VA, 179: $Vl3, 199: 55, 200: 228, 204: $VD, 225: 54, 231: 91, 232: 90, 241: 748, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 253: 52, 254: $VQ, 255: 57, 256: $VR, 271: 745, 272: 746, 273: 620, 284: $VT, 285: $VU }, o($Vm3, [2, 416]), o($Vm3, [2, 422], { 209: 750, 97: 751, 27: $VO1, 98: [1, 753], 142: [1, 749], 212: $VH, 245: [1, 752] }), o($VM3, [2, 417]), { 27: [1, 754] }, { 16: 755, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($Vn3, [2, 435]), { 28: [1, 756] }, o($Va3, [2, 430]), o($Va3, [2, 431]), o($Vn3, [2, 433]), o($Vn3, [2, 434]), o($V53, [2, 244], { 34: 757, 13: $VZ1 }), o([1, 6, 12, 13, 14, 27, 28, 38, 42, 60, 88, 98, 107, 140, 142, 145, 146, 147, 159, 167, 179, 189, 193, 195, 205, 212, 215, 223, 224, 245, 247, 248, 257, 266, 283, 287, 299, 300, 301, 307, 308, 314, 315, 316, 324, 325, 331, 332, 333], [2, 366]), { 18: 315, 33: 319, 46: 312, 57: $Vb, 83: $Vd, 84: 320, 85: $Ve, 86: $V_1, 90: 321, 91: $V12, 94: 129, 95: $Vi, 99: 318, 100: $Vj, 102: 130, 103: $Vk, 158: $V22, 193: $V32, 201: 758, 202: 313, 203: 314, 204: $V42, 206: $VE, 207: $VF, 217: $VJ }, o([6, 13, 14, 60], $V02, { 94: 129, 102: 130, 201: 310, 46: 312, 202: 313, 203: 314, 18: 315, 99: 318, 33: 319, 84: 320, 90: 321, 258: 759, 57: $Vb, 83: $Vd, 85: $Ve, 86: $V_1, 91: $V12, 95: $Vi, 100: $Vj, 103: $Vk, 158: $V22, 193: $V32, 204: $V42, 206: $VE, 207: $VF, 217: $VJ }), o($VS2, [2, 369]), o($VS2, [2, 254], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), { 16: 760, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($VS2, [2, 256], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), { 16: 761, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($VT2, [2, 264]), o($VT2, [2, 265]), o($VV2, $VC2, { 228: 447, 231: 448, 232: 449, 233: 450, 33: 453, 10: 501, 214: 502, 221: 762, 11: $VH1, 27: $VW2, 36: $V9, 83: $Vd, 193: $VD2, 204: $Vw1, 234: $VE2 }), o($Vp1, [2, 279]), { 5: 763, 12: $V1, 13: $V2, 212: [1, 764] }, o($Vp1, [2, 291]), { 28: [1, 765], 60: $Ve3 }, o($VZ2, [2, 287]), o($V03, [2, 530], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($Vp1, [2, 330]), { 14: $VN3 }, o($VO3, [2, 461]), o($VY1, [2, 341]), { 40: 767, 57: $VB1 }, o($Vv2, $Vw2, { 61: 522, 38: [1, 768], 60: $V13 }), o($V81, [2, 48]), { 39: [1, 769] }, o($V81, [2, 50]), { 40: 770, 57: $VB1 }, o($VS2, [2, 58]), { 33: 372, 44: $Vf2, 59: 771, 62: 373, 63: 374, 83: $Vd, 88: $Vg, 89: $Vg2 }, { 13: $Ve2, 33: 372, 37: 772, 44: $Vf2, 59: 370, 62: 373, 63: 374, 83: $Vd, 88: $Vg, 89: $Vg2 }, { 6: [1, 774], 13: $Vv3, 14: [1, 773] }, o($VS2, [2, 66]), o($VS2, [2, 68]), { 40: 775, 57: $VB1 }, { 40: 776, 57: $VB1 }, o($V23, [2, 147]), o($V23, [2, 148]), { 14: $VN3, 130: $Vi2, 137: 666, 138: 386, 139: 388, 143: $Vj2 }, o($V23, [2, 150]), { 14: [1, 777] }, { 6: $V71, 9: 668, 14: $Vt3, 82: 778, 138: 531, 139: 388, 143: $Vj2 }, o($V23, [2, 151], { 60: $VP3 }), o($VQ3, [2, 157], { 157: 675, 40: 681, 155: 682, 144: 780, 149: 781, 36: $Vw3, 57: $VB1, 100: $Vx3, 145: $VR3, 146: $VS3, 147: $VT3, 150: $VU3, 158: $Vy3, 160: $Vz3, 161: $VA3, 162: $VB3, 163: $VC3, 164: $VD3, 165: $VE3, 166: $VF3, 167: $VG3 }), o($VV3, [2, 159]), o($VW3, [2, 177], { 156: [1, 786] }), o($VW3, [2, 178]), o($VW3, [2, 179]), o($VW3, [2, 180]), o($VW3, [2, 181]), o($VW3, [2, 182]), o($VW3, [2, 183]), o($VW3, [2, 184], { 156: [1, 787] }), o($VW3, [2, 185]), { 158: [1, 788] }, o($VW3, [2, 187]), { 36: $Vw3, 40: 681, 57: $VB1, 100: $Vx3, 149: 789, 155: 682, 157: 675, 158: $Vy3, 160: $Vz3, 161: $VA3, 162: $VB3, 163: $VC3, 164: $VD3, 165: $VE3, 166: $VF3, 167: $VG3 }, { 36: $Vw3, 40: 681, 57: $VB1, 100: $Vx3, 149: 791, 151: 790, 152: 792, 155: 682, 157: 675, 158: $Vy3, 160: $Vz3, 161: $VA3, 162: $VB3, 163: $VC3, 164: $VD3, 165: $VE3, 166: $VF3, 167: $VG3 }, { 16: 793, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($V23, [2, 152], { 60: $VP3 }), o($Vp1, [2, 250]), o($Vp1, [2, 551]), o($V33, [2, 524]), o($VH3, [2, 474]), o($Vp1, [2, 515]), { 5: 794, 12: $V1, 13: $V2 }, { 14: [1, 795] }, o($V43, [2, 521], { 6: [1, 796] }), { 16: 797, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($Vp1, [2, 222]), o($Vv2, $Vw2, { 61: 800, 14: [1, 798], 60: $VX3 }), o($VY3, [2, 226]), { 13: $VJ3, 16: 703, 17: 208, 18: 707, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 128: 708, 129: $Vv, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 190: 801, 191: 701, 193: $VK3, 194: 705, 195: $VL3, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 235: $VU1, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($VY3, [2, 232], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), { 16: 802, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($VY3, [2, 234]), o($VY3, [2, 235]), o($VY3, [2, 236]), o($VY3, [2, 237]), o($Vv2, $Vw2, { 61: 800, 28: [1, 803], 60: $VX3 }), o($Vq2, [2, 197]), { 6: $V71, 9: 532, 138: 531, 139: 388, 143: $Vj2, 175: [1, 804] }, o($Vq2, [2, 202]), o($Vq2, [2, 203]), o($Vq2, [2, 208]), { 6: $Vb3, 9: 584, 13: $Vc3 }, o($Vq2, [2, 210]), { 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 189: [1, 805], 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, o($Vt2, [2, 218]), o($V63, [2, 445]), o($Vy2, [2, 374], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($V73, $Vw2, { 61: 806, 60: $Vx2 }), o($Vy2, [2, 375]), { 14: $VN3, 16: 720, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($VF1, [2, 453]), o($VB2, [2, 456]), { 6: $V71, 9: 807 }, o($V73, $Vw2, { 61: 808, 60: $VA2 }), o($VB2, [2, 458]), { 14: $VN3, 16: 359, 17: 208, 18: 271, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 193: $VS1, 194: 269, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 235: $VU1, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 288: 725, 289: $VV1, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($VF1, [2, 274]), o($Vf3, [2, 301]), o($Vf3, [2, 315]), o($Vf3, [2, 308], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($Vf3, [2, 316]), o($Vf3, [2, 314]), { 33: 293, 36: $V9, 83: $Vd, 204: $Vw1, 231: 295, 232: 294, 313: 809 }, o([1, 6, 12, 13, 14, 28, 38, 42, 60, 88, 107, 140, 159, 179, 189, 193, 205, 215, 223, 224, 247, 287, 299, 300, 301, 307, 308, 324], [2, 510], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 316: [1, 810], 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($Vh3, [2, 512], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 300: [1, 811], 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($V03, [2, 511], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($Vp1, [2, 385]), o($Vi3, [2, 396]), o($Vp1, [2, 394]), o($Vi3, [2, 406], { 272: 619, 273: 620, 42: $Vj3, 88: $Vk3, 179: $Vl3 }), o($Vi3, [2, 410]), o($Vm3, [2, 415]), o($Vm3, [2, 425]), o($Vm3, [2, 426], { 282: 174, 209: 175, 244: 176, 27: $Vq1, 98: $Vr1, 212: $VH, 245: $Vs1, 248: $Vt1, 257: $Vu1, 283: $Vv1 }), o($Vn2, $VJ1, { 102: 233, 40: 234, 10: 235, 11: $VH1, 57: $VB1, 103: $Vk }), { 16: 812, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($Vm3, [2, 424]), o($VM3, [2, 419]), { 13: $VR1, 16: 359, 17: 208, 18: 271, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 183: 813, 193: $VS1, 194: 269, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 235: $VU1, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 288: 266, 289: $VV1, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 33: 814, 83: $Vd }, { 16: 815, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($Vm3, [2, 413], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($Vn3, [2, 436]), o($Vp1, [2, 245]), o($VS2, [2, 370]), o($V73, $Vw2, { 61: 816, 60: $VR2 }), { 6: $V71, 9: 649, 14: $Vt3, 82: 817, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, { 6: $V71, 9: 649, 14: $Vt3, 82: 818, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, { 222: 819, 223: $Vq3, 224: $Vr3 }, o($Vp1, [2, 289]), { 5: 820, 12: $V1, 13: $V2 }, o($Vs3, [2, 281]), o($VO3, [2, 460]), o($V81, [2, 53]), { 39: [1, 821] }, { 40: 822, 57: $VB1 }, o($V81, [2, 51]), o($VS2, [2, 59]), o($V73, $Vw2, { 61: 823, 60: $V13 }), o($VS2, [2, 60]), { 14: [1, 824], 33: 372, 44: $Vf2, 59: 771, 62: 373, 63: 374, 83: $Vd, 88: $Vg, 89: $Vg2 }, o($V81, [2, 32]), o($V81, [2, 34]), { 132: [2, 141] }, { 132: [2, 142] }, { 36: $Vw3, 40: 681, 57: $VB1, 100: $Vx3, 148: 825, 149: 674, 155: 682, 157: 675, 158: $Vy3, 160: $Vz3, 161: $VA3, 162: $VB3, 163: $VC3, 164: $VD3, 165: $VE3, 166: $VF3, 167: $VG3 }, o($VV3, [2, 160]), o($VV3, [2, 161]), { 36: $Vw3, 40: 681, 57: $VB1, 100: $Vx3, 149: 826, 155: 682, 157: 675, 158: $Vy3, 160: $Vz3, 161: $VA3, 162: $VB3, 163: $VC3, 164: $VD3, 165: $VE3, 166: $VF3, 167: $VG3 }, o($VW3, [2, 154]), o($VW3, [2, 155]), o($VW3, [2, 156]), o($VZ3, [2, 176]), o($VZ3, [2, 174]), { 36: $Vw3, 40: 681, 57: $VB1, 100: $Vx3, 149: 829, 153: 827, 154: 828, 155: 682, 157: 675, 158: $Vy3, 160: $Vz3, 161: $VA3, 162: $VB3, 163: $VC3, 164: $VD3, 165: $VE3, 166: $VF3, 167: $VG3 }, o($VW3, [2, 188]), { 159: [1, 830] }, { 144: 831, 145: $VR3, 146: $VS3, 147: $VT3, 159: [2, 163] }, { 144: 832, 145: $VR3, 146: $VS3, 147: $VT3, 159: [2, 164] }, { 38: [1, 833], 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, { 6: $V71, 9: 649, 14: $Vt3, 82: 834 }, o($Vp1, [2, 518]), o($V43, [2, 522]), o($VI3, [2, 468], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($Vp1, [2, 223]), o($V73, $V83, { 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 31: 30, 47: 31, 48: 32, 80: 33, 236: 34, 23: 37, 24: 38, 200: 48, 249: 49, 67: 50, 68: 51, 253: 52, 225: 54, 199: 55, 116: 56, 255: 57, 251: 58, 64: 59, 208: 61, 209: 62, 210: 63, 241: 72, 49: 73, 321: 74, 298: 76, 302: 77, 304: 78, 260: 81, 196: 82, 232: 90, 231: 91, 99: 93, 46: 107, 92: 112, 125: 113, 33: 114, 84: 115, 243: 116, 306: 121, 309: 122, 94: 129, 102: 130, 17: 208, 19: 211, 16: 703, 194: 705, 18: 707, 128: 708, 191: 835, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 32: $V7, 36: $V9, 57: $Vb, 65: $Vc, 83: $Vd, 85: $Ve, 86: $Vf, 93: $Vh, 95: $Vi, 100: $Vj, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 117: $Vt, 120: $Vu, 129: $Vv, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 193: $VK3, 195: $VL3, 197: $VC, 204: $VD, 206: $VE, 207: $VF, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 235: $VU1, 237: $VK, 238: $VL, 239: $VM, 242: $VN, 250: $VO, 252: $VP, 254: $VQ, 256: $VR, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 299: $VX, 301: $VY, 303: $VZ, 307: $V_, 308: $V$, 317: $V01, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }), { 6: $V_3, 9: 836, 13: $V$3 }, o($V73, $Vw2, { 61: 839, 60: $VX3 }), o($VY3, [2, 233], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($Vp1, [2, 224]), o($Vq2, [2, 198]), o($Vq2, [2, 221]), { 6: $V71, 9: 723, 13: $V93, 14: $Vt3, 82: 840 }, { 16: 359, 17: 208, 18: 271, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 193: $VS1, 194: 269, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 235: $VU1, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 288: 841, 289: $VV1, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 6: $Vb3, 9: 729, 13: $Vc3, 14: $Vt3, 82: 842 }, o($VH2, [2, 507]), { 16: 843, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 16: 844, 17: 208, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($Vm3, [2, 423], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 299: $VX, 301: $VY, 307: $V_, 308: $V$, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($Vv2, $Vw2, { 61: 715, 60: $VA2, 247: [1, 845] }), o($VM3, [2, 421]), { 28: [1, 846], 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 298: 157, 299: $VX, 301: $VY, 304: 158, 306: 121, 307: $V_, 308: $V$, 309: 122, 324: $Vg1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }, { 6: $V71, 9: 848, 13: $Vo3, 14: $Vt3, 82: 847 }, o($VS2, [2, 255]), o($VS2, [2, 257]), o($Vp1, [2, 278]), o($Vp1, [2, 290]), { 40: 849, 57: $VB1 }, o($V81, [2, 52]), { 6: $Vu3, 13: $Vv3, 14: [1, 850] }, o($VS2, [2, 61]), o($VQ3, [2, 158], { 157: 675, 40: 681, 155: 682, 144: 780, 149: 781, 36: $Vw3, 57: $VB1, 100: $Vx3, 145: $VR3, 146: $VS3, 147: $VT3, 150: $VU3, 158: $Vy3, 160: $Vz3, 161: $VA3, 162: $VB3, 163: $VC3, 164: $VD3, 165: $VE3, 166: $VF3, 167: $VG3 }), o($VV3, [2, 162]), { 60: [1, 852], 159: [1, 851] }, o($V04, [2, 167], { 157: 675, 40: 681, 155: 682, 144: 853, 149: 854, 36: $Vw3, 57: $VB1, 100: $Vx3, 145: $VR3, 146: $VS3, 147: $VT3, 150: $V14, 158: $Vy3, 160: $Vz3, 161: $VA3, 162: $VB3, 163: $VC3, 164: $VD3, 165: $VE3, 166: $VF3, 167: $VG3 }), o($V24, [2, 169]), o($VZ3, [2, 175]), { 36: $Vw3, 40: 681, 57: $VB1, 100: $Vx3, 149: 856, 155: 682, 157: 675, 158: $Vy3, 160: $Vz3, 161: $VA3, 162: $VB3, 163: $VC3, 164: $VD3, 165: $VE3, 166: $VF3, 167: $VG3 }, { 36: $Vw3, 40: 681, 57: $VB1, 100: $Vx3, 149: 857, 155: 682, 157: 675, 158: $Vy3, 160: $Vz3, 161: $VA3, 162: $VB3, 163: $VC3, 164: $VD3, 165: $VE3, 166: $VF3, 167: $VG3 }, o($VZ3, [2, 173]), o($Vp1, [2, 516]), o($VY3, [2, 227]), { 16: 703, 17: 208, 18: 707, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 128: 708, 129: $Vv, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 191: 858, 193: $VK3, 194: 705, 195: $VL3, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 235: $VU1, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o([14, 25, 26, 29, 30, 32, 36, 57, 65, 83, 85, 86, 93, 95, 100, 103, 108, 109, 110, 111, 112, 113, 114, 115, 117, 120, 129, 133, 134, 146, 147, 158, 181, 193, 195, 197, 204, 206, 207, 211, 212, 216, 217, 235, 237, 238, 239, 242, 250, 252, 254, 256, 261, 284, 285, 291, 297, 299, 301, 303, 307, 308, 317, 322, 326, 327, 328, 329, 330], $Vb2, { 192: [1, 859] }), { 13: $VJ3, 16: 703, 17: 208, 18: 707, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 128: 708, 129: $Vv, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 190: 860, 191: 701, 193: $VK3, 194: 705, 195: $VL3, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 235: $VU1, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 6: $V_3, 9: 862, 13: $V$3, 14: $Vt3, 82: 861 }, o($Vy2, [2, 376]), o($VB2, [2, 457]), o($VB2, [2, 459]), o($V03, [2, 513], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($V03, [2, 514], { 306: 121, 309: 122, 298: 157, 304: 158, 145: $Va1, 146: $Vb1, 147: $Vc1, 167: $Vd1, 195: $Ve1, 266: $Vf1, 325: $Vh1, 331: $Vi1, 332: $Vj1, 333: $Vk1 }), o($VM3, [2, 420]), o($VM3, [2, 418]), o($VS2, [2, 371]), { 14: $VN3, 18: 315, 33: 319, 46: 312, 57: $Vb, 83: $Vd, 84: 320, 85: $Ve, 86: $V_1, 90: 321, 91: $V12, 94: 129, 95: $Vi, 99: 318, 100: $Vj, 102: 130, 103: $Vk, 158: $V22, 193: $V32, 201: 758, 202: 313, 203: 314, 204: $V42, 206: $VE, 207: $VF, 217: $VJ }, o($V81, [2, 54]), o($VS2, [2, 62]), o($VW3, [2, 186]), { 36: $Vw3, 40: 681, 57: $VB1, 100: $Vx3, 149: 829, 154: 863, 155: 682, 157: 675, 158: $Vy3, 160: $Vz3, 161: $VA3, 162: $VB3, 163: $VC3, 164: $VD3, 165: $VE3, 166: $VF3, 167: $VG3 }, o($V24, [2, 170]), o($V24, [2, 171]), { 36: $Vw3, 40: 681, 57: $VB1, 100: $Vx3, 149: 864, 155: 682, 157: 675, 158: $Vy3, 160: $Vz3, 161: $VA3, 162: $VB3, 163: $VC3, 164: $VD3, 165: $VE3, 166: $VF3, 167: $VG3 }, o($V34, [2, 165]), o($V34, [2, 166]), o($VY3, [2, 228]), { 6: $V71, 9: 865 }, o($V73, $Vw2, { 61: 866, 60: $VX3 }), o($VY3, [2, 230]), { 14: $VN3, 16: 703, 17: 208, 18: 707, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 128: 708, 129: $Vv, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 191: 858, 193: $VK3, 194: 705, 195: $VL3, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 235: $VU1, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, o($V04, [2, 168], { 157: 675, 40: 681, 155: 682, 144: 853, 149: 854, 36: $Vw3, 57: $VB1, 100: $Vx3, 145: $VR3, 146: $VS3, 147: $VT3, 150: $V14, 158: $Vy3, 160: $Vz3, 161: $VA3, 162: $VB3, 163: $VC3, 164: $VD3, 165: $VE3, 166: $VF3, 167: $VG3 }), o($V24, [2, 172]), { 16: 703, 17: 208, 18: 707, 19: 211, 23: 37, 24: 38, 25: $V3, 26: $V4, 29: $V5, 30: $V6, 31: 30, 32: $V7, 33: 114, 36: $V9, 46: 107, 47: 31, 48: 32, 49: 73, 57: $Vb, 64: 59, 65: $Vc, 67: 50, 68: 51, 69: 19, 70: 20, 71: 21, 72: 22, 73: 23, 74: 24, 75: 25, 76: 26, 77: 27, 78: 28, 79: 29, 80: 33, 83: $Vd, 84: 115, 85: $Ve, 86: $Vf, 92: 112, 93: $Vh, 94: 129, 95: $Vi, 99: 93, 100: $Vj, 102: 130, 103: $Vk, 108: $Vl, 109: $Vm, 110: $Vn, 111: $Vo, 112: $Vp, 113: $Vq, 114: $Vr, 115: $Vs, 116: 56, 117: $Vt, 120: $Vu, 125: 113, 128: 708, 129: $Vv, 133: $VD1, 134: $VE1, 146: $Vy, 147: $Vz, 158: $VA, 181: $VB, 191: 867, 193: $VK3, 194: 705, 195: $VL3, 196: 82, 197: $VC, 199: 55, 200: 48, 204: $VD, 206: $VE, 207: $VF, 208: 61, 209: 62, 210: 63, 211: $VG, 212: $VH, 216: $VI, 217: $VJ, 225: 54, 231: 91, 232: 90, 235: $VU1, 236: 34, 237: $VK, 238: $VL, 239: $VM, 241: 72, 242: $VN, 243: 116, 249: 49, 250: $VO, 251: 58, 252: $VP, 253: 52, 254: $VQ, 255: 57, 256: $VR, 260: 81, 261: $VS, 284: $VT, 285: $VU, 291: $VV, 297: $VW, 298: 76, 299: $VX, 301: $VY, 302: 77, 303: $VZ, 304: 78, 306: 121, 307: $V_, 308: $V$, 309: 122, 317: $V01, 321: 74, 322: $V11, 326: $V21, 327: $V31, 328: $V41, 329: $V51, 330: $V61 }, { 6: $V_3, 9: 862, 13: $V$3, 14: $Vt3, 82: 868 }, o($VY3, [2, 229]), o($VY3, [2, 231])],
        defaultActions: { 142: [2, 3], 179: [2, 443], 526: [2, 56], 777: [2, 141], 778: [2, 142] },
        parseError: function parseError(str, hash) {
          if (hash.recoverable) {
            this.trace(str);
          } else {
            throw new Error(str);
          }
        },
        parse: function parse4(input, script = null) {
          var self2 = this, stack = [0], tstack2 = [], vstack = [null], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF2 = 1;
          var lexer2 = Object.create(this.lexer);
          var yy = this.yy;
          lexer2.setInput(input, yy);
          if (typeof yy.parseError === "function") {
            this.parseError = yy.parseError;
          } else {
            this.parseError = Object.getPrototypeOf(this).parseError;
          }
          function popStack(n) {
            stack.length = stack.length - 2 * n;
            vstack.length = vstack.length - n;
          }
          var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p2, len, newState, expected;
          function handleError() {
            var error_rule_depth;
            var errStr = "";
            function locateNearestErrorRecoveryRule(state2) {
              var stack_probe = stack.length - 1;
              var depth = 0;
              for (; ; ) {
                if (TERROR.toString() in table[state2]) {
                  return depth;
                }
                if (state2 === 0 || stack_probe < 2) {
                  return false;
                }
                stack_probe -= 2;
                state2 = stack[stack_probe];
                ++depth;
              }
            }
            if (!recovering) {
              error_rule_depth = locateNearestErrorRecoveryRule(state);
              expected = [];
              var tsym = lexer2.yytext;
              var lastToken = tsym;
              var tok = self2.terminals_[symbol] || symbol;
              let tidx = lexer2.tokens.indexOf(tsym);
              let ttok = tsym;
              while (ttok && ttok._loc == -1) {
                ttok = lexer2.tokens[--tidx];
              }
              var tloc = ttok ? ttok._loc : -1;
              var tend = tloc > -1 ? tloc + (ttok._len || 0) : -1;
              var tpos = tloc != -1 ? "[" + ttok._loc + ":" + ttok._len + "]" : "[0:0]";
              if (lexer2.showPosition) {
                errStr = "Parse error at " + tpos + ":\n" + lexer2.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + tok + "'";
              } else {
                errStr = "Unexpected " + (symbol == EOF2 ? "end of input" : "'" + tok + "'");
              }
              if (script) {
                let err = script.addDiagnostic("error", {
                  message: errStr,
                  source: "imba-parser",
                  range: script.rangeAt(tloc, tend)
                });
                err.raise();
              }
              self2.parseError(errStr, {
                lexer: lexer2,
                text: lexer2.match,
                token: tok,
                offset: tloc,
                length: tend - tloc,
                start: { offset: tloc },
                end: { offset: tend },
                line: lexer2.yylineno,
                expected,
                recoverable: error_rule_depth !== false
              });
            } else if (preErrorSymbol !== EOF2) {
              error_rule_depth = locateNearestErrorRecoveryRule(state);
            }
            if (recovering == 3) {
              if (symbol === EOF2 || preErrorSymbol === EOF2) {
                throw new Error(errStr || "Parsing halted while starting to recover from another error.");
              }
              yytext = lexer2.yytext;
            }
            if (error_rule_depth === false) {
              throw new Error(errStr || "Parsing halted. No suitable error recovery rule available.");
            }
            popStack(error_rule_depth);
            preErrorSymbol = symbol == TERROR ? null : symbol;
            symbol = TERROR;
            state = stack[stack.length - 1];
            action = table[state] && table[state][TERROR];
            recovering = 3;
          }
          var __sym = this.symbols_;
          var __prod = this.productions_;
          while (true) {
            state = stack[stack.length - 1];
            if (symbol === null || typeof symbol == "undefined") {
              symbol = __sym[lexer2.lex()] || EOF2;
            }
            action = table[state] && table[state][symbol];
            _handle_error:
              if (typeof action === "undefined" || !action.length || !action[0]) {
                handleError();
              }
            switch (action[0]) {
              case 1:
                stack.push(symbol);
                stack.push(action[1]);
                vstack.push(lexer2.yytext);
                symbol = null;
                if (!preErrorSymbol) {
                  yytext = lexer2.yytext;
                  if (recovering > 0) {
                    recovering--;
                  }
                } else {
                  symbol = preErrorSymbol;
                  preErrorSymbol = null;
                }
                break;
              case 2:
                len = __prod[action[1]][1];
                yyval.$ = vstack[vstack.length - len];
                r = this.performAction(yyval, yytext, yy, action[1], vstack);
                if (typeof r !== "undefined") {
                  return r;
                }
                while (len > 0) {
                  stack.pop();
                  stack.pop();
                  vstack.pop();
                  len--;
                }
                stack.push(__prod[action[1]][0]);
                newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                stack.push(newState);
                vstack.push(yyval.$);
                break;
              case 3:
                return true;
            }
          }
          return true;
        }
      };
      function Parser() {
        this.yy = {};
      }
      Parser.prototype = parser4;
      parser4.Parser = Parser;
      return new Parser();
    }();
    if (typeof __require !== "undefined" && typeof exports !== "undefined") {
      exports.parser = parser3;
      exports.Parser = parser3.Parser;
      exports.parse = function() {
        return parser3.parse.apply(parser3, arguments);
      };
    }
  }
});
var require_sourcemap = __commonJS({
  "src/compiler/sourcemap.imba1"(exports) {
    function iter$(a) {
      return a ? a.toArray ? a.toArray() : a : [];
    }
    var path = (init_path(), __toCommonJS2(path_exports));
    var util = require_helpers();
    var VLQ_SHIFT = 5;
    var VLQ_CONTINUATION_BIT = 1 << VLQ_SHIFT;
    var VLQ_VALUE_MASK = VLQ_CONTINUATION_BIT - 1;
    var BASE64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    function SourceMap(script, options) {
      this._script = script;
      this._options = options || {};
      this._sourcePath = this._options.sourcePath;
      this._sourceRoot = this._options.sourceRoot;
      this._targetPath = this._options.targetPath;
      this._maps = [];
      this._map = "";
      this._js = "";
    }
    exports.SourceMap = SourceMap;
    SourceMap.prototype.result = function(v) {
      return this._result;
    };
    SourceMap.prototype.setResult = function(v) {
      this._result = v;
      return this;
    };
    SourceMap.prototype.source = function() {
      return this._source;
    };
    SourceMap.prototype.options = function() {
      return this._options;
    };
    SourceMap.prototype.sourceCode = function() {
      return this._script.sourceCode;
    };
    SourceMap.prototype.sourceName = function() {
      return path.basename(this._sourcePath);
    };
    SourceMap.prototype.targetName = function() {
      return path.basename(this._targetPath);
    };
    SourceMap.prototype.sourceFiles = function() {
      return [this.sourceName()];
    };
    SourceMap.prototype.parse = function() {
      var self = this;
      var matcher = /\/\*\%([\w\|]*)?\$\*\//;
      var replacer = /^(.*?)\/\*\%([\w\|]*)\$\*\//;
      var prejs = self._script.js;
      var lines = self._script.js.split(/\n/g);
      var verbose = self._options.debug;
      var sourceCode = self.sourceCode();
      var locmap = util.locationToLineColMap(sourceCode);
      var append = "";
      self._locs = [];
      self._maps = [];
      self._names = [];
      var pairs = [];
      var groups = {};
      var uniqueGroups = {};
      var match;
      var jsloc = 0;
      for (let i = 0, items = iter$(lines), len = items.length, line; i < len; i++) {
        line = items[i];
        var col = 0;
        var caret = -1;
        self._maps[i] = [];
        while (line.match(matcher)) {
          line = line.replace(replacer, function(m, pre, meta) {
            var grp;
            if (meta == "") {
              return pre;
            }
            ;
            let pars = meta.split("|");
            let loc = parseInt(pars[0]);
            let gid = pars[1] && parseInt(pars[1]);
            var lc = locmap[loc];
            if (!lc) {
              return pre;
            }
            ;
            let srcline = lc[0] + 1;
            let srccol = lc[1] + 1;
            if (caret != pre.length) {
              caret = pre.length;
              var mapping = [[srcline, srccol], [i + 1, caret + 1]];
              self._maps[i].push(mapping);
            }
            ;
            let locpair = [jsloc + caret, loc];
            self._locs.push(locpair);
            if (gid) {
              if (grp = groups[gid]) {
                grp[1] = locpair[0];
                grp[3] = locpair[1];
                let gstr = grp.join("|");
                if (uniqueGroups[gstr]) {
                  groups[gid] = [];
                } else {
                  uniqueGroups[gstr] = true;
                  let name = sourceCode.slice(grp[2], grp[3]);
                  if (grp.START) {
                    grp.START[2] = name;
                    if (self._names.indexOf(name) < 0) {
                      self._names.push(name);
                    }
                    ;
                  }
                  ;
                }
                ;
              } else {
                groups[gid] = [locpair[0], null, locpair[1], null];
              }
              ;
            }
            ;
            return pre;
          });
        }
        ;
        jsloc += line.length + 1;
        lines[i] = line;
      }
      ;
      self._script.js = lines.join("\n");
      self._script.locs = {
        map: locmap,
        generated: self._locs,
        spans: Object.values(groups)
      };
      if (verbose) {
        for (let i = 0, items = iter$(self._script.locs.spans), len = items.length, pair; i < len; i++) {
          pair = items[i];
          if (pair[1] != null) {
            let jsstr = self._script.js.slice(pair[0], pair[1]).split("\n");
            let imbastr = sourceCode.slice(pair[2], pair[3]).split("\n");
            pair.push(jsstr[0]);
            pair.push(imbastr[0]);
          }
          ;
        }
        ;
        let superMap = {
          0: "\u2080",
          1: "\u2081",
          2: "\u2082",
          3: "\u2083",
          4: "\u2084",
          5: "\u2085",
          6: "\u2086",
          7: "\u2087",
          8: "\u2088",
          9: "\u2089",
          "|": "\u208C"
        };
        let repSuper = function(m, str) {
          return "[" + str + "]";
          let o = "";
          let l = str.length;
          let i = 0;
          while (i < l) {
            o += superMap[str[i++]];
          }
          ;
          return "\u208D" + o + "\u208E";
        };
        self._script.js = self._script.js + "\n/*\n" + prejs.replace(/\/\*\%([\w\|]*)?\$\*\//g, repSuper).replace(/\/\*/g, "**").replace(/\*\//g, "**") + "\n*/";
      }
      ;
      return self;
    };
    SourceMap.prototype.generate = function() {
      this.parse();
      var lastColumn = 1;
      var lastSourceLine = 1;
      var lastSourceColumn = 1;
      var buffer = "";
      for (let lineNumber = 0, items = iter$(this._maps), len = items.length, line; lineNumber < len; lineNumber++) {
        line = items[lineNumber];
        lastColumn = 1;
        for (let nr = 0, ary = iter$(line), len2 = ary.length, map2; nr < len2; nr++) {
          map2 = ary[nr];
          if (nr != 0) {
            buffer += ",";
          }
          ;
          var src = map2[0];
          var dest = map2[1];
          buffer += this.encodeVlq(dest[1] - lastColumn);
          lastColumn = dest[1];
          buffer += this.encodeVlq(0);
          buffer += this.encodeVlq(src[0] - lastSourceLine);
          lastSourceLine = src[0];
          buffer += this.encodeVlq(src[1] - lastSourceColumn);
          lastSourceColumn = src[1];
        }
        ;
        buffer += ";";
      }
      ;
      var rel = this._targetPath && path.relative(path.dirname(this._targetPath), this._sourcePath);
      var map = {
        version: 3,
        file: this.sourceName().replace(/\.imba/, ".js") || "",
        sourceRoot: this._sourceRoot || "",
        sources: [rel || this._sourcePath],
        sourcesContent: [this.sourceCode()],
        names: [],
        mappings: buffer
      };
      if (this._options.sourcemap == "inline") {
        map.file = this.sourceName();
        map.sources = [this.sourceName()];
      }
      ;
      this._result = map;
      return this;
    };
    SourceMap.prototype.inlined = function() {
      try {
        var str = JSON.stringify(this._result);
        if (globalThis.Buffer) {
          str = Buffer.from(str, "utf-8").toString("base64");
        } else if (typeof btoa == "function") {
          str = btoa(str);
        } else {
          return;
        }
        ;
        return "\n//# sourceMappingURL=data:application/json;charset=utf-8;base64," + str;
      } catch (e) {
      }
      ;
      console.warn("base64 encoding not supported - skipping inline sourceMapping");
      return "";
    };
    SourceMap.prototype.encodeVlq = function(value) {
      var answer = "";
      var signBit = value < 0 ? 1 : 0;
      var nextChunk;
      var valueToEncode = (Math.abs(value) << 1) + signBit;
      while (valueToEncode || !answer) {
        nextChunk = valueToEncode & VLQ_VALUE_MASK;
        valueToEncode = valueToEncode >> VLQ_SHIFT;
        if (valueToEncode) {
          nextChunk |= VLQ_CONTINUATION_BIT;
        }
        ;
        answer += this.encodeBase64(nextChunk);
      }
      ;
      return answer;
    };
    SourceMap.prototype.toJSON = function() {
      return this._result;
    };
    SourceMap.prototype.encodeBase64 = function(value) {
      return BASE64_CHARS[value];
    };
  }
});
var theme_exports = {};
__export2(theme_exports, {
  colors: () => colors,
  fonts: () => fonts,
  modifiers: () => modifiers,
  named_colors: () => named_colors,
  variants: () => variants
});
var fonts, modifiers, variants, colors, named_colors;
var init_theme = __esm({
  "src/compiler/theme.imba"() {
    fonts = {
      sans: 'system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"',
      serif: 'Georgia, Cambria, "Times New Roman", Times, serif',
      mono: 'Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace'
    };
    modifiers = {
      odd: { name: "nth-child", valueType: "string", value: "odd" },
      even: { name: "nth-child", valueType: "string", value: "even" },
      first: { name: "first-child" },
      last: { name: "last-child" },
      only: { name: "only-child" },
      "not-first": { name: "not", valueType: "raw", value: ":first-child" },
      "not-last": { name: "not", valueType: "raw", value: ":last-child" },
      "first-child": {},
      "last-child": {},
      autofill: {},
      active: { shim: true },
      checked: { shim: true },
      "default": {},
      defined: {},
      disabled: { shim: true },
      empty: {},
      enabled: { shim: true },
      "first-of-type": {},
      "first-page": { name: "first" },
      fullscreen: {},
      focus: { shim: true },
      focin: { name: "focus-within", shim: "focin" },
      "focus-within": {},
      "focus-visible": { shim: "focus-visible" },
      hover: { shim: true },
      indeterminate: { shim: true },
      "in-range": {},
      invalid: { shim: true },
      is: { type: "selector" },
      has: { type: "selector" },
      lang: {},
      "last-of-type": {},
      left: {},
      link: {},
      not: { type: "selector" },
      "nth-child": {},
      modal: {},
      "picture-in-picture": {},
      "nth-last-child": {},
      "nth-last-of-type": {},
      "nth-of-type": {},
      "only-child": {},
      "only-of-type": {},
      playing: {},
      paused: {},
      optional: { shim: true },
      "out-of-range": {},
      "placeholder-shown": {},
      "read-only": {},
      "read-write": {},
      required: { shim: true },
      right: {},
      scope: {},
      root: {},
      target: {},
      "target-within": {},
      valid: { shim: true },
      visited: {},
      where: {},
      after: { type: "el" },
      "-webkit-scrollbar": { type: "el" },
      "-webkit-scrollbar-button": { type: "el" },
      "-webkit-scrollbar-track": { type: "el" },
      "-webkit-scrollbar-track-piece": { type: "el" },
      "-webkit-scrollbar-thumb": { type: "el" },
      "-webkit-scrollbar-corner": { type: "el" },
      "-webkit-resizer": { type: "el" },
      backdrop: { type: "el" },
      before: { type: "el" },
      cue: { type: "el" },
      "cue-region": { type: "el" },
      "first-letter": { type: "el" },
      "first-line": { type: "el" },
      marker: { type: "el" },
      placeholder: { type: "el" },
      selection: { type: "el" },
      inline: { pri: 3 },
      important: { pri: 4 },
      force: { pri: 6 },
      media: { type: "media" },
      print: { media: "print" },
      screen: { media: "screen" },
      speech: { media: "speech" },
      all: { media: "all" },
      xs: { media: "(min-width: 480px)", medianeg: "(max-width: 479px)" },
      sm: { media: "(min-width: 640px)", medianeg: "(max-width: 639px)" },
      md: { media: "(min-width: 768px)", medianeg: "(max-width: 767px)" },
      lg: { media: "(min-width: 1024px)", medianeg: "(max-width: 1023px)" },
      xl: { media: "(min-width: 1280px)", medianeg: "(max-width: 1279px)" },
      "2xl": { media: "(min-width: 1536px)" },
      "lt-xs": { media: "(max-width: 479px)" },
      "lt-sm": { media: "(max-width: 639px)" },
      "lt-md": { media: "(max-width: 767px)" },
      "lt-lg": { media: "(max-width: 1023px)" },
      "lt-xl": { media: "(max-width: 1279px)" },
      "lt-2xl": { media: "(max-width: 1535px)" },
      landscape: { media: "(orientation: landscape)", medianeg: "(orientation: portrait)" },
      portrait: { media: "(orientation: portrait)", medianeg: "(orientation: landscape)" },
      dark: { media: "(prefers-color-scheme: dark)", medianeg: "(prefers-color-scheme: light)" },
      light: { media: "(prefers-color-scheme: light)", medianeg: "(prefers-color-scheme: dark)" },
      standalone: { media: "(display-mode: standalone)" },
      browser: { media: "(display-mode: browser)" },
      enter: { flag: "@enter" },
      leave: { flag: "@leave" },
      darky: {
        flag: "@dark",
        raw: ":is( :where(.@dark,.@dark *):not(.@dark .@light *,.@dark .@light), :where(.@light .@dark,.@light .@dark *):not(.@dark .@light .@dark .@light *,.@dark .@light .@dark .@light))",
        neg: ":not( :where(.@dark,.@dark *):not(.@dark .@light *,.@dark .@light), :where(.@light .@dark,.@light .@dark *):not(.@dark .@light .@dark .@light *,.@dark .@light .@dark .@light))"
      },
      lighty: {
        flag: "@light",
        raw: ":not( :where(.@dark,.@dark *):not(.@dark .@light *,.@dark .@light), :where(.@light .@dark,.@light .@dark *):not(.@dark .@light .@dark .@light *,.@dark .@light .@dark .@light))",
        neg: ":is( :where(.@dark,.@dark *):not(.@dark .@light *,.@dark .@light), :where(.@light .@dark,.@light .@dark *):not(.@dark .@light .@dark .@light *,.@dark .@light .@dark .@light))"
      },
      touch: { flag: "@touch" },
      suspended: { flag: "@suspended" },
      "user-invalid": {},
      move: { flag: "@move" },
      hold: { flag: "@hold" },
      ssr: { flag: "@ssr" }
    };
    variants = {
      radius: {
        full: "9999px",
        xxs: "1px",
        xs: "2px",
        sm: "3px",
        md: "4px",
        lg: "6px",
        xl: "8px",
        NUMBER: "2px"
      },
      sizing: {
        NUMBER: "0.25rem"
      },
      "letter-spacing": {
        NUMBER: "0.05em"
      },
      "font-size": {
        xxs: ["10px", 1.5],
        xs: ["12px", 1.5],
        "sm-": ["13px", 1.5],
        sm: ["14px", 1.5],
        "md-": ["15px", 1.5],
        md: ["16px", 1.5],
        lg: ["18px", 1.5],
        xl: ["20px", 1.5],
        "2xl": ["24px", 1.5],
        "3xl": ["30px", 1.5],
        "4xl": ["36px", 1.5],
        "5xl": ["48px", 1.5],
        "6xl": ["64px", 1.5],
        "1": ["10px", 1.5],
        "2": ["12px", 1.5],
        "3": ["13px", 1.5],
        "4": ["14px", 1.5],
        "5": ["15px", 1.5],
        "6": ["16px", 1.5],
        "7": ["17px", 1.5],
        "8": ["18px", 1.5],
        "9": ["19px", 1.5],
        "10": ["20px", 1.5],
        "11": ["24px", 1.4],
        "12": ["30px", 1.3],
        "13": ["36px", 1.3],
        "14": ["48px", 1.2],
        "15": ["64px", 1.2],
        "16": ["96px", 1.2]
      },
      "box-shadow": {
        xxs: "0 0 0 1px hsla(var(--bxs-xxs-color,0,0%,0%),var(--bxs-xxs-alpha,0.05))",
        xs: "0 1px 2px 0 hsla(var(--bxs-xs-color,0,0%,0%),var(--bxs-xs-alpha,0.05))",
        sm: "0 1px 3px 0 hsla(var(--bxs-sm-color,0,0%,0%),var(--bxs-sm-alpha,0.1)), 0 1px 2px 0 hsla(var(--bxs-sm-color,0,0%,0%),calc(var(--bxs-sm-alpha,0.1) * 0.6))",
        md: "0 4px 6px -1px hsla(var(--bxs-md-color,0,0%,0%), var(--bxs-md-alpha,0.1)), 0 2px 4px -1px hsla(var(--bxs-md-color,0,0%,0%),calc(var(--bxs-md-alpha,0.1) * 0.6))",
        lg: "0 10px 15px -3px hsla(var(--bxs-lg-color,0,0%,0%), var(--bxs-lg-alpha,0.1)), 0 4px 6px -2px hsla(var(--bxs-lg-color,0,0%,0%),calc(var(--bxs-lg-alpha,0.1) * 0.5))",
        xl: "0 20px 25px -5px hsla(var(--bxs-xl-color,0,0%,0%), var(--bxs-xl-alpha,0.1)), 0 10px 10px -5px hsla(var(--bxs-xl-color,0,0%,0%), calc(var(--bxs-xl-alpha,0.1) * 0.4))",
        xxl: "0 25px 50px -6px hsla(var(--bxs-xxl-color,0,0%,0%),var(--bxs-xxl-alpha,0.25))",
        inner: "inset 0 2px 4px 0 hsla(var(--bxs-inner-color,0,0%,0%),var(--bxs-inner-alpha,0.06))",
        outline: "0 0 0 3px hsla(var(--bxs-outline-color,207,73%,57%),var(--bxs-outline-alpha,0.5))",
        none: "none"
      },
      easings: {
        "sine-in": "cubic-bezier(0.47, 0, 0.745, 0.715)",
        "sine-out": "cubic-bezier(0.39, 0.575, 0.565, 1)",
        "sine-in-out": "cubic-bezier(0.445, 0.05, 0.55, 0.95)",
        "quad-in": "cubic-bezier(0.55, 0.085, 0.68, 0.53)",
        "quad-out": "cubic-bezier(0.25, 0.46, 0.45, 0.94)",
        "quad-in-out": "cubic-bezier(0.455, 0.03, 0.515, 0.955)",
        "cubic-in": "cubic-bezier(0.55, 0.055, 0.675, 0.19)",
        "cubic-out": "cubic-bezier(0.215, 0.61, 0.355, 1)",
        "cubic-in-out": "cubic-bezier(0.645, 0.045, 0.355, 1)",
        "quart-in": "cubic-bezier(0.895, 0.03, 0.685, 0.22)",
        "quart-out": "cubic-bezier(0.165, 0.84, 0.44, 1)",
        "quart-in-out": "cubic-bezier(0.77, 0, 0.175, 1)",
        "quint-in": "cubic-bezier(0.755, 0.05, 0.855, 0.06)",
        "quint-out": "cubic-bezier(0.23, 1, 0.32, 1)",
        "quint-in-out": "cubic-bezier(0.86, 0, 0.07, 1)",
        "expo-in": "cubic-bezier(0.95, 0.05, 0.795, 0.035)",
        "expo-out": "cubic-bezier(0.19, 1, 0.22, 1)",
        "expo-in-out": "cubic-bezier(1, 0, 0, 1)",
        "circ-in": "cubic-bezier(0.6, 0.04, 0.98, 0.335)",
        "circ-out": "cubic-bezier(0.075, 0.82, 0.165, 1)",
        "circ-in-out": "cubic-bezier(0.785, 0.135, 0.15, 0.86)",
        "back-in": "cubic-bezier(0.6, -0.28, 0.735, 0.045)",
        "back-out": "cubic-bezier(0.175, 0.885, 0.32, 1.275)",
        "back-in-out": "cubic-bezier(0.68, -0.55, 0.265, 1.55)"
      }
    };
    colors = {
      rose: {
        0: "#fff1f2",
        1: "#ffe4e6",
        2: "#fecdd3",
        3: "#fda4af",
        4: "#fb7185",
        5: "#f43f5e",
        6: "#e11d48",
        7: "#be123c",
        8: "#9f1239",
        9: "#881337"
      },
      pink: {
        0: "#fdf2f8",
        1: "#fce7f3",
        2: "#fbcfe8",
        3: "#f9a8d4",
        4: "#f472b6",
        5: "#ec4899",
        6: "#db2777",
        7: "#be185d",
        8: "#9d174d",
        9: "#831843"
      },
      fuchsia: {
        0: "#fdf4ff",
        1: "#fae8ff",
        2: "#f5d0fe",
        3: "#f0abfc",
        4: "#e879f9",
        5: "#d946ef",
        6: "#c026d3",
        7: "#a21caf",
        8: "#86198f",
        9: "#701a75"
      },
      purple: {
        0: "#faf5ff",
        1: "#f3e8ff",
        2: "#e9d5ff",
        3: "#d8b4fe",
        4: "#c084fc",
        5: "#a855f7",
        6: "#9333ea",
        7: "#7e22ce",
        8: "#6b21a8",
        9: "#581c87"
      },
      violet: {
        0: "#f5f3ff",
        1: "#ede9fe",
        2: "#ddd6fe",
        3: "#c4b5fd",
        4: "#a78bfa",
        5: "#8b5cf6",
        6: "#7c3aed",
        7: "#6d28d9",
        8: "#5b21b6",
        9: "#4c1d95"
      },
      indigo: {
        0: "#eef2ff",
        1: "#e0e7ff",
        2: "#c7d2fe",
        3: "#a5b4fc",
        4: "#818cf8",
        5: "#6366f1",
        6: "#4f46e5",
        7: "#4338ca",
        8: "#3730a3",
        9: "#312e81"
      },
      blue: {
        0: "#eff6ff",
        1: "#dbeafe",
        2: "#bfdbfe",
        3: "#93c5fd",
        4: "#60a5fa",
        5: "#3b82f6",
        6: "#2563eb",
        7: "#1d4ed8",
        8: "#1e40af",
        9: "#1e3a8a"
      },
      sky: {
        0: "#f0f9ff",
        1: "#e0f2fe",
        2: "#bae6fd",
        3: "#7dd3fc",
        4: "#38bdf8",
        5: "#0ea5e9",
        6: "#0284c7",
        7: "#0369a1",
        8: "#075985",
        9: "#0c4a6e"
      },
      cyan: {
        0: "#ecfeff",
        1: "#cffafe",
        2: "#a5f3fc",
        3: "#67e8f9",
        4: "#22d3ee",
        5: "#06b6d4",
        6: "#0891b2",
        7: "#0e7490",
        8: "#155e75",
        9: "#164e63"
      },
      teal: {
        0: "#f0fdfa",
        1: "#ccfbf1",
        2: "#99f6e4",
        3: "#5eead4",
        4: "#2dd4bf",
        5: "#14b8a6",
        6: "#0d9488",
        7: "#0f766e",
        8: "#115e59",
        9: "#134e4a"
      },
      emerald: {
        0: "#ecfdf5",
        1: "#d1fae5",
        2: "#a7f3d0",
        3: "#6ee7b7",
        4: "#34d399",
        5: "#10b981",
        6: "#059669",
        7: "#047857",
        8: "#065f46",
        9: "#064e3b"
      },
      green: {
        0: "#f0fdf4",
        1: "#dcfce7",
        2: "#bbf7d0",
        3: "#86efac",
        4: "#4ade80",
        5: "#22c55e",
        6: "#16a34a",
        7: "#15803d",
        8: "#166534",
        9: "#14532d"
      },
      lime: {
        0: "#f7fee7",
        1: "#ecfccb",
        2: "#d9f99d",
        3: "#bef264",
        4: "#a3e635",
        5: "#84cc16",
        6: "#65a30d",
        7: "#4d7c0f",
        8: "#3f6212",
        9: "#365314"
      },
      yellow: {
        0: "#fefce8",
        1: "#fef9c3",
        2: "#fef08a",
        3: "#fde047",
        4: "#facc15",
        5: "#eab308",
        6: "#ca8a04",
        7: "#a16207",
        8: "#854d0e",
        9: "#713f12"
      },
      amber: {
        0: "#fffbeb",
        1: "#fef3c7",
        2: "#fde68a",
        3: "#fcd34d",
        4: "#fbbf24",
        5: "#f59e0b",
        6: "#d97706",
        7: "#b45309",
        8: "#92400e",
        9: "#78350f"
      },
      orange: {
        0: "#fff7ed",
        1: "#ffedd5",
        2: "#fed7aa",
        3: "#fdba74",
        4: "#fb923c",
        5: "#f97316",
        6: "#ea580c",
        7: "#c2410c",
        8: "#9a3412",
        9: "#7c2d12"
      },
      red: {
        0: "#fef2f2",
        1: "#fee2e2",
        2: "#fecaca",
        3: "#fca5a5",
        4: "#f87171",
        5: "#ef4444",
        6: "#dc2626",
        7: "#b91c1c",
        8: "#991b1b",
        9: "#7f1d1d"
      },
      warmer: {
        0: "#fafaf9",
        1: "#f5f5f4",
        2: "#e7e5e4",
        3: "#d6d3d1",
        4: "#a8a29e",
        5: "#78716c",
        6: "#57534e",
        7: "#44403c",
        8: "#292524",
        9: "#1c1917"
      },
      warm: {
        0: "#fafafa",
        1: "#f5f5f5",
        2: "#e5e5e5",
        3: "#d4d4d4",
        4: "#a3a3a3",
        5: "#737373",
        6: "#525252",
        7: "#404040",
        8: "#262626",
        9: "#171717"
      },
      gray: {
        0: "#fafafa",
        1: "#f4f4f5",
        2: "#e4e4e7",
        3: "#d4d4d8",
        4: "#a1a1aa",
        5: "#71717a",
        6: "#52525b",
        7: "#3f3f46",
        8: "#27272a",
        9: "#18181b"
      },
      cool: {
        0: "#f9fafb",
        1: "#f3f4f6",
        2: "#e5e7eb",
        3: "#d1d5db",
        4: "#9ca3af",
        5: "#6b7280",
        6: "#4b5563",
        7: "#374151",
        8: "#1f2937",
        9: "#111827"
      },
      cooler: {
        0: "#f8fafc",
        1: "#f1f5f9",
        2: "#e2e8f0",
        3: "#cbd5e1",
        4: "#94a3b8",
        5: "#64748b",
        6: "#475569",
        7: "#334155",
        8: "#1e293b",
        9: "#0f172a"
      }
    };
    named_colors = {
      aliceblue: "#f0f8ff",
      antiquewhite: "#faebd7",
      aqua: "#00ffff",
      aquamarine: "#7fffd4",
      azure: "#f0ffff",
      beige: "#f5f5dc",
      bisque: "#ffe4c4",
      black: "#000000",
      blanchedalmond: "#ffebcd",
      blue: "#0000ff",
      blueviolet: "#8a2be2",
      brown: "#a52a2a",
      burlywood: "#deb887",
      cadetblue: "#5f9ea0",
      chartreuse: "#7fff00",
      chocolate: "#d2691e",
      coral: "#ff7f50",
      cornflowerblue: "#6495ed",
      cornsilk: "#fff8dc",
      crimson: "#dc143c",
      cyan: "#00ffff",
      darkblue: "#00008b",
      darkcyan: "#008b8b",
      darkgoldenrod: "#b8860b",
      darkgray: "#a9a9a9",
      darkgreen: "#006400",
      darkgrey: "#a9a9a9",
      darkkhaki: "#bdb76b",
      darkmagenta: "#8b008b",
      darkolivegreen: "#556b2f",
      darkorange: "#ff8c00",
      darkorchid: "#9932cc",
      darkred: "#8b0000",
      darksalmon: "#e9967a",
      darkseagreen: "#8fbc8f",
      darkslateblue: "#483d8b",
      darkslategray: "#2f4f4f",
      darkslategrey: "#2f4f4f",
      darkturquoise: "#00ced1",
      darkviolet: "#9400d3",
      deeppink: "#ff1493",
      deepskyblue: "#00bfff",
      dimgray: "#696969",
      dimgrey: "#696969",
      dodgerblue: "#1e90ff",
      firebrick: "#b22222",
      floralwhite: "#fffaf0",
      forestgreen: "#228b22",
      fuchsia: "#ff00ff",
      gainsboro: "#dcdcdc",
      ghostwhite: "#f8f8ff",
      goldenrod: "#daa520",
      gold: "#ffd700",
      gray: "#808080",
      green: "#008000",
      greenyellow: "#adff2f",
      grey: "#808080",
      honeydew: "#f0fff0",
      hotpink: "#ff69b4",
      indianred: "#cd5c5c",
      indigo: "#4b0082",
      ivory: "#fffff0",
      khaki: "#f0e68c",
      lavenderblush: "#fff0f5",
      lavender: "#e6e6fa",
      lawngreen: "#7cfc00",
      lemonchiffon: "#fffacd",
      lightblue: "#add8e6",
      lightcoral: "#f08080",
      lightcyan: "#e0ffff",
      lightgoldenrodyellow: "#fafad2",
      lightgray: "#d3d3d3",
      lightgreen: "#90ee90",
      lightgrey: "#d3d3d3",
      lightpink: "#ffb6c1",
      lightsalmon: "#ffa07a",
      lightseagreen: "#20b2aa",
      lightskyblue: "#87cefa",
      lightslategray: "#778899",
      lightslategrey: "#778899",
      lightsteelblue: "#b0c4de",
      lightyellow: "#ffffe0",
      lime: "#00ff00",
      limegreen: "#32cd32",
      linen: "#faf0e6",
      magenta: "#ff00ff",
      maroon: "#800000",
      mediumaquamarine: "#66cdaa",
      mediumblue: "#0000cd",
      mediumorchid: "#ba55d3",
      mediumpurple: "#9370db",
      mediumseagreen: "#3cb371",
      mediumslateblue: "#7b68ee",
      mediumspringgreen: "#00fa9a",
      mediumturquoise: "#48d1cc",
      mediumvioletred: "#c71585",
      midnightblue: "#191970",
      mintcream: "#f5fffa",
      mistyrose: "#ffe4e1",
      moccasin: "#ffe4b5",
      navajowhite: "#ffdead",
      navy: "#000080",
      oldlace: "#fdf5e6",
      olive: "#808000",
      olivedrab: "#6b8e23",
      orange: "#ffa500",
      orangered: "#ff4500",
      orchid: "#da70d6",
      palegoldenrod: "#eee8aa",
      palegreen: "#98fb98",
      paleturquoise: "#afeeee",
      palevioletred: "#db7093",
      papayawhip: "#ffefd5",
      peachpuff: "#ffdab9",
      peru: "#cd853f",
      pink: "#ffc0cb",
      plum: "#dda0dd",
      powderblue: "#b0e0e6",
      purple: "#800080",
      rebeccapurple: "#663399",
      red: "#ff0000",
      rosybrown: "#bc8f8f",
      royalblue: "#4169e1",
      saddlebrown: "#8b4513",
      salmon: "#fa8072",
      sandybrown: "#f4a460",
      seagreen: "#2e8b57",
      seashell: "#fff5ee",
      sienna: "#a0522d",
      silver: "#c0c0c0",
      skyblue: "#87ceeb",
      slateblue: "#6a5acd",
      slategray: "#708090",
      slategrey: "#708090",
      snow: "#fffafa",
      springgreen: "#00ff7f",
      steelblue: "#4682b4",
      tan: "#d2b48c",
      teal: "#008080",
      thistle: "#d8bfd8",
      tomato: "#ff6347",
      turquoise: "#40e0d0",
      violet: "#ee82ee",
      wheat: "#f5deb3",
      white: "#ffffff",
      whitesmoke: "#f5f5f5",
      yellow: "#ffff00",
      yellowgreen: "#9acd32"
    };
  }
});
function CssSelectorParser() {
  this.pseudos = {};
  this.attrEqualityMods = {};
  this.ruleNestingOperators = {};
  this.substitutesEnabled = false;
}
function RULE(obj, base = []) {
  return Object.assign(base, obj);
}
function isIdentStart(c) {
  return c >= "a" && c <= "z" || c >= "A" && c <= "Z" || c === "-" || c === "_";
}
function isIdent(c) {
  return c >= "a" && c <= "z" || c >= "A" && c <= "Z" || c >= "0" && c <= "9" || c === "-" || c === "_";
}
function isHex(c) {
  return c >= "a" && c <= "f" || c >= "A" && c <= "F" || c >= "0" && c <= "9";
}
function ParseContext(str, pos, pseudos, attrEqualityMods, ruleNestingOperators, substitutesEnabled, options) {
  var chr, getIdent, getStr, l, skipWhitespace;
  l = str.length;
  chr = null;
  this.options = options;
  getStr = function(quote, escapeTable) {
    var esc, hex, result;
    result = "";
    pos++;
    chr = str.charAt(pos);
    while (pos < l) {
      if (chr === quote) {
        pos++;
        return result;
      } else if (chr === "\\") {
        pos++;
        chr = str.charAt(pos);
        if (chr === quote) {
          result += quote;
        } else if (esc = escapeTable[chr]) {
          result += esc;
        } else if (isHex(chr)) {
          hex = chr;
          pos++;
          chr = str.charAt(pos);
          while (isHex(chr)) {
            hex += chr;
            pos++;
            chr = str.charAt(pos);
          }
          if (chr === " ") {
            pos++;
            chr = str.charAt(pos);
          }
          result += String.fromCharCode(parseInt(hex, 16));
          continue;
        } else {
          result += chr;
        }
      } else {
        result += chr;
      }
      pos++;
      chr = str.charAt(pos);
    }
    return result;
  };
  getIdent = function(specials) {
    var result = "";
    chr = str.charAt(pos);
    while (pos < l) {
      if (isIdent(chr) || specials && specials[chr]) {
        result += chr;
      } else if (chr === "\\") {
        pos++;
        if (pos >= l) {
          throw Error("Expected symbol but end of file reached.");
        }
        chr = str.charAt(pos);
        if (identSpecialChars[chr]) {
          result += chr;
        } else if (isHex(chr)) {
          var hex = chr;
          pos++;
          chr = str.charAt(pos);
          while (isHex(chr)) {
            hex += chr;
            pos++;
            chr = str.charAt(pos);
          }
          if (chr === " ") {
            pos++;
            chr = str.charAt(pos);
          }
          result += String.fromCharCode(parseInt(hex, 16));
          continue;
        } else {
          result += chr;
        }
      } else {
        return result;
      }
      pos++;
      chr = str.charAt(pos);
    }
    return result;
  };
  skipWhitespace = function() {
    chr = str.charAt(pos);
    var result = false;
    while (chr === " " || chr === "	" || chr === "\n" || chr === "\r" || chr === "\f") {
      result = true;
      pos++;
      chr = str.charAt(pos);
    }
    return result;
  };
  this.parse = function() {
    var res = this.parseSelector();
    if (pos < l) {
      throw Error('Rule expected but "' + str.charAt(pos) + '" found.');
    }
    return res;
  };
  this.parseSelector = function() {
    var res;
    var selector = res = this.parseSingleSelector();
    chr = str.charAt(pos);
    while (chr === ",") {
      pos++;
      skipWhitespace();
      if (res.type !== "selectors") {
        res = {
          type: "selectors",
          selectors: [selector]
        };
      }
      selector = this.parseSingleSelector();
      if (!selector) {
        throw Error('Rule expected after ",".');
      }
      res.selectors.push(selector);
    }
    return res;
  };
  this.parseSingleSelector = function() {
    skipWhitespace();
    let opm = str.slice(pos, pos + 4).match(/^(\>{1,3}|\+|~)/);
    var selector = {
      type: "ruleSet"
    };
    var rule = opm ? Object.assign([], { type: "rule", isScope: true }) : this.parseRule();
    if (!rule) {
      return null;
    }
    var currentRule = selector;
    while (rule) {
      rule.type = "rule";
      if (currentRule == rule) {
      } else {
        currentRule.rule = rule;
        currentRule = rule;
      }
      skipWhitespace();
      chr = str.charAt(pos);
      if (pos >= l || chr === "," || chr === ")") {
        break;
      }
      if (ruleNestingOperators[chr]) {
        var op = chr;
        if (op == ">" && str.charAt(pos + 1) == ">" && str.charAt(pos + 2) == ">") {
          op = ">>>";
          pos = pos + 3;
        } else if (op == ">" && str.charAt(pos + 1) == ">") {
          op = ">>";
          pos = pos + 2;
        } else {
          pos++;
        }
        skipWhitespace();
        rule = this.parseRule(null);
        if (!rule) {
          if (op == ">" || op == ">>>" || op == ">>") {
            rule = RULE({ tagName: "*" });
          } else {
            throw Error('Rule expected after "' + op + '".');
          }
        }
        rule.nestingOperator = op;
      } else {
        rule = this.parseRule(currentRule);
      }
    }
    return selector;
  };
  this.parseSubRule = function(type = "is", simple = false, nest = false) {
    let pseudo = { name: type, valueType: "selector", up: true };
    if (simple) {
      let value = this.parseRule();
      value.type = "rule";
      pseudo.value = { type: "ruleSet", rule: value };
      if (nest) {
        pseudo.after = value.rule = RULE({ tagName: "*", nestingOperator: null, type: "rule" });
      }
    } else {
      let value = this.parseSelector();
      pseudo.value = value;
    }
    return pseudo;
  };
  this.parseRule = function(currentRule) {
    var _a;
    var rule = null;
    var unimportant = false;
    var nextIsPseudo = false;
    var negate = false;
    var closest = false;
    var part = {};
    var up = 0;
    while (pos < l) {
      chr = str.charAt(pos);
      part = {};
      if (chr == "!") {
        negate = true;
        chr = str.charAt(++pos);
        rule = rule || currentRule;
        part.not = true;
      }
      if (chr == "@" && str.charAt(pos + 1) == ".") {
        rule = rule || currentRule;
        part.implicitScope = true;
        pos++;
        chr = ".";
      } else if (chr == "@" && str.charAt(pos + 1) == "@") {
        part.implicitScope = true;
        part.base = (_a = this.options.tags) == null ? void 0 : _a[0];
        part.base && (part.base = "." + part.base.cssid());
        closest = part;
        rule = rule || currentRule;
        pos++;
        if (str.charAt(pos + 1) == ".") {
          pos++;
          chr = ".";
          part.implicitScope = true;
        }
      } else if (chr == "." && str.charAt(pos + 1) == ".") {
        closest = part;
        rule = rule || currentRule;
        part.implicitScope = true;
        pos++;
        let next = str.charAt(pos + 1);
        if (next == "%" || next == "$" || next == "@") {
          chr = next;
          pos++;
        }
      }
      while (chr == "^") {
        chr = str.charAt(++pos);
        rule = rule || currentRule;
        part.implicitScope = true;
        up++;
      }
      part.up = up;
      part.closest = closest;
      if (chr === "&") {
        pos++;
        (rule = rule || []).isScope = true;
      } else if (chr === "^") {
        pos++;
        let pseudo2 = this.parseSubRule("is", true, true);
        (rule = rule || currentRule || []).push(pseudo2);
      } else if (chr === "*") {
        pos++;
        (rule = rule || []).tagName = "*";
      } else if (isIdentStart(chr) || chr === "\\") {
        (rule = rule || []).tagName = getIdent();
      } else if (chr === "$") {
        pos++;
        part.flag = "$" + getIdent();
        part.ref = true;
        (rule = rule || []).push(part);
      } else if (chr === "%") {
        pos++;
        part.flag = chr + getIdent();
        (rule = rule || []).push(part);
      } else if (chr === ".") {
        pos++;
        let flag = str.charAt(pos++);
        if (flag == "!") {
          part.not = true;
          flag = "";
        }
        flag += getIdent({});
        part.flag = flag;
        (rule = rule || []).push(part);
      } else if (chr === "#") {
        pos++;
        (rule = rule || []).id = getIdent();
      } else if (chr === "[") {
        pos++;
        skipWhitespace();
        var attr = part.attr = {
          name: getIdent()
        };
        skipWhitespace();
        if (chr === "]") {
          pos++;
        } else {
          var operator = "";
          if (attrEqualityMods[chr]) {
            operator = chr;
            pos++;
            chr = str.charAt(pos);
          }
          if (pos >= l) {
            throw Error('Expected "=" but end of file reached.');
          }
          if (chr !== "=") {
            throw Error('Expected "=" but "' + chr + '" found.');
          }
          attr.operator = operator + "=";
          pos++;
          skipWhitespace();
          var attrValue = "";
          attr.valueType = "string";
          if (chr === '"') {
            attrValue = getStr('"', doubleQuotesEscapeChars);
          } else if (chr === "'") {
            attrValue = getStr("'", singleQuoteEscapeChars);
          } else if (substitutesEnabled && chr === "$") {
            pos++;
            attrValue = getIdent();
            attr.valueType = "substitute";
          } else {
            while (pos < l) {
              if (chr === "]") {
                break;
              }
              attrValue += chr;
              pos++;
              chr = str.charAt(pos);
            }
            attrValue = attrValue.trim();
          }
          skipWhitespace();
          if (pos >= l) {
            throw Error('Expected "]" but end of file reached.');
          }
          if (chr !== "]") {
            throw Error('Expected "]" but "' + chr + '" found.');
          }
          pos++;
          attr.value = attrValue;
        }
        (rule = rule || []).push(part);
      } else if (chr === ":" || chr === "@") {
        if (chr == ":" && str.charAt(pos + 1) == ":") {
          (rule = rule || currentRule || []).pseudoElement = getIdent({ ":": true });
          continue;
        }
        pos++;
        part.name = chr;
        var pseudo = part;
        let pseudoName = str.charAt(pos++);
        if (pseudoName == "!") {
          part.not = true;
          pseudoName = "";
        }
        pseudoName += getIdent({ "~": true, "+": true, ".": false, ">": true, "<": true });
        if (pseudoName == "unimportant") {
          unimportant = true;
          part.type = "unimportant";
          (rule = rule || currentRule || []).push(part);
          continue;
        }
        part.name += pseudoName;
        part.pseudo = pseudoName;
        if (chr === "(") {
          pos++;
          var value = "";
          skipWhitespace();
          if (pseudos[pseudoName] === "selector") {
            pseudo.valueType = "selector";
            value = this.parseSelector();
          } else {
            pseudo.valueType = pseudos[pseudoName] || "string";
            if (chr === '"') {
              value = getStr('"', doubleQuotesEscapeChars);
            } else if (chr === "'") {
              value = getStr("'", singleQuoteEscapeChars);
            } else if (substitutesEnabled && chr === "$") {
              pos++;
              value = getIdent();
              pseudo.valueType = "substitute";
            } else {
              while (pos < l) {
                if (chr === ")") {
                  break;
                }
                value += chr;
                pos++;
                chr = str.charAt(pos);
              }
              value = value.trim();
            }
            skipWhitespace();
          }
          if (pos >= l) {
            throw Error('Expected ")" but end of file reached.');
          }
          if (chr !== ")") {
            throw Error('Expected ")" but "' + chr + '" found.');
          }
          pos++;
          pseudo.value = value;
        }
        (rule = rule || currentRule || []).push(part);
      } else {
        break;
      }
    }
    return rule;
  };
  return this;
}
var import_constants, identSpecialChars, strReplacementsRev, singleQuoteEscapeChars, doubleQuotesEscapeChars, rootSelector, parser, parse, render;
var init_css_selector_parser = __esm({
  "vendor/css-selector-parser.js"() {
    init_theme();
    import_constants = __toESM(require_constants());
    CssSelectorParser.prototype.registerSelectorPseudos = function(name) {
      for (var j = 0, len = arguments.length; j < len; j++) {
        name = arguments[j];
        this.pseudos[name] = "selector";
      }
      return this;
    };
    CssSelectorParser.prototype.unregisterSelectorPseudos = function(name) {
      for (var j = 0, len = arguments.length; j < len; j++) {
        name = arguments[j];
        delete this.pseudos[name];
      }
      return this;
    };
    CssSelectorParser.prototype.registerNumericPseudos = function(name) {
      for (var j = 0, len = arguments.length; j < len; j++) {
        name = arguments[j];
        this.pseudos[name] = "numeric";
      }
      return this;
    };
    CssSelectorParser.prototype.unregisterNumericPseudos = function(name) {
      for (var j = 0, len = arguments.length; j < len; j++) {
        name = arguments[j];
        delete this.pseudos[name];
      }
      return this;
    };
    CssSelectorParser.prototype.registerNestingOperators = function(operator) {
      for (var j = 0, len = arguments.length; j < len; j++) {
        operator = arguments[j];
        this.ruleNestingOperators[operator] = true;
      }
      return this;
    };
    CssSelectorParser.prototype.unregisterNestingOperators = function(operator) {
      for (var j = 0, len = arguments.length; j < len; j++) {
        operator = arguments[j];
        delete this.ruleNestingOperators[operator];
      }
      return this;
    };
    CssSelectorParser.prototype.registerAttrEqualityMods = function(mod) {
      for (var j = 0, len = arguments.length; j < len; j++) {
        mod = arguments[j];
        this.attrEqualityMods[mod] = true;
      }
      return this;
    };
    CssSelectorParser.prototype.unregisterAttrEqualityMods = function(mod) {
      for (var j = 0, len = arguments.length; j < len; j++) {
        mod = arguments[j];
        delete this.attrEqualityMods[mod];
      }
      return this;
    };
    CssSelectorParser.prototype.enableSubstitutes = function() {
      this.substitutesEnabled = true;
      return this;
    };
    CssSelectorParser.prototype.disableSubstitutes = function() {
      this.substitutesEnabled = false;
      return this;
    };
    identSpecialChars = {
      "!": true,
      '"': true,
      "#": true,
      "$": true,
      "%": true,
      "&": true,
      "'": true,
      "(": true,
      ")": true,
      "*": true,
      "+": true,
      ",": true,
      ".": true,
      "/": true,
      ";": true,
      "<": true,
      "=": true,
      ">": true,
      "?": true,
      "@": true,
      "[": true,
      "\\": true,
      "]": true,
      "^": true,
      "`": true,
      "{": true,
      "|": true,
      "}": true,
      "~": true
    };
    strReplacementsRev = {
      "\n": "\\n",
      "\r": "\\r",
      "	": "\\t",
      "\f": "\\f",
      "\v": "\\v"
    };
    singleQuoteEscapeChars = {
      n: "\n",
      r: "\r",
      t: "	",
      f: "\f",
      "\\": "\\",
      "'": "'"
    };
    doubleQuotesEscapeChars = {
      n: "\n",
      r: "\r",
      t: "	",
      f: "\f",
      "\\": "\\",
      '"': '"'
    };
    CssSelectorParser.prototype.parse = function(str, options) {
      var context = new ParseContext(
        str,
        0,
        this.pseudos,
        this.attrEqualityMods,
        this.ruleNestingOperators,
        this.substitutesEnabled,
        options
      );
      return context.parse();
    };
    CssSelectorParser.prototype.escapeIdentifier = function(s) {
      var result = "";
      var i = 0;
      var len = s.length;
      while (i < len) {
        var chr = s.charAt(i);
        if (identSpecialChars[chr]) {
          result += "\\" + chr;
        } else {
          if (!(chr === "_" || chr === "-" || chr >= "A" && chr <= "Z" || chr >= "a" && chr <= "z" || i !== 0 && chr >= "0" && chr <= "9")) {
            var charCode = chr.charCodeAt(0);
            if ((charCode & 63488) === 55296) {
              var extraCharCode = s.charCodeAt(i++);
              if ((charCode & 64512) !== 55296 || (extraCharCode & 64512) !== 56320) {
                throw Error("UCS-2(decode): illegal sequence");
              }
              charCode = ((charCode & 1023) << 10) + (extraCharCode & 1023) + 65536;
            }
            result += "\\" + charCode.toString(16) + " ";
          } else {
            result += chr;
          }
        }
        i++;
      }
      return result;
    };
    CssSelectorParser.prototype.escapeStr = function(s) {
      var result = "";
      var i = 0;
      var len = s.length;
      var chr, replacement;
      while (i < len) {
        chr = s.charAt(i);
        if (chr === '"') {
          chr = '\\"';
        } else if (chr === "\\") {
          chr = "\\\\";
        } else if (replacement = strReplacementsRev[chr]) {
          chr = replacement;
        }
        result += chr;
        i++;
      }
      return '"' + result + '"';
    };
    CssSelectorParser.prototype.render = function(path) {
      return this._renderEntity(path).trim();
    };
    rootSelector = null;
    CssSelectorParser.prototype._renderEntity = function(entity, parent) {
      var _a;
      var currentEntity, parts, res;
      res = "";
      switch (entity.type) {
        case "ruleSet":
          currentEntity = entity.rule;
          rootSelector = entity;
          parts = [];
          while (currentEntity) {
            if (currentEntity.nestingOperator) {
              parts.push(currentEntity.nestingOperator);
            }
            parts.push(this._renderEntity(currentEntity));
            currentEntity = currentEntity.rule;
          }
          let media = entity.media && entity.media.length ? ` @media ${entity.media.join(" and ")}` : "";
          res = parts.join(" ") + media;
          break;
        case "selectors":
          res = entity.selectors.map(this._renderEntity, this).join(", ");
          break;
        case "rule":
          let s0 = entity.s1;
          let s1 = entity.s2;
          let tagName = entity.tagName;
          if (tagName) {
            if (tagName === "*") {
              res = "*";
            } else {
              let native = import_constants.TAG_NAMES[tagName] || tagName == "svg" || tagName.indexOf("-") > 0;
              let escaped = this.escapeIdentifier(tagName);
              if (native) {
                res = escaped;
              } else {
                res = `:is(${escaped},${escaped}-tag)`;
              }
            }
          }
          if (entity.id) {
            res += "#" + this.escapeIdentifier(entity.id);
          }
          let idx = 0;
          let len = entity.length;
          while (idx < len) {
            let shortest = null;
            let part = entity[idx++];
            let attr = part.attr;
            let flag = part.flag;
            let out = "";
            let neg = part.not;
            let pseudo = part.pseudo ? part : null;
            let desc = modifiers[part.pseudo];
            if (desc == null ? void 0 : desc.raw) {
              let sel = neg ? desc.rawneg : desc.raw;
              if (part.pseudo == "lighty" && res == ":root") {
                sel = neg ? ":not(.@light)" : ".@light";
              } else if (part.pseudo == "darky" && res == ":root") {
                sel = neg ? ":not(.@dark)" : ".@dark";
              }
              res += sel.replace(/\.\@/g, ".\\@");
              continue;
            }
            if (part.media || part.skip) {
              continue;
            }
            if (desc && desc.flag) {
              flag = desc.flag;
              pseudo = null;
            }
            if (desc && desc.type == "el") {
              pseudo = null;
              entity.pseudoElement || (entity.pseudoElement = "::" + part.pseudo);
            }
            if (flag) {
              out = "." + this.escapeIdentifier(flag);
            }
            if (attr) {
              if (attr.operator) {
                if (attr.valueType === "substitute") {
                  out = "[" + this.escapeIdentifier(attr.name) + attr.operator + "$" + attr.value + "]";
                } else {
                  out = "[" + this.escapeIdentifier(attr.name) + attr.operator + this.escapeStr(attr.value) + "]";
                }
              } else {
                out = "[" + this.escapeIdentifier(attr.name) + "]";
              }
            }
            if (pseudo) {
              let name = (_a = desc && desc.name) != null ? _a : pseudo.pseudo;
              let escaped = this.escapeIdentifier(name);
              if (desc && desc.valueType) {
                pseudo = desc;
              }
              let post = "";
              let value = pseudo.value || pseudo.name;
              let pre = ":" + escaped;
              if (pseudo.valueType) {
                if (pseudo.valueType === "selector") {
                  out = pre + "(" + this._renderEntity(pseudo.value, parent) + ")" + post;
                } else if (pseudo.valueType === "substitute") {
                  out = pre + "($" + pseudo.value + ")" + post;
                } else if (pseudo.valueType === "numeric") {
                  out = pre + "(" + pseudo.value + ")" + post;
                } else if (pseudo.valueType === "raw" || pseudo.valueType === "string") {
                  out = pre + "(" + pseudo.value + ")" + post;
                } else {
                  out = pre + "(" + this.escapeIdentifier(pseudo.value) + ")" + post;
                }
              } else if (pseudo.type == "el") {
                out = ":" + pre;
              } else if (!desc) {
                out = `.\\@${escaped}`;
              } else if (desc.shim) {
                let pre2 = neg ? ":not" : ":is";
                out = `.\\@${desc.shim == true ? escaped : desc.shim}`;
                out = `${pre2}(:${typeof desc.native == "string" ? desc.native : escaped},${out})`;
                neg = false;
              } else if (desc.flag) {
                out = `.\\@${escaped}`;
              } else {
                out = pre + post;
              }
            }
            if (part.closest) {
              let parts2 = entity.filter((v) => v.closest == part);
              parts2.map((v) => v.closest = null);
              part.not = false;
              let all = this._renderEntity(RULE({ type: "rule" }, parts2));
              parts2.map((v) => v.skip = true);
              if (part.base) {
                all = `${part.base}${all}`;
              }
              out = `:${neg ? "not" : "is"}(${all} *)`;
              neg = false;
            } else if (part.up) {
              let rest = part.up > 5 ? " *" : " > *".repeat(part.up);
              out = `:${neg ? "not" : "is"}(${out}${rest})`;
              neg = false;
            }
            if (neg) {
              out = `:not(${out})`;
            }
            res += out;
          }
          if (s0 > 0) {
            while (--s0 >= 0)
              res += ":not(#_)";
          }
          if (s1 > 0) {
            while (--s1 >= 0)
              res += ":not(._0)";
          }
          if (entity.pseudoElement) {
            res += entity.pseudoElement;
          }
          break;
        default:
          throw Error('Unknown entity type: "' + entity.type(+'".'));
      }
      return res;
    };
    parser = new CssSelectorParser();
    parser.registerSelectorPseudos("has", "not", "is", "matches", "any", "where");
    parser.registerNumericPseudos("nth-child");
    parser.registerNestingOperators(">>>", ">>", ">", "+", "~");
    parser.registerAttrEqualityMods("^", "$", "*", "~");
    parse = function(v, o) {
      return parser.parse(v, o);
    };
    render = function(v) {
      return parser.render(v);
    };
  }
});
var selparse_exports = {};
__export2(selparse_exports, {
  parse: () => parse2,
  render: () => render2,
  rewrite: () => rewrite,
  test: () => test,
  unwrap: () => unwrap
});
function iter$__8(a) {
  let v;
  return a ? (v = a.toIterable) ? v.call(a) : a : [];
}
function addClass(rule, name) {
  rule.push({ flag: name });
  return rule;
}
function addScopeClass(rule, name) {
  addClass(rule, name);
  rule.metas || (rule.metas = []);
  rule.metas.push(name);
  return rule;
}
function rewrite(rule, ctx, o = {}) {
  var _a, _b, _c, _d, _e;
  if (rule.type == "selectors") {
    for (let i\u03C6 = 0, items\u03C6 = iter$__8(rule.selectors), len\u03C6 = items\u03C6.length; i\u03C6 < len\u03C6; i\u03C6++) {
      let sel = items\u03C6[i\u03C6];
      rewrite(sel, rule, o);
    }
    ;
  }
  ;
  if (rule.type != "ruleSet") {
    return rule;
  }
  ;
  let root = rule;
  let pri = 0;
  let s0 = 0;
  let s1 = 0;
  let s2 = 0;
  rule.meta = {};
  rule.media = [];
  let parts = [];
  let curr = rule.rule;
  while (curr) {
    parts.push(curr);
    curr = curr.rule;
  }
  ;
  let rev = parts.slice(0).reverse();
  for (let i = 0, items\u03C62 = iter$__8(rev), len\u03C63 = items\u03C62.length; i < len\u03C63; i++) {
    let part = items\u03C62[i];
    let next = rev[i + 1];
    for (let pi = 0, items\u03C63 = iter$__8(part), len\u03C62 = items\u03C63.length; pi < len\u03C62; pi++) {
      let item = items\u03C63[pi];
      if (item.up > 0 && next) {
        item.up -= 1;
        next.push(item);
        part[pi] = {};
      }
      ;
    }
    ;
  }
  ;
  let container = parts[0];
  let localpart = null;
  let deeppart = null;
  let escaped = false;
  let seenDeepOperator = !!o.global;
  let hasOffStates = false;
  let importance = 0;
  if (((_a = parts[0]) == null ? void 0 : _a.tagName) == "*") {
    parts[0].nestingOperator = ">>>";
    let base = parts[0];
    if (parts[0].length == 0 && parts[1]) {
      base = parts[1];
      base.nestingOperator = ">>>";
    }
    ;
    parts.unshift(rule.rule = Object.assign([], { type: "rule", rule: base, isScope: true, nestingOperator: ">>>" }));
  }
  ;
  for (let i = 0, items\u03C64 = iter$__8(parts), len\u03C66 = items\u03C64.length; i < len\u03C66; i++) {
    let part = items\u03C64[i];
    let prev = parts[i - 1];
    let next = parts[i + 1];
    let name = part.tagName;
    let items = part.slice(0);
    let op = part.op = part.nestingOperator;
    if (name == "*") {
      if (items.length == 0 && next && prev && !seenDeepOperator) {
        prev.rule = next;
        next.op = next.nestingOperator = ">>>";
      }
      ;
      localpart || (localpart = prev);
      escaped || (escaped = part);
      seenDeepOperator = true;
      part.op = ">>>";
    }
    ;
    if (i == 0 && !name && !op && (((_b = part[0]) == null ? void 0 : _b.pseudo) || ((_c = part[0]) == null ? void 0 : _c.implicitScope))) {
      part.implicitScope = true;
    }
    ;
    if (op == ">>") {
      localpart = prev;
      escaped = part;
      part.nestingOperator = ">";
      seenDeepOperator = true;
    } else if (op == ">>>") {
      localpart = prev;
      escaped = part;
      part.nestingOperator = null;
      seenDeepOperator = true;
    }
    ;
    if (!seenDeepOperator) {
      part.isScoped = true;
    }
    ;
    if (name == "html") {
      part.isRoot = true;
    }
    ;
    if (items.some(function(_0) {
      return _0.pseudo == "root";
    })) {
      part.isRoot = true;
    }
    ;
    if (name == "self" || part.isScope) {
      for (let i\u03C62 = 0, items\u03C65 = iter$__8(parts.slice(0, i)), len\u03C64 = items\u03C65.length; i\u03C62 < len\u03C64; i\u03C62++) {
        let prev2 = items\u03C65[i\u03C62];
        prev2.isScoped = false;
      }
      ;
      part.isScope = true;
      part.isScoped = false;
      part.tagName = null;
    }
    ;
    if (name == "body" || name == "html") {
      part.isScoped = false;
    }
    ;
    if (o.ns && (!next || next.nestingOperator == ">>>") && !localpart && !deeppart) {
      if (part.isScope || true) {
        localpart = part;
      }
      ;
    }
    ;
    for (let mi = 0, items\u03C66 = iter$__8(items), len\u03C65 = items\u03C66.length; mi < len\u03C65; mi++) {
      let mod = items\u03C66[mi];
      let name2 = mod.pseudo;
      let meta = modifiers[mod.pseudo];
      if ((_d = name2 == null ? void 0 : name2.match) == null ? void 0 : _d.call(name2, /^\!?\d+$/)) {
        let num = parseInt(name2.replace(/\!/, ""));
        if (name2[0] == "!") {
          mod.not = !mod.not;
        }
        ;
        mod.media = mod.not ? "(max-width: " + (num - 1) + "px)" : "(min-width: " + num + "px)";
      }
      ;
      if (name2 == "important" || name2 == "force") {
        mod.pseudo = null;
        mod.important = true;
        importance += 1;
        true;
      }
      ;
      if (meta == null ? void 0 : meta.media) {
        if (mod.not) {
          if (meta.medianeg) {
            mod.media = meta.medianeg;
          }
          ;
        } else {
          mod.media = meta.media;
        }
        ;
      }
      ;
      if (mod.pseudo == "media") {
        mod.media = "(" + mod.value + ")";
      }
      ;
      if (name2 == "local") {
        mod.remove = true;
        o.hasScopedStyles = true;
        if (o.ns) {
          addClass(part, o.ns);
        }
        ;
      } else if (name2 == "off" || name2 == "out" || name2 == "in") {
        hasOffStates = true;
        (ctx || rule).hasTransitionStyles = true;
        (ctx || rule)["_" + name2 + "_"] = true;
      } else if (mod.name == "enter" || mod.name == "leave") {
        (ctx || rule)["_" + name2 + "_"] = true;
      }
      ;
      if (mod.media) {
        rule.media.push(mod.media);
      }
      ;
      if (name2 === "odd" || name2 === "even") {
        Object.assign(mod, meta);
      }
      ;
    }
    ;
  }
  ;
  let last = parts[parts.length - 1];
  let scope = parts.find(function(_0) {
    return _0.isScope;
  });
  if (!scope && (o.id || parts[0].nestingOperator || parts[0].tagName == "*")) {
    let idx = parts.findIndex(function(_0) {
      return _0.isScoped;
    });
    let parent = 0 >= idx ? rule : parts[idx - 1];
    scope = parent.rule = Object.assign([], { isScope: true, rule: parts[idx], type: "rule" });
  }
  ;
  if (!scope && parts[0].implicitScope) {
    parts[0].isScope = true;
    scope = parts[0];
    scope.isScoped = false;
  }
  ;
  for (let i\u03C63 = 0, items\u03C67 = iter$__8(parts), len\u03C67 = items\u03C67.length; i\u03C63 < len\u03C67; i\u03C63++) {
    let part = items\u03C67[i\u03C63];
    if (part.isScoped && o.scope) {
      let ns = o.scope.cssns();
      addScopeClass(part, ns);
    }
    ;
  }
  ;
  if (scope && o.scope) {
    if (!scope.length && scope != last && scope == parts[0] && !o.id && (!scope.rule || !scope.rule.op)) {
      true;
    } else {
      let id = o.id || (o.scope.cssid ? o.scope.cssid() : o.scope.cssns());
      addScopeClass(scope, id);
    }
    ;
  }
  ;
  let s4 = 0;
  for (let i\u03C64 = 0, items\u03C68 = iter$__8(parts), len\u03C68 = items\u03C68.length; i\u03C64 < len\u03C68; i\u03C64++) {
    let part = items\u03C68[i\u03C64];
    if (part.isScope) {
      continue;
    }
    ;
    let mlen = ((_e = part.metas) == null ? void 0 : _e.length) || 0;
    if (!mlen && part.length) {
      s4 += 1;
    }
    ;
  }
  ;
  if (s4 > 1) {
    s4 = 1;
  }
  ;
  s2 = s4;
  if (o.inline) {
    s1 = 3;
    s2 = 0;
  }
  ;
  if (o.type == "component") {
    s1 = last.isScope ? 0 : 1;
  }
  ;
  if (o.type == "scoped") {
    s1 = last.isScope ? 2 : 1;
  }
  ;
  if (hasOffStates) {
    s1 = 4;
  }
  ;
  s1 += importance;
  if (o.respecify !== false) {
    last.s1 = Math.max(s0, s1);
    last.s2 = s2;
  }
  ;
  if (o.respecify === false) {
    last.s1 = last.s2 = 0;
  }
  ;
  return rule;
}
function render2(root, content, options = {}) {
  let group = [""];
  let groups = [group];
  let rules = root.selectors || [root];
  root[\u03A8rules] = [];
  for (let i\u03C65 = 0, items\u03C69 = iter$__8(rules), len\u03C69 = items\u03C69.length; i\u03C65 < len\u03C69; i\u03C65++) {
    let rule = items\u03C69[i\u03C65];
    let sel = render(rule);
    let [base, media = ""] = sel.split(" @media ");
    rule[\u03A8string] = base;
    if (media) {
      rule[\u03A8media] = media = "@media " + media;
    }
    ;
    if (media != group[0]) {
      groups.push(group = [media]);
    }
    ;
    group.push(base);
    root[\u03A8rules].push(rule);
  }
  ;
  let out = [];
  for (let i\u03C66 = 0, items\u03C610 = iter$__8(groups), len\u03C610 = items\u03C610.length; i\u03C66 < len\u03C610; i\u03C66++) {
    let group2 = items\u03C610[i\u03C66];
    if (!group2[1]) {
      continue;
    }
    ;
    let sel = group2.slice(1).join(",") + " {$CONTENT$}";
    if (group2[0]) {
      sel = group2[0] + "{\n" + sel + "\n}";
    }
    ;
    out.push(sel);
  }
  ;
  return out.join("\n").replace(/\$CONTENT\$/g, content);
}
function unwrap(parent, subsel) {
  let pars = parent.split(",");
  let subs = subsel.split(",");
  let sels = [];
  for (let i\u03C67 = 0, items\u03C611 = iter$__8(subs), len\u03C612 = items\u03C611.length; i\u03C67 < len\u03C612; i\u03C67++) {
    let sub = items\u03C611[i\u03C67];
    for (let i\u03C68 = 0, items\u03C612 = iter$__8(pars), len\u03C611 = items\u03C612.length; i\u03C68 < len\u03C611; i\u03C68++) {
      let par = items\u03C612[i\u03C68];
      let sel = sub;
      if (sel.indexOf("&") >= 0) {
        sel = sel.replace("&", par);
      } else {
        sel = par + " " + sel;
      }
      ;
      sels.push(sel);
    }
    ;
  }
  ;
  return sels.join(",");
}
function parse2(str, options) {
  let sel = parse(str, options);
  let out = sel && rewrite(sel, null, options);
  return out;
}
function test(str, log2 = false) {
  let sel = parse(str);
  let options = { ns: "dvs342" };
  let out = rewrite(sel, null, options);
  let style = render2(out);
  console.log(style);
  if (log2) {
    console.dir(sel, { depth: null });
  }
  ;
  return style;
}
var \u03A8rules, \u03A8string, \u03A8media;
var init_selparse = __esm({
  "src/compiler/selparse.imba"() {
    init_css_selector_parser();
    init_theme();
    \u03A8rules = /* @__PURE__ */ Symbol.for("#rules");
    \u03A8string = /* @__PURE__ */ Symbol.for("#string");
    \u03A8media = /* @__PURE__ */ Symbol.for("#media");
  }
});
var convert, conv;
var init_colors = __esm({
  "vendor/colors.js"() {
    convert = {
      rgb: { channels: 3, labels: "rgb" },
      hsl: { channels: 3, labels: "hsl" },
      hsv: { channels: 3, labels: "hsv" },
      hwb: { channels: 3, labels: "hwb" },
      cmyk: { channels: 4, labels: "cmyk" },
      xyz: { channels: 3, labels: "xyz" },
      lab: { channels: 3, labels: "lab" },
      lch: { channels: 3, labels: "lch" },
      hex: { channels: 1, labels: ["hex"] },
      ansi16: { channels: 1, labels: ["ansi16"] },
      ansi256: { channels: 1, labels: ["ansi256"] },
      hcg: { channels: 3, labels: ["h", "c", "g"] },
      apple: { channels: 3, labels: ["r16", "g16", "b16"] },
      gray: { channels: 1, labels: ["gray"] }
    };
    conv = convert;
    for (const model of Object.keys(convert)) {
      if (!("channels" in convert[model])) {
        throw new Error("missing channels property: " + model);
      }
      if (!("labels" in convert[model])) {
        throw new Error("missing channel labels property: " + model);
      }
      if (convert[model].labels.length !== convert[model].channels) {
        throw new Error("channel and label counts mismatch: " + model);
      }
      const { channels, labels } = convert[model];
      delete convert[model].channels;
      delete convert[model].labels;
      Object.defineProperty(convert[model], "channels", { value: channels });
      Object.defineProperty(convert[model], "labels", { value: labels });
    }
    convert.rgb.hsl = function(rgb) {
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const min = Math.min(r, g, b);
      const max = Math.max(r, g, b);
      const delta = max - min;
      let h;
      let s;
      if (max === min) {
        h = 0;
      } else if (r === max) {
        h = (g - b) / delta;
      } else if (g === max) {
        h = 2 + (b - r) / delta;
      } else if (b === max) {
        h = 4 + (r - g) / delta;
      }
      h = Math.min(h * 60, 360);
      if (h < 0) {
        h += 360;
      }
      const l = (min + max) / 2;
      if (max === min) {
        s = 0;
      } else if (l <= 0.5) {
        s = delta / (max + min);
      } else {
        s = delta / (2 - max - min);
      }
      return [h, s * 100, l * 100];
    };
    convert.rgb.hsv = function(rgb) {
      let rdif;
      let gdif;
      let bdif;
      let h;
      let s;
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const v = Math.max(r, g, b);
      const diff = v - Math.min(r, g, b);
      const diffc = function(c) {
        return (v - c) / 6 / diff + 1 / 2;
      };
      if (diff === 0) {
        h = 0;
        s = 0;
      } else {
        s = diff / v;
        rdif = diffc(r);
        gdif = diffc(g);
        bdif = diffc(b);
        if (r === v) {
          h = bdif - gdif;
        } else if (g === v) {
          h = 1 / 3 + rdif - bdif;
        } else if (b === v) {
          h = 2 / 3 + gdif - rdif;
        }
        if (h < 0) {
          h += 1;
        } else if (h > 1) {
          h -= 1;
        }
      }
      return [
        h * 360,
        s * 100,
        v * 100
      ];
    };
    convert.rgb.hwb = function(rgb) {
      const r = rgb[0];
      const g = rgb[1];
      let b = rgb[2];
      const h = convert.rgb.hsl(rgb)[0];
      const w = 1 / 255 * Math.min(r, Math.min(g, b));
      b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
      return [h, w * 100, b * 100];
    };
    convert.rgb.cmyk = function(rgb) {
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const k = Math.min(1 - r, 1 - g, 1 - b);
      const c = (1 - r - k) / (1 - k) || 0;
      const m = (1 - g - k) / (1 - k) || 0;
      const y = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y * 100, k * 100];
    };
    convert.rgb.xyz = function(rgb) {
      let r = rgb[0] / 255;
      let g = rgb[1] / 255;
      let b = rgb[2] / 255;
      r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
      g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
      b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
      const x = r * 0.4124564 + g * 0.3575761 + b * 0.1804375;
      const y = r * 0.2126729 + g * 0.7151522 + b * 0.072175;
      const z = r * 0.0193339 + g * 0.119192 + b * 0.9503041;
      return [x * 100, y * 100, z * 100];
    };
    convert.rgb.lab = function(rgb) {
      const xyz = convert.rgb.xyz(rgb);
      let x = xyz[0];
      let y = xyz[1];
      let z = xyz[2];
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
      const l = 116 * y - 16;
      const a = 500 * (x - y);
      const b = 200 * (y - z);
      return [l, a, b];
    };
    convert.hsl.rgb = function(hsl) {
      const h = hsl[0] / 360;
      const s = hsl[1] / 100;
      const l = hsl[2] / 100;
      let t2;
      let t3;
      let val;
      if (s === 0) {
        val = l * 255;
        return [val, val, val];
      }
      if (l < 0.5) {
        t2 = l * (1 + s);
      } else {
        t2 = l + s - l * s;
      }
      const t1 = 2 * l - t2;
      const rgb = [0, 0, 0];
      for (let i = 0; i < 3; i++) {
        t3 = h + 1 / 3 * -(i - 1);
        if (t3 < 0) {
          t3++;
        }
        if (t3 > 1) {
          t3--;
        }
        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }
        rgb[i] = val * 255;
      }
      return rgb;
    };
    convert.hsl.hsv = function(hsl) {
      const h = hsl[0];
      let s = hsl[1] / 100;
      let l = hsl[2] / 100;
      let smin = s;
      const lmin = Math.max(l, 0.01);
      l *= 2;
      s *= l <= 1 ? l : 2 - l;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      const v = (l + s) / 2;
      const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
      return [h, sv * 100, v * 100];
    };
    convert.hsv.rgb = function(hsv) {
      const h = hsv[0] / 60;
      const s = hsv[1] / 100;
      let v = hsv[2] / 100;
      const hi = Math.floor(h) % 6;
      const f = h - Math.floor(h);
      const p = 255 * v * (1 - s);
      const q = 255 * v * (1 - s * f);
      const t = 255 * v * (1 - s * (1 - f));
      v *= 255;
      switch (hi) {
        case 0:
          return [v, t, p];
        case 1:
          return [q, v, p];
        case 2:
          return [p, v, t];
        case 3:
          return [p, q, v];
        case 4:
          return [t, p, v];
        case 5:
          return [v, p, q];
      }
    };
    convert.hsv.hsl = function(hsv) {
      const h = hsv[0];
      const s = hsv[1] / 100;
      const v = hsv[2] / 100;
      const vmin = Math.max(v, 0.01);
      let sl;
      let l;
      l = (2 - s) * v;
      const lmin = (2 - s) * vmin;
      sl = s * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l /= 2;
      return [h, sl * 100, l * 100];
    };
    convert.hwb.rgb = function(hwb) {
      const h = hwb[0] / 360;
      let wh = hwb[1] / 100;
      let bl = hwb[2] / 100;
      const ratio = wh + bl;
      let f;
      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }
      const i = Math.floor(6 * h);
      const v = 1 - bl;
      f = 6 * h - i;
      if ((i & 1) !== 0) {
        f = 1 - f;
      }
      const n = wh + f * (v - wh);
      let r;
      let g;
      let b;
      switch (i) {
        default:
        case 6:
        case 0:
          r = v;
          g = n;
          b = wh;
          break;
        case 1:
          r = n;
          g = v;
          b = wh;
          break;
        case 2:
          r = wh;
          g = v;
          b = n;
          break;
        case 3:
          r = wh;
          g = n;
          b = v;
          break;
        case 4:
          r = n;
          g = wh;
          b = v;
          break;
        case 5:
          r = v;
          g = wh;
          b = n;
          break;
      }
      return [r * 255, g * 255, b * 255];
    };
    convert.cmyk.rgb = function(cmyk) {
      const c = cmyk[0] / 100;
      const m = cmyk[1] / 100;
      const y = cmyk[2] / 100;
      const k = cmyk[3] / 100;
      const r = 1 - Math.min(1, c * (1 - k) + k);
      const g = 1 - Math.min(1, m * (1 - k) + k);
      const b = 1 - Math.min(1, y * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.rgb = function(xyz) {
      const x = xyz[0] / 100;
      const y = xyz[1] / 100;
      const z = xyz[2] / 100;
      let r;
      let g;
      let b;
      r = x * 3.2404542 + y * -1.5371385 + z * -0.4985314;
      g = x * -0.969266 + y * 1.8760108 + z * 0.041556;
      b = x * 0.0556434 + y * -0.2040259 + z * 1.0572252;
      r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
      g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
      b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.lab = function(xyz) {
      let x = xyz[0];
      let y = xyz[1];
      let z = xyz[2];
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
      const l = 116 * y - 16;
      const a = 500 * (x - y);
      const b = 200 * (y - z);
      return [l, a, b];
    };
    convert.lab.xyz = function(lab) {
      const l = lab[0];
      const a = lab[1];
      const b = lab[2];
      let x;
      let y;
      let z;
      y = (l + 16) / 116;
      x = a / 500 + y;
      z = y - b / 200;
      const y2 = y ** 3;
      const x2 = x ** 3;
      const z2 = z ** 3;
      y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
      x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
      z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
      x *= 95.047;
      y *= 100;
      z *= 108.883;
      return [x, y, z];
    };
    convert.lab.lch = function(lab) {
      const l = lab[0];
      const a = lab[1];
      const b = lab[2];
      let h;
      const hr = Math.atan2(b, a);
      h = hr * 360 / 2 / Math.PI;
      if (h < 0) {
        h += 360;
      }
      const c = Math.sqrt(a * a + b * b);
      return [l, c, h];
    };
    convert.lch.lab = function(lch) {
      const l = lch[0];
      const c = lch[1];
      const h = lch[2];
      const hr = h / 360 * 2 * Math.PI;
      const a = c * Math.cos(hr);
      const b = c * Math.sin(hr);
      return [l, a, b];
    };
    convert.rgb.ansi16 = function(args, saturation = null) {
      const [r, g, b] = args;
      let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
      value = Math.round(value / 50);
      if (value === 0) {
        return 30;
      }
      let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
      if (value === 2) {
        ansi += 60;
      }
      return ansi;
    };
    convert.hsv.ansi16 = function(args) {
      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };
    convert.rgb.ansi256 = function(args) {
      const r = args[0];
      const g = args[1];
      const b = args[2];
      if (r === g && g === b) {
        if (r < 8) {
          return 16;
        }
        if (r > 248) {
          return 231;
        }
        return Math.round((r - 8) / 247 * 24) + 232;
      }
      const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
      return ansi;
    };
    convert.ansi16.rgb = function(args) {
      let color = args % 10;
      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }
        color = color / 10.5 * 255;
        return [color, color, color];
      }
      const mult = (~~(args > 50) + 1) * 0.5;
      const r = (color & 1) * mult * 255;
      const g = (color >> 1 & 1) * mult * 255;
      const b = (color >> 2 & 1) * mult * 255;
      return [r, g, b];
    };
    convert.ansi256.rgb = function(args) {
      if (args >= 232) {
        const c = (args - 232) * 10 + 8;
        return [c, c, c];
      }
      args -= 16;
      let rem;
      const r = Math.floor(args / 36) / 5 * 255;
      const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
      const b = rem % 6 / 5 * 255;
      return [r, g, b];
    };
    convert.rgb.hex = function(args) {
      const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
      const string2 = integer.toString(16).toUpperCase();
      return "000000".substring(string2.length) + string2;
    };
    convert.hex.rgb = function(args) {
      const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
      if (!match) {
        return [0, 0, 0];
      }
      let colorString = match[0];
      if (match[0].length === 3) {
        colorString = colorString.split("").map((char) => {
          return char + char;
        }).join("");
      }
      const integer = parseInt(colorString, 16);
      const r = integer >> 16 & 255;
      const g = integer >> 8 & 255;
      const b = integer & 255;
      return [r, g, b];
    };
    convert.hex.hsl = function(args) {
      return convert.rgb.hsl(convert.hex.rgb(args));
    };
    convert.rgb.hcg = function(rgb) {
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const max = Math.max(Math.max(r, g), b);
      const min = Math.min(Math.min(r, g), b);
      const chroma = max - min;
      let grayscale;
      let hue;
      if (chroma < 1) {
        grayscale = min / (1 - chroma);
      } else {
        grayscale = 0;
      }
      if (chroma <= 0) {
        hue = 0;
      } else if (max === r) {
        hue = (g - b) / chroma % 6;
      } else if (max === g) {
        hue = 2 + (b - r) / chroma;
      } else {
        hue = 4 + (r - g) / chroma;
      }
      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };
    convert.hsl.hcg = function(hsl) {
      const s = hsl[1] / 100;
      const l = hsl[2] / 100;
      const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
      let f = 0;
      if (c < 1) {
        f = (l - 0.5 * c) / (1 - c);
      }
      return [hsl[0], c * 100, f * 100];
    };
    convert.hsv.hcg = function(hsv) {
      const s = hsv[1] / 100;
      const v = hsv[2] / 100;
      const c = s * v;
      let f = 0;
      if (c < 1) {
        f = (v - c) / (1 - c);
      }
      return [hsv[0], c * 100, f * 100];
    };
    convert.hcg.rgb = function(hcg) {
      const h = hcg[0] / 360;
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      if (c === 0) {
        return [g * 255, g * 255, g * 255];
      }
      const pure = [0, 0, 0];
      const hi = h % 1 * 6;
      const v = hi % 1;
      const w = 1 - v;
      let mg = 0;
      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v;
          pure[2] = 0;
          break;
        case 1:
          pure[0] = w;
          pure[1] = 1;
          pure[2] = 0;
          break;
        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v;
          break;
        case 3:
          pure[0] = 0;
          pure[1] = w;
          pure[2] = 1;
          break;
        case 4:
          pure[0] = v;
          pure[1] = 0;
          pure[2] = 1;
          break;
        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w;
      }
      mg = (1 - c) * g;
      return [
        (c * pure[0] + mg) * 255,
        (c * pure[1] + mg) * 255,
        (c * pure[2] + mg) * 255
      ];
    };
    convert.hcg.hsv = function(hcg) {
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      const v = c + g * (1 - c);
      let f = 0;
      if (v > 0) {
        f = c / v;
      }
      return [hcg[0], f * 100, v * 100];
    };
    convert.hcg.hsl = function(hcg) {
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      const l = g * (1 - c) + 0.5 * c;
      let s = 0;
      if (l > 0 && l < 0.5) {
        s = c / (2 * l);
      } else if (l >= 0.5 && l < 1) {
        s = c / (2 * (1 - l));
      }
      return [hcg[0], s * 100, l * 100];
    };
    convert.hcg.hwb = function(hcg) {
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      const v = c + g * (1 - c);
      return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };
    convert.hwb.hcg = function(hwb) {
      const w = hwb[1] / 100;
      const b = hwb[2] / 100;
      const v = 1 - b;
      const c = v - w;
      let g = 0;
      if (c < 1) {
        g = (v - c) / (1 - c);
      }
      return [hwb[0], c * 100, g * 100];
    };
    convert.apple.rgb = function(apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };
    convert.rgb.apple = function(rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };
    convert.gray.rgb = function(args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };
    convert.gray.hsl = function(args) {
      return [0, 0, args[0]];
    };
    convert.gray.hsv = convert.gray.hsl;
    convert.gray.hwb = function(gray) {
      return [0, 100, gray[0]];
    };
    convert.gray.cmyk = function(gray) {
      return [0, 0, 0, gray[0]];
    };
    convert.gray.lab = function(gray) {
      return [gray[0], 0, 0];
    };
    convert.gray.hex = function(gray) {
      const val = Math.round(gray[0] / 100 * 255) & 255;
      const integer = (val << 16) + (val << 8) + val;
      const string2 = integer.toString(16).toUpperCase();
      return "000000".substring(string2.length) + string2;
    };
    convert.rgb.gray = function(rgb) {
      const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
  }
});
var styler_exports = {};
__export2(styler_exports, {
  AutoPrefixes: () => AutoPrefixes,
  Calc: () => Calc,
  Color: () => Color,
  Length: () => Length,
  NamedColor: () => NamedColor,
  StyleExtenders: () => StyleExtenders,
  StyleRule: () => StyleRule,
  StyleSheet: () => StyleSheet,
  StyleTheme: () => StyleTheme,
  Tint: () => Tint,
  Var: () => Var,
  abbreviations: () => abbreviations,
  aliases: () => aliases,
  layouts: () => layouts,
  parseColorString: () => parseColorString,
  validTypes: () => validTypes
});
function iter$__9(a) {
  let v;
  return a ? (v = a.toIterable) ? v.call(a) : a : [];
}
function isNumber(val) {
  if (val._value && val._value._type == "NUMBER" && !val._unit) {
    return true;
  }
  ;
  return false;
}
function parseColorString(str) {
  let m;
  if (named_colors[str]) {
    str = named_colors[str];
  }
  ;
  if (str[0] == "#") {
    let hex = conv.hex.rgb(str);
    return conv.rgb.hsl(hex);
  }
  ;
  if (m = str.match(/^(hsla?|rgba?)\((.+)\)$/)) {
    let [a, b, c, d = ""] = m[2].replace(/[\,\/]g/, " ").split(/\s+/g);
    let hsl;
    if (m[1] == "rgb" || m[1] == "rgba") {
      hsl = conv.rgb.hsl([parseFloat(a), parseFloat(b), parseFloat(c)]);
    }
    ;
    if (m[1] == "hsl" || m[1] == "hsla") {
      hsl = [parseFloat(a), parseFloat(b), parseFloat(c)];
    }
    ;
    return hsl;
  }
  ;
  return null;
}
function parseColors(palette, colors2) {
  for (let i\u03C65 = 0, keys\u03C63 = Object.keys(colors2), l\u03C64 = keys\u03C63.length, name, variations; i\u03C65 < l\u03C64; i\u03C65++) {
    name = keys\u03C63[i\u03C65];
    variations = colors2[name];
    if (typeof variations == "string") {
      palette[name] = variations;
      continue;
    }
    ;
    for (let i\u03C66 = 0, keys\u03C64 = Object.keys(variations), l\u03C63 = keys\u03C64.length, subname, raw; i\u03C66 < l\u03C63; i\u03C66++) {
      subname = keys\u03C64[i\u03C66];
      raw = variations[subname];
      let path = name + subname;
      if (palette[raw]) {
        palette[path] = palette[raw];
      } else {
        let [h, s, l] = parseColorString(raw);
        let color = palette[path] = new Color(path, h, s, l, "100%");
      }
      ;
    }
    ;
  }
  ;
  return palette;
}
var row$\u03C6, \u03A8stack, \u03A8parts, \u03A8apply, \u03A8register, \u03A8string2, \u03A8media2, \u03A8rules2, ThemeInstance, ThemeCache, layouts, validTypes, aliases, abbreviations, Color, NamedColor, Tint, Length, Var, Calc, defaultPalette, VALID_CSS_UNITS, StyleTheme, StyleExtenders, AutoPrefixes, StyleSheet, StyleRule;
var init_styler = __esm({
  "src/compiler/styler.imba"() {
    init_selparse();
    init_colors();
    init_theme();
    init_theme();
    \u03A8stack = /* @__PURE__ */ Symbol.for("#stack");
    \u03A8parts = /* @__PURE__ */ Symbol.for("#parts");
    \u03A8apply = /* @__PURE__ */ Symbol.for("#apply");
    \u03A8register = /* @__PURE__ */ Symbol.for("#register");
    \u03A8string2 = /* @__PURE__ */ Symbol.for("#string");
    \u03A8media2 = /* @__PURE__ */ Symbol.for("#media");
    \u03A8rules2 = /* @__PURE__ */ Symbol.for("#rules");
    ThemeInstance = null;
    ThemeCache = /* @__PURE__ */ new WeakMap();
    layouts = {
      vflex: function(o) {
        o.display = "flex";
        return o.fld = "column";
      },
      hflex: function(o) {
        o.display = "flex";
        return o.fld = "row";
      },
      box: function(o) {
        o.display = "flex";
        o.ai = "center";
        return o.jc = "center";
      },
      vbox: function(o) {
        o.display = "flex";
        o.fld = "column";
        o.ai = "center";
        return o.jc = "center";
      },
      hbox: function(o) {
        o.display = "flex";
        o.fld = "row";
        o.ai = "center";
        return o.jc = "center";
      },
      lbox: function(o) {
        o.display = "flex";
        o.fld = "row";
        o.ai = "center";
        return o.jc = "flex-start";
      },
      rbox: function(o) {
        o.display = "flex";
        o.fld = "row";
        o.ai = "center";
        return o.jc = "flex-end";
      },
      tbox: function(o) {
        o.display = "flex";
        o.fld = "column";
        o.ai = "center";
        return o.jc = "flex-start";
      },
      bbox: function(o) {
        o.display = "flex";
        o.fld = "column";
        o.ai = "center";
        return o.jc = "flex-end";
      },
      hgrid: function(o) {
        o.display = "grid";
        o.gaf = "column";
        return o.gac = "1fr";
      },
      vgrid: function(o) {
        o.display = "grid";
        return o.gaf = "row";
      }
    };
    row$\u03C6 = 0;
    for (let dir of iter$__9("vh")) {
      let row = row$\u03C6++;
      for (let va of iter$__9("tcbs")) {
        for (let ha of iter$__9("lcrs")) {
          let vm = {
            t: "flex-start",
            b: "flex-end",
            c: "center",
            s: row ? "stretch" : "space-between"
          };
          let hm = {
            l: "flex-start",
            r: "flex-end",
            c: "center",
            s: row ? "space-between" : "stretch"
          };
          let name = "" + dir + va + ha;
          let combo = {
            display: "flex",
            fld: row ? "row" : "column",
            jc: row ? hm[ha] : vm[va],
            ai: row ? vm[va] : hm[ha],
            ac: row ? vm[va] : hm[ha]
          };
          layouts[name] = function(o) {
            Object.assign(o, combo);
            return o;
          };
        }
        ;
      }
      ;
    }
    validTypes = {
      ease: "linear|ease|ease-in|ease-out|ease-in-out|step-start|step-end|steps\u0192|cubic-bezier\u0192"
    };
    for (let i\u03C6 = 0, keys\u03C6 = Object.keys(validTypes), l\u03C6 = keys\u03C6.length, k, v; i\u03C6 < l\u03C6; i\u03C6++) {
      k = keys\u03C6[i\u03C6];
      v = validTypes[k];
      let o = {};
      for (let i\u03C62 = 0, items\u03C6 = iter$__9(v.split("|")), len\u03C6 = items\u03C6.length; i\u03C62 < len\u03C6; i\u03C62++) {
        let item = items\u03C6[i\u03C62];
        o[item] = 1;
      }
      ;
      validTypes[k] = o;
    }
    aliases = {
      c: "color",
      d: "display",
      pos: "position",
      p: "padding",
      pl: "padding-left",
      pr: "padding-right",
      pt: "padding-top",
      pb: "padding-bottom",
      px: "padding-x",
      py: "padding-y",
      m: "margin",
      ml: "margin-left",
      mr: "margin-right",
      mt: "margin-top",
      mb: "margin-bottom",
      mx: "margin-x",
      my: "margin-y",
      w: "width",
      h: "height",
      t: "top",
      b: "bottom",
      l: "left",
      r: "right",
      s: "size",
      mih: "min-height",
      mah: "max-height",
      miw: "min-width",
      maw: "max-width",
      ji: "justify-items",
      jc: "justify-content",
      js: "justify-self",
      j: ["justify-content", "justify-items"],
      ai: "align-items",
      ac: "align-content",
      as: "align-self",
      a: ["align-content", "align-items"],
      jai: "place-items",
      jac: "place-content",
      jas: "place-self",
      ja: "justify-align",
      fl: "flex",
      flf: "flex-flow",
      fld: "flex-direction",
      flb: "flex-basis",
      flg: "flex-grow",
      fls: "flex-shrink",
      flw: "flex-wrap",
      ff: "font-family",
      fs: "font-size",
      fw: "font-weight",
      ts: "text-shadow",
      txs: "text-shadow",
      td: "text-decoration",
      tdl: "text-decoration-line",
      tdc: "text-decoration-color",
      tds: "text-decoration-style",
      tdt: "text-decoration-thickness",
      tdsi: "text-decoration-skip-ink",
      tuo: "text-underline-offset",
      te: "text-emphasis",
      tec: "text-emphasis-color",
      tes: "text-emphasis-style",
      tep: "text-emphasis-position",
      tet: "text-emphasis-thickness",
      tt: "text-transform",
      ta: "text-align",
      va: "vertical-align",
      ls: "letter-spacing",
      lh: "line-height",
      bd: "border",
      bdr: "border-right",
      bdl: "border-left",
      bdt: "border-top",
      bdb: "border-bottom",
      bdx: "border-x",
      bdy: "border-y",
      bs: "border-style",
      bsr: "border-right-style",
      bsl: "border-left-style",
      bst: "border-top-style",
      bsb: "border-bottom-style",
      bsx: "border-x-style",
      bsy: "border-y-style",
      bw: "border-width",
      bwr: "border-right-width",
      bwl: "border-left-width",
      bwt: "border-top-width",
      bwb: "border-bottom-width",
      bwx: "border-x-width",
      bwy: "border-y-width",
      bc: "border-color",
      bcr: "border-right-color",
      bcl: "border-left-color",
      bct: "border-top-color",
      bcb: "border-bottom-color",
      bcx: "border-x-color",
      bcy: "border-y-color",
      rd: "border-radius",
      rdtl: "border-top-left-radius",
      rdtr: "border-top-right-radius",
      rdbl: "border-bottom-left-radius",
      rdbr: "border-bottom-right-radius",
      rdt: "border-top-radius",
      rdb: "border-bottom-radius",
      rdl: "border-left-radius",
      rdr: "border-right-radius",
      bg: "background",
      bgp: "background-position",
      bgc: "background-color",
      bgr: "background-repeat",
      bgi: "background-image",
      bga: "background-attachment",
      bgs: "background-size",
      bgo: "background-origin",
      bgclip: "background-clip",
      g: "gap",
      rg: "row-gap",
      cg: "column-gap",
      gtr: "grid-template-rows",
      gtc: "grid-template-columns",
      gta: "grid-template-areas",
      gar: "grid-auto-rows",
      gac: "grid-auto-columns",
      gaf: "grid-auto-flow",
      gcg: "grid-column-gap",
      grg: "grid-row-gap",
      ga: "grid-area",
      gr: "grid-row",
      gc: "grid-column",
      gt: "grid-template",
      grs: "grid-row-start",
      gcs: "grid-column-start",
      gre: "grid-row-end",
      gce: "grid-column-end",
      shadow: "box-shadow",
      bxs: "box-shadow",
      of: "overflow",
      ofx: "overflow-x",
      ofy: "overflow-y",
      ofa: "overflow-anchor",
      tof: "text-overflow",
      prefix: "content@before",
      suffix: "content@after",
      x: "x",
      y: "y",
      z: "z",
      rotate: "rotate",
      scale: "scale",
      "scale-x": "scale-x",
      "scale-y": "scale-y",
      "skew-x": "skew-x",
      "skew-y": "skew-y",
      origin: "transform-origin",
      ws: "white-space",
      zi: "z-index",
      pe: "pointer-events",
      us: "user-select",
      o: "opacity",
      tween: "transition",
      e: "ease-styles",
      ea: "ease-all",
      ead: "ease-all-duration",
      eaf: "ease-all-function",
      eaw: "ease-all-delay",
      es: "ease-styles",
      esd: "ease-styles-duration",
      esf: "ease-styles-function",
      esw: "ease-styles-delay",
      eo: "ease-opacity",
      eod: "ease-opacity-duration",
      eof: "ease-opacity-function",
      eow: "ease-opacity-delay",
      ec: "ease-colors",
      ecd: "ease-colors-duration",
      ecf: "ease-colors-function",
      ecw: "ease-colors-delay",
      eb: "ease-box",
      ebd: "ease-box-duration",
      ebf: "ease-box-function",
      ebw: "ease-box-delay",
      et: "ease-transform",
      etd: "ease-transform-duration",
      etf: "ease-transform-function",
      etw: "ease-transform-delay",
      ol: "outline",
      olo: "outline-offset",
      olc: "outline-color",
      ols: "outline-style",
      olw: "outline-width"
    };
    abbreviations = {};
    for (let i\u03C63 = 0, keys\u03C62 = Object.keys(aliases), l\u03C62 = keys\u03C62.length, k, v; i\u03C63 < l\u03C62; i\u03C63++) {
      k = keys\u03C62[i\u03C63];
      v = aliases[k];
      if (typeof v == "string") {
        abbreviations[v] = k;
      }
      ;
    }
    Color = class {
      static from(raw) {
        if (typeof raw == "string") {
          if (raw[0] == "#" && !raw.match(/^\#([A-Fa-f0-9]{6})([A-Fa-f0-9]{2})?$/)) {
            return new NamedColor(raw.slice(1));
          }
          ;
          raw = parseColorString(raw);
        }
        ;
        if (raw instanceof Array) {
          return new this("", raw[0], raw[1], raw[2]);
        }
        ;
        return null;
      }
      constructor(name, h, s, l, a = 1) {
        this.name = name;
        this.h = h;
        this.s = s;
        this.l = l;
        this.a = a;
      }
      alpha(a = 1) {
        return new Color(this.name, this.h, this.s, this.l, a);
      }
      clone() {
        return new Color(this.name, this.h, this.s, this.l, this.a);
      }
      mix(other, hw = 0.5, sw = 0.5, lw = 0.5) {
        let h1 = this.h + (other.h - this.h) * hw;
        let s1 = this.s + (other.s - this.s) * sw;
        let l1 = this.l + (other.l - this.l) * lw;
        return new Color(this.name + other.name, h1, s1, l1);
      }
      toString(a = this.a) {
        if (typeof a == "string" && a[0] == "$") {
          a = "var(--" + a.slice(1) + ",100%)";
        }
        ;
        return "hsla(" + this.h.toFixed(2) + "," + this.s.toFixed(2) + "%," + this.l.toFixed(2) + "%," + a + ")";
      }
      toVar(round = 2) {
        return "" + Math.round(this.h) + "," + Math.round(this.s) + "%," + Math.round(this.l) + "%";
      }
      c() {
        return this.toString();
      }
    };
    NamedColor = class extends Color {
      toVar() {
        return "var(--c_" + this.name + ")";
      }
    };
    Tint = class extends Color {
      alpha(a = 1) {
        return new Tint(this.name, this.h, this.s, this.l, a);
      }
      clone() {
        return new Tint(this.name, this.h, this.s, this.l, this.a);
      }
      toString(a = this.a) {
        if (typeof a == "string" && a[0] == "$") {
          a = "var(--" + a.slice(1) + ",100%)";
        }
        ;
        return "hsla(var(--" + this.name + ")," + a + ")";
      }
      toVar(round = 2) {
        return "var(--" + this.name + ")";
      }
    };
    Length = class {
      static parse(value) {
        let m = String(value).match(/^(\-?[\d\.]+)(\w+|%)?$/);
        if (!m) {
          return null;
        }
        ;
        return new this(parseFloat(m[1]), m[2]);
      }
      constructor(number, unit) {
        this.number = number;
        this.unit = unit;
      }
      valueOf() {
        return this.number;
      }
      toString() {
        return this.number + (this.unit || "");
      }
      clone(num = this.number, u = this.unit) {
        return new Length(num, u);
      }
      rounded() {
        return this.clone(Math.round(this.number));
      }
      c() {
        return this.toString();
      }
      get _unit() {
        return this.unit;
      }
      get _number() {
        return this.number;
      }
    };
    Var = class {
      constructor(name, fallback) {
        this.name = name;
        this.fallback = fallback;
      }
      c() {
        return this.fallback ? "var(--" + this.name + "," + (this.fallback.c ? this.fallback.c() : String(this.fallback)) + ")" : "var(--" + this.name + ")";
      }
    };
    Calc = class {
      constructor(expr) {
        this.expr = expr;
      }
      cpart(parts) {
        let out = "(";
        for (let i\u03C64 = 0, items\u03C62 = iter$__9(parts), len\u03C62 = items\u03C62.length; i\u03C64 < len\u03C62; i\u03C64++) {
          let part = items\u03C62[i\u03C64];
          if (typeof part == "string") {
            out += " " + part + " ";
          } else if (typeof part == "number") {
            out += part;
          } else if (part.c instanceof Function) {
            out += part.c();
          } else if (part instanceof Array) {
            out += this.cpart(part);
          }
          ;
        }
        ;
        out += ")";
        return out;
      }
      c() {
        return "calc" + this.cpart(this.expr);
      }
    };
    defaultPalette = {
      current: { string: "currentColor", c: function() {
        return "currentColor";
      } },
      transparent: new Color("transparent", 0, 0, 100, "0%"),
      clear: new Color("transparent", 100, 100, 100, "0%"),
      black: new Color("black", 0, 0, 0, "100%"),
      white: new Color("white", 0, 0, 100, "100%")
    };
    parseColors(defaultPalette, colors);
    VALID_CSS_UNITS = "cm mm Q in pc pt px em ex ch rem vw vh vmin vmax % s ms fr deg rad grad turn Hz kHz".split(" ");
    StyleTheme = class {
      static instance() {
        return ThemeInstance || (ThemeInstance = new this());
      }
      static propAbbr(name) {
        return abbreviations[name] || name;
      }
      static wrap(config) {
        if (!config) {
          return this.instance();
        }
        ;
        let theme = ThemeCache.get(config);
        if (!theme) {
          ThemeCache.set(config, theme = new this(config));
        }
        ;
        return theme;
      }
      constructor(ext = {}) {
        this.options = theme_exports;
        this.palette = Object.assign({}, defaultPalette);
        if (ext.theme) {
          ext = ext.theme;
        }
        ;
        if (ext && ext.colors) {
          parseColors(this.palette, ext.colors);
        }
        ;
      }
      expandProperty(name) {
        return aliases[name] || void 0;
      }
      expandValue(value, config) {
        if (value == void 0) {
          value = config.default;
        }
        ;
        if (config.hasOwnProperty(value)) {
          value = config[value];
        }
        ;
        if (typeof value == "number" && config.NUMBER) {
          let [step, num, unit] = config.NUMBER.match(/^(\-?[\d\.]+)(\w+|%)?$/);
          return value * parseFloat(num) + unit;
        }
        ;
        return value;
      }
      padding_x([l, r = l]) {
        return { "padding-left": l, "padding-right": r };
      }
      padding_y([t, b = t]) {
        return { "padding-top": t, "padding-bottom": b };
      }
      margin_x([l, r = l]) {
        return { "margin-left": l, "margin-right": r };
      }
      margin_y([t, b = t]) {
        return { "margin-top": t, "margin-bottom": b };
      }
      ease(pars) {
        return this.$ease(pars, "s");
      }
      ease_all(pars) {
        return this.$ease(pars, "a");
      }
      ease_opacity(pars) {
        return this.$ease(pars, "o");
      }
      ease_styles(pars) {
        return this.$ease(pars, "s");
      }
      ease_box(pars) {
        return this.$ease(pars, "b");
      }
      ease_transform(pars) {
        return this.$ease(pars, "t");
      }
      ease_colors(pars) {
        return this.$ease(pars, "c");
      }
      $ease(pars, k = "", slot = null) {
        var _a;
        pars = pars.slice(0);
        let o = { __ease__: k };
        if ((_a = pars[0]) == null ? void 0 : _a.unit) {
          o["--e_" + k + "d"] = pars[0];
          pars.shift();
        }
        ;
        if (pars[0] && !pars[0].unit) {
          let ev = this.$varFallback("ease", [pars[0]]);
          o["--e_" + k + "f"] = ev;
          pars.shift();
        }
        ;
        if (pars[0] && pars[0].unit) {
          o["--e_" + k + "w"] = pars[0];
          pars.shift();
        }
        ;
        return o;
      }
      inset([t, r = t, b = t, l = r]) {
        return { position: "absolute", top: t, right: r, bottom: b, left: l };
      }
      size([w, h = w]) {
        return { width: w, height: h };
      }
      grid(params) {
        let m;
        if (m = this.$varFallback("grid", params)) {
          return m;
        }
        ;
        return;
      }
      animation(...params) {
        let valids = {
          normal: 1,
          reverse: 1,
          alternate: 1,
          "alternate-reverse": 1,
          infinite: 2,
          none: 3,
          forwards: 3,
          backwards: 3,
          both: 3,
          running: 4,
          paused: 4
        };
        let used = {};
        for (let k = 0, items\u03C63 = iter$__9(params), len\u03C64 = items\u03C63.length; k < len\u03C64; k++) {
          let anim = items\u03C63[k];
          let name = null;
          let ease = null;
          for (let i = 0, items\u03C64 = iter$__9(anim), len\u03C63 = items\u03C64.length; i < len\u03C63; i++) {
            let part = items\u03C64[i];
            let str = String(part);
            let typ = valids[str];
            if (validTypes.ease[str] && !ease) {
              ease = true;
            } else if (typ) {
              if (used[typ]) {
                name = [i, str];
              }
              ;
              used[typ] = true;
            } else if (str.match(/^[^\d\.]/) && str.indexOf("(") == -1) {
              if (name) {
                ease = [i, str];
              } else {
                name = [i, str];
              }
              ;
            }
            ;
          }
          ;
          if (name) {
            anim[name[0]] = new Var("animation-" + name[1], name[1]);
          }
          ;
          if (ease instanceof Array) {
            let fallback = this.options.variants.easings[ease[1]];
            anim[ease[0]] = new Var("ease-" + ease[1], fallback);
          }
          ;
        }
        ;
        return { animation: params };
      }
      animation_timing_function(...params) {
        for (let i = 0, items\u03C65 = iter$__9(params), len\u03C65 = items\u03C65.length; i < len\u03C65; i++) {
          let param = items\u03C65[i];
          let fb = this.$varFallback("ease", param);
          if (fb) {
            params[i] = fb;
          }
          ;
        }
        ;
        return params;
      }
      animation_name(...params) {
        let m;
        for (let i = 0, items\u03C66 = iter$__9(params), len\u03C66 = items\u03C66.length; i < len\u03C66; i++) {
          let param = items\u03C66[i];
          let fb = this.$varFallback("animation", param);
          if (fb) {
            params[i] = fb;
          }
          ;
        }
        ;
        return params;
        if (m = this.$varFallback("animation", params)) {
          return m;
        }
        ;
        return;
      }
      display(params) {
        let out = { display: params };
        for (let i\u03C67 = 0, items\u03C67 = iter$__9(params), len\u03C67 = items\u03C67.length, layout; i\u03C67 < len\u03C67; i\u03C67++) {
          let par = items\u03C67[i\u03C67];
          if (layout = layouts[String(par)]) {
            layout.call(this, out, par, params);
          }
          ;
        }
        ;
        return out;
      }
      text_transform(params) {
        let out = { "text-transform": params };
        let str = String(params[0]);
        if (str === "cap") {
          out["text-transform"] = "capitalize";
        } else if (str === "up") {
          out["text-transform"] = "uppercase";
        }
        ;
        return out;
      }
      position(params) {
        let out = { position: params };
        let str = String(params[0]);
        if (str == "abs") {
          out.position = "absolute";
        } else if (str == "rel") {
          out.position = "relative";
        }
        ;
        return out;
      }
      width([...params]) {
        let o = {};
        for (let i\u03C68 = 0, items\u03C68 = iter$__9(params), len\u03C68 = items\u03C68.length; i\u03C68 < len\u03C68; i\u03C68++) {
          let param = items\u03C68[i\u03C68];
          let opts = param._options || {};
          let u = param._unit;
          if (u == "c" || u == "col" || u == "cols") {
            o["grid-column-end"] = "span " + param._number;
          } else if (opts.op && String(opts.op) == ">") {
            o["min-width"] = param;
          } else if (opts.op && String(opts.op) == "<") {
            o["max-width"] = param;
          } else {
            o.width = param;
          }
          ;
        }
        ;
        return o;
      }
      height([...params]) {
        let o = {};
        for (let i\u03C69 = 0, items\u03C69 = iter$__9(params), len\u03C69 = items\u03C69.length; i\u03C69 < len\u03C69; i\u03C69++) {
          let param = items\u03C69[i\u03C69];
          let opts = param._options || {};
          let u = param._unit;
          if (u == "r" || u == "row" || u == "rows") {
            o["grid-row-end"] = "span " + param._number;
          } else if (opts.op && String(opts.op) == ">") {
            o["min-height"] = param;
          } else if (opts.op && String(opts.op) == "<") {
            o["max-height"] = param;
          } else {
            o.height = param;
          }
          ;
        }
        ;
        return o;
      }
      transition(...parts) {
        let out = {};
        let add = {};
        let signatures = [
          "name | duration",
          "name | duration | delay",
          "name | duration | ease",
          "name | duration | ease | delay"
        ];
        let groups = {
          styles: ["background-color", "border-color", "color", "fill", "stroke", "opacity", "box-shadow", "transform"],
          sizes: ["width", "height", "left", "top", "right", "bottom", "margin", "padding"],
          colors: ["background-color", "border-color", "color", "fill", "stroke"]
        };
        let i = 0;
        while (i < parts.length) {
          let part = parts[i];
          let name = String(part[0]);
          if (name.match(/^[\-\+]?\d?(\.?\d+)(s|ms)?$/)) {
            part.unshift(name = "styles");
          }
          ;
          let ease = part[2];
          let group = groups[name];
          if (group && parts.length == 0) {
            part[0] = "none";
            Object.assign(add, { "transition-property": group.join(",") });
          } else if (group && parts.length > 1) {
            let subparts = group.map(function(_0) {
              return [_0].concat(part.slice(1));
            });
            parts.splice(i, 1, ...subparts);
            continue;
          }
          ;
          i++;
        }
        ;
        Object.assign(out, { "--e_rest": parts }, add);
        return out;
      }
      font(params, ...rest) {
        for (let i = 0, items\u03C610 = iter$__9(params), len\u03C610 = items\u03C610.length; i < len\u03C610; i++) {
          let param = items\u03C610[i];
          true;
        }
        ;
        return;
      }
      font_family(params) {
        let m;
        if (m = this.$varFallback("font", params)) {
          return m;
        }
        ;
        return;
      }
      text_shadow(...params) {
        for (let i = 0, items\u03C611 = iter$__9(params), len\u03C611 = items\u03C611.length, m; i < len\u03C611; i++) {
          let par = items\u03C611[i];
          if (m = this.$varFallback("text-shadow", par)) {
            params[i] = m;
          }
          ;
        }
        ;
        return params;
      }
      box_shadow(...params) {
        let o = { "box-shadow": params };
        for (let i = 0, items\u03C612 = iter$__9(params), len\u03C613 = items\u03C612.length; i < len\u03C613; i++) {
          let pair = items\u03C612[i];
          let tpl = false;
          for (let pi = 0, items\u03C613 = iter$__9(pair), len\u03C612 = items\u03C613.length; pi < len\u03C612; pi++) {
            let par = items\u03C613[pi];
            if (pi == 0 && pair.length < 3) {
              let str = String(par);
              if (str.match(/^[\w\-]+$/)) {
                tpl = str;
                pair[pi] = new Var("box-shadow-" + str, par);
              }
              ;
            }
            ;
            if (pi == 1 && tpl) {
              o["--bxs-" + tpl + "-color"] = "/*##*/" + par;
              if (par.param) {
                o["--bxs-" + tpl + "-alpha"] = par.param.toAlpha();
              }
              ;
              par.set({ parameterize: true });
              pair[pi] = "";
              true;
            }
            ;
          }
          ;
        }
        ;
        return o;
        return params;
      }
      grid_template(params) {
        for (let i = 0, items\u03C614 = iter$__9(params), len\u03C614 = items\u03C614.length; i < len\u03C614; i++) {
          let param = items\u03C614[i];
          if (isNumber(param)) {
            param._resolvedValue = "repeat(" + param._value + ",1fr)";
          }
          ;
        }
        ;
        return;
      }
      grid_template_columns(params) {
        return this.grid_template(params);
      }
      grid_template_rows(params) {
        return this.grid_template(params);
      }
      size([w, h = w]) {
        return { width: w, height: h };
      }
      font_size([v]) {
        let sizes = this.options.variants["font-size"];
        let raw = String(v);
        let size = v;
        let lh;
        let out = {};
        if (sizes[raw]) {
          [size, lh] = sizes[raw];
          size = Length.parse(size);
          lh = Length.parse(lh || "");
        }
        ;
        if (v.param && v.param) {
          lh = v.param;
        }
        ;
        out["font-size"] = size;
        if (lh) {
          let lhu = lh._unit;
          let lhn = lh._number;
          out.lh = lh;
          if (lhu == "fs") {
            out.lh = new Length(lhn);
          } else if (lhu) {
            out.lh = lh;
          } else if (lhn == 0) {
            out.lh = "inherit";
          } else if (lhn && size._unit == "px") {
            let rounded = Math.round(size._number * lhn);
            if (rounded % 2 == 1) {
              rounded++;
            }
            ;
            out.lh = new Length(rounded, "px");
          }
          ;
        }
        ;
        return out;
      }
      line_height([v]) {
        let uvar = v;
        if (v._number && !v._unit) {
          uvar = v.clone(v._number, "em");
        }
        ;
        return {
          "line-height": v,
          "--u_lh": uvar
        };
      }
      text_decoration(params) {
        for (let i = 0, items\u03C615 = iter$__9(params), len\u03C615 = items\u03C615.length; i < len\u03C615; i++) {
          let param = items\u03C615[i];
          let str = String(param);
          if (str == "u") {
            param._resolvedValue = "underline";
          } else if (str == "s") {
            param._resolvedValue = "line-through";
          }
          ;
        }
        ;
        return [params];
      }
      border([...params]) {
        return this.$border(params, "");
      }
      $border(params, side = "") {
        var \u03C64;
        let o = { __border__: true };
        let len = params.length;
        if (len == 3) {
          o["border" + side] = [params];
          return o;
        }
        ;
        if (this.isNumeric(params[0])) {
          if (len == 2 && this.isColorish(params[1])) {
            params.splice(1, 0, "solid");
            o["border" + side] = [params];
            return o;
          }
          ;
          o["border" + side + "-style"] = "solid";
          o["border" + side + "-width"] = params.shift();
        }
        ;
        if (this.isColorish(params[0])) {
          if (len == 1) {
            o["border" + side] = [["1px", "solid", params.shift()]];
          } else {
            o[\u03C64 = "border" + side + "-width"] || (o[\u03C64] = "1px");
            o["border" + side + "-style"] = "solid";
            o["border" + side + "-color"] = params.shift();
          }
          ;
        }
        ;
        if (params[0]) {
          o["border" + side + "-style"] = params[0];
        }
        ;
        return o;
      }
      border_left(params) {
        return this.$border(params, "-left");
      }
      border_right(params) {
        return this.$border(params, "-right");
      }
      border_top(params) {
        return this.$border(params, "-top");
      }
      border_bottom(params) {
        return this.$border(params, "-bottom");
      }
      border_x(params) {
        return this.$border(params, "-inline");
      }
      border_y(params) {
        return this.$border(params, "-block");
      }
      border_x_width([l, r = l]) {
        return { bwl: l, bwr: r };
      }
      border_y_width([t, b = t]) {
        return { bwt: t, bwb: b };
      }
      border_x_style([l, r = l]) {
        return { bsl: l, bsr: r };
      }
      border_y_style([t, b = t]) {
        return { bst: t, bsb: b };
      }
      border_x_color([l, r = l]) {
        return { bcl: l, bcr: r };
      }
      border_y_color([t, b = t]) {
        return { bct: t, bcb: b };
      }
      border_top_radius(pars) {
        return { "border-top-left-radius": [pars], "border-top-right-radius": [pars] };
      }
      border_left_radius(pars) {
        return { "border-top-left-radius": [pars], "border-bottom-left-radius": [pars] };
      }
      border_bottom_radius(pars) {
        return { "border-bottom-left-radius": [pars], "border-bottom-right-radius": [pars] };
      }
      border_right_radius(pars) {
        return { "border-top-right-radius": [pars], "border-bottom-right-radius": [pars] };
      }
      justify_align([justify, align = justify]) {
        let o = {};
        if (justify == align) {
          o["place-items"] = o["place-content"] = justify;
        } else {
          o["justify-content"] = o["justify-items"] = justify;
          o["align-content"] = o["align-items"] = align;
        }
        ;
        return o;
      }
      outline(params) {
        if (params.length == 3 || params.length == 1 && String(params[0]) == "none") {
          return { outline: [params] };
        }
        ;
        let o = { __outline__: true };
        if (this.isNumeric(params[0])) {
          o.olw = params.shift();
        }
        ;
        if (this.isColorish(params[0])) {
          o.olc = params.shift();
        }
        ;
        if (!o.olw) {
          o["--ol_w"] = "1px";
        }
        ;
        return o;
      }
      gap([rg, cg = rg]) {
        let o = {};
        if (cg != rg) {
          o = { "row-gap": rg, "column-gap": cg };
        } else {
          o = { gap: rg };
          if (rg._unit != "rg") {
            o["--u_rg"] = rg;
          }
          ;
          if (rg._unit != "cg") {
            o["--u_cg"] = rg;
          }
          ;
        }
        ;
        return o;
      }
      row_gap([v]) {
        let o = { "row-gap": v };
        if (v._unit != "rg") {
          o["--u_rg"] = v;
        }
        ;
        return o;
      }
      column_gap([v]) {
        let o = { "column-gap": v };
        if (v._unit != "cg") {
          o["--u_cg"] = v;
        }
        ;
        return o;
      }
      tint([v]) {
        let o = { "--hue": v };
        for (let i = 0; i < 10; i++) {
          o["--hue" + i] = "/*##*/" + v + i;
        }
        ;
        return o;
      }
      hue([v]) {
        let o = { "--hue": v };
        for (let i = 0; i < 10; i++) {
          o["--hue" + i] = "/*##*/" + v + i;
        }
        ;
        return o;
      }
      $color(name) {
        let parsed;
        let m = name.match(/^([A-Za-z\-]+)(\d)(\d*)$/);
        let ns = m && m[1];
        if (ns && typeof this.palette[ns] == "string") {
          return this.$color(this.palette[ns] + name.slice(ns.length));
        }
        ;
        if (ns == "hue") {
          return new Tint(name);
        }
        ;
        if (this.palette[name]) {
          return this.palette[name];
        }
        ;
        if (m) {
          let nr = parseInt(m[2]);
          let fraction = m[3] ? parseFloat("0." + m[3]) : 0;
          let from = null;
          let to = null;
          let n0 = nr + 1;
          let n1 = nr;
          if (typeof this.palette[ns] == "string") {
            return this.$color(this.palette[ns] + name.slice(ns.length));
          }
          ;
          while (n0 > 1 && !from) {
            from = this.palette[ns + --n0];
          }
          ;
          while (n1 < 9 && !to) {
            to = this.palette[ns + ++n1];
          }
          ;
          let weight = (nr - n0 + fraction) / (n1 - n0);
          let hw = weight;
          let sw = weight;
          let lw = weight;
          if (!to) {
            to = this.palette.black;
            hw = 0;
            sw = lw = fraction;
          }
          ;
          if (!from) {
            from = this.palette.blue1;
            hw = 1;
            sw = lw = 1 - fraction;
          }
          ;
          if (from && to) {
            return this.palette[name] = from.mix(to, hw, sw, lw);
          }
          ;
        }
        ;
        if (parsed = parseColorString(name)) {
          return new Color("", ...parsed);
        }
        ;
        return null;
      }
      isNumeric(val) {
        if (isNumber(val)) {
          return true;
        }
        ;
        if (typeof val == "number") {
          return true;
        }
        ;
        if (String(val).match(/^[\-\+]?\d?(\.?\d+)(\w+|%)?$/)) {
          return true;
        }
        ;
        return false;
      }
      isColorish(val) {
        if (this.$parseColor(val)) {
          return true;
        }
        ;
        return false;
      }
      $parseColor(identifier) {
        let color;
        let key = String(identifier);
        if (color = this.$color(key)) {
          return color;
        }
        ;
        if (key.match(/^#[a-fA-F0-9]{3,8}/)) {
          return identifier;
        } else if (key.match(/^(rgb|hsl)/)) {
          return identifier;
        } else if (key == "currentColor") {
          return identifier;
        }
        ;
        return null;
      }
      $varFallback(name, params, exclude = []) {
        if (params.length == 1) {
          let str = String(params[0]);
          let fallback = params[0];
          exclude.push("none", "initial", "unset", "inherit");
          if (exclude.indexOf(str) == -1 && str.match(/^[\w\-]+$/)) {
            if (name == "font" && fonts[str]) {
              fallback = fonts[str];
            }
            ;
            if (name == "ease" && this.options.variants.easings[str]) {
              fallback = this.options.variants.easings[str];
            }
            ;
            return [new Var("" + name + "-" + str, fallback)];
          }
          ;
        }
        ;
        return;
      }
      $value(value, index, config) {
        let color;
        let key = config;
        let orig = value;
        let raw = value && value.toRaw ? value.toRaw() : String(value);
        let str = String(value);
        let fallback = false;
        let result = null;
        let unit = orig._unit;
        if (typeof config == "string") {
          if (aliases[config]) {
            config = aliases[config];
            if (config instanceof Array) {
              config = config[0];
            }
            ;
          }
          ;
          if (config.match(/^((min-|max-)?(width|height)|top|left|bottom|right|padding|margin|sizing|inset|spacing|sy$|s$|\-\-s[xy])/)) {
            config = "sizing";
          } else if (config.match(/^\-\-[gs][xy]_/)) {
            config = "sizing";
          } else if (config.match(/^(row-|column-)?gap/)) {
            config = "sizing";
          } else if (config.match(/^[mps][trblxy]?$/)) {
            config = "sizing";
          } else if (config.match(/^[trblwh]$/)) {
            config = "sizing";
          } else if (config.match(/^e[otbca]?f$/) || config.match(/^ease(-\w+)?-function$/)) {
            config = "easings";
            fallback = "ease";
          } else if (config.match(/^border-.*radius/) || config.match(/^rd[tlbr]{0,2}$/)) {
            config = "radius";
            fallback = "border-radius";
          } else if (config.match(/^tween|transition/) && this.options.variants.easings[raw]) {
            return this.options.variants.easings[raw];
          }
          ;
          config = this.options.variants[config] || {};
        }
        ;
        if (value == void 0) {
          value = config.default;
        }
        ;
        if (config.hasOwnProperty(raw)) {
          value = config[value];
        }
        ;
        if (typeof raw == "number" && config.NUMBER) {
          let [step, num, unit2] = config.NUMBER.match(/^(\-?[\d\.]+)(\w+|%)?$/);
          return value * parseFloat(num) + unit2;
        } else if (typeof raw == "string") {
          if (color = this.$parseColor(raw)) {
            return color;
          }
          ;
        }
        ;
        if (fallback && !unit) {
          let okstr = str.match(/^[a-zA-Z\-][\w\-]*$/) && !str.match(/^(none|inherit|unset|initial)$/);
          let oknum = unit && VALID_CSS_UNITS.indexOf(unit) == -1;
          if ((okstr || oknum) && value.alone) {
            return new Var("" + fallback + "-" + str, orig != value ? value : raw);
          }
          ;
        }
        ;
        return value;
      }
      transformColors(text) {
        var self = this;
        text = text.replace(/\/\*(#+)\*\/(\#?\w+)(?:\/(\d+%?|\$[\w\-]+))?/g, function(m, typ, c, a) {
          let color;
          if (color = self.$color(c)) {
            if (typ == "#") {
              return color.toString(a, typ);
            } else if (typ == "##") {
              return color.toVar(a);
            }
            ;
          }
          ;
          return m;
        });
        return text;
      }
    };
    StyleExtenders = {
      transform: {
        specificity: 0,
        body: "--t_x:0;--t_y:0;--t_rotate:0;\n--t_scale:1;--t_scale-x:1;--t_scale-y:1;\ntransform: translate(var(--t_x),var(--t_y)) rotate(var(--t_rotate))\n	scaleX(var(--t_scale-x)) scaleY(var(--t_scale-y)) scale(var(--t_scale));"
      },
      transform_complex: {
        specificity: 0,
        body: "--t_z:0;--t_skew-x:0;--t_skew-y:0;\ntransform: translate3d(var(--t_x),var(--t_y),var(--t_z))\n					rotate(var(--t_rotate))\n					skewX(var(--t_skew-x)) skewY(var(--t_skew-y))\n					scaleX(var(--t_scale-x)) scaleY(var(--t_scale-y)) scale(var(--t_scale)) !important;"
      },
      outline: { body: "--ol_s:solid;--ol_w:1px;--ol_o:0px; --ol_c:transparent;\noutline:var(--ol_w) var(--ol_s) var(--ol_c); outline-offset:var(--ol_o);\noutline:1px solid transparent; outline-offset:var(--ol_o);" },
      ease: { body: "--e_ad:0ms;--e_af:cubic-bezier(0.23, 1, 0.32, 1);--e_aw:0ms;\n--e_sd:var(--e_ad);--e_sf:var(--e_af);--e_sw:var(--e_aw);\n--e_od:var(--e_sd);--e_of:var(--e_sf);--e_ow:var(--e_sw);\n--e_cd:var(--e_sd);--e_cf:var(--e_sf);--e_cw:var(--e_sw);\n--e_bd:var(--e_sd);--e_bf:var(--e_sf);--e_bw:var(--e_sw);\n--e_td:var(--e_bd);--e_tf:var(--e_bf);--e_tw:var(--e_bw);\n--e_b:var(--e_bd) var(--e_bf) var(--e_bw);\n--e_c:var(--e_cd) var(--e_cf) var(--e_cw);\n--e_rest:any;\ntransition:\n	all var(--e_ad) var(--e_af) var(--e_aw),\n	opacity var(--e_od) var(--e_of) var(--e_ow),\n	transform var(--e_td) var(--e_tf) var(--e_tw),\n	color var(--e_c),background-color var(--e_c),border-color var(--e_c),fill var(--e_c),stroke var(--e_c), outline-color var(--e_c), box-shadow var(--e_c), filter var(--e_c),\n	inset var(--e_b), width var(--e_b),height var(--e_b),max-width var(--e_b),max-height var(--e_b),min-width var(--e_b),min-height var(--e_b),border-width var(--e_b),outline-width var(--e_b),stroke-width var(--e_b),margin var(--e_b),padding var(--e_b),\n	var(--e_rest);" }
    };
    AutoPrefixes = {
      "user-select": ["-webkit-user-select"],
      appearance: ["-webkit-appearance"],
      "backdrop-filter": ["-webkit-backdrop-filter"],
      "mask-image": ["-webkit-mask-image"]
    };
    StyleSheet = class {
      constructor(stack) {
        this[\u03A8stack] = stack;
        this[\u03A8parts] = [];
        this[\u03A8apply] = { transform_complex: [], transform: [] };
        this[\u03A8register] = {};
        this.transforms = null;
      }
      get transitions() {
        return this[\u03A8register].transition;
      }
      add(part, meta = {}) {
        var \u03C622;
        this[\u03A8parts].push(part);
        if (meta.apply) {
          for (let o\u03C6 = meta.apply, i\u03C610 = 0, keys\u03C65 = Object.keys(o\u03C6), l\u03C65 = keys\u03C65.length, k, v; i\u03C610 < l\u03C65; i\u03C610++) {
            k = keys\u03C65[i\u03C610];
            v = o\u03C6[k];
            let arr = (\u03C622 = this[\u03A8apply])[k] || (\u03C622[k] = []);
            for (let i\u03C611 = 0, items\u03C616 = iter$__9(v), len\u03C616 = items\u03C616.length; i\u03C611 < len\u03C616; i\u03C611++) {
              let item = items\u03C616[i\u03C611];
              if (arr.indexOf(item) < 0) {
                arr.push(item);
              }
              ;
            }
            ;
          }
          ;
        }
        ;
        return;
      }
      js(root, stack) {
        let js = [];
        for (let o\u03C62 = this[\u03A8register], i\u03C612 = 0, keys\u03C66 = Object.keys(o\u03C62), l\u03C66 = keys\u03C66.length, k, v; i\u03C612 < l\u03C66; i\u03C612++) {
          k = keys\u03C66[i\u03C612];
          v = o\u03C62[k];
          js.push(root.runtime().transitions + (".addSelectors(" + JSON.stringify(v) + ",'" + k + "')"));
        }
        ;
        return js.join("\n");
      }
      parse() {
        if (this[\u03A8string2]) {
          return this[\u03A8string2];
        }
        ;
        let js = [];
        let parts = this[\u03A8parts].slice(0);
        let prepend = function(val) {
          if (parts.indexOf(val) < 0) {
            return parts.unshift(val);
          }
          ;
        };
        for (let o\u03C63 = this[\u03A8apply], i\u03C613 = 0, keys\u03C67 = Object.keys(o\u03C63), l\u03C68 = keys\u03C67.length, k, v; i\u03C613 < l\u03C68; i\u03C613++) {
          k = keys\u03C67[i\u03C613];
          v = o\u03C63[k];
          if (!v || v.length == 0) {
            continue;
          }
          ;
          let helper = StyleExtenders[k];
          let base = {};
          let all = {};
          let groups = { "": base };
          let easing = k == "transition" || k.match(/^_(off|out|in)_sized/);
          for (let i\u03C614 = 0, items\u03C617 = iter$__9(v), len\u03C618 = items\u03C617.length; i\u03C614 < len\u03C618; i\u03C614++) {
            let item = items\u03C617[i\u03C614];
            for (let i\u03C615 = 0, items\u03C618 = iter$__9(item[\u03A8rules2] || []), len\u03C617 = items\u03C618.length; i\u03C615 < len\u03C617; i\u03C615++) {
              let rule = items\u03C618[i\u03C615];
              let ns = rule[\u03A8media2] || "";
              let sel = rule[\u03A8string2].replace(/:not\((#_|\._0?)+\)/g, "");
              if (easing || k == "ease") {
                sel = sel.replace(/\.\\@(off|out|in|on)\b/g, "");
              }
              ;
              sel = sel.replace(/((\:+)[\w\-]+)(?!\()/g, function(m, k2) {
                return k2.length > 1 ? m : "";
              });
              sel = sel.replace(/^\:root /g, "");
              let group = groups[ns] || (groups[ns] = {});
              group[sel] = rule;
              all[sel] = true;
            }
            ;
          }
          ;
          if (helper) {
            for (let i\u03C616 = 0, keys\u03C68 = Object.keys(groups), l\u03C67 = keys\u03C68.length, ns, group; i\u03C616 < l\u03C67; i\u03C616++) {
              ns = keys\u03C68[i\u03C616];
              group = groups[ns];
              let sel = Object.keys(group);
              if (ns != "") {
                sel = sel.filter(function(_0) {
                  return !base[_0];
                });
              }
              ;
              if (sel.length == 0) {
                continue;
              }
              ;
              let sels = sel.sort(function(a, b) {
                return a.length - b.length;
              });
              let corr = [];
              for (let i = 0, items\u03C619 = iter$__9(sels), len\u03C619 = items\u03C619.length; i < len\u03C619; i++) {
                let s = items\u03C619[i];
                let pre = sels.slice(0, i);
                let some = pre.find(function(_0) {
                  return s.indexOf(_0) >= 0;
                });
                if (!some || s.match(/[\s\>\,]|:(not|before|after|marker)|::/)) {
                  corr.push(s);
                }
                ;
              }
              ;
              sel = corr;
              let selstr = sel.join(", ");
              let str = selstr + " {\n" + helper.body + "\n}";
              if (ns) {
                str = ns + " {\n" + str + "\n}";
              }
              ;
              parts.unshift(str);
            }
            ;
          }
          ;
          let selectors = Object.keys(all);
          if (k == "transition" && selectors.length) {
            prepend(".\\@enter:not(#_),.\\@leave:not(#_) {--e_ad:300ms;}");
            prepend("._instant_:not(#_):not(#_):not(#_):not(#_) { transition-duration:0ms !important; }");
          }
          ;
          if (easing) {
            this[\u03A8register][k] = selectors;
          }
          ;
        }
        ;
        this[\u03A8string2] = parts.join("\n\n");
        if (this[\u03A8stack].resolveColors()) {
          this[\u03A8string2] = this[\u03A8stack].theme().transformColors(this[\u03A8string2], { prefix: false });
        }
        ;
        return this[\u03A8string2];
      }
      toString() {
        return this.parse();
      }
    };
    StyleRule = class {
      constructor(parent, selector, content, options = {}) {
        this.parent = parent;
        this.selector = selector;
        this.content = content;
        this.options = options;
        this.isKeyFrames = !!selector.match(/\@keyframes \w/);
        this.isKeyFrame = parent && parent.isKeyFrames;
        this.meta = {};
      }
      root() {
        return this.parent ? this.parent.root : this;
      }
      apply(kind, sel) {
        var \u03C632;
        let arr = (\u03C632 = this.options.apply)[kind] || (\u03C632[kind] = []);
        return arr.push(sel);
      }
      register(kind, sel) {
        var \u03C64;
        let arr = (\u03C64 = this.options.register)[kind] || (\u03C64[kind] = []);
        return arr.push(sel);
      }
      toString(o = {}) {
        let parts = [];
        let subrules = [];
        let subrule;
        if (this.isKeyFrames) {
          let [context, name] = this.selector.split(/\s*\@keyframes\s*/);
          context = context.trim();
          name = name.trim();
          let path = [name, context, this.options.ns].filter(function(_0) {
            return _0;
          }).join("-");
          this.meta.name = name;
          this.meta.uniqueName = path.replace(/[\s\.\,]+/g, "").replace(/[^\w\-]/g, "_");
          if (this.options.global && !context) {
            this.meta.uniqueName = this.meta.name;
          }
          ;
          let subprops = {};
          subprops["--animation-" + name] = "" + this.meta.uniqueName;
          if (context) {
            subrules.push(new StyleRule(null, context, subprops, this.options));
          } else if (this.options.ns && !this.options.global) {
            subrules.push(new StyleRule(null, "." + this.options.ns, subprops, {}));
          }
          ;
        }
        ;
        let selpri = typeof this.selector == "string" && this.selector.indexOf("@important") >= 0 ? 1 : 0;
        for (let o\u03C64 = this.content, i\u03C617 = 0, keys\u03C69 = Object.keys(o\u03C64), l\u03C69 = keys\u03C69.length, key, value; i\u03C617 < l\u03C69; i\u03C617++) {
          key = keys\u03C69[i\u03C617];
          value = o\u03C64[key];
          if (value == void 0) {
            continue;
          }
          ;
          let subsel = null;
          let important = selpri ? " !important" : "";
          let rawkey = key;
          if (key.indexOf("&") >= 0) {
            if (this.isKeyFrames) {
              let keyframe = key.replace(/&/g, "");
              let rule = new StyleRule(this, keyframe, value, this.options);
              parts.push(rule.toString({ indent: true }));
              continue;
            }
            ;
            let subsel2 = unwrap(this.selector, key);
            subrules.push(new StyleRule(this, subsel2, value, this.options));
            continue;
          } else if (key.indexOf("\xA7") >= 0) {
            let keys = rawkey.split("\xA7");
            let substr2 = keys.slice(1).join("");
            let subsel2 = unwrap(this.selector, substr2);
            let obj = {};
            obj[keys[0]] = value;
            if (subrule = subrules[subsel2]) {
              subrule.content[keys[0]] = value;
            } else {
              subrule = new StyleRule(this, subsel2, obj, this.options);
              subrules.push(subrules[subsel2] = subrule);
            }
            ;
            continue;
          } else if (key.match(/^__(\w+)__$/)) {
            this.meta[key.slice(2, -2)] = true;
          } else if (key[0] == "[") {
            let o2 = JSON.parse(key);
            subrules.push(new StyleRule(this, this.selector, value, this.options));
            continue;
          } else if (key.match(/^(x|y|z|scale|scale-x|scale-y|skew-x|skew-y|rotate)$/)) {
            if (!this.meta.transform) {
              this.meta.transform = true;
            }
            ;
            if (key.match(/^(z|skew-x|skew-y)$/)) {
              this.meta.transform_complex = true;
            }
            ;
            parts.push("--t_" + key + ": " + value + " !important;");
          } else if (key.match(/^(ease-.*)$/)) {
            this.meta.ease = true;
            let ref = key.replace("delay", "wait").split("-").map(function(_0) {
              return _0[0];
            }).join("");
            parts.push("--e_" + ref.slice(1) + ": " + value + " !important;");
            if (!abbreviations[key]) {
              console.warn("" + key + " is not a valid style property");
            }
            ;
          } else if (key.match(/^(--e_\w+)$/)) {
            this.meta.ease = true;
            if (this.selector.match(/@in\b/)) {
              true;
            }
            ;
            parts.push("" + key + ": " + value + " !important;");
          } else if (key.match(/^__ease__$/)) {
            true;
          } else if (key.match(/^__outline__$/)) {
            this.meta.outline = true;
          } else {
            if (key.match(/^(width|height)$/)) {
              this.meta.size = true;
            }
            ;
            parts.push("" + key + ": " + value + important + ";");
            if (AutoPrefixes[key]) {
              for (let i\u03C618 = 0, items\u03C620 = iter$__9(AutoPrefixes[key]), len\u03C620 = items\u03C620.length; i\u03C618 < len\u03C620; i\u03C618++) {
                let prefixed = items\u03C620[i\u03C618];
                parts.push("" + prefixed + ": " + value + important + ";");
              }
              ;
            }
            ;
          }
          ;
        }
        ;
        let out = "";
        let content = parts.join("\n");
        if (o.indent || this.isKeyFrames) {
          content = "\n" + content + "\n";
        }
        ;
        if (this.isKeyFrame) {
          out = "" + this.selector + " {" + content + "}";
        } else if (this.isKeyFrames) {
          out = "@keyframes " + this.meta.uniqueName + " {" + content + "}";
        } else {
          let sel = this.isKeyFrame ? this.selector : parse2(this.selector, this.options);
          if (this.meta.transform) {
            this.apply("transform", sel);
          }
          ;
          if (this.meta.transform_complex) {
            this.apply("transform_complex", sel);
          }
          ;
          if (this.meta.ease) {
            this.apply("ease", sel);
          }
          ;
          if (this.meta.outline) {
            this.apply("outline", sel);
          }
          ;
          if (sel && sel.hasTransitionStyles) {
            this.apply("transition", sel);
            if (!this.meta.ease) {
              this.apply("ease", sel);
            }
            ;
          }
          ;
          if (this.meta.size) {
            for (let i\u03C619 = 0, items\u03C621 = ["_off_", "_out_", "_in_"], len\u03C621 = items\u03C621.length; i\u03C619 < len\u03C621; i\u03C619++) {
              let typ = items\u03C621[i\u03C619];
              if (sel[typ]) {
                this.apply("" + typ + "sized", sel);
              }
              ;
            }
            ;
          }
          ;
          out = content.match(/[^\n\s]/) ? render2(sel, content, this.options) : "";
        }
        ;
        for (let i\u03C620 = 0, items\u03C622 = iter$__9(subrules), len\u03C622 = items\u03C622.length; i\u03C620 < len\u03C622; i\u03C620++) {
          let subrule2 = items\u03C622[i\u03C620];
          out += "\n" + subrule2.toString();
        }
        ;
        return out;
      }
    };
  }
});
var require_nodes = __commonJS({
  "src/compiler/nodes.imba1"(exports) {
    function len$(a) {
      return a && (a.len instanceof Function ? a.len() : a.length) || 0;
    }
    function idx$(a, b) {
      return b && b.indexOf ? b.indexOf(a) : [].indexOf.call(a, b);
    }
    function subclass$(obj, sup) {
      for (var k in sup) {
        if (sup.hasOwnProperty(k))
          obj[k] = sup[k];
      }
      ;
      obj.prototype = Object.create(sup.prototype);
      obj.__super__ = obj.prototype.__super__ = sup.prototype;
      obj.prototype.initialize = obj.prototype.constructor = obj;
    }
    function iter$(a) {
      return a ? a.toArray ? a.toArray() : a : [];
    }
    var self = {};
    var helpers2 = require_helpers();
    var constants = require_constants();
    var fspath = (init_path(), __toCommonJS2(path_exports));
    var errors$ = require_errors();
    var ImbaParseError = errors$.ImbaParseError;
    var ImbaTraverseError = errors$.ImbaTraverseError;
    var Token2 = require_token().Token;
    var SourceMap = require_sourcemap().SourceMap;
    var imba$ = (init_styler(), __toCommonJS2(styler_exports));
    var StyleRule2 = imba$.StyleRule;
    var StyleTheme2 = imba$.StyleTheme;
    var Color2 = imba$.Color;
    var StyleSheet2 = imba$.StyleSheet;
    var parseColorString2 = imba$.parseColorString;
    var imba$ = (init_identifiers(), __toCommonJS2(identifiers_exports));
    var ReservedIdentifierRegex2 = imba$.ReservedIdentifierRegex;
    var InternalPrefixes2 = imba$.InternalPrefixes;
    var toJSIdentifier2 = imba$.toJSIdentifier;
    var toCustomTagIdentifier2 = imba$.toCustomTagIdentifier;
    var Compilation2 = (init_compilation(), __toCommonJS2(compilation_exports)).Compilation;
    var SourceMapper2 = (init_sourcemapper(), __toCommonJS2(sourcemapper_exports)).SourceMapper;
    var TAG_NAMES2 = constants.TAG_NAMES;
    var TAG_GLOBAL_ATTRIBUTES = constants.TAG_GLOBAL_ATTRIBUTES;
    var TAG_TYPES = {};
    var TAG_ATTRS = {};
    var EXT_LOADER_MAP = {
      svg: "image",
      png: "image",
      apng: "image",
      jpg: "image",
      jpeg: "image",
      gif: "image",
      tiff: "image",
      bmp: "image"
    };
    TAG_TYPES.HTML = "a abbr address area article aside audio b base bdi bdo big blockquote body br button canvas caption cite code col colgroup data datalist dd del details dfn div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 head header hr html i iframe img input ins kbd keygen label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param pre progress q rp rt ruby s samp script section select small source span strong strike style sub summary sup table tbody td textarea tfoot th thead time title tr track u ul var video wbr".split(" ");
    TAG_TYPES.SVG = "circle defs ellipse g line linearGradient mask path pattern polygon polyline radialGradient rect stop svg text tspan".split(" ");
    TAG_ATTRS.HTML = "accept accessKey action allowFullScreen allowTransparency alt async autoComplete autoFocus autoPlay cellPadding cellSpacing charSet checked className cols colSpan content contentEditable contextMenu controls coords crossOrigin data dateTime defer dir disabled download draggable encType form formNoValidate frameBorder height hidden href hrefLang htmlFor httpEquiv icon id label lang list loop max maxLength mediaGroup method min multiple muted name noValidate pattern placeholder poster preload radioGroup readOnly rel required role rows rowSpan sandbox scope scrollLeft scrolling scrollTop seamless selected shape size span spellCheck src srcDoc srcSet start step style tabIndex target title type useMap value width wmode";
    TAG_ATTRS.SVG = "cx cy d dx dy fill fillOpacity fontFamily fontSize fx fy gradientTransform gradientUnits markerEnd markerMid markerStart offset opacity patternContentUnits patternUnits points preserveAspectRatio r rx ry spreadMethod stopColor stopOpacity stroke strokeDasharray strokeLinecap strokeOpacity strokeWidth textAnchor transform version viewBox x1 x2 x y1 y2 y";
    var CUSTOM_EVENTS = {
      intersect: "events_intersect",
      selection: "events_selection",
      resize: "events_resize",
      mutate: "events_mutate",
      hotkey: "events_hotkey",
      touch: "events_touch",
      pointer: "events_pointer",
      pointerdown: "events_pointer",
      pointermove: "events_pointer",
      pointerover: "events_pointer",
      pointerout: "events_pointer",
      pointerup: "events_pointer",
      pointercancel: "events_pointer",
      lostpointercapture: "events_pointer",
      click: "events_mouse",
      mousedown: "events_mouse",
      mouseup: "events_mouse",
      mouseenter: "events_mouse",
      mouseleave: "events_mouse",
      mousemove: "events_mouse",
      mouseout: "events_mouse",
      mouseover: "events_mouse",
      mousewheel: "events_mouse",
      keydown: "events_keyboard",
      keyup: "events_keyboard",
      keypress: "events_keyboard"
    };
    var AST = exports.AST = {};
    var F = exports.F = {
      TAG_INITED: 2 ** 0,
      TAG_BUILT: 2 ** 1,
      TAG_CUSTOM: 2 ** 2,
      TAG_AWAKENED: 2 ** 3,
      TAG_MOUNTED: 2 ** 4,
      TAG_SCHEDULE: 2 ** 5,
      TAG_SCHEDULED: 2 ** 6,
      TAG_FIRST_CHILD: 2 ** 7,
      TAG_LAST_CHILD: 2 ** 8,
      TAG_HAS_DYNAMIC_FLAGS: 2 ** 9,
      TAG_HAS_BRANCHES: 2 ** 10,
      TAG_HAS_LOOPS: 2 ** 11,
      TAG_HAS_DYNAMIC_CHILDREN: 2 ** 12,
      TAG_IN_BRANCH: 2 ** 13,
      TAG_BIND_MODEL: 2 ** 14,
      TAG_INDEXED: 2 ** 15,
      TAG_KEYED: 2 ** 16,
      EL_INITED: 2 ** 0,
      EL_HYDRATED: 2 ** 1,
      EL_HYDRATING: 2 ** 2,
      EL_AWAKENED: 2 ** 3,
      EL_MOUNTING: 2 ** 4,
      EL_MOUNTED: 2 ** 5,
      EL_SCHEDULE: 2 ** 6,
      EL_SCHEDULED: 2 ** 7,
      EL_RENDERING: 2 ** 8,
      EL_RENDERED: 2 ** 9,
      EL_SSR: 2 ** 10,
      EL_TRACKED: 2 ** 11,
      EL_SUSPENDED: 2 ** 12,
      EL_UNRENDERED: 2 ** 13,
      DIFF_BUILT: 2 ** 0,
      DIFF_FLAGS: 2 ** 1,
      DIFF_ATTRS: 2 ** 2,
      DIFF_CHILDREN: 2 ** 3,
      DIFF_MODIFIERS: 2 ** 4,
      DIFF_INLINE: 2 ** 5
    };
    var OP = exports.OP = function(op, l, r) {
      var o = String(op);
      switch (o) {
        case ".":
        case "?.": {
          if (l instanceof Super && !l.member()) {
            l.setMember(r);
            return l;
          }
          ;
          if (typeof r == "string" || r instanceof String) {
            r = new Identifier(r);
          }
          ;
          return new Access(op, l, r);
          break;
        }
        case "=": {
          return new Assign(op, l, r);
          break;
        }
        case "~=": {
          return OP("&=", l, OP("~", r));
          break;
        }
        case "||=":
        case "&&=":
        case "??=": {
          return new ConditionalAssign(op, l, r);
          break;
        }
        case "+=":
        case "-=":
        case "*=":
        case "/=":
        case "^=":
        case "%=":
        case "**=": {
          return new CompoundAssign(op, l, r);
          break;
        }
        case "instanceof":
        case "isa": {
          return new InstanceOf(op, l, r);
          break;
        }
        case "in": {
          return new In(op, l, r);
          break;
        }
        case "typeof": {
          return new TypeOf(op, l, r);
          break;
        }
        case "delete": {
          return new Delete(op, l, r);
          break;
        }
        case "--":
        case "++":
        case "!":
        case "\u221A":
        case "not":
        case "!!": {
          return new UnaryOp(op, l, r);
          break;
        }
        case ">":
        case "<":
        case ">=":
        case "<=":
        case "==":
        case "===":
        case "!=":
        case "!==": {
          return new ComparisonOp(op, l, r);
          break;
        }
        case "..":
        case "...": {
          return new Range2(op, l, r);
          break;
        }
        default:
          return new Op(op, l, r);
      }
      ;
    };
    var PATHIFY = function(val) {
      if (val instanceof TagAttrValue) {
        val = val.value();
      }
      ;
      if (val instanceof ArgList) {
        val = val.values()[0];
      }
      ;
      while (val instanceof Parens) {
        val = val.value();
      }
      ;
      if (val instanceof VarOrAccess) {
        val = val._variable || val.value();
      }
      ;
      if (val instanceof Access) {
        let left = val.left();
        let right = val.right() instanceof Index ? val.right().value() : val.right();
        if (left instanceof VarOrAccess) {
          left = left._variable || left.value();
        }
        ;
        if (right instanceof VarOrAccess) {
          right = right._variable || right.value();
        }
        ;
        if (val instanceof IvarAccess) {
          left || (left = val.scope__().context());
        }
        ;
        if (right instanceof SymbolIdentifier) {
          true;
        } else if (right instanceof Identifier) {
          right = helpers2.singlequote(String(right.js()));
          right = new Str(right);
        }
        ;
        return [left, right];
      }
      ;
      return val;
    };
    var OPTS = {};
    var ROOT = null;
    var NODES = exports.NODES = [];
    var C = function(node, opts) {
      return typeof node == "string" || typeof node == "number" ? node : node.c(opts);
    };
    var MLOC = function(a, b) {
      if (b == void 0) {
        b = a;
      }
      ;
      return {
        startLoc: function() {
          return a;
        },
        endLoc: function() {
          return b;
        }
      };
    };
    var M2 = function(val, mark, o) {
      if (mark == void 0) {
        mark = val;
      }
      ;
      if (mark && mark.startLoc) {
        val = C(val, o);
        let ref = STACK.incr("sourcePair");
        let start = mark.startLoc();
        let end = mark.endLoc();
        let m0 = "";
        let m1 = "";
        if (start == 0 || start > 0) {
          m0 = end >= start ? "/*%" + start + "|" + ref + "$*/" : "/*%" + start + "$*/";
        }
        ;
        if (end == 0 || end > 0) {
          m1 = start >= 0 ? "/*%" + end + "|" + ref + "$*/" : "/*%" + end + "$*/";
        }
        ;
        return m0 + val + m1;
      }
      ;
      return C(val, o);
    };
    var MSTART = function() {
      var $0 = arguments, i = $0.length;
      var params = new Array(i > 0 ? i : 0);
      while (i > 0)
        params[i - 1] = $0[--i];
      for (let i2 = 0, items = iter$(params), len = items.length, item; i2 < len; i2++) {
        item = items[i2];
        if (typeof item == "number" || item instanceof Number) {
          return item;
        }
        ;
        if (item && item.startLoc instanceof Function) {
          return item.startLoc();
        }
        ;
      }
      ;
      return null;
    };
    var MEND = function() {
      var $0 = arguments, i = $0.length;
      var params = new Array(i > 0 ? i : 0);
      while (i > 0)
        params[i - 1] = $0[--i];
      for (let i2 = 0, items = iter$(params), len = items.length, item; i2 < len; i2++) {
        item = items[i2];
        if (typeof item == "number" || item instanceof Number) {
          return item;
        }
        ;
        if (item && item.endLoc instanceof Function) {
          return item.endLoc();
        }
        ;
      }
      ;
      return null;
    };
    var LIT = function(val) {
      return new RawScript(val);
    };
    var KEY = function(val) {
      if (val instanceof Token2) {
        val = val.value();
      }
      ;
      if (typeof val == "string" || val instanceof String) {
        if (val.match(/^[a-zA-Z\$\_]+[\d\w\$\_]*$/)) {
          val = new Identifier(val);
        } else {
          val = new Str(helpers2.singlequote(String(val)));
        }
        ;
      }
      ;
      return val;
    };
    var STR = function(val) {
      if (val instanceof Str) {
        return val;
      }
      ;
      return new Str(helpers2.singlequote(String(val)));
    };
    var IF = function(cond, body, alt, o) {
      if (o === void 0)
        o = {};
      var node = new If(cond, body, o);
      if (alt) {
        node.addElse(alt);
      }
      ;
      return node;
    };
    var NODIFY = function(val) {
      if (val == null) {
        return new Nil();
      } else if (val == false) {
        return new False();
      } else if (val == true) {
        return new True();
      } else if (typeof val == "string" || val instanceof String) {
        return STR(val);
      } else if (typeof val == "number" || val instanceof Number) {
        return new Num(val);
      } else {
        return val;
      }
      ;
    };
    var FN = function(pars, body, scope) {
      let fn = new Func(pars, body);
      if (scope) {
        fn._scope._systemscope = scope;
      }
      ;
      return fn;
    };
    var CALL = function(callee, pars) {
      if (pars === void 0)
        pars = [];
      return new Call(callee, pars);
    };
    var IIFE = function(body) {
      return new IifeFunc([], body);
    };
    var GET = function(left, right) {
      return OP(".", left, right);
    };
    var SPLAT = exports.SPLAT = function(value) {
      return new Splat(value);
    };
    var SEMICOLON_TEST = /;(\s*\/\/.*)?[\n\s\t]*$/;
    var RESERVED_TEST = /^(default|char|for)$/;
    exports.parseError = self.parseError = function(str, o) {
      var err = Compilation2.error({
        category: "parser",
        severity: "error",
        offset: o.offset,
        length: o.length,
        message: str
      });
      return err.raise();
    };
    AST.c = function(obj) {
      return typeof obj == "string" ? obj : obj.c();
    };
    AST.compileRaw = function(item) {
      let o = "";
      if (item instanceof Array) {
        o = "[";
        for (let i = 0, items = iter$(item), len = items.length; i < len; i++) {
          o += AST.compileRaw(items[i]) + ",";
        }
        ;
        o = o.slice(0, -1) + "]";
      } else if (item instanceof Object) {
        o = "{ ";
        for (let v, i = 0, keys = Object.keys(item), l = keys.length, k; i < l; i++) {
          k = keys[i];
          v = item[k];
          o += "" + k + ": " + AST.compileRaw(v) + ",";
        }
        ;
        o = o.slice(0, -1) + " }";
      } else {
        o = JSON.stringify(item);
      }
      ;
      return o;
    };
    AST.blk = function(obj) {
      return obj instanceof Array ? Block.wrap(obj) : obj;
    };
    AST.sym = function(obj) {
      return helpers2.symbolize(String(obj), STACK);
    };
    AST.cary = function(ary, params) {
      if (params === void 0)
        params = null;
      return ary.map(function(v) {
        if (typeof v == "string") {
          return v;
        } else if (v && v.c) {
          return params ? v.c(params) : v.c();
        } else {
          return String(v);
        }
        ;
      });
    };
    AST.dump = function(obj, key) {
      if (obj instanceof Array) {
        return obj.map(function(v) {
          return v && v.dump ? v.dump(key) : v;
        });
      } else if (obj && obj.dump) {
        return obj.dump();
      }
      ;
    };
    AST.compact = function(ary) {
      if (ary instanceof ListNode) {
        return ary.compact();
      }
      ;
      return ary.filter(function(v) {
        return v != void 0 && v != null;
      });
    };
    AST.reduce = function(res, ary) {
      for (let i = 0, items = iter$(ary), len = items.length, v; i < len; i++) {
        v = items[i];
        v instanceof Array ? AST.reduce(res, v) : res.push(v);
      }
      ;
      return;
    };
    AST.flatten = function(ary, compact) {
      if (compact === void 0)
        compact = false;
      var out = [];
      for (let i = 0, items = iter$(ary), len = items.length, v; i < len; i++) {
        v = items[i];
        v instanceof Array ? AST.reduce(out, v) : out.push(v);
      }
      ;
      return out;
    };
    AST.loc = function(item) {
      if (!item) {
        return [0, 0];
      } else if (item instanceof Token2) {
        return item.region();
      } else if (item instanceof Node2) {
        return item.loc();
      }
      ;
    };
    AST.parse = function(str, opts) {
      if (opts === void 0)
        opts = {};
      var indent = str.match(/\t+/)[0];
      return Imbac.parse(str, opts);
    };
    AST.inline = function(str, opts) {
      if (opts === void 0)
        opts = {};
      return this.parse(str, opts).body();
    };
    AST.node = function(typ, pars) {
      if (typ == "call") {
        if (pars[0].c() == "return") {
          pars[0] = "tata";
        }
        ;
        return new Call(pars[0], pars[1], pars[2]);
      }
      ;
    };
    AST.escapeComments = function(str) {
      if (!str) {
        return "";
      }
      ;
      return str;
    };
    var shortRefCache = [];
    AST.counterToShortRef = function(nr) {
      var base = "A".charCodeAt(0);
      nr += 30;
      while (shortRefCache.length <= nr) {
        var num = shortRefCache.length + 1;
        var str = "";
        while (true) {
          num -= 1;
          str = String.fromCharCode(base + num % 26) + str;
          num = Math.floor(num / 26);
          if (num <= 0) {
            break;
          }
          ;
        }
        ;
        shortRefCache.push(str.toLowerCase());
      }
      ;
      return shortRefCache[nr];
    };
    AST.truthy = function(node) {
      if (node instanceof True) {
        return true;
      }
      ;
      if (node instanceof False) {
        return false;
      }
      ;
      if (node.isTruthy) {
        return node.isTruthy();
      }
      ;
      return void 0;
    };
    function Indentation(a, b) {
      this._open = a;
      this._close = b;
      this;
    }
    exports.Indentation = Indentation;
    Indentation.prototype.open = function(v) {
      return this._open;
    };
    Indentation.prototype.setOpen = function(v) {
      this._open = v;
      return this;
    };
    Indentation.prototype.close = function(v) {
      return this._close;
    };
    Indentation.prototype.setClose = function(v) {
      this._close = v;
      return this;
    };
    Indentation.prototype.isGenerated = function() {
      return this._open && this._open.generated;
    };
    Indentation.prototype.aloc = function() {
      return this._open && this._open._loc || 0;
    };
    Indentation.prototype.bloc = function() {
      return this._close && this._close._loc || 0;
    };
    Indentation.prototype.startLoc = function() {
      return this.aloc();
    };
    Indentation.prototype.endLoc = function() {
      return this.bloc();
    };
    Indentation.prototype.wrap = function(str) {
      var om = this._open && this._open._meta;
      var pre = om && om.pre || "";
      var post = om && om.post || "";
      var esc = AST.escapeComments;
      var out = this._close;
      str = post.replace(/^\n/, "") + str;
      str = str.replace(/^/g, "	").replace(/\n/g, "\n	").replace(/\n\t$/g, "\n");
      str = pre + "\n" + str;
      if (out instanceof Terminator) {
        str += out.c();
      }
      ;
      if (str[str.length - 1] != "\n") {
        str = str + "\n";
      }
      ;
      return str;
    };
    var INDENT = new Indentation({}, {});
    function Stash() {
      this._entities = [];
    }
    Stash.prototype.add = function(item) {
      this._entities.unshift(item);
      return this;
    };
    Stash.prototype.pluck = function(item) {
      var match = null;
      for (let i = 0, items = iter$(this._entities), len = items.length, entity; i < len; i++) {
        entity = items[i];
        if (entity == item || entity instanceof item) {
          match = entity;
          this._entities.splice(i, 1);
          return match;
        }
        ;
      }
      ;
      return null;
    };
    function Stack() {
      this.reset();
    }
    exports.Stack = Stack;
    Stack.prototype.loglevel = function(v) {
      return this._loglevel;
    };
    Stack.prototype.setLoglevel = function(v) {
      this._loglevel = v;
      return this;
    };
    Stack.prototype.nodes = function(v) {
      return this._nodes;
    };
    Stack.prototype.setNodes = function(v) {
      this._nodes = v;
      return this;
    };
    Stack.prototype.scopes = function(v) {
      return this._scopes;
    };
    Stack.prototype.setScopes = function(v) {
      this._scopes = v;
      return this;
    };
    Stack.prototype.root = function(v) {
      return this._root;
    };
    Stack.prototype.setRoot = function(v) {
      this._root = v;
      return this;
    };
    Stack.prototype.state = function(v) {
      return this._state;
    };
    Stack.prototype.setState = function(v) {
      this._state = v;
      return this;
    };
    Stack.prototype.meta = function(v) {
      return this._meta;
    };
    Stack.prototype.setMeta = function(v) {
      this._meta = v;
      return this;
    };
    Stack.prototype.theme = function(v) {
      return this._theme;
    };
    Stack.prototype.setTheme = function(v) {
      this._theme = v;
      return this;
    };
    Stack.prototype.css = function(v) {
      return this._css;
    };
    Stack.prototype.setCss = function(v) {
      this._css = v;
      return this;
    };
    Stack.prototype.reset = function() {
      this._nodes = [];
      this._scoping = [];
      this._scopes = [];
      this._stash = new Stash(this);
      this._loglevel = 3;
      this._counter = 0;
      this._counters = {};
      this._options = {};
      this._state = {};
      this._tag = null;
      this._sourceId = null;
      this._symbols = {};
      this._css = new StyleSheet2(this);
      this._theme = null;
      this._meta = {};
      this._runtime;
      return this;
    };
    Stack.prototype.runtime = function() {
      return this._root.runtime();
    };
    Stack.prototype.cssns = function() {
      return this._root.cssns();
    };
    Stack.prototype.use = function(item) {
      return this._root.use(item);
    };
    Stack.prototype.incr = function(name) {
      this._counters[name] || (this._counters[name] = 0);
      return this._counters[name] += 1;
    };
    Stack.prototype.decr = function(name) {
      this._counters[name] || (this._counters[name] = 0);
      return this._counters[name] -= 1;
    };
    Stack.prototype.strip = function(val) {
      return SourceMapper2.strip(val);
    };
    Stack.prototype.generateId = function(ns) {
      if (ns === void 0)
        ns = "oid";
      return AST.counterToShortRef(STACK.incr(ns));
    };
    Stack.prototype.getSymbol = function(ref, alias, name) {
      if (alias === void 0)
        alias = null;
      if (name === void 0)
        name = "";
      let key = ref || this.incr("symbols");
      return this._symbols[key] || (this._symbols[key] = this._root.declare(alias || ref, LIT("Symbol(" + (name ? helpers2.singlequote(name) : "") + ")"), { system: true, alias: alias || ref }).resolve().c());
    };
    Stack.prototype.symbolFor = function(name) {
      return this._root.symbolRef(name);
    };
    Stack.prototype.imbaSymbol = function(name) {
      return STACK.isStdLib() ? this.symbolFor("#" + name) : this.runtime()[name];
    };
    Stack.prototype.toInternalClassName = function(name) {
      if (name.toClassName) {
        name = name.toClassName();
      } else if (name.c instanceof Function) {
        name = name.c();
      }
      ;
      let str = "\u03A9" + this.strip(name).split(".").join("__");
      let nr = this.incr(str);
      if (nr > 1) {
        str += "\u03A9" + nr;
      }
      ;
      return str;
    };
    Stack.prototype.domCall = function(name) {
      if (true) {
        name = {
          start: "beforeVisit",
          end: "afterVisit",
          open: "beforeReconcile",
          close: "afterReconcile",
          insert: "placeChild"
        }[name] || name;
        return "[" + this.symbolFor("#" + name) + "]";
      }
      ;
    };
    Stack.prototype.sourceId = function() {
      if (this._sourceId || (this._sourceId = this._options.sourceId)) {
        return this._sourceId;
      }
      ;
      let src = this.sourcePath();
      let cwd = this.cwd();
      if (this._options.path && cwd) {
        src = this._options.path.relative(cwd, src);
      }
      ;
      if (!src) {
        throw new Error("Include sourceId or sourcePath in options compile(code,options)");
      }
      ;
      this._sourceId = helpers2.identifierForPath(src);
      return this._sourceId;
    };
    Stack.prototype.theme = function() {
      return this._theme || (this._theme = StyleTheme2.wrap(this._options.config));
    };
    Stack.prototype.stash = function() {
      return this._stash;
    };
    Stack.prototype.set = function(obj) {
      this._options || (this._options = {});
      for (let v, i = 0, keys = Object.keys(obj), l = keys.length, k; i < l; i++) {
        k = keys[i];
        v = obj[k];
        this._options[k] = v;
      }
      ;
      return this;
    };
    Stack.prototype.option = function(key, val) {
      if (val != void 0) {
        this._options || (this._options = {});
        this._options[key] = val;
        return this;
      }
      ;
      return this._options && this._options[key];
    };
    Stack.prototype.platform = function() {
      return this._options.platform || "browser";
    };
    Stack.prototype.format = function() {
      return this._options.format;
    };
    Stack.prototype.sourcePath = function() {
      return this._options.sourcePath;
    };
    Stack.prototype.imbaPath = function() {
      return this._options.imbaPath;
    };
    Stack.prototype.resolveColors = function() {
      return this._options.styles !== "extern" || this._options.resolveColors;
    };
    Stack.prototype.config = function() {
      return this._options.config || {};
    };
    Stack.prototype.cwd = function() {
      return this.config() && this.config().cwd;
    };
    Stack.prototype.tsc = function() {
      return this.platform() == "tsc" || this._options.tsc;
    };
    Stack.prototype.hmr = function() {
      return !!this._options.hmr;
    };
    Stack.prototype.isStdLib = function() {
      return !!this._options.stdlib;
    };
    Stack.prototype.isWeb = function() {
      return this.platform() == "browser" || this.platform() == "web";
    };
    Stack.prototype.isWorker = function() {
      return this.platform() == "worker";
    };
    Stack.prototype.isNode = function() {
      return this.platform() == "node";
    };
    Stack.prototype.isVite = function() {
      return !!this._options.vite;
    };
    Stack.prototype.env = function(key) {
      var e;
      var val = this._options["ENV_" + key];
      if (val != void 0) {
        return val;
      }
      ;
      if (F[key] !== void 0) {
        return F[key];
      }
      ;
      var lowercased = key.toLowerCase();
      if (this._options[lowercased] != void 0) {
        return this._options[lowercased];
      }
      ;
      if (key == "VITE") {
        this._meta.universal = false;
        return this.isVite();
      } else if (key == "WEB" || key == "BROWSER") {
        this._meta.universal = false;
        return this.isWeb();
      } else if (key == "NODE") {
        this._meta.universal = false;
        return this.isNode();
      } else if (key == "WORKER") {
        this._meta.universal = false;
        return this.platform() && this.platform().indexOf("worker") >= 0;
      } else if (key == "WEBWORKER") {
        this._meta.universal = false;
        return this.platform() == "webworker";
      } else if (key == "HMR") {
        return !!this._options.hmr;
      }
      ;
      if (e = this._options.env) {
        if (e.hasOwnProperty(key)) {
          return e[key];
        } else if (e.hasOwnProperty(key.toLowerCase())) {
          return e[key.toLowerCase()];
        }
        ;
      }
      ;
      if (false) {
        val = process.env[key.toUpperCase()];
        if (val != void 0) {
          return val;
        }
        ;
        return null;
      }
      ;
      return void 0;
    };
    Stack.prototype.addScope = function(scope) {
      this._scopes.push(scope);
      return this;
    };
    Stack.prototype.traverse = function(node) {
      return this;
    };
    Stack.prototype.push = function(node) {
      this._nodes.push(node);
      return this;
    };
    Stack.prototype.pop = function(node) {
      this._nodes.pop();
      return this;
    };
    Stack.prototype.parent = function() {
      return this._nodes[this._nodes.length - 2];
    };
    Stack.prototype.current = function() {
      return this._nodes[this._nodes.length - 1];
    };
    Stack.prototype.up = function(test2) {
      test2 || (test2 = function(v) {
        return !(v instanceof VarOrAccess);
      });
      if (typeof test2 == "number") {
        return this._nodes[this._nodes.length - (1 + test2)];
      }
      ;
      var i = this._nodes.length - 2;
      if (test2.prototype instanceof Node2) {
        while (i >= 0) {
          var node = this._nodes[i--];
          if (node instanceof test2) {
            return node;
          }
          ;
        }
        ;
        return null;
      }
      ;
      while (i >= 0) {
        node = this._nodes[i];
        if (test2(node)) {
          return node;
        }
        ;
        i -= 1;
      }
      ;
      return null;
    };
    Stack.prototype.parents = function(test2) {
      test2 || (test2 = function(v) {
        return !(v instanceof VarOrAccess);
      });
      if (test2.prototype instanceof Node2) {
        let cls = test2;
        test2 = function(v) {
          return v instanceof cls;
        };
      }
      ;
      return this._nodes.filter(test2);
    };
    Stack.prototype.relative = function(node, offset) {
      if (offset === void 0)
        offset = 0;
      var idx = this._nodes.indexOf(node);
      return idx >= 0 ? this._nodes[idx + offset] : null;
    };
    Stack.prototype.scope = function(lvl) {
      if (lvl === void 0)
        lvl = 0;
      if (this._withScope) {
        return this._withScope;
      }
      ;
      var i = this._nodes.length - 1 - lvl;
      while (i >= 0) {
        var node = this._nodes[i];
        if (node._scope) {
          return node._scope;
        }
        ;
        i -= 1;
      }
      ;
      return null;
    };
    Stack.prototype.withScope = function(scop, cb) {
      let prev = this._withScope;
      this._withScope = scop;
      cb();
      this._withScope = prev;
      return;
    };
    Stack.prototype.scopes = function() {
      var scopes = [];
      var i = this._nodes.length - 1;
      while (i >= 0) {
        var node = this._nodes[i];
        if (node._scope) {
          scopes.push(node._scope);
        }
        ;
        i -= 1;
      }
      ;
      return scopes;
    };
    Stack.prototype.closure = function() {
      return this.scope().closure();
    };
    Stack.prototype.closures = function() {
      return this.scopes().filter(function(scope) {
        return scope.closure() == scope;
      });
    };
    Stack.prototype.method = function() {
      return this.up(MethodDeclaration);
    };
    Stack.prototype.block = function() {
      return this.up(Block);
    };
    Stack.prototype.blockpart = function() {
      let i = this._nodes.length - 1;
      while (i) {
        if (this._nodes[i - 1] instanceof Block) {
          return this._nodes[i];
        }
        ;
        i--;
      }
      ;
      return;
    };
    Stack.prototype.lastImport = function() {
      let scopes = this.scopes();
      for (let i = 0, items = iter$(scopes), len = items.length, scope; i < len; i++) {
        scope = items[i];
        if (scope._lastImport) {
          return scope._lastImport;
        }
        ;
      }
      ;
      return null;
    };
    Stack.prototype.isExpression = function() {
      var i = this._nodes.length - 1;
      while (i >= 0) {
        var node = this._nodes[i];
        if (node instanceof Code || node instanceof Loop || node.isStatementLike()) {
          return false;
        }
        ;
        if (node.isExpression()) {
          return true;
        }
        ;
        i -= 1;
      }
      ;
      return false;
    };
    Stack.prototype.toString = function() {
      return "Stack(" + this._nodes.join(" -> ") + ")";
    };
    Stack.prototype.isAnalyzing = function() {
      return this._analyzing;
    };
    Stack.prototype.scoping = function() {
      return this._nodes.filter(function(n) {
        return n._scope;
      }).map(function(n) {
        return n._scope;
      });
    };
    Stack.prototype.currentRegion = function() {
      let l = this._nodes.length;
      let node = this._nodes[--l];
      return node && [node.startLoc(), node.endLoc()];
    };
    var STACK = exports.STACK = new Stack();
    function Node2() {
      this.setup();
      this;
    }
    exports.Node = Node2;
    Node2.prototype.o = function(v) {
      return this._o;
    };
    Node2.prototype.setO = function(v) {
      this._o = v;
      return this;
    };
    Node2.prototype.options = function(v) {
      return this._options;
    };
    Node2.prototype.setOptions = function(v) {
      this._options = v;
      return this;
    };
    Node2.prototype.traversed = function(v) {
      return this._traversed;
    };
    Node2.prototype.setTraversed = function(v) {
      this._traversed = v;
      return this;
    };
    Node2.prototype.script = function() {
      return Compilation2.current;
    };
    Node2.prototype.safechain = function() {
      return false;
    };
    Node2.prototype.sourcecode = function() {
      let src = STACK.SOURCECODE;
      let start = this.startLoc();
      let end = this.endLoc();
      return src.slice(start, end);
    };
    Node2.prototype.oid = function() {
      return this._oid || (this._oid = STACK.generateId(""));
    };
    Node2.prototype.osym = function(ns, name) {
      if (ns === void 0)
        ns = "";
      if (name === void 0)
        name = "";
      return STACK.getSymbol(this.oid() + ns, null, name);
    };
    Node2.prototype.symbolRef = function(name) {
      return STACK.root().symbolRef(name);
    };
    Node2.prototype.domCall = function(name) {
      return STACK.domCall(name);
    };
    Node2.prototype.gsym = function(name) {
      return STACK.root().symbolRef(name);
    };
    Node2.prototype.sourceId = function() {
      return STACK.sourceId();
    };
    Node2.prototype.slf = function() {
      return this.scope__().context();
    };
    Node2.prototype.p = function() {
      if (STACK.loglevel() > 0) {
        console.log.apply(console, arguments);
      }
      ;
      return this;
    };
    Node2.prototype.runtime = function() {
      return STACK.runtime();
    };
    Node2.prototype.typeName = function() {
      return this.constructor.name;
    };
    Node2.prototype.namepath = function() {
      return this.typeName();
    };
    Node2.prototype.setup = function() {
      this._expression = false;
      this._traversed = false;
      this._parens = false;
      this._cache = null;
      this._value = null;
      return this;
    };
    Node2.prototype.setStartLoc = function(loc) {
      this._startLoc = loc;
      return this;
    };
    Node2.prototype.setEndLoc = function(loc) {
      this._endLoc = loc;
      return this;
    };
    Node2.prototype.setRegion = function(loc) {
      if (loc instanceof Node2) {
        loc = loc.region();
      }
      ;
      if (loc instanceof Array) {
        this._startLoc = loc[0];
        this._endLoc = loc[1];
      }
      ;
      return this;
    };
    Node2.prototype.setEnds = function(start, end) {
      if (end && end.endLoc) {
        this._endLoc = end.endLoc();
      }
      ;
      if (start && start.startLoc) {
        this._startLoc = start.startLoc();
      }
      ;
      return this;
    };
    Node2.prototype.startLoc = function() {
      return this._startLoc;
    };
    Node2.prototype.endLoc = function() {
      return this._endLoc;
    };
    Node2.prototype.set = function(obj) {
      this._options || (this._options = {});
      for (let v, i = 0, keys = Object.keys(obj), l = keys.length, k; i < l; i++) {
        k = keys[i];
        v = obj[k];
        this._options[k] = v;
      }
      ;
      return this;
    };
    Node2.prototype.option = function(key, val) {
      if (val != void 0) {
        this._options || (this._options = {});
        this._options[key] = val;
        return this;
      }
      ;
      return this._options && this._options[key];
    };
    Node2.prototype.o = function() {
      return this._options || (this._options = {});
    };
    Node2.prototype.keyword = function() {
      return this._keyword || this._options && this._options.keyword;
    };
    Node2.prototype.datatype = function() {
      return this._options ? this._options.datatype : null;
    };
    Node2.prototype.configure = function(obj) {
      return this.set(obj);
    };
    Node2.prototype.region = function() {
      return [0, 0];
    };
    Node2.prototype.loc = function() {
      return [this.startLoc() || 0, this.endLoc() || 0];
    };
    Node2.prototype.token = function() {
      return null;
    };
    Node2.prototype.compile = function() {
      return this;
    };
    Node2.prototype.visit = function() {
      return this;
    };
    Node2.prototype.stack = function() {
      return STACK;
    };
    Node2.prototype.isString = function() {
      return false;
    };
    Node2.prototype.isPrimitive = function(deep) {
      return false;
    };
    Node2.prototype.isReserved = function() {
      return false;
    };
    Node2.prototype.isGlobal = function(name) {
      return false;
    };
    Node2.prototype.isConstant = function() {
      return false;
    };
    Node2.prototype.traverse = function(o) {
      if (this._traversed) {
        return this;
      }
      ;
      this._traversed = true;
      let prev;
      if (o) {
        prev = STACK.state();
        STACK.setState(o);
      }
      ;
      STACK.push(this);
      this.visit(STACK, STACK.state());
      STACK.pop(this);
      if (o) {
        STACK.setState(prev);
      }
      ;
      return this;
    };
    Node2.prototype.inspect = function() {
      return { type: this.constructor.toString() };
    };
    Node2.prototype.js = function(o) {
      return "NODE";
    };
    Node2.prototype.toString = function() {
      return "" + this.constructor.name;
    };
    Node2.prototype.consume = function(node) {
      if (node instanceof TagLike) {
        return node.register(this);
      }
      ;
      if (node instanceof PushAssign) {
        node.register(this);
        return new PushAssign(node.op(), node.left(), this);
      }
      ;
      if (node instanceof Assign) {
        return OP(node.op(), node.left(), this);
      } else if (node instanceof VarDeclaration) {
        return OP("=", node.left(), this);
      } else if (node instanceof Op) {
        return OP(node.op(), node.left(), this);
      } else if (node instanceof Return) {
        return new Return(this);
      } else if (node == NumberLike) {
        return new NumberLike(this);
      } else if (node instanceof Util.Is) {
        return node.clone(this);
      } else if (node instanceof AmperWalker) {
        node.test(this);
      }
      ;
      return this;
    };
    Node2.prototype.toExpression = function() {
      this._expression = true;
      return this;
    };
    Node2.prototype.forceExpression = function() {
      this._expression = true;
      return this;
    };
    Node2.prototype.isExpressable = function() {
      return true;
    };
    Node2.prototype.isExpression = function() {
      return this._expression || false;
    };
    Node2.prototype.isStatementLike = function() {
      return false;
    };
    Node2.prototype.isRuntimeReference = function() {
      return false;
    };
    Node2.prototype.hasSideEffects = function() {
      return true;
    };
    Node2.prototype.isUsed = function() {
      return true;
    };
    Node2.prototype.shouldParenthesize = function() {
      return false;
    };
    Node2.prototype.shouldParenthesizeInTernary = function() {
      return true;
    };
    Node2.prototype.block = function() {
      return Block.wrap([this]);
    };
    Node2.prototype.node = function() {
      return this;
    };
    Node2.prototype.unwrappedNode = function() {
      return this;
    };
    Node2.prototype.scope__ = function() {
      return STACK.scope();
    };
    Node2.prototype.up = function() {
      return STACK.parent();
    };
    Node2.prototype.util = function() {
      return Util;
    };
    Node2.prototype.receiver = function() {
      return this;
    };
    Node2.prototype.indented = function(a, b) {
      if (a instanceof Indentation) {
        this._indentation = a;
        return this;
      }
      ;
      if (b instanceof Array) {
        this.add(b[0]);
        b = b[1];
      }
      ;
      this._indentation || (this._indentation = a && b ? new Indentation(a, b) : INDENT);
      return this;
    };
    Node2.prototype.prebreak = function(term) {
      if (term === void 0)
        term = "\n";
      return this;
    };
    Node2.prototype.invert = function() {
      return OP("!", this);
    };
    Node2.prototype.cache = function(o) {
      if (o === void 0)
        o = {};
      this._cache = o;
      o.var = (o.scope || this.scope__()).temporary(this, o);
      o.lookups = 0;
      return this;
    };
    Node2.prototype.cachevar = function() {
      return this._cache && this._cache.var;
    };
    Node2.prototype.decache = function() {
      if (this._cache) {
        this.cachevar().free();
        this._cache = null;
      }
      ;
      return this;
    };
    Node2.prototype.alias = function() {
      return null;
    };
    Node2.prototype.warn = function(message, opts) {
      if (opts === void 0)
        opts = {};
      let loc = opts.loc || this.loc() || [0, 0];
      if (loc instanceof Node2) {
        loc = [loc.startLoc(), loc.endLoc()];
      }
      ;
      if (loc instanceof Token2) {
        loc = loc.loc();
      }
      ;
      return this.script().addDiagnostic(opts.severity || "warning", {
        message,
        range: this.script().rangeAt(loc[0], loc[1])
      });
    };
    Node2.prototype.error = function(message, opts) {
      if (opts === void 0)
        opts = {};
      opts.severity = "error";
      return this.warn(message, opts);
    };
    Node2.prototype.c = function(o) {
      var indent;
      var s = STACK;
      var ch = this._cache;
      if (ch && ch.cached) {
        return this.c_cached(ch);
      }
      ;
      s.push(this);
      if (o && o.expression)
        this.forceExpression();
      if (o && o.indent) {
        this._indentation || (this._indentation = INDENT);
      }
      ;
      var out = this.js(s, o);
      var paren = this.shouldParenthesize();
      s.pop(this);
      if (out == void 0) {
        return out;
      }
      ;
      if (indent = this._indentation) {
        out = indent.wrap(out, o);
        this;
      }
      ;
      if (paren) {
        out = "(" + out + ")";
      }
      ;
      if (o && o.braces || this._options && this._options.braces) {
        if (indent) {
          out = "{" + out + "}";
        } else {
          out = "{ " + out + " }";
        }
        ;
      }
      ;
      if (ch = this._cache) {
        if (!ch.manual) {
          out = "" + ch.var.c() + " = " + out;
        }
        ;
        var par = s.current();
        if (par instanceof ValueNode2) {
          par = par.node();
        }
        ;
        if (par instanceof Access || par instanceof Op) {
          out = "(" + out + ")";
        }
        ;
        ch.cached = true;
      }
      ;
      if (OPTS.sourcemap && (!o || o.mark !== false)) {
        out = M2(out, this);
      }
      ;
      return out;
    };
    Node2.prototype.c_cached = function(cache) {
      cache.lookups++;
      if (cache.uses == cache.lookups) {
        cache.var.free();
      }
      ;
      return cache.var.c();
    };
    function ValueNode2(value) {
      this.setup();
      this._value = this.load(value);
    }
    subclass$(ValueNode2, Node2);
    exports.ValueNode = ValueNode2;
    ValueNode2.prototype.value = function(v) {
      return this._value;
    };
    ValueNode2.prototype.setValue = function(v) {
      this._value = v;
      return this;
    };
    ValueNode2.prototype.startLoc = function() {
      return this._startLoc || (this._value && this._value.startLoc ? this._value.startLoc() : -1);
    };
    ValueNode2.prototype.load = function(value) {
      return value;
    };
    ValueNode2.prototype.js = function(o) {
      return typeof this._value == "string" ? this._value : this._value.c();
    };
    ValueNode2.prototype.visit = function() {
      if (this._value instanceof Node2) {
        this._value.traverse();
      }
      ;
      return this;
    };
    ValueNode2.prototype.region = function() {
      return [this._value._loc, this._value._loc + this._value._len];
    };
    function ValueReferenceNode(value, orig) {
      this.setup();
      this._value = value;
      this._orig = orig || value;
    }
    subclass$(ValueReferenceNode, Node2);
    exports.ValueReferenceNode = ValueReferenceNode;
    ValueReferenceNode.prototype.value = function(v) {
      return this._value;
    };
    ValueReferenceNode.prototype.setValue = function(v) {
      this._value = v;
      return this;
    };
    ValueReferenceNode.prototype.orig = function(v) {
      return this._orig;
    };
    ValueReferenceNode.prototype.setOrig = function(v) {
      this._orig = v;
      return this;
    };
    ValueReferenceNode.prototype.startLoc = function() {
      return this._orig && this._orig.startLoc && this._orig.startLoc();
    };
    ValueReferenceNode.prototype.endLoc = function() {
      return this._orig && this._orig.endLoc && this._orig.endLoc();
    };
    ValueReferenceNode.prototype.load = function(value) {
      return value;
    };
    ValueReferenceNode.prototype.js = function(o) {
      let res = M2(this._value.c({ mark: false }), this);
      return res;
    };
    ValueReferenceNode.prototype.visit = function() {
      if (this._value instanceof Node2) {
        this._value.traverse();
      }
      ;
      return this;
    };
    ValueReferenceNode.prototype.region = function() {
      return [this._orig._loc, this._orig._loc + this._orig._len];
    };
    function ExpressionNode() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(ExpressionNode, ValueNode2);
    exports.ExpressionNode = ExpressionNode;
    function AssertionNode() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(AssertionNode, ValueNode2);
    exports.AssertionNode = AssertionNode;
    AssertionNode.prototype.js = function(o) {
      let op = this._value;
      let out = [];
      if (op instanceof Op && !(op instanceof Access)) {
        let l = op.left();
        let r = op.right();
        out.push(l.cache().c(o));
        out.push(helpers2.singlequote(op._op));
        out.push(r.cache().c(o));
        out = ["imba.$a=[" + out.join(",") + "]"];
        out.push(op.c(o));
      } else {
        out.push("imba.$a=null");
        out.push(op.c(o));
      }
      ;
      return "(" + out.join(",") + ")";
    };
    function Statement() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(Statement, ValueNode2);
    exports.Statement = Statement;
    Statement.prototype.isExpressable = function() {
      return false;
    };
    function Meta() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(Meta, ValueNode2);
    exports.Meta = Meta;
    Meta.prototype.isPrimitive = function(deep) {
      return true;
    };
    function Comment() {
      return Meta.apply(this, arguments);
    }
    subclass$(Comment, Meta);
    exports.Comment = Comment;
    Comment.prototype.visit = function() {
      var block, next;
      if (block = this.up()) {
        var idx = block.indexOf(this) + 1;
        if (block.index(idx) instanceof Terminator) {
          idx += 1;
        }
        ;
        if (next = block.index(idx)) {
          if (this.toString().indexOf("@overload") < 0) {
            next._desc = this;
          }
          ;
        }
        ;
      }
      ;
      return this;
    };
    Comment.prototype.isMultiline = function() {
      return this._value.type() == "HERECOMMENT";
    };
    Comment.prototype.toDoc = function() {
      return helpers2.normalizeIndentation("" + this._value._value);
    };
    Comment.prototype.toJSON = function() {
      return helpers2.normalizeIndentation("" + this._value._value);
    };
    Comment.prototype.toString = function() {
      return this._value._value;
    };
    Comment.prototype.c = function(o) {
      if (STACK.option("comments") == false || this._skip) {
        return "";
      }
      ;
      var v = this._value._value;
      if (o && o.expression || v.match(/\n/) || this.isMultiline()) {
        var out = v.replace(/\*\//g, "\\*\\/").replace(/\/\*/g, "\\/\\*");
        v = out;
        if (v.match(/\@(type|param|satisfies|template)/) || STACK.tsc()) {
          v = "*" + v;
        }
        ;
        return "/*" + v + "*/";
      } else if (v.match(/\@(type|param|satisfies|template)/)) {
        return "/** " + v + " */";
      } else {
        return "// " + v;
      }
      ;
    };
    function Terminator(v) {
      this._value = v;
      this;
    }
    subclass$(Terminator, Meta);
    exports.Terminator = Terminator;
    Terminator.prototype.traverse = function() {
      return this;
    };
    Terminator.prototype.loc = function() {
      return [this._value._loc, this._value._loc + this._value._value.length];
    };
    Terminator.prototype.startLoc = function() {
      return this._value.startLoc ? this._value.startLoc() : -1;
    };
    Terminator.prototype.endLoc = function() {
      return this._value._value ? this.startLoc() + this._value._value.length : -1;
    };
    Terminator.prototype.c = function() {
      let val = this._value.c();
      if (STACK.option("comments") == false) {
        val = val.replace(/\/\/.*$/gm, "");
      }
      ;
      if (STACK.tsc()) {
        val = val.replace(/\/{3}/g, "~~/~~");
        val = val.replace(/\/\/\s(.*)$/gm, "/** $1 */ ");
        val = val.replace(/\~\~\/\~\~/g, "///");
      }
      ;
      if (STACK.tsc() && (val.length > 1 || this._first)) {
        return M2(val.replace(/^[\t ]+/gm, ""), this);
      }
      ;
      return val.replace(/^[\t ]+/gm, "");
    };
    function Newline(v) {
      this._traversed = false;
      this._value = v || "\n";
    }
    subclass$(Newline, Terminator);
    exports.Newline = Newline;
    Newline.prototype.c = function() {
      return this._value;
    };
    function Index() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(Index, ValueNode2);
    exports.Index = Index;
    Index.prototype.startLoc = function() {
      return this._startLoc || this._value && this._value.startLoc && this._value.startLoc();
    };
    Index.prototype.endLoc = function() {
      return this._endLoc || this._value && this._value.endLoc && this._value.endLoc();
    };
    Index.prototype.cache = function(o) {
      if (o === void 0)
        o = {};
      return this._value.cache(o);
    };
    Index.prototype.js = function(o) {
      return this._value.c();
    };
    function ListNode(list) {
      this.setup();
      this._nodes = this.load(list || []);
      this._indentation = null;
    }
    subclass$(ListNode, Node2);
    exports.ListNode = ListNode;
    ListNode.prototype.nodes = function(v) {
      return this._nodes;
    };
    ListNode.prototype.setNodes = function(v) {
      this._nodes = v;
      return this;
    };
    ListNode.prototype.consume = function(node) {
      if (node instanceof Walker) {
        for (let i = 0, items = iter$(this._nodes), len = items.length; i < len; i++) {
          items[i].consume(node);
        }
        ;
        return this;
      }
      ;
      return ListNode.prototype.__super__.consume.apply(this, arguments);
    };
    ListNode.prototype.list = function() {
      return this._nodes;
    };
    ListNode.prototype.compact = function() {
      this._nodes = AST.compact(this._nodes);
      return this;
    };
    ListNode.prototype.load = function(list) {
      return list;
    };
    ListNode.prototype.concat = function(other) {
      this._nodes = this.nodes().concat(other instanceof Array ? other : other.nodes());
      return this;
    };
    ListNode.prototype.swap = function(item, other) {
      var idx = this.indexOf(item);
      if (idx >= 0) {
        this.nodes()[idx] = other;
      }
      ;
      return this;
    };
    ListNode.prototype.push = function(item) {
      this._nodes.push(item);
      return this;
    };
    ListNode.prototype.pop = function() {
      var end = this._nodes.pop();
      return end;
    };
    ListNode.prototype.add = function(item, o) {
      let idx = null;
      if (o && o.before) {
        idx = this._nodes.indexOf(o.before);
        if (idx == -1) {
          idx = null;
        }
        ;
      } else if (o && o.after) {
        idx = this._nodes.indexOf(o.after) + 1;
        if (idx == 0) {
          idx = null;
        }
        ;
        if (idx >= 1) {
          while (this._nodes[idx] instanceof Meta) {
            idx++;
          }
          ;
        }
        ;
      } else if (typeof o == "number" || o instanceof Number) {
        idx = o;
      }
      ;
      if (idx !== null) {
        item instanceof Array ? this._nodes.splice.apply(this._nodes, [].concat([idx, 0], Array.from(item))) : this._nodes.splice(idx, 0, item);
      } else {
        item instanceof Array ? this._nodes.push.apply(this._nodes, item) : this._nodes.push(item);
      }
      ;
      return this;
    };
    ListNode.prototype.unshift = function(item, br) {
      if (br) {
        this._nodes.unshift(BR);
      }
      ;
      this._nodes.unshift(item);
      return this;
    };
    ListNode.prototype.slice = function(a, b) {
      return new this.constructor(this._nodes.slice(a, b));
    };
    ListNode.prototype.break = function(br, pre) {
      if (pre === void 0)
        pre = false;
      if (typeof br == "string") {
        br = new Terminator(br);
      }
      ;
      pre ? this.unshift(br) : this.push(br);
      return this;
    };
    ListNode.prototype.some = function(cb) {
      for (let i = 0, items = iter$(this._nodes), len = items.length, node; i < len; i++) {
        node = items[i];
        if (cb(node)) {
          return true;
        }
        ;
      }
      ;
      return false;
    };
    ListNode.prototype.every = function(cb) {
      for (let i = 0, items = iter$(this._nodes), len = items.length, node; i < len; i++) {
        node = items[i];
        if (!cb(node)) {
          return false;
        }
        ;
      }
      ;
      return true;
    };
    ListNode.prototype.values = function() {
      return this._nodes.filter(function(item) {
        return !(item instanceof Meta);
      });
    };
    ListNode.prototype.filter = function(cb) {
      return this._nodes.filter(cb);
    };
    ListNode.prototype.pluck = function(cb) {
      var item = this.filter(cb)[0];
      if (item) {
        this.remove(item);
      }
      ;
      return item;
    };
    ListNode.prototype.indexOf = function(item) {
      return this._nodes.indexOf(item);
    };
    ListNode.prototype.index = function(i) {
      return this._nodes[i];
    };
    ListNode.prototype.remove = function(item) {
      var idx = this._nodes.indexOf(item);
      if (idx >= 0) {
        this._nodes.splice(idx, 1);
      }
      ;
      return this;
    };
    ListNode.prototype.removeAt = function(idx) {
      var item = this._nodes[idx];
      if (idx >= 0) {
        this._nodes.splice(idx, 1);
      }
      ;
      return item;
    };
    ListNode.prototype.replace = function(original, replacement) {
      var idx = this._nodes.indexOf(original);
      if (idx >= 0) {
        if (replacement instanceof Array) {
          this._nodes.splice.apply(this._nodes, [].concat([idx, 1], Array.from(replacement)));
        } else {
          this._nodes[idx] = replacement;
        }
        ;
      }
      ;
      return this;
    };
    ListNode.prototype.first = function() {
      return this._nodes[0];
    };
    ListNode.prototype.last = function() {
      var i = this._nodes.length;
      while (i) {
        i = i - 1;
        var v = this._nodes[i];
        if (!(v instanceof Meta)) {
          return v;
        }
        ;
      }
      ;
      return null;
    };
    ListNode.prototype.map = function(fn) {
      return this._nodes.map(fn);
    };
    ListNode.prototype.forEach = function(fn) {
      return this._nodes.forEach(fn);
    };
    ListNode.prototype.remap = function(fn) {
      this._nodes = this.map(fn);
      return this;
    };
    ListNode.prototype.count = function() {
      return this._nodes.length;
    };
    ListNode.prototype.len = function() {
      return this._nodes.length;
    };
    ListNode.prototype.realCount = function() {
      var k = 0;
      for (let i = 0, items = iter$(this._nodes), len = items.length, node; i < len; i++) {
        node = items[i];
        if (node && !(node instanceof Meta)) {
          k++;
        }
        ;
      }
      ;
      return k;
    };
    ListNode.prototype.isEmpty = function() {
      return this.realCount() == 0;
    };
    ListNode.prototype.visit = function() {
      let items = this._nodes;
      let i = 0;
      while (i < items.length) {
        let item = items[i];
        if (item.traverse) {
          let res = item.traverse();
          if (res != item) {
            if (res instanceof Array) {
              items.splice.apply(items, [].concat([i, 1], Array.from(res)));
              continue;
            }
            ;
          }
          ;
        }
        ;
        i++;
      }
      ;
      return this;
    };
    ListNode.prototype.isExpressable = function() {
      for (let i = 0, items = iter$(this.nodes()), len = items.length, node; i < len; i++) {
        node = items[i];
        if (node && !node.isExpressable()) {
          return false;
        }
        ;
      }
      ;
      return true;
    };
    ListNode.prototype.toArray = function() {
      return this._nodes;
    };
    ListNode.prototype.delimiter = function() {
      return this._delimiter || ",";
    };
    ListNode.prototype.js = function(o, pars) {
      if (!pars || pars.constructor !== Object)
        pars = {};
      var nodes = pars.nodes !== void 0 ? pars.nodes : this._nodes;
      var delim = ",";
      var express = delim != ";";
      var last = this.last();
      var i = 0;
      var l = nodes.length;
      var str = "";
      for (let j = 0, items = iter$(nodes), len = items.length, arg; j < len; j++) {
        arg = items[j];
        var part = typeof arg == "string" ? arg : arg ? arg.c({ expression: express }) : "";
        str += part;
        if (part && (!express || arg != last) && !(arg instanceof Meta)) {
          str += delim;
        }
        ;
      }
      ;
      return str;
    };
    ListNode.prototype.indented = function(a, b) {
      if (a instanceof Indentation) {
        this._indentation = a;
        return this;
      }
      ;
      this._indentation || (this._indentation = a && b ? new Indentation(a, b) : INDENT);
      return this;
    };
    ListNode.prototype.endLoc = function() {
      var $1;
      if (this._endLoc) {
        return this._endLoc;
      }
      ;
      var i = this._nodes.length;
      let last = this._nodes[i - 1];
      return ($1 = last) && $1.endLoc && $1.endLoc();
    };
    function ArgList() {
      return ListNode.apply(this, arguments);
    }
    subclass$(ArgList, ListNode);
    exports.ArgList = ArgList;
    ArgList.prototype.startLoc = function() {
      var first_;
      if (typeof this._startLoc == "number") {
        return this._startLoc;
      }
      ;
      return (first_ = this.first()) && first_.startLoc && first_.startLoc();
    };
    ArgList.prototype.consume = function(node) {
      if (node instanceof TagLike) {
        this._nodes = this._nodes.map(function(child) {
          if (!(child instanceof Meta)) {
            return child.consume(node);
          } else {
            return child;
          }
          ;
        });
        return this;
      }
      ;
      return ArgList.prototype.__super__.consume.apply(this, arguments);
    };
    ArgList.prototype.setEnds = function(start, end) {
      this._generated = start && start.generated;
      if (end && end.endLoc && end.endLoc() != -1) {
        this._endLoc = end.endLoc();
      }
      ;
      if (start && start.startLoc && start.startLoc() != -1) {
        this._startLoc = start.startLoc();
      }
      ;
      return this;
    };
    function AssignList() {
      return ArgList.apply(this, arguments);
    }
    subclass$(AssignList, ArgList);
    exports.AssignList = AssignList;
    AssignList.prototype.concat = function(other) {
      if (this._nodes.length == 0 && other instanceof AssignList) {
        return other;
      } else {
        AssignList.prototype.__super__.concat.call(this, other);
      }
      ;
      return this;
    };
    function Block(list) {
      this.setup();
      this._nodes = list || [];
      this._head = null;
      this._indentation = null;
    }
    subclass$(Block, ListNode);
    exports.Block = Block;
    Block.prototype.head = function(v) {
      return this._head;
    };
    Block.prototype.setHead = function(v) {
      this._head = v;
      return this;
    };
    Block.prototype.startLoc = function() {
      return this._indentation ? this._indentation.startLoc() : Block.prototype.__super__.startLoc.apply(this, arguments);
    };
    Block.prototype.endLoc = function() {
      return this._indentation ? this._indentation.endLoc() : Block.prototype.__super__.endLoc.apply(this, arguments);
    };
    Block.wrap = function(ary) {
      if (!(ary instanceof Array)) {
        throw new SyntaxError("what");
      }
      ;
      return ary.length == 1 && ary[0] instanceof Block ? ary[0] : new Block(ary);
    };
    Block.prototype.visit = function(stack) {
      if (this._scope) {
        this._scope.visit();
      }
      ;
      if (stack && stack._tag) {
        this._tag = stack._tag;
      }
      ;
      this._traversing = true;
      for (let i = 0, items = iter$(this._nodes.slice(0)), len = items.length, node; i < len; i++) {
        node = items[i];
        node && node.traverse();
      }
      ;
      this._traversing = false;
      return this;
    };
    Block.prototype.block = function() {
      return this;
    };
    Block.prototype.collectDecorators = function() {
      var decorators;
      if (decorators = this._decorators) {
        this._decorators = null;
        return decorators;
      }
      ;
      return null;
    };
    Block.prototype.loc = function() {
      var opt, ind;
      if (opt = this.option("ends")) {
        var a = opt[0].loc();
        var b = opt[1].loc();
        if (!a) {
          this.p("no loc for " + opt[0]);
        }
        ;
        if (!b) {
          this.p("no loc for " + opt[1]);
        }
        ;
        return [a[0], b[1]];
      }
      ;
      if (ind = this._indentation) {
        if (ind.aloc() != -1) {
          return [ind.aloc(), ind.bloc()];
        }
        ;
      }
      ;
      a = this._nodes[0];
      b = this._nodes[this._nodes.length - 1];
      return [a && a.loc()[0] || 0, b && b.loc()[1] || 0];
    };
    Block.prototype.unwrap = function() {
      var ary = [];
      for (let i = 0, items = iter$(this.nodes()), len = items.length, node; i < len; i++) {
        node = items[i];
        if (node instanceof Block) {
          ary.push.apply(ary, node.unwrap());
        } else {
          ary.push(node);
        }
        ;
      }
      ;
      return ary;
    };
    Block.prototype.compile = function(o) {
      if (o === void 0)
        o = {};
      var root = new Root2(this, o);
      return root.compile(o);
    };
    Block.prototype.analyze = function(o) {
      if (o === void 0)
        o = {};
      return this;
    };
    Block.prototype.cpart = function(node) {
      if (node === BR0) {
        return "";
      }
      ;
      var out = typeof node == "string" ? node : node ? node.c() : "";
      if (out == null || out == void 0 || out == "") {
        return "";
      }
      ;
      if (out instanceof Array) {
        var str = "";
        var l = out.length;
        var i = 0;
        while (i < l) {
          str += this.cpart(out[i++]);
        }
        ;
        return str;
      }
      ;
      var hasSemiColon = SEMICOLON_TEST.test(out);
      if (!(hasSemiColon || node instanceof Meta)) {
        out += this.delimiter();
      }
      ;
      return out;
    };
    Block.prototype.delimiter = function() {
      return this._delimiter == void 0 ? ";" : this._delimiter;
    };
    Block.prototype.js = function(o, opts) {
      var ast = this._nodes;
      var l = ast.length;
      var express = this.isExpression() || o.isExpression() || this.option("express") && this.isExpressable();
      if (ast.length == 0 && (!this._head || this._head.length == 0)) {
        return "";
      }
      ;
      if (express) {
        return Block.prototype.__super__.js.call(this, o, { nodes: ast });
      }
      ;
      var str = "";
      let empty2 = false;
      for (let i = 0, items = iter$(ast), len = items.length; i < len; i++) {
        let vs = this.cpart(items[i]);
        if (vs[0] == "\n" && /^\n+$/.test(vs)) {
          if (empty2) {
            continue;
          }
          ;
          empty2 = true;
        } else if (vs) {
          empty2 = false;
        }
        ;
        str += vs;
      }
      ;
      if (this._head && this._head.length > 0) {
        var prefix = "";
        for (let i = 0, items = iter$(this._head), len = items.length; i < len; i++) {
          var hv = this.cpart(items[i]);
          if (hv) {
            prefix += hv + "\n";
          }
          ;
        }
        ;
        str = prefix + str;
      }
      ;
      if (this.option("strict")) {
        str = this.cpart('"use strict";\n') + str;
      }
      ;
      return str;
    };
    Block.prototype.defers = function(original, replacement) {
      var idx = this._nodes.indexOf(original);
      if (idx >= 0) {
        this._nodes[idx] = replacement;
      }
      ;
      var rest = this._nodes.splice(idx + 1);
      return rest;
    };
    Block.prototype.expressions = function() {
      var expressions = [];
      for (let i = 0, items = iter$(this.nodes()), len = items.length, node; i < len; i++) {
        node = items[i];
        if (!(node instanceof Terminator)) {
          expressions.push(node);
        }
        ;
      }
      ;
      return expressions;
    };
    Block.prototype.consume = function(node) {
      var before;
      if (node instanceof TagLike) {
        let real = this.expressions();
        this._nodes = this._nodes.map(function(child) {
          if (idx$(child, real) >= 0 && !(child instanceof Assign)) {
            return child.consume(node);
          } else {
            return child;
          }
          ;
        });
        return this;
      }
      ;
      if (before = this.last()) {
        var after = before.consume(node);
        if (after != before) {
          if (after instanceof Block) {
            after = after.nodes();
          }
          ;
          this.replace(before, after);
        }
        ;
      }
      ;
      return this;
    };
    Block.prototype.isExpressable = function() {
      if (!this._nodes.every(function(v) {
        return v.isExpressable();
      })) {
        return false;
      }
      ;
      return true;
    };
    Block.prototype.isExpression = function() {
      return this.option("express") || this._expression;
    };
    Block.prototype.shouldParenthesizeInTernary = function() {
      if (this.count() == 1) {
        return this.first().shouldParenthesizeInTernary();
      }
      ;
      return true;
    };
    Block.prototype.indented = function(a, b) {
      var post;
      Block.prototype.__super__.indented.apply(this, arguments);
      if (a instanceof Token2 && a._type == "INDENT") {
        if (post = a._meta && a._meta.post) {
          let br = new Token2("TERMINATOR", post);
          this._nodes.unshift(new Terminator(br));
          a._meta.post = "";
        }
        ;
      }
      ;
      return this;
    };
    function ClassInitBlock() {
      return Block.apply(this, arguments);
    }
    subclass$(ClassInitBlock, Block);
    ClassInitBlock.prototype.c = function(o) {
      let out = ClassInitBlock.prototype.__super__.c.apply(this, arguments);
      return "static {\n" + helpers2.indent(out) + "}";
    };
    function InstanceInitBlock() {
      return Block.apply(this, arguments);
    }
    subclass$(InstanceInitBlock, Block);
    function InstancePatchBlock() {
      return InstanceInitBlock.apply(this, arguments);
    }
    subclass$(InstancePatchBlock, InstanceInitBlock);
    function ClassField(name) {
      ClassField.prototype.__super__.constructor.apply(this, arguments);
      this._name = name;
    }
    subclass$(ClassField, Node2);
    exports.ClassField = ClassField;
    ClassField.prototype.name = function(v) {
      return this._name;
    };
    ClassField.prototype.setName = function(v) {
      this._name = v;
      return this;
    };
    ClassField.prototype.visit = function() {
      var up_;
      this._decorators = (up_ = this.up()) && up_.collectDecorators && up_.collectDecorators();
      this._classdecl = STACK.up(ClassDeclaration);
      if (this._name && this._name.traverse) {
        this._name.traverse();
      }
      ;
      if (this.value()) {
        this.value()._scope = this._vscope = new FieldScope2(this.value());
        this.value()._scope._parent = this.scope__();
        this.value().traverse();
      }
      ;
      if (this.watchBody()) {
        this._descriptor = STACK.root().declare("" + this.oid() + "$Prop", this.util().watcher(this.storageSymbol(), this.watcherSymbol()), { type: "const", system: true });
      }
      ;
      if (this.wrapper()) {
        this._vslot = this.osym("slot", String(this._name));
        this._fslot = this.osym("meta");
        this._fname = this._name.metaIdentifier();
        this.wrapper()._scope = this._vscope = new FieldScope2(this.wrapper());
        this.wrapper()._scope._parent = this.scope__();
        this.wrapper().traverse();
      }
      ;
      return this;
    };
    ClassField.prototype.value = function() {
      return this.option("value");
    };
    ClassField.prototype.target = function() {
      return this.option("static") ? LIT("this") : LIT("this.prototype");
    };
    ClassField.prototype.storageSymbol = function() {
      return this.symbolRef("#" + this.name().c({ as: "symbolpart" }));
    };
    ClassField.prototype.watcherSymbol = function() {
      return this.symbolRef("#" + this.name().c({ as: "symbolpart" }) + "DidSet");
    };
    ClassField.prototype.storageKey = function() {
      return this._storageKey || (this._storageKey = STR(this.name().c() + "$$"));
    };
    ClassField.prototype.storageMap = function() {
      return this._storageMap || (this._storageMap = this.scope__().root().declare(null, LIT("new WeakMap()")));
    };
    ClassField.prototype.isPlain = function() {
      return !this._decorators && (!this._value || this._value.isPrimitive());
    };
    ClassField.prototype.isMember = function() {
      return !this.option("static");
    };
    ClassField.prototype.isLazy = function() {
      return false;
    };
    ClassField.prototype.hasStaticInits = function() {
      return this.isStatic() || this._decorators;
    };
    ClassField.prototype.hasConstructorInits = function() {
      return !this.isStatic();
    };
    ClassField.prototype.isStatic = function() {
      return this.option("static");
    };
    ClassField.prototype.watchBody = function() {
      return this.option("watch");
    };
    ClassField.prototype.wrapper = function() {
      return this.option("wrapper");
    };
    ClassField.prototype.loc = function() {
      return [this._name._loc, this._name.region()[1]];
    };
    ClassField.prototype.c = function() {
      var fn, fn1;
      if (this.option("struct")) {
        return;
      }
      ;
      let up = STACK.current();
      let out;
      if (up instanceof ClassBody) {
        let prefix = this.isStatic() ? "" + M2("static", this.option("static")) + " " : "";
        let name = this.name() instanceof IdentifierExpression ? this.name().asObjectKey() : this.name().c({ as: "field" });
        let cls = STACK.up(ClassDeclaration);
        if (this.wrapper()) {
          let meta = this._metaname = this._name.metaIdentifier();
          let slot = this._vslot;
          let metasym = this._fslot;
          let inner;
          let context = null;
          if (this.isStatic()) {
            context = cls.classReference().c();
          } else {
            context = "" + cls.classReference().c() + ".prototype";
          }
          ;
          let op = OP(".", LIT("this"), meta);
          let args = "this," + slot + "," + this._name.c({ as: "value" });
          this._getter = LIT("(){ return " + op.c() + ".$get(" + args + ") }");
          this._setter = LIT("(val){ " + op.c() + ".$set(val," + args + ") }");
          if (STACK.tsc()) {
            inner = "return " + this.runtime().accessor + "(" + this.wrapper().c({ expression: true }) + "," + args + "," + metasym + "," + context + ")";
          } else {
            inner = "return this[" + metasym + "] || " + this.runtime().accessor + "(" + this.wrapper().c({ expression: true }) + "," + args + "," + metasym + "," + context + ")";
          }
          ;
          this._handler = LIT("" + M2(meta.c({ as: "field" }), this._name) + "(){ " + inner + " }");
        }
        ;
        if (STACK.tsc()) {
          if (this.wrapper()) {
            let setter = "" + prefix + "set " + M2(name, this._name) + this.setter().c({ keyword: "" });
            let getter = "" + prefix + "get " + M2(name, this._name) + this.getter().c({ keyword: "" });
            if (this.datatype()) {
              getter = "" + this.datatype().c() + " " + getter;
            }
            ;
            out = "" + setter + "\n" + getter + "\n" + prefix + "get " + this._handler.c();
            if (!this.isStatic()) {
              out += "\nstatic get " + M2(this._metaname.c({ as: "field" }), this._name) + "(){ return " + OP(".", LIT("this.prototype"), this._metaname).c() + " }";
            }
            ;
            return out;
          }
          ;
          if (this instanceof ClassAttribute || this._decorators && this._decorators.length) {
            let val = this.value() ? this.value().c() : "";
            let field = "";
            let getval = "null";
            let setval = "";
            let sym = this.osym();
            out = "" + prefix + " get " + M2(name, this._name) + "() { return /** @type any */(" + getval + ") }";
            if (this.datatype()) {
              out = "" + this.datatype().c() + " " + out;
            }
            ;
            out += "\n" + prefix + " set " + M2(name, this._name) + "(val) { " + setval + " }";
          } else {
            out = "" + prefix + M2(name, this._name);
            if (this.value()) {
              out += " = " + this.value().c() + ";";
            }
            ;
            let typ = this.datatype();
            if (typ) {
              out = "" + typ.c() + " " + out;
            }
            ;
          }
          ;
        } else if (this instanceof ClassAttribute || this._decorators && this._decorators.length > 0 && false || this.wrapper()) {
          let setter = "" + prefix + "set " + name + this.setter().c({ keyword: "" });
          let getter = "" + prefix + "get " + name + this.getter().c({ keyword: "" });
          out = "" + setter + "\n" + getter;
          if (this.wrapper()) {
            out += "\n" + prefix + "get " + this._handler.c();
          }
          ;
        }
        ;
        return out;
      }
      ;
      if (STACK.tsc()) {
        return;
      }
      ;
      if (this.isStatic() && up instanceof ClassInitBlock) {
        if (this._vscope) {
          if (fn = STACK.up(Func)) {
            this._vscope.mergeScopeInto(fn._scope);
          }
          ;
        }
        ;
        out = OP("=", OP(".", THIS, this.name()), this.value() || UNDEFINED).c() + ";\n";
      } else if (!this.isStatic() && up instanceof ClassInitBlock) {
        return "";
        let key = this.name();
        let tpl = "Object.defineProperty(this.prototype," + key.c({ as: "value" }) + ",{\n	enumerable: true,\n	set" + this.setter().c({ keyword: "" }) + ",\n	get" + this.getter().c({ keyword: "" }) + "\n})";
        return tpl;
      } else if (!this.isStatic() && up instanceof InstanceInitBlock) {
        if (this._vscope) {
          if (fn1 = STACK.up(Func)) {
            this._vscope.mergeScopeInto(fn1._scope);
          }
          ;
        }
        ;
        let key = this.name();
        if (this.name() instanceof Identifier) {
          key = this.name().toStr();
        }
        ;
        let ctor = up.option("ctor");
        let opts = up.option("opts");
        let val = this.value() || UNDEFINED;
        let paramIndex = this.option("paramIndex");
        let restIndex = this.option("restIndex");
        let access;
        let rest;
        if (up instanceof InstancePatchBlock) {
          rest = ctor._params.at(restIndex, true, "$$", LIT("{}"));
          access = OP(".", rest, this.name());
          access.cache({ reuse: true, name: "v" });
          let right = OP("=", OP(".", THIS, this.name()), access);
          if (this.wrapper()) {
            right = CALL(
              OP(".", OP(".", THIS, this._fname), STR("$init")),
              [access, THIS, this._vslot, LIT(this._name.c({ as: "value" })), rest]
            );
          }
          ;
          out = OP("&&", OP("!==", access, UNDEFINED), right);
        } else if (paramIndex != void 0) {
          let name = this.option("paramName");
          access = ctor._params.at(paramIndex, true, name);
          if (this.value()) {
            val = If.ternary(OP("!==", access, UNDEFINED), access, val);
          } else {
            val = access;
          }
          ;
        } else if (restIndex != void 0) {
          rest = ctor._params.at(restIndex, true, "$$", LIT("null"));
          access = OP(".", rest, this.name());
          if (this.value()) {
            access.cache({ reuse: true, name: "v" });
            val = If.ternary(OP("&&", rest, OP("!==", access, UNDEFINED)), access, val);
          } else {
            val = If.ternary(rest, access, UNDEFINED);
          }
          ;
        }
        ;
        if (this instanceof ClassAttribute && !this.value()) {
          return;
        }
        ;
        if (this.wrapper()) {
          if (!(up instanceof InstancePatchBlock)) {
            out = CALL(
              OP(".", OP(".", THIS, this._fname), STR("$init")),
              [val, THIS, this._vslot, LIT(this._name.c({ as: "value" })), rest]
            );
          }
          ;
          out = OP("&&", LIT("fields"), out);
        }
        ;
        out || (out = OP("=", OP(".", THIS, this.name()), val));
        out = out.c() + ";\n";
        if (this.watchBody()) {
          this._descriptor || (this._descriptor = STACK.root().declare("" + this.oid() + "$Prop", this.util().watcher(this.storageSymbol(), this.watcherSymbol()), { type: "const", system: true }));
          out = "Object.defineProperty(this," + key.c() + "," + this._descriptor.c() + ");\n" + out;
        }
        ;
      }
      ;
      return out;
    };
    ClassField.prototype.getter = function() {
      return this._getter || (this._getter = this.wrapper() ? LIT("(){ return this.__" + this.name().c() + ".$get(this," + this.name().toStr().c() + "," + this.osym() + ") }") : this.parseTemplate("(){ return $get$; }"));
    };
    ClassField.prototype.setterForValue = function(value) {
      return OP("=", OP(".", THIS, this.storageKey()), value);
    };
    ClassField.prototype.parseTemplate = function(tpl) {
      var self2 = this;
      tpl = tpl.replace(/\$(\w+)\$/g, function(m, key) {
        if (key == "get") {
          return GET(THIS, self2.storageSymbol()).c();
        } else if (key == "name") {
          return self2.name().c();
        } else if (key == "set") {
          return OP("=", GET(THIS, self2.storageSymbol()), LIT("value")).c();
        } else if (key == "watcher") {
          return GET(THIS, self2.watcherSymbol()).c();
        } else {
          return "";
        }
        ;
      });
      return LIT(tpl);
    };
    ClassField.prototype.setter = function() {
      return this._setter || (this._setter = this.parseTemplate("(value){ $set$; }"));
    };
    ClassField.prototype.decorater = function() {
      return this._decorater || (this._decorater = this.util().decorate(new Arr(this._decorators), this.target(), this.name(), LIT("null")));
    };
    function ClassProperty() {
      return ClassField.apply(this, arguments);
    }
    subclass$(ClassProperty, ClassField);
    exports.ClassProperty = ClassProperty;
    function ClassAttribute() {
      return ClassField.apply(this, arguments);
    }
    subclass$(ClassAttribute, ClassField);
    exports.ClassAttribute = ClassAttribute;
    ClassAttribute.prototype.hasConstructorInits = function() {
      return !this.isStatic() && this.value();
    };
    ClassAttribute.prototype.getter = function() {
      var op;
      return this._getter || (this._getter = (op = CALL(GET(THIS, "getAttribute"), [this.name().toAttrString()]), FN([], [op])));
    };
    ClassAttribute.prototype.setter = function() {
      var op;
      return this._setter || (this._setter = (op = CALL(GET(THIS, "setAttribute"), [this.name().toAttrString(), LIT("value")]), FN([LIT("value")], [op]).set({ noreturn: true })));
    };
    function ClassRelation() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(ClassRelation, ValueNode2);
    exports.ClassRelation = ClassRelation;
    ClassRelation.prototype.c = function() {
      return "";
    };
    ClassRelation.prototype.visit = function() {
      return this._classdecl = STACK.up(ClassDeclaration);
    };
    function ClassBody() {
      return Block.apply(this, arguments);
    }
    subclass$(ClassBody, Block);
    exports.ClassBody = ClassBody;
    ClassBody.prototype.setup = function() {
      ClassBody.prototype.__super__.setup.apply(this, arguments);
      this._fields = [];
      return this._staticFields = [];
    };
    ClassBody.prototype.visit = function(stack) {
      if (this._scope) {
        this._scope.visit();
      }
      ;
      if (stack && stack._tag) {
        this._tag = stack._tag;
      }
      ;
      for (let i = 0, items = iter$(this._nodes), len = items.length, node; i < len; i++) {
        node = items[i];
        if (node instanceof Tag) {
          if (node.tagName() != "self") {
            let ast = node._options.type || node;
            ast.error("only <self> tag allowed here");
          }
          ;
          let meth = new MethodDeclaration([], [node], new Identifier("render"), null, {});
          this._nodes[i] = node = meth;
        }
        ;
        node && node.traverse();
      }
      ;
      return this;
    };
    function ExpressionList() {
      return Block.apply(this, arguments);
    }
    subclass$(ExpressionList, Block);
    exports.ExpressionList = ExpressionList;
    function VarDeclList() {
      return Block.apply(this, arguments);
    }
    subclass$(VarDeclList, Block);
    exports.VarDeclList = VarDeclList;
    VarDeclList.prototype.type = function() {
      return this.option("type") || "var";
    };
    VarDeclList.prototype.add = function(part) {
      if (this._nodes.length) {
        this.push(BR);
      }
      ;
      let node = new VarDeclaration(part[0], part[1], this.type()).set({ decl: this, datatype: part[0].option("datatype") });
      if (!this._firstDeclaration) {
        this._firstDeclaration = node;
        node.set({ keyword: this.keyword() });
      }
      ;
      this.push(node);
      return this;
    };
    VarDeclList.prototype.consume = function(node) {
      if (this._nodes.length == 1) {
        return this._nodes[0].consume(node);
      }
      ;
      return this;
    };
    function Parens(value, open, close) {
      this.setup();
      this._open = open;
      this._close = close;
      this._value = this.load(value);
    }
    subclass$(Parens, ValueNode2);
    exports.Parens = Parens;
    Parens.prototype.unwrappedNode = function() {
      return this._value.unwrappedNode();
    };
    Parens.prototype.loc = function() {
      try {
        let a = this._open.loc();
        let b = this._close.loc();
        return [a[0], b[1]];
      } catch (e) {
        return [0, 0];
      }
      ;
    };
    Parens.prototype.endLoc = function() {
      return this._endLoc || (this._close && this._close.endLoc ? this._close.endLoc() : 0);
    };
    Parens.prototype.load = function(value) {
      this._noparen = false;
      return value instanceof Block && value.count() == 1 ? value.first() : value;
    };
    Parens.prototype.isString = function() {
      return this._open && String(this._open) == '("' || this.value().isString();
    };
    Parens.prototype.js = function(o) {
      var par = this.up();
      var v = this._value;
      var str = null;
      if (v instanceof Func) {
        this._noparen = true;
      }
      ;
      if (par instanceof Block) {
        if (!o.isExpression()) {
          this._noparen = true;
        }
        ;
        str = v instanceof Array ? AST.cary(v) : v.c({ expression: o.isExpression() });
      } else {
        str = v instanceof Array ? AST.cary(v) : v.c({ expression: true });
      }
      ;
      if (this.datatype() && STACK.tsc()) {
        str = this.datatype().c() + "(" + str + ")";
      }
      ;
      return str;
    };
    Parens.prototype.set = function(obj) {
      return Parens.prototype.__super__.set.call(this, obj);
    };
    Parens.prototype.shouldParenthesize = function() {
      if (this._noparen) {
        return false;
      }
      ;
      return true;
    };
    Parens.prototype.prebreak = function(br) {
      Parens.prototype.__super__.prebreak.call(this, br);
      if (this._value) {
        this._value.prebreak(br);
      }
      ;
      return this;
    };
    Parens.prototype.isExpressable = function() {
      return this._value.isExpressable();
    };
    Parens.prototype.consume = function(node) {
      return this._value.consume(node);
    };
    function PureExpression() {
      return Parens.apply(this, arguments);
    }
    subclass$(PureExpression, Parens);
    exports.PureExpression = PureExpression;
    function ExpressionBlock() {
      return ListNode.apply(this, arguments);
    }
    subclass$(ExpressionBlock, ListNode);
    exports.ExpressionBlock = ExpressionBlock;
    ExpressionBlock.prototype.c = function(o) {
      return this.map(function(item) {
        return item.c(o);
      }).join(",");
    };
    ExpressionBlock.prototype.consume = function(node) {
      return this.value().consume(node);
    };
    function Return(v) {
      this._traversed = false;
      this._value = v instanceof ArgList && v.count() == 1 ? v.last() : v;
      return this;
    }
    subclass$(Return, Statement);
    exports.Return = Return;
    Return.prototype.value = function(v) {
      return this._value;
    };
    Return.prototype.setValue = function(v) {
      this._value = v;
      return this;
    };
    Return.prototype.replace = function(base, replacement) {
      if (this._value == base) {
        return this._value = replacement;
      }
      ;
    };
    Return.prototype.visit = function() {
      if (this._value instanceof VarReference) {
        this._value.option("virtualize", true);
      }
      ;
      if (this._value && this._value.traverse) {
        return this._value.traverse();
      }
      ;
    };
    Return.prototype.startLoc = function() {
      let l = this.keyword() || this._value;
      return l ? l.startLoc() : null;
    };
    Return.prototype.js = function(o) {
      var v = this._value;
      let k = M2("return", this.keyword());
      if (v instanceof ArgList) {
        return "" + k + " [" + v.c({ expression: true }) + "]";
      } else if (v) {
        return "" + k + " " + v.c({ expression: true });
      } else {
        return k;
      }
      ;
    };
    Return.prototype.c = function() {
      if (STACK.tsc() && this.value() instanceof Self) {
        return "" + M2("return", this.keyword()) + " " + M2("this", this.value());
      }
      ;
      if (!this.value() || this.value().isExpressable()) {
        return Return.prototype.__super__.c.apply(this, arguments);
      }
      ;
      return this.value().consume(this).c();
    };
    Return.prototype.consume = function(node) {
      return this;
    };
    function ImplicitReturn() {
      return Return.apply(this, arguments);
    }
    subclass$(ImplicitReturn, Return);
    exports.ImplicitReturn = ImplicitReturn;
    function GreedyReturn() {
      return ImplicitReturn.apply(this, arguments);
    }
    subclass$(GreedyReturn, ImplicitReturn);
    exports.GreedyReturn = GreedyReturn;
    function Throw() {
      return Statement.apply(this, arguments);
    }
    subclass$(Throw, Statement);
    exports.Throw = Throw;
    Throw.prototype.js = function(o) {
      return "throw " + this.value().c();
    };
    Throw.prototype.consume = function(node) {
      return this;
    };
    function LoopFlowStatement(lit, expr) {
      this.setLiteral(lit);
      this.setExpression(expr);
    }
    subclass$(LoopFlowStatement, Statement);
    exports.LoopFlowStatement = LoopFlowStatement;
    LoopFlowStatement.prototype.literal = function(v) {
      return this._literal;
    };
    LoopFlowStatement.prototype.setLiteral = function(v) {
      this._literal = v;
      return this;
    };
    LoopFlowStatement.prototype.expression = function(v) {
      return this._expression;
    };
    LoopFlowStatement.prototype.setExpression = function(v) {
      this._expression = v;
      return this;
    };
    LoopFlowStatement.prototype.visit = function() {
      if (this.expression()) {
        return this.expression().traverse();
      }
      ;
    };
    LoopFlowStatement.prototype.consume = function(node) {
      return this;
    };
    LoopFlowStatement.prototype.c = function() {
      if (!this.expression()) {
        return LoopFlowStatement.prototype.__super__.c.apply(this, arguments);
      }
      ;
      var _loop = STACK.up(Loop);
      var expr = this.expression();
      if (_loop.catcher()) {
        expr = expr.consume(_loop.catcher());
        var copy = new this.constructor(this.literal());
        return new Block([expr, copy]).c();
      } else if (expr) {
        copy = new this.constructor(this.literal());
        return new Block([expr, copy]).c();
      } else {
        return LoopFlowStatement.prototype.__super__.c.apply(this, arguments);
      }
      ;
    };
    function BreakStatement() {
      return LoopFlowStatement.apply(this, arguments);
    }
    subclass$(BreakStatement, LoopFlowStatement);
    exports.BreakStatement = BreakStatement;
    BreakStatement.prototype.js = function(o) {
      return "break";
    };
    function ContinueStatement() {
      return LoopFlowStatement.apply(this, arguments);
    }
    subclass$(ContinueStatement, LoopFlowStatement);
    exports.ContinueStatement = ContinueStatement;
    ContinueStatement.prototype.js = function(o) {
      return "continue";
    };
    function DebuggerStatement() {
      return Statement.apply(this, arguments);
    }
    subclass$(DebuggerStatement, Statement);
    exports.DebuggerStatement = DebuggerStatement;
    DebuggerStatement.prototype.consume = function(node) {
      return this;
    };
    function Param(value, defaults, typ) {
      if (typeof value == "string") {
        value = new Identifier(value);
      }
      ;
      this._traversed = false;
      this._name = value;
      this._value = value;
      this._defaults = defaults;
      this._typ = typ;
      this._variable = null;
    }
    subclass$(Param, Node2);
    exports.Param = Param;
    Param.prototype.name = function(v) {
      return this._name;
    };
    Param.prototype.setName = function(v) {
      this._name = v;
      return this;
    };
    Param.prototype.index = function(v) {
      return this._index;
    };
    Param.prototype.setIndex = function(v) {
      this._index = v;
      return this;
    };
    Param.prototype.defaults = function(v) {
      return this._defaults;
    };
    Param.prototype.setDefaults = function(v) {
      this._defaults = v;
      return this;
    };
    Param.prototype.splat = function(v) {
      return this._splat;
    };
    Param.prototype.setSplat = function(v) {
      this._splat = v;
      return this;
    };
    Param.prototype.variable = function(v) {
      return this._variable;
    };
    Param.prototype.setVariable = function(v) {
      this._variable = v;
      return this;
    };
    Param.prototype.value = function(v) {
      return this._value;
    };
    Param.prototype.setValue = function(v) {
      this._value = v;
      return this;
    };
    Param.prototype.varname = function() {
      return this._variable ? this._variable.c() : this.name();
    };
    Param.prototype.datatype = function() {
      return Param.prototype.__super__.datatype.apply(this, arguments) || this._value.datatype();
    };
    Param.prototype.type = function() {
      return "param";
    };
    Param.prototype.jsdoc = function() {
      let typ = this.datatype();
      if (typ && this.name()) {
        return typ.asParam(this.name());
      } else {
        return "";
      }
      ;
    };
    Param.prototype.js = function(stack, params) {
      if (!params || params.as != "declaration") {
        return "" + this._value.c();
      }
      ;
      if (this._defaults) {
        return "" + this._value.c() + " = " + this._defaults.c();
      } else if (this.option("splat")) {
        return "..." + this._value.c();
      } else {
        return this._value.c();
      }
      ;
    };
    Param.prototype.visit = function(stack) {
      if (this._defaults) {
        this._defaults.traverse();
      }
      ;
      if (this._value) {
        this._value.traverse({ declaring: "param" });
      }
      ;
      if (this._value instanceof Identifier) {
        this._value._variable || (this._value._variable = this.scope__().register(this._value.symbol(), this._value, { type: this.type() }));
      }
      ;
      return this;
    };
    Param.prototype.assignment = function() {
      return OP("=", this.variable().accessor(), this.defaults());
    };
    Param.prototype.isExpressable = function() {
      return !this.defaults() || this.defaults().isExpressable();
    };
    Param.prototype.dump = function() {
      return { loc: this.loc() };
    };
    Param.prototype.loc = function() {
      return this._name && this._name.region();
    };
    Param.prototype.toJSON = function() {
      return {
        type: this.typeName(),
        name: this.name(),
        defaults: this.defaults()
      };
    };
    function RestParam() {
      return Param.apply(this, arguments);
    }
    subclass$(RestParam, Param);
    exports.RestParam = RestParam;
    function BlockParam() {
      return Param.apply(this, arguments);
    }
    subclass$(BlockParam, Param);
    exports.BlockParam = BlockParam;
    BlockParam.prototype.c = function() {
      return "blockparam";
    };
    BlockParam.prototype.loc = function() {
      var r = this.name().region();
      return [r[0] - 1, r[1]];
    };
    function OptionalParam() {
      return Param.apply(this, arguments);
    }
    subclass$(OptionalParam, Param);
    exports.OptionalParam = OptionalParam;
    function NamedParam() {
      return Param.apply(this, arguments);
    }
    subclass$(NamedParam, Param);
    exports.NamedParam = NamedParam;
    function RequiredParam() {
      return Param.apply(this, arguments);
    }
    subclass$(RequiredParam, Param);
    exports.RequiredParam = RequiredParam;
    function ParamList() {
      return ListNode.apply(this, arguments);
    }
    subclass$(ParamList, ListNode);
    exports.ParamList = ParamList;
    ParamList.prototype.splat = function(v) {
      return this._splat;
    };
    ParamList.prototype.setSplat = function(v) {
      this._splat = v;
      return this;
    };
    ParamList.prototype.block = function(v) {
      return this._block;
    };
    ParamList.prototype.setBlock = function(v) {
      this._block = v;
      return this;
    };
    ParamList.prototype.at = function(index, force, name, value) {
      if (force === void 0)
        force = false;
      if (name === void 0)
        name = null;
      if (value === void 0)
        value = null;
      if (force) {
        while (index >= this.count()) {
          let curr = this.count() == index;
          let val = curr ? value : null;
          this.add(new Param(curr && name || "_" + this.count(), val));
        }
        ;
      }
      ;
      return this.list()[index];
    };
    ParamList.prototype.metadata = function() {
      return this.filter(function(par) {
        return !(par instanceof Meta);
      });
    };
    ParamList.prototype.toJSON = function() {
      return this.metadata();
    };
    ParamList.prototype.jsdoc = function() {
      let out = [];
      for (let i = 0, items = iter$(this.nodes()), len = items.length, item; i < len; i++) {
        item = items[i];
        if (!(item instanceof Param)) {
          continue;
        }
        ;
        if (item.datatype()) {
          out.push(item.jsdoc());
        }
        ;
      }
      ;
      let doc = out.join("\n");
      return doc ? "/**\n" + doc + "\n*/\n" : "";
    };
    ParamList.prototype.visit = function() {
      var blk = this.filter(function(par) {
        return par instanceof BlockParam;
      });
      if (blk.length > 1) {
        blk[1].warn("a method can only have one &block parameter");
      } else if (blk[0] && blk[0] != this.last()) {
        blk[0].warn("&block must be the last parameter of a method");
      }
      ;
      return ParamList.prototype.__super__.visit.apply(this, arguments);
    };
    ParamList.prototype.js = function(stack) {
      if (this.count() == 0) {
        return EMPTY;
      }
      ;
      if (stack.parent() instanceof Block) {
        return this.head(stack);
      }
      ;
      if (stack.parent() instanceof Code) {
        let inline = !(stack.parent() instanceof MethodDeclaration);
        var pars = this.nodes();
        var opts = { as: "declaration", typed: inline };
        return AST.compact(this.nodes().map(function(param) {
          let part = param.c(opts);
          let typ = inline && param.datatype();
          if (typ) {
            part = typ.c() + part;
          }
          ;
          return part;
        })).join(",");
      } else {
        throw "not implemented paramlist js";
        return "ta" + AST.compact(this.map(function(arg) {
          return arg.c();
        })).join(",");
      }
      ;
    };
    ParamList.prototype.head = function(o) {
      var reg = [];
      var opt = [];
      var blk = null;
      var splat = null;
      var named = null;
      var arys = [];
      var signature = [];
      var idx = 0;
      this.nodes().forEach(function(par, i) {
        if (par instanceof RawScript) {
          return;
        }
        ;
        par.setIndex(idx);
        if (par instanceof OptionalParam) {
          signature.push("opt");
          opt.push(par);
        } else if (par instanceof BlockParam) {
          signature.push("blk");
          blk = par;
        } else {
          signature.push("reg");
          reg.push(par);
        }
        ;
        return idx++;
      });
      if (named) {
        var namedvar = named.variable();
      }
      ;
      var ast = [];
      var isFunc = function(js) {
        return "typeof " + js + " == 'function'";
      };
      var isObj = function(js) {
        return "" + js + ".constructor === Object";
      };
      var isntObj = function(js) {
        return "" + js + ".constructor !== Object";
      };
      if (!named && !splat && !blk && opt.length > 0 && signature.join(" ").match(/opt$/)) {
        for (let i = 0, len_ = opt.length, par; i < len_; i++) {
          par = opt[i];
          ast.push("if(" + par.name().c() + " === undefined) " + par.name().c() + " = " + par.defaults().c());
        }
        ;
      } else if (named && !splat && !blk && opt.length == 0) {
        ast.push("if(!" + namedvar.c() + "||" + isntObj(namedvar.c()) + ") " + namedvar.c() + " = {}");
      } else if (blk && opt.length == 1 && !splat && !named) {
        var op = opt[0];
        var opn = op.name().c();
        var bn = blk.name().c();
        ast.push("if(" + bn + "==undefined && " + isFunc(opn) + ") " + bn + " = " + opn + "," + opn + " = " + op.defaults().c());
        ast.push("if(" + opn + "==undefined) " + opn + " = " + op.defaults().c());
      } else if (blk && named && opt.length == 0 && !splat) {
        bn = blk.name().c();
        ast.push("if(" + bn + "==undefined && " + isFunc(namedvar.c()) + ") " + bn + " = " + namedvar.c() + "," + namedvar.c() + " = {}");
        ast.push("else if(!" + namedvar.c() + "||" + isntObj(namedvar.c()) + ") " + namedvar.c() + " = {}");
      } else if (opt.length > 0 || splat) {
        var argvar = this.scope__().temporary(this, { pool: "arguments" }).predeclared().c();
        var len = this.scope__().temporary(this, { pool: "counter" }).predeclared().c();
        var last = "" + argvar + "[" + len + "-1]";
        var pop = "" + argvar + "[--" + len + "]";
        ast.push("var " + argvar + " = arguments, " + len + " = " + argvar + ".length");
        if (blk) {
          bn = blk.name().c();
          if (splat) {
            ast.push("var " + bn + " = " + isFunc(last) + " ? " + pop + " : null");
          } else if (reg.length > 0) {
            ast.push("var " + bn + " = " + len + " > " + reg.length + " && " + isFunc(last) + " ? " + pop + " : null");
          } else {
            ast.push("var " + bn + " = " + isFunc(last) + " ? " + pop + " : null");
          }
          ;
        }
        ;
        if (named) {
          ast.push("var " + namedvar.c() + " = " + last + "&&" + isObj(last) + " ? " + pop + " : {}");
        }
        ;
        for (let i = 0, len_ = opt.length, par; i < len_; i++) {
          par = opt[i];
          ast.push("if(" + len + " < " + (par.index() + 1) + ") " + par.name().c() + " = " + par.defaults().c());
        }
        ;
        if (splat) {
          var sn = splat.name().c();
          var si = splat.index();
          if (si == 0) {
            ast.push("var " + sn + " = new Array(" + len + ">" + si + " ? " + len + " : 0)");
            ast.push("while(" + len + ">" + si + ") " + sn + "[" + len + "-1] = " + pop);
          } else {
            ast.push("var " + sn + " = new Array(" + len + ">" + si + " ? " + len + "-" + si + " : 0)");
            ast.push("while(" + len + ">" + si + ") " + sn + "[--" + len + " - " + si + "] = " + argvar + "[" + len + "]");
          }
          ;
        }
        ;
      } else if (opt.length > 0) {
        for (let i = 0, len_ = opt.length, par; i < len_; i++) {
          par = opt[i];
          ast.push("if(" + par.name().c() + " === undefined) " + par.name().c() + " = " + par.defaults().c());
        }
        ;
      }
      ;
      if (named) {
        for (let i = 0, items = iter$(named.nodes()), len_ = items.length, k; i < len_; i++) {
          k = items[i];
          op = OP(".", namedvar, k.c()).c();
          ast.push("var " + k.c() + " = " + op + " !== undefined ? " + op + " : " + k.defaults().c());
        }
        ;
      }
      ;
      if (arys.length) {
        for (let i = 0, len_ = arys.length; i < len_; i++) {
          arys[i].head(o, ast, this);
        }
        ;
      }
      ;
      return ast.length > 0 ? ast.join(";\n") + ";" : EMPTY;
    };
    function ScopeVariables() {
      return ListNode.apply(this, arguments);
    }
    subclass$(ScopeVariables, ListNode);
    exports.ScopeVariables = ScopeVariables;
    ScopeVariables.prototype.kind = function(v) {
      return this._kind;
    };
    ScopeVariables.prototype.setKind = function(v) {
      this._kind = v;
      return this;
    };
    ScopeVariables.prototype.split = function(v) {
      return this._split;
    };
    ScopeVariables.prototype.setSplit = function(v) {
      this._split = v;
      return this;
    };
    ScopeVariables.prototype.add = function(name, init, pos) {
      if (pos === void 0)
        pos = -1;
      var vardec = new VariableDeclarator(name, init);
      if (name instanceof Variable) {
        vardec.setVariable(name), name;
      }
      ;
      pos == 0 ? this.unshift(vardec) : this.push(vardec);
      return vardec;
    };
    ScopeVariables.prototype.load = function(list) {
      return list.map(function(par) {
        return new VariableDeclarator(par.name(), par.defaults(), par.splat());
      });
    };
    ScopeVariables.prototype.isExpressable = function() {
      return this.nodes().every(function(item) {
        return item.isExpressable();
      });
    };
    ScopeVariables.prototype.js = function(o) {
      if (this.count() == 0) {
        return EMPTY;
      }
      ;
      if (this.count() == 1 && !this.isExpressable()) {
        this.first().variable().autodeclare();
        return this.first().assignment().c();
      }
      ;
      var keyword = "var";
      var groups = {};
      this.nodes().forEach(function(item) {
        let variable = item._variable || item;
        let typ = variable instanceof Variable && variable.type();
        if (typ) {
          groups[typ] || (groups[typ] = []);
          return groups[typ].push(item);
        }
        ;
      });
      if (groups.let && (groups.var || groups.const)) {
        groups.let.forEach(function(item) {
          return (item._variable || item)._virtual = true;
        });
      } else if (groups.let) {
        keyword = "let";
      }
      ;
      if (this.split() && true) {
        let out2 = [];
        for (let v, i = 0, keys = Object.keys(groups), l = keys.length, k; i < l; i++) {
          k = keys[i];
          v = groups[k];
          out2.push("" + k + " " + AST.cary(v, { as: "declaration" }).join(", ") + ";");
        }
        ;
        return out2.join("\n");
      }
      ;
      var out = AST.compact(AST.cary(this.nodes(), { as: "declaration" })).join(", ");
      return out ? "" + keyword + " " + out : "";
    };
    function VariableDeclarator() {
      return Param.apply(this, arguments);
    }
    subclass$(VariableDeclarator, Param);
    exports.VariableDeclarator = VariableDeclarator;
    VariableDeclarator.prototype.type = function(v) {
      return this._type;
    };
    VariableDeclarator.prototype.setType = function(v) {
      this._type = v;
      return this;
    };
    VariableDeclarator.prototype.visit = function() {
      var variable_, v_;
      (variable_ = this.variable()) || (this.setVariable(v_ = this.scope__().register(this.name(), null, { type: this._type || "var" })), v_);
      if (this.defaults()) {
        this.defaults().traverse();
      }
      ;
      this.variable().setDeclarator(this);
      this.variable().addReference(this.name());
      return this;
    };
    VariableDeclarator.prototype.js = function(o) {
      if (this.variable()._proxy) {
        return null;
      }
      ;
      var defs = this.defaults();
      let typ = this.variable().datatype();
      if (defs != null && defs != void 0) {
        if (defs instanceof Node2) {
          defs = defs.c({ expression: true });
        }
        ;
        if (typ) {
          defs = "" + typ.c() + "(" + defs + ")";
        }
        ;
        return "" + this.variable().c() + " = " + defs;
      } else if (typ) {
        return "" + this.variable().c() + " = " + typ.c() + "(undefined)";
      } else {
        return "" + this.variable().c();
      }
      ;
    };
    VariableDeclarator.prototype.accessor = function() {
      return this;
    };
    function VarDeclaration(left, right, kind, op) {
      if (op === void 0)
        op = "=";
      this._op = op;
      this._left = left;
      this._right = right;
      this._kind = kind;
    }
    subclass$(VarDeclaration, Node2);
    exports.VarDeclaration = VarDeclaration;
    VarDeclaration.prototype.kind = function(v) {
      return this._kind;
    };
    VarDeclaration.prototype.setKind = function(v) {
      this._kind = v;
      return this;
    };
    VarDeclaration.prototype.left = function(v) {
      return this._left;
    };
    VarDeclaration.prototype.setLeft = function(v) {
      this._left = v;
      return this;
    };
    VarDeclaration.prototype.right = function(v) {
      return this._right;
    };
    VarDeclaration.prototype.setRight = function(v) {
      this._right = v;
      return this;
    };
    VarDeclaration.prototype.op = function() {
      return this._op;
    };
    VarDeclaration.prototype.type = function() {
      return this._kind;
    };
    VarDeclaration.prototype.visit = function(stack) {
      var self2 = this;
      if (!(self2._left instanceof Identifier && self2._right instanceof Func)) {
        if (self2._right) {
          self2._right.traverse();
        }
        ;
      }
      ;
      self2._variables = self2.scope__().captureVariableDeclarations(function() {
        if (self2._left) {
          self2._left.traverse({ declaring: self2.type() });
        }
        ;
        if (self2._left instanceof Identifier) {
          return self2._left._variable || (self2._left._variable = self2.scope__().register(self2._left.symbol(), self2._left, { type: self2.type() }));
        }
        ;
      });
      if (self2._right) {
        self2._right.traverse();
      }
      ;
      return self2;
    };
    VarDeclaration.prototype.isExpressable = function() {
      return false;
    };
    VarDeclaration.prototype.consume = function(node) {
      if (node instanceof TagLike) {
        return this;
      }
      ;
      if (node instanceof PushAssign || node instanceof Return) {
        let ast = this;
        if (this.right() && !this.right().isExpressable()) {
          let temp = this.scope__().temporary(this);
          let ast2 = this.right().consume(OP("=", temp, NULL));
          this.setRight(temp);
          return new Block([ast2, BR, this.consume(node)]);
        }
        ;
        return new Block([ast, BR, this._left.consume(node)]);
      }
      ;
      if (node instanceof Return) {
        return new Block([this, BR, this._left.consume(node)]);
      }
      ;
      return VarDeclaration.prototype.__super__.consume.call(this, node);
    };
    VarDeclaration.prototype.c = function(o) {
      if (this.right() && !this.right().isExpressable()) {
        let temp = this.scope__().temporary(this);
        let ast = this.right().consume(OP("=", temp, NULL));
        this.setRight(temp);
        return new Block([ast, BR, this]).c(o);
      }
      ;
      return VarDeclaration.prototype.__super__.c.call(this, o);
    };
    VarDeclaration.prototype.js = function() {
      let out = "";
      let kind = this.kind();
      let typ = this.datatype() || this._left && this._left.datatype();
      if (STACK.tsc() && this._variables.length > 1 && this._variables.some(function(_0) {
        return _0.vartype();
      })) {
        kind = "let";
        for (let i = 0, items = iter$(this._variables), len = items.length, item; i < len; i++) {
          item = items[i];
          if (item.vartype()) {
            out += item.vartype().c() + " ";
          }
          ;
          out += "" + M2(kind, this.keyword()) + " " + item.c() + ";\n";
        }
        ;
        out += "(" + this.left().c();
        if (this.right()) {
          out += " = " + this.right().c({ expression: true });
        }
        ;
        out += ")";
      } else {
        out += "" + M2(kind, this.keyword()) + " " + this.left().c();
        if (this.right()) {
          out += " = " + this.right().c({ expression: true });
        }
        ;
      }
      ;
      if (this.option("export")) {
        out = M2("export", this.option("export")) + (" " + out);
      }
      ;
      if (typ) {
        out = typ.c() + "\n" + out;
      }
      ;
      return out;
    };
    function VarName(a, b) {
      VarName.prototype.__super__.constructor.apply(this, arguments);
      this._splat = b;
    }
    subclass$(VarName, ValueNode2);
    exports.VarName = VarName;
    VarName.prototype.variable = function(v) {
      return this._variable;
    };
    VarName.prototype.setVariable = function(v) {
      this._variable = v;
      return this;
    };
    VarName.prototype.splat = function(v) {
      return this._splat;
    };
    VarName.prototype.setSplat = function(v) {
      this._splat = v;
      return this;
    };
    VarName.prototype.visit = function() {
      var variable_, v_;
      (variable_ = this.variable()) || (this.setVariable(v_ = this.scope__().register(this.value().c(), null)), v_);
      this.variable().setDeclarator(this);
      this.variable().addReference(this.value());
      return this;
    };
    VarName.prototype.js = function(o) {
      return this.variable().c();
    };
    VarName.prototype.c = function() {
      return this.variable().c();
    };
    function Code() {
      return Node2.apply(this, arguments);
    }
    subclass$(Code, Node2);
    exports.Code = Code;
    Code.prototype.head = function(v) {
      return this._head;
    };
    Code.prototype.setHead = function(v) {
      this._head = v;
      return this;
    };
    Code.prototype.body = function(v) {
      return this._body;
    };
    Code.prototype.setBody = function(v) {
      this._body = v;
      return this;
    };
    Code.prototype.scope = function(v) {
      return this._scope;
    };
    Code.prototype.setScope = function(v) {
      this._scope = v;
      return this;
    };
    Code.prototype.params = function(v) {
      return this._params;
    };
    Code.prototype.setParams = function(v) {
      this._params = v;
      return this;
    };
    Code.prototype.isStatementLike = function() {
      return true;
    };
    Code.prototype.scopetype = function() {
      return Scope2;
    };
    Code.prototype.visit = function() {
      if (this._scope) {
        this._scope.visit();
      }
      ;
      return this;
    };
    function CodeBlock(body, opts) {
      this._traversed = false;
      this._body = AST.blk(body);
      this._scope = new FlowScope(this);
      this._body.setHead(this._scope.head());
      this._options = {};
    }
    subclass$(CodeBlock, Code);
    exports.CodeBlock = CodeBlock;
    CodeBlock.prototype.visit = function() {
      this._scope.visit();
      this._body.traverse();
      return this;
    };
    CodeBlock.prototype.c = function() {
      return this._body.c();
    };
    function Root2(body, opts) {
      this._traversed = false;
      this._body = AST.blk(body);
      this._scope = new RootScope(this, null);
      this._options = {};
    }
    subclass$(Root2, Code);
    exports.Root = Root2;
    Root2.prototype.loc = function() {
      return this._body.loc();
    };
    Root2.prototype.visit = function() {
      ROOT = STACK.ROOT = this._scope;
      try {
        this.scope().visit();
        this.body().traverse();
        if (this.body().first() instanceof Terminator) {
          return this.body().first()._first = true;
        }
        ;
      } catch (e) {
        let err = ImbaTraverseError.wrap(e);
        err._sourcePath = OPTS.sourcePath;
        err._loc = STACK.currentRegion();
        throw err;
      }
      ;
    };
    Root2.prototype.compile = function(o, script) {
      if (script === void 0)
        script = {};
      STACK.reset();
      this._scope.setOptions(OPTS = STACK._options = this._options = o || {});
      STACK.SOURCECODE = script.sourceCode;
      STACK.setRoot(this._scope);
      this._scope._imba.configure(o);
      this.traverse();
      STACK.setRoot(this._scope);
      if (o.bundle) {
        if (o.cwd && STACK.isNode()) {
          let abs = fspath.resolve(o.cwd, o.sourcePath);
          let rel = fspath.relative(o.cwd, abs).split(fspath.sep).join("/");
          let np = this._scope.importProxy("path").proxy();
          this._scope.lookup("__filename").c = function() {
            return LIT("" + np.resolve + "(" + STR(rel).c() + ")").c();
          };
          this._scope.lookup("__dirname").c = function() {
            return LIT("" + np.dirname + "(" + np.resolve + "(" + STR(rel).c() + "))").c();
          };
        } else {
          this._scope.lookup("__filename")._c = STR(o.sourcePath).c();
          this._scope.lookup("__dirname")._c = STR(fspath.dirname(o.sourcePath)).c();
        }
        ;
      }
      ;
      if (o.onTraversed instanceof Function) {
        o.onTraversed(this, STACK);
      }
      ;
      let sheet = STACK.css();
      let css = sheet.toString();
      if (sheet.transitions) {
        this.runtime().transitions;
      }
      ;
      if (css && (!o.styles || o.styles == "inline")) {
        this.runtime().styles;
      }
      ;
      var out = this.c(o);
      if (STACK.tsc()) {
        out = "export {};String();\n" + out + "\n";
        if (script.sourceCode && script.sourceCode.match(/(^|[\r\n])\# @nocheck[\n\r]/)) {
          out = "// @ts-nocheck\n" + out;
        }
        ;
      }
      ;
      script.rawResult = {
        js: out,
        css
      };
      script.js = out;
      script.css = css || "";
      script.sourceId = this.sourceId();
      script.assets = this.scope().assets();
      script.universal = STACK.meta().universal !== false;
      if (!STACK.tsc()) {
        if (script.css && (!o.styles || o.styles == "inline")) {
          let style = JSON.stringify(script.css);
          script.js = "" + script.js + "\n" + this.runtime().styles + ".register('" + script.sourceId + "'," + style + ");";
          if (o.debug || true) {
            script.js += "\n/*\n" + script.css + "\n*/\n";
          }
          ;
        }
        ;
      }
      ;
      if (o.sourcemap || STACK.tsc()) {
        let map = new SourceMap(script, o).generate();
        script.sourcemap = map.result();
        if (o.sourcemap == "inline") {
          script.js += map.inlined();
        }
        ;
      }
      ;
      if (!o.raw) {
        script.css && (script.css = SourceMapper2.strip(script.css));
        script.js = SourceMapper2.strip(script.js);
        if (STACK.tsc()) {
          script.js = script.js.replace(/\*\/\s[\r\n]+(\t*)\/\*\*/gm, function(m) {
            return m.replace(/[^\n\t]/g, " ");
          });
        }
        ;
      }
      ;
      return script;
    };
    Root2.prototype.js = function(o) {
      var out = this.scope().c();
      var shebangs = [];
      out = out.replace(/^[ \t]*\/\/(\!.+)$/mg, function(m, shebang) {
        shebang = shebang.replace(/\bimba\b/g, "node");
        shebangs.push("#" + shebang + "\n");
        return "";
      });
      out = shebangs.join("") + out;
      return out;
    };
    Root2.prototype.analyze = function(o) {
      if (o === void 0)
        o = {};
      STACK.setLoglevel(o.loglevel || 0);
      STACK._analyzing = true;
      ROOT = STACK.ROOT = this._scope;
      OPTS = STACK._options = {
        platform: o.platform,
        loglevel: o.loglevel || 0,
        analysis: {
          entities: o.entities || false,
          scopes: o.scopes == null ? o.scopes = true : o.scopes
        }
      };
      this.traverse();
      STACK._analyzing = false;
      return this.scope().dump();
    };
    Root2.prototype.inspect = function() {
      return true;
    };
    function ClassDeclaration(name, superclass, body) {
      this._traversed = false;
      if (name instanceof VarOrAccess) {
        name = name._value;
      }
      ;
      this._name = name;
      this._superclass = superclass;
      this._scope = this.isTag() ? new TagScope(this) : new ClassScope(this);
      this._body = AST.blk(body) || new ClassBody([]);
      this._entities = {};
      this;
    }
    subclass$(ClassDeclaration, Code);
    exports.ClassDeclaration = ClassDeclaration;
    ClassDeclaration.prototype.name = function(v) {
      return this._name;
    };
    ClassDeclaration.prototype.setName = function(v) {
      this._name = v;
      return this;
    };
    ClassDeclaration.prototype.superclass = function(v) {
      return this._superclass;
    };
    ClassDeclaration.prototype.setSuperclass = function(v) {
      this._superclass = v;
      return this;
    };
    ClassDeclaration.prototype.initor = function(v) {
      return this._initor;
    };
    ClassDeclaration.prototype.setInitor = function(v) {
      this._initor = v;
      return this;
    };
    ClassDeclaration.prototype.consume = function(node) {
      if (node instanceof Return) {
        this.option("return", node);
        return this;
      }
      ;
      return ClassDeclaration.prototype.__super__.consume.apply(this, arguments);
    };
    ClassDeclaration.prototype.namepath = function() {
      return this._namepath || (this._namepath = "" + (this.name() ? this.name().c() : "--"));
    };
    ClassDeclaration.prototype.metadata = function() {
      var superclass_;
      return {
        type: "class",
        namepath: this.namepath(),
        inherits: (superclass_ = this.superclass()) && superclass_.namepath && superclass_.namepath(),
        path: this.name() && this.name().c().toString(),
        desc: this._desc,
        loc: this.loc(),
        symbols: this._scope.entities()
      };
    };
    ClassDeclaration.prototype.loc = function() {
      var d;
      if (d = this.option("keyword")) {
        return [d._loc, this.body().loc()[1]];
      } else {
        return ClassDeclaration.prototype.__super__.loc.apply(this, arguments);
      }
      ;
    };
    ClassDeclaration.prototype.startLoc = function() {
      return this._startLoc == null ? this._startLoc = MSTART(this.option("export"), this.option("keyword")) : this._startLoc;
    };
    ClassDeclaration.prototype.endLoc = function() {
      return this._endLoc == null ? this._endLoc = MEND(this.body()) : this._endLoc;
    };
    ClassDeclaration.prototype.toJSON = function() {
      return this.metadata();
    };
    ClassDeclaration.prototype.isStruct = function() {
      return this.keyword() && String(this.keyword()) == "struct";
    };
    ClassDeclaration.prototype.isExtension = function() {
      return this.option("extension");
    };
    ClassDeclaration.prototype.isGlobal = function() {
      return this.option("global");
    };
    ClassDeclaration.prototype.isNamespaced = function() {
      return this._name instanceof Access;
    };
    ClassDeclaration.prototype.exportForDts = function() {
      if (!STACK.tsc()) {
        return false;
      }
      ;
      if (this.isNamespaced() && (!this._name.left()._variable || this._name.left()._variable.isImported())) {
        return true;
      }
      ;
      if (this.isNamespaced() && (this._name.left()._variable && !this._name.left()._variable.isImported())) {
        return false;
      }
      ;
      if (this.isGlobal() && !this.option("export")) {
        return true;
      }
      ;
      if (this.isExtension() && (!this._name._variable || this._name._variable.isImported())) {
        return true;
      }
      ;
      return false;
    };
    ClassDeclaration.prototype.isTag = function() {
      return false;
    };
    ClassDeclaration.prototype.staticInit = function() {
      return this._staticInit || (this._staticInit = this.addMethod(this.initKey(), [], "this").set({ static: true }));
    };
    ClassDeclaration.prototype.initKey = function() {
      return this._initKey || (this._initKey = STACK.tsc() ? STACK.root().symbolRef("#__init__") : STACK.imbaSymbol("__init__"));
    };
    ClassDeclaration.prototype.patchKey = function() {
      return this._patchKey || (this._patchKey = STACK.tsc() ? STACK.root().symbolRef("#__patch__") : STACK.imbaSymbol("__init__"));
    };
    ClassDeclaration.prototype.initPath = function() {
      return this._initPath || (this._initPath = OP(".", LIT("super"), this.initKey()));
    };
    ClassDeclaration.prototype.virtualSuper = function() {
      return this._virtualSuper || (this._virtualSuper = this._scope.parent().declare("tmp", null, { system: true, type: "let" }));
    };
    ClassDeclaration.prototype.classReference = function() {
      return this._name;
    };
    ClassDeclaration.prototype.instanceInit = function() {
      if (this._instanceInit) {
        return this._instanceInit;
      }
      ;
      let call = Super.callOp(this.initKey());
      if (this._superclass) {
        call = OP("&&", LIT("deep"), OP("&&", OP(".", LIT("super"), this.initKey()), call));
      }
      ;
      let fn = this.addMethod(this.initKey(), [], this.isTag() || this._superclass ? [call, BR] : "", {}, function(fun) {
        return true;
      });
      fn.set({ noreturn: true });
      fn.params().at(0, true, "$$", LIT("null"));
      fn.params().at(1, true, "deep", LIT("true"));
      fn.params().at(2, true, "fields", LIT("true"));
      return this._instanceInit = fn;
    };
    ClassDeclaration.prototype.instancePatch = function() {
      if (this._instancePatch) {
        return this._instancePatch;
      }
      ;
      let body = [];
      let fn = this.addMethod(this.patchKey(), [], body, {}, function(fun) {
        return true;
      });
      let param = fn._params.at(0, true, "$$", LIT("{}"));
      let fieldparam = fn._params.at(1, true, "fields", LIT("true"));
      if (this._superclass) {
        let call = Super.callOp(this.patchKey(), [param, fieldparam]);
        call = OP("&&", OP(".", LIT("super"), this.patchKey()), call);
        fn.inject(call);
      }
      ;
      fn.set({ noreturn: true });
      return this._instancePatch = fn;
    };
    ClassDeclaration.prototype.isInitingFields = function() {
      return this._inits || this._supernode && this._supernode.isInitingFields && this._supernode.isInitingFields();
    };
    ClassDeclaration.prototype.visit = function() {
      this._body._delimiter = "";
      let blk = STACK.up(Block);
      this._decorators = blk && blk.collectDecorators();
      STACK.pop(this);
      let sup = this._superclass;
      this._path = this._name;
      this._ownName = this._name;
      this._realName = this._name instanceof Access ? this._name.right() : this._name;
      if (sup) {
        sup.traverse();
        if (sup instanceof VarOrAccess) {
          if (sup._variable) {
            let val = sup._variable.value();
            if (val instanceof ClassDeclaration) {
              this._supernode = val;
            }
            ;
          } else if (sup.symbol() == "Object") {
            if (!STACK.tsc()) {
              sup = this._superclass = null;
            } else {
              this._autosuper = true;
              try {
                sup._identifier._symbol = "\u03A4Object";
              } catch (e) {
              }
              ;
            }
            ;
          }
          ;
        }
        ;
      }
      ;
      if (this.isExtension() && this._name) {
        this._name.traverse();
        if (this._name instanceof Identifier) {
          this._name.resolveVariable();
        }
        ;
        if (!this.isTag()) {
          let extname2;
          this._className = this._name;
          this._ownName = STACK.toInternalClassName(this._name);
          this._mixinName = this.scope__().register(this._ownName, null);
        } else {
          this._className = LIT(this._name.toClassName());
          this._ownName = STACK.toInternalClassName(this._name);
          this._mixinName = this.scope__().register(this._ownName, null);
        }
        ;
      } else if (this._name instanceof Identifier) {
        if (!this.isTag() || this._name.isCapitalized()) {
          this._name.registerVariable("const");
          this._name._variable.setValue(this);
        }
        ;
      } else if (this._name && !(this._name instanceof Access)) {
        this._name.traverse({ declaring: this });
      } else if (this._name) {
        this._name.traverse();
      }
      ;
      if (this.isGlobal() && !this.isExtension() && !this.isNamespaced() && this.option("export") && STACK.tsc()) {
        this._exportName = STACK.toInternalClassName(this._name);
      }
      ;
      if (this._ownName == this._name && this.exportForDts()) {
        if (this.isGlobal() && !this.isExtension() && !this.isNamespaced() && this.option("export")) {
          this._exportName = STACK.toInternalClassName(this._name);
        } else {
          this._ownName = STACK.toInternalClassName(this._name);
        }
        ;
      }
      ;
      STACK.push(this);
      ROOT.entities().add(this.namepath(), this);
      this.scope().visit();
      this.set({ iife: STACK.up() instanceof Instantiation });
      var separateInitChain = true;
      var fields = [];
      var mixins = this._mixins = [];
      var signature = [];
      var params = [];
      var declaredFields = {};
      var restIndex = void 0;
      var instanceMethodMap = {};
      for (let i = 0, items = iter$(this.body()), len = items.length, node; i < len; i++) {
        node = items[i];
        if (node instanceof ClassRelation) {
          mixins.push(node);
        }
        ;
        if (node instanceof ClassField) {
          if (!node.isStatic()) {
            let name = String(node.name());
            declaredFields[name] = node;
            if (separateInitChain) {
              node.set({ restIndex: 0 });
            }
            ;
          }
          ;
        }
        ;
        if (node instanceof MethodDeclaration) {
          let name = node.rawName();
          if (node.isMember()) {
            instanceMethodMap[name] = node;
          }
          ;
        }
        ;
      }
      ;
      if (this.option("params")) {
        let add = [];
        for (let index = 0, items = iter$(this.option("params")), len = items.length, param; index < len; index++) {
          param = items[index];
          if (param instanceof RestParam) {
            restIndex = index;
            continue;
          }
          ;
          let name = String(param.name());
          let field = declaredFields[name];
          let dtyp = param.option("datatype");
          if (!field) {
            field = fields[name] = new ClassField(param.name()).set(
              {
                datatype: dtyp,
                value: param.defaults()
              }
            );
            add.push(field);
            params.push(param);
          } else {
            if (dtyp && !field.datatype()) {
              field.set({ datatype: dtyp });
            }
            ;
            if (param.defaults() && !field.value()) {
              field.set({ value: param.defaults() });
            }
            ;
          }
          ;
          if (field) {
            field.set({ paramIndex: index, paramName: name });
          }
          ;
        }
        ;
        for (let i = 0, items = iter$(add.reverse()), len = items.length; i < len; i++) {
          this.body().unshift(items[i]);
        }
        ;
      }
      ;
      this.body().traverse();
      var ctor = this.body().option("ctor");
      let tsc = STACK.tsc();
      var inits = new InstanceInitBlock();
      var staticInits = this._staticInits = new ClassInitBlock();
      var patches = new InstancePatchBlock();
      if (this._realName) {
        staticInits.add(this.util().defineName(THIS, this._realName.toStr()), 0);
      }
      ;
      ctor = this.body().option("ctor");
      let fieldNodes = this.body().filter(function(node) {
        return node instanceof ClassField;
      });
      let allDecorators = [];
      for (let i = 0, items = iter$(fieldNodes), len = items.length, node; i < len; i++) {
        node = items[i];
        if (node.watchBody()) {
          this.addMethod(node.watcherSymbol(), [], [node.watchBody()], {}, function(fn) {
            node._watchMethod = fn;
            return node._watchParam = fn.params().at(0, true, "e");
          });
        }
        ;
        if (node.hasStaticInits() && !node.option("declareOnly")) {
          staticInits.add(node);
        }
        ;
        if (node.hasConstructorInits()) {
          if (this.isExtension()) {
            if (node.value()) {
              node._name.warn("field with value not supported in class extension");
            }
            ;
          } else if (!node.option("declareOnly")) {
            inits.add(node);
            patches.add(node);
          }
          ;
        }
        ;
        if (!node.isStatic() && restIndex != null) {
          node.set({ restIndex });
        }
        ;
      }
      ;
      if (!tsc && this._decorators) {
        let op = this.util().decorate(new Arr(this._decorators), THIS);
        staticInits.add([op, BR]);
        allDecorators.push(this._decorators);
      }
      ;
      for (let i = 0, items = iter$(this.body()), len = items.length, node; i < len; i++) {
        node = items[i];
        if (node._decorators) {
          let target = node.option("static") ? THIS : PROTO;
          let desc = LIT("null");
          let op = this.util().decorate(new Arr(node._decorators), target, node.name(), desc);
          allDecorators.push(node._decorators);
          staticInits.add([op, BR]);
        }
        ;
      }
      ;
      if (!inits.isEmpty() && !tsc) {
        this._inits = inits;
        this.instanceInit();
        inits.set({ ctor: this.instanceInit() });
        this.instanceInit().inject(inits);
        if (this.isTag()) {
          true;
        } else if (!this._superclass) {
          let initop = OP(".", THIS, this.initKey());
          if (!ctor) {
            ctor = this.addMethod("constructor", [], [], {});
            let param = ctor.params().at(0, true, "$$", LIT("null"));
            let callop = CALL(initop, [param]);
            if (!tsc) {
              ctor.body().add([callop, BR], 0);
            }
            ;
          } else {
            let sup2 = ctor.option("supr");
            if (sup2) {
              sup2.real.set({ target: initop, args: [] });
            } else {
              ctor.body().add([CALL(initop, []), BR], 0);
            }
            ;
          }
          ;
        } else if (!this._supernode || !this._supernode.isInitingFields()) {
          let op = OP("||", this.initPath(), CALL(OP(".", THIS, this.initKey()), []));
          if (!ctor) {
            ctor = this.addMethod("constructor", [], [new Super(), BR, op], {});
          } else {
            let after = ctor.option("injectInitAfter");
            ctor.inject(op, after ? { after } : 0);
          }
          ;
          true;
        }
        ;
      }
      ;
      if (!patches.isEmpty() && !tsc) {
        this.instancePatch();
        patches.set({ ctor: this.instancePatch() });
        this.instancePatch().inject(patches);
      }
      ;
      if (tsc && ctor && this._autosuper) {
        ctor.body().add([LIT("super()"), BR], 0);
      }
      ;
      if (!STACK.tsc()) {
        let hasInitedHook = !!instanceMethodMap["#__inited__"];
        let hasDecorators = allDecorators.length > 0;
        if (hasDecorators) {
          STACK.use("hooks");
          let decosym = STACK.imbaSymbol("__hooks__");
          staticInits.unshift(LIT("this.prototype[" + decosym + "] = " + this.runtime().hooks), true);
        }
        ;
        if (!this.isTag() && !ctor && (hasInitedHook || hasDecorators)) {
          let ops = sup ? [new Super(), BR] : [BR];
          ctor = this.addMethod("constructor", [], ops, {});
        }
        ;
        if (ctor && !this.isTag() && !STACK.isStdLib()) {
          let ctorsym = STACK.imbaSymbol("__initor__");
          let initsym = STACK.imbaSymbol("__inited__");
          let hooksym = STACK.imbaSymbol("__hooks__");
          let initedHook = LIT("this[" + hooksym + "]&&this[" + hooksym + "].inited(this)");
          if (sup) {
            let refsym = STACK.getSymbol();
            staticInits.unshift(LIT("this.prototype[" + ctorsym + "] = " + refsym), 0);
            if (hasInitedHook) {
              ctor.inject(LIT("if(this[" + ctorsym + "]===" + refsym + ") (" + initedHook + ",this[" + initsym + "]());"));
            } else {
              ctor.inject(LIT("this[" + ctorsym + "]===" + refsym + " && (" + initedHook + ",this[" + initsym + "] && this[" + initsym + "]())"));
            }
            ;
          } else {
            if (hasInitedHook) {
              ctor.inject(LIT("if(!this[" + ctorsym + "]) (" + initedHook + ",this[" + initsym + "]());"));
            } else if (hasDecorators) {
              ctor.inject(LIT("!this[" + ctorsym + "] && this[" + hooksym + "].inited(this);"));
            }
            ;
          }
          ;
        }
        ;
      }
      ;
      if (this._mixins.length) {
        true;
      }
      ;
      if (!tsc && sup) {
        staticInits.add(this.util().inheritClass(THIS));
      }
      ;
      if (!staticInits.isEmpty() && !tsc) {
        this.body().add([BR, staticInits]);
      }
      ;
      return this;
    };
    ClassDeclaration.prototype.addMethod = function(name, params, mbody, options, cb) {
      if (typeof mbody == "string" || mbody instanceof String) {
        mbody = [LIT(mbody)];
      }
      ;
      if (typeof name == "string" || name instanceof String) {
        name = new Identifier(name);
      }
      ;
      let func = new MethodDeclaration(params, mbody || [], name, null, options || {});
      this.body().unshift(func, true);
      if (cb instanceof Function) {
        cb(func);
      }
      ;
      func.traverse();
      return func;
    };
    ClassDeclaration.prototype.js = function(o) {
      this.scope().virtualize();
      this.scope().context().setValue(this.name());
      this.scope().context().setReference(this.name());
      var up = STACK.up();
      var o = this._options || {};
      var cname = this._ownName instanceof Access ? this._ownName.right() : this._ownName;
      var origName = this._name instanceof Access ? this._name.right() : this._name;
      var initor = null;
      var sup = this.superclass();
      if (typeof cname != "string" && cname) {
        cname = cname.c({ mark: true });
      }
      ;
      this._cname = cname;
      var externalAccess = LIT(cname);
      var supAccess = null;
      if (STACK.tsc() && this.isExtension() && !this.exportForDts()) {
        let parts = [];
        let target = this._name.c();
        for (let i = 0, items = iter$(this.body()._nodes), len = items.length; i < len; i++) {
          parts.push(items[i].c({ as: "descriptor", target }));
        }
        ;
        return parts.join(";\n");
      }
      ;
      let jsbody = this.body().c();
      let jshead = M2("class", this.keyword());
      if (this.name()) {
        jshead += " " + M2(cname, this.name());
      } else {
        if (up instanceof VarReference) {
          try {
            jshead += " " + up._value._symbol;
          } catch (e) {
          }
          ;
        }
        ;
      }
      ;
      if (this._mixins.length) {
        console.warn("compile with mixins");
        let up2 = sup ? sup.c() : null;
        for (let i = 0, items = iter$(this._mixins), len = items.length; i < len; i++) {
          let val = "(class " + (up2 ? "extends " + up2 + " " : "") + "{ static { " + CALL(this.runtime().mix, [THIS, items[i].value()]).c() + " }})";
          up2 = val;
        }
        ;
        jshead += " extends " + up2;
        sup = null;
      }
      ;
      if (sup) {
        supAccess = M2(sup);
        jshead += " extends " + supAccess;
      }
      ;
      if (this.name() instanceof Access && !this.exportForDts() && !this.isExtension()) {
        jshead = "" + this.name().c() + " = " + jshead;
      }
      ;
      if (this.option("export") || STACK.tsc() && this.exportForDts()) {
        if (this.option("default")) {
          jshead = "" + M2("export", this.option("export")) + " " + M2("default", this.option("default")) + " " + jshead;
        } else {
          jshead = "" + M2("export", this.option("export")) + " " + jshead;
        }
        ;
      }
      ;
      let js = "" + jshead + " {" + jsbody + "}";
      if (this.isExtension() && !STACK.tsc()) {
        let extTarget = this instanceof ExtendDeclaration ? LIT(this._className.c()) : LIT("" + this._className.c() + ".prototype");
        if (this._virtualSuper) {
          let wrap = OP("=", this._virtualSuper, this.util().virtualSuper(extTarget));
          extTarget = LIT("(" + wrap.c() + "," + extTarget.c() + ")");
        }
        ;
        js += ";\n" + this.util().extend(extTarget, LIT("" + externalAccess + ".prototype")).c() + ";\n";
      }
      ;
      if (this.option("global") && !STACK.tsc()) {
        let access = this.name() instanceof Access;
        let getter = this.name() instanceof Access ? this.name().c() : this._cname;
        if (STACK.tsc()) {
          js = "" + js + ";" + (!access ? " export {" + this._cname + "};" : "") + " " + this.scope__().root().globalRef() + "." + this._cname + " = " + getter;
        } else {
          js = "" + js + "; " + this.scope__().root().globalRef() + "." + this._cname + " = " + getter;
        }
        ;
      }
      ;
      if (STACK.tsc() && this._exportName) {
        js = "" + js + "; export {" + this._ownName + " as " + this._exportName + "}";
      }
      ;
      return js;
    };
    function ExtendDeclaration() {
      return ClassDeclaration.apply(this, arguments);
    }
    subclass$(ExtendDeclaration, ClassDeclaration);
    exports.ExtendDeclaration = ExtendDeclaration;
    function TagDeclaration() {
      return ClassDeclaration.apply(this, arguments);
    }
    subclass$(TagDeclaration, ClassDeclaration);
    exports.TagDeclaration = TagDeclaration;
    TagDeclaration.prototype.isTag = function() {
      return true;
    };
    TagDeclaration.prototype.isInitingFields = function() {
      return true;
    };
    TagDeclaration.prototype.namepath = function() {
      return "<" + this.name() + ">";
    };
    TagDeclaration.prototype.metadata = function() {
      return Object.assign(TagDeclaration.prototype.__super__.metadata.apply(this, arguments), {
        type: "tag"
      });
    };
    TagDeclaration.prototype.cssns = function() {
      return this._cssns || (this._cssns = this._scope.cssns());
    };
    TagDeclaration.prototype.cssid = function() {
      return this._cssid || (this._cssid = this._scope.cssid());
    };
    TagDeclaration.prototype.classReference = function() {
      return LIT(this._name.toClassName());
    };
    TagDeclaration.prototype.cssref = function(scope) {
      if (this.isNeverExtended() && !this.superclass()) {
        return this._cssns;
      }
      ;
      if (scope) {
        let s = scope.closure();
        return s.memovar("_ns_", OP("||", OP(".", s.context(), "_ns_"), STR("")));
      } else {
        return OP("||", OP(".", THIS, "_ns_"), STR(""));
      }
      ;
    };
    TagDeclaration.prototype.isNeverExtended = function() {
      if (this.name() && this.name().isClass()) {
        return !this.option("export") && !this.option("extended");
      } else {
        return false;
      }
      ;
    };
    TagDeclaration.prototype.visit = function() {
      if (STACK.hmr()) {
        this.cssid();
        this.cssns();
      }
      ;
      TagDeclaration.prototype.__super__.visit.apply(this, arguments);
      let sup = this.superclass();
      this._config = {};
      if (sup && !STACK.tsc()) {
        if (sup.isNative() || sup.isNativeSVG()) {
          let op = sup.nativeCreateNode();
          op = this.util().extendTag(op, THIS);
          this.addMethod("create$", [], [op]).set({ static: true });
          this.set({ extends: Obj.wrap({ extends: sup.name() }) });
          this._config.extends = sup.name();
        } else if (sup.isClass()) {
          sup.resolveVariable(this.scope__().parent());
          let up = sup._variable && sup._variable.value();
          if (up) {
            up.set({ extended: this });
          }
          ;
        }
        ;
      }
      ;
      if (this._elementReferences) {
        for (let o = this._elementReferences, child, i = 0, keys = Object.keys(o), l = keys.length, ref; i < l; i++) {
          ref = keys[i];
          child = o[ref];
          if (STACK.tsc()) {
            let val = child.option("reference");
            let typ = child.type();
            let op = "" + M2(AST.sym(val), val);
            if (typ && typ.toClassName) {
              op += " = new " + typ.toClassName();
            }
            ;
            this.body().unshift(LIT(op + ";"), true);
          }
          ;
        }
        ;
      }
      ;
      if (!STACK.tsc() && this.name() && this.name().toNodeName && !this.option("extension")) {
        let name = this.name().toNodeName();
        if (name.indexOf("-") == -1) {
          name = name + "-tag";
        }
        ;
        STACK.css().add(name + " { display:block; }");
      }
      ;
      if (this.option("export") && this.name() && this.name().isLowerCase && this.name().isLowerCase()) {
        this.warn("Lowercased tags are globally available - not exportable", { loc: this.option("export") });
      }
      ;
      return;
    };
    TagDeclaration.prototype.addElementReference = function(name, child) {
      let refs = this._elementReferences || (this._elementReferences = {});
      if (refs[name] && refs[name] != child) {
        child.warn("Duplicate elements with same reference", { loc: name });
      } else {
        refs[name] = child;
        child.set({ tagdeclbody: this._body });
      }
      ;
      return child;
    };
    TagDeclaration.prototype.js = function(s) {
      this.scope().virtualize();
      this.scope().context().setValue(this.name());
      this.scope().context().setReference(this.name());
      let className = this.name().toClassName();
      let sup = this.superclass();
      let anonGlobalTag = !this.option("extension") && !this.name().isClass() && STACK.tsc();
      if (sup && sup._variable) {
        sup = sup._variable;
      } else if (sup) {
        sup = CALL(this.runtime().getSuperTagType, [sup, STR(sup.toClassName()), this.runtime().Component]);
      } else {
        sup = this.runtime().Component;
      }
      ;
      if (STACK.tsc()) {
        sup = this.superclass() ? this.superclass().toClassName() : LIT("imba.Component");
        if (this.option("extension")) {
          let out = "class " + this._mixinName.c();
          let obody = this.body().c();
          if (STACK.tsc() && false) {
            obody = "\n__extends__= new " + M2(this._className.c(), this._name) + ";\n" + obody;
          }
          ;
          out = "" + out + " {" + obody + "}";
          if (!this._name._variable) {
            out = "export " + out;
          }
          ;
          return out;
        } else {
          this.body().unshift(LIT("static $$TAG$$\n"));
        }
        ;
      } else if (this.option("extension")) {
        let namevar = this._name._variable;
        let cls = namevar || CALL(this.runtime().getTagType, [this.name(), STR(this.name().toClassName())]);
        if (className == "ImbaElement" || className == "imba.Component") {
          cls = this.runtime().Component;
        }
        ;
        let tagname = new TagTypeIdentifier(this.name());
        let js2 = "(class {" + this.body().c() + "}).prototype";
        return this.util().extend("" + cls.c() + ".prototype", LIT(js2)).c();
      } else {
        if (this.name().isNative()) {
          this.name().error("tag " + this.name().symbol() + " already exists");
        }
        ;
      }
      ;
      let closure = this.scope__().parent();
      let jsbody = this.body().c();
      let jshead = "" + M2("class", this.keyword()) + " " + M2(className, this.name()) + " extends " + M2(sup, this.superclass());
      if (this.option("export")) {
        if (this.option("default")) {
          jshead = "" + M2("export", this.option("export")) + " " + M2("default", this.option("default")) + " " + jshead;
        } else {
          jshead = "" + M2("export", this.option("export")) + " " + jshead;
        }
        ;
      }
      ;
      if (anonGlobalTag && STACK.tsc()) {
        jshead = "export " + jshead;
      }
      ;
      let js = "" + jshead + " {" + jsbody + "}";
      if (this._cssns) {
        this._config.cssns = this.cssns();
      }
      ;
      if (this._cssid) {
        this._config.cssid = this.cssid();
      }
      ;
      if (!STACK.tsc()) {
        if (this._staticInit) {
          js += "; " + OP(".", LIT(className), this.initKey()).c() + "()";
        }
        ;
        let ext = Obj.wrap(this._config).c();
        if (this.name().isClass()) {
          this._config.name = this.name().symbol();
        }
        ;
        js += "; " + this.runtime().defineTag + "(" + this.name().c() + "," + className + "," + ext + ")";
      }
      ;
      if (STACK.tsc() && (this.option("global") || !this.name().isClass()) && false) {
        js += "; globalThis." + className + " = " + className;
      }
      ;
      return js;
    };
    function Func(params, body, name, target, o) {
      this._options = o;
      var typ = this.scopetype();
      this._traversed = false;
      this._body = AST.blk(body);
      this._scope || (this._scope = o && o.scope || new typ(this));
      this._scope.setParams(this._params = new ParamList(params));
      this._name = name || "";
      this._target = target;
      this._type = "function";
      this._variable = null;
      this;
    }
    subclass$(Func, Code);
    exports.Func = Func;
    Func.prototype.name = function(v) {
      return this._name;
    };
    Func.prototype.setName = function(v) {
      this._name = v;
      return this;
    };
    Func.prototype.params = function(v) {
      return this._params;
    };
    Func.prototype.setParams = function(v) {
      this._params = v;
      return this;
    };
    Func.prototype.target = function(v) {
      return this._target;
    };
    Func.prototype.setTarget = function(v) {
      this._target = v;
      return this;
    };
    Func.prototype.options = function(v) {
      return this._options;
    };
    Func.prototype.setOptions = function(v) {
      this._options = v;
      return this;
    };
    Func.prototype.type = function(v) {
      return this._type;
    };
    Func.prototype.setType = function(v) {
      this._type = v;
      return this;
    };
    Func.prototype.context = function(v) {
      return this._context;
    };
    Func.prototype.setContext = function(v) {
      this._context = v;
      return this;
    };
    Func.prototype.scopetype = function() {
      return FunctionScope;
    };
    Func.prototype.inject = function(line, o) {
      return this._body.add([line, BR], o);
    };
    Func.prototype.nonlocals = function() {
      return this._scope._nonlocals;
    };
    Func.prototype.returnType = function() {
      return this.datatype();
    };
    Func.prototype.visit = function(stack, o) {
      if (stack._descriptor && !stack.tsc()) {
        this._scope = new MethodScope(this);
        this._scope.setParams(this._params);
      }
      ;
      this.scope().visit();
      if (this._desc) {
        this._desc._skip = true;
      }
      ;
      this._context = this.scope().parent();
      this._params.traverse({ declaring: "arg" });
      return this._body.traverse();
    };
    Func.prototype.funcKeyword = function() {
      let str = "function";
      if (this.option("async")) {
        str = "async " + str;
      }
      ;
      return str;
    };
    Func.prototype.jsdoc = function() {
      let o = [];
      if (this._desc) {
        this._desc._skip = true;
        o.push(this._desc.toString());
      }
      ;
      for (let i = 0, items = iter$(this._params.nodes()), len = items.length, item; i < len; i++) {
        item = items[i];
        if (!(item instanceof Param)) {
          continue;
        }
        ;
        if (item.datatype()) {
          o.push(item.jsdoc());
        }
        ;
      }
      ;
      if (this.option("inExtension") && this._target) {
        let kls = this._context.node();
        let name = this._context.node()._className;
        if (name && STACK.tsc()) {
          let thistype = name.c();
          if (kls.option("instanceOnly")) {
            thistype = "typeof " + thistype;
          } else {
            thistype = "InstanceType<typeof " + thistype + ">";
          }
          ;
        }
        ;
      }
      ;
      if (this.option("jsdocthis")) {
        o.push("@this " + this.option("jsdocthis"));
      }
      ;
      if (this.returnType()) {
        o.push("@returns { " + this.returnType().asRawType() + " }");
      }
      ;
      let doc = o.join("\n");
      return doc ? "/**\n" + doc + "\n*/\n" : "";
    };
    Func.prototype.js = function(s, o) {
      if (!this.option("noreturn")) {
        this.body().consume(new ImplicitReturn());
      }
      ;
      var ind = this.body()._indentation;
      if (ind && ind.isGenerated()) {
        this.body()._indentation = null;
      }
      ;
      var code = this.scope().c({ indent: !ind || !ind.isGenerated(), braces: true });
      var name = typeof this._name == "string" ? this._name : this._name.c();
      name = name ? " " + name.replace(/\./g, "_") : "";
      var keyword = o && o.keyword != void 0 ? o.keyword : this.funcKeyword();
      var out = "" + M2(keyword, this.option("def") || this.option("keyword")) + helpers2.toValidIdentifier(name) + "(" + this.params().c() + ") " + code;
      if (this.option("eval")) {
        out = "(" + out + ")()";
      }
      ;
      return out;
    };
    Func.prototype.shouldParenthesize = function(par) {
      if (par === void 0)
        par = this.up();
      return par instanceof Call && par.callee() == this;
    };
    function IsolatedFunc() {
      return Func.apply(this, arguments);
    }
    subclass$(IsolatedFunc, Func);
    exports.IsolatedFunc = IsolatedFunc;
    IsolatedFunc.prototype.leaks = function(v) {
      return this._leaks;
    };
    IsolatedFunc.prototype.setLeaks = function(v) {
      this._leaks = v;
      return this;
    };
    IsolatedFunc.prototype.scopetype = function() {
      return IsolatedFunctionScope;
    };
    IsolatedFunc.prototype.isStatic = function() {
      return true;
    };
    IsolatedFunc.prototype.isPrimitive = function() {
      return true;
    };
    IsolatedFunc.prototype.visit = function(stack) {
      var self2 = this, leaks;
      IsolatedFunc.prototype.__super__.visit.apply(self2, arguments);
      if (stack.tsc()) {
        return;
      }
      ;
      if (leaks = self2._scope._leaks) {
        self2._leaks = [];
        leaks.forEach(function(shadow, source) {
          shadow._proxy = self2._params.at(self2._params.count(), true);
          return self2._leaks.push(source);
        });
      }
      ;
      return self2;
    };
    function IifeFunc() {
      return Func.apply(this, arguments);
    }
    subclass$(IifeFunc, Func);
    exports.IifeFunc = IifeFunc;
    IifeFunc.prototype.js = function(s, o) {
      if (!this.option("noreturn")) {
        this.body().consume(new ImplicitReturn());
      }
      ;
      var ind = this.body()._indentation;
      var out = this.body().c({ braces: true });
      return "(()=>" + out + ")()";
    };
    function Walker(fn) {
      this._func = fn;
      this._leaks = false;
      this._matches = [];
    }
    exports.Walker = Walker;
    Walker.prototype.leaks = function(v) {
      return this._leaks;
    };
    Walker.prototype.setLeaks = function(v) {
      this._leaks = v;
      return this;
    };
    Walker.prototype.test = function(node) {
      return false;
    };
    function AmperWalker() {
      return Walker.apply(this, arguments);
    }
    subclass$(AmperWalker, Walker);
    exports.AmperWalker = AmperWalker;
    AmperWalker.prototype.deopt = function(v) {
      return this._deopt;
    };
    AmperWalker.prototype.setDeopt = function(v) {
      this._deopt = v;
      return this;
    };
    AmperWalker.prototype.test = function(node) {
      if (node instanceof Call) {
        node._args.consume(this);
        node._callee.consume(this);
        return;
      }
      ;
      let variable = node._variable;
      if (variable && !variable.isGlobal()) {
        this._deopt = true;
      }
      ;
      if (node instanceof This || node instanceof Self) {
        return this._self = node;
      }
      ;
    };
    function AmperFunc() {
      return Func.apply(this, arguments);
    }
    subclass$(AmperFunc, Func);
    exports.AmperFunc = AmperFunc;
    AmperFunc.prototype.js = function(s, o) {
      var Util_;
      let walker = new AmperWalker(this);
      this.body().consume(walker);
      var out = this.body().c({ braces: false });
      if (!walker.deopt()) {
        let raw = this.body().sourcecode();
        let sym = raw.replace(/[\"]/g, "'").replace();
        let pars = [LIT('"' + sym + '"'), walker._self || LIT("globalThis"), LIT("(v$)=>" + out)];
        return "" + this.runtime().memofunc + "(" + pars.map(function(_0) {
          return _0.c();
        }).join(",") + ")";
        return Util.memo.apply(Util, pars).c();
      }
      ;
      return "((v$)=>" + out + ")";
    };
    function RescueFunc() {
      return Func.apply(this, arguments);
    }
    subclass$(RescueFunc, Func);
    exports.RescueFunc = RescueFunc;
    RescueFunc.prototype.visit = function(o) {
      this._scope = null;
      this.body().traverse();
      if (this.option("async")) {
        var fnscope = o.up(Func);
        fnscope && fnscope.set({ async: true });
      }
      ;
      return this;
    };
    RescueFunc.prototype.js = function(s, o) {
      this.setBody(this.body().consume(new ImplicitReturn()));
      var out = this.body().c({ braces: false });
      let fn = "()=>{ try { " + out + " } catch(e) { return e; } }";
      if (this.option("async")) {
        return "await (async " + fn + ")()";
      } else {
        return "(" + fn + ")()";
      }
      ;
    };
    function Lambda() {
      return Func.apply(this, arguments);
    }
    subclass$(Lambda, Func);
    exports.Lambda = Lambda;
    Lambda.prototype.scopetype = function() {
      var k = this.option("keyword");
      return k && k._value == "\u0192" ? MethodScope : LambdaScope;
    };
    function ClosedFunc() {
      return Func.apply(this, arguments);
    }
    subclass$(ClosedFunc, Func);
    exports.ClosedFunc = ClosedFunc;
    ClosedFunc.prototype.scopetype = function() {
      return MethodScope;
    };
    function TagFragmentFunc() {
      return Func.apply(this, arguments);
    }
    subclass$(TagFragmentFunc, Func);
    exports.TagFragmentFunc = TagFragmentFunc;
    TagFragmentFunc.prototype.scopetype = function() {
      return this.option("closed") ? MethodScope : LambdaScope;
    };
    function MethodDeclaration() {
      return Func.apply(this, arguments);
    }
    subclass$(MethodDeclaration, Func);
    exports.MethodDeclaration = MethodDeclaration;
    MethodDeclaration.prototype.variable = function(v) {
      return this._variable;
    };
    MethodDeclaration.prototype.setVariable = function(v) {
      this._variable = v;
      return this;
    };
    MethodDeclaration.prototype.decorators = function(v) {
      return this._decorators;
    };
    MethodDeclaration.prototype.setDecorators = function(v) {
      this._decorators = v;
      return this;
    };
    MethodDeclaration.prototype.scopetype = function() {
      return MethodScope;
    };
    MethodDeclaration.prototype.consume = function(node) {
      if (node instanceof Return) {
        this.option("return", true);
        return this;
      }
      ;
      return MethodDeclaration.prototype.__super__.consume.apply(this, arguments);
    };
    MethodDeclaration.prototype.identifier = function() {
      return this._name;
    };
    MethodDeclaration.prototype.rawName = function() {
      return this._name instanceof Identifier ? this._name.toRaw() : "";
    };
    MethodDeclaration.prototype.metadata = function() {
      return {
        type: "method",
        name: "" + this.name(),
        namepath: this.namepath(),
        params: this._params.metadata(),
        desc: this._desc,
        scopenr: this.scope()._nr,
        loc: this.loc()
      };
    };
    MethodDeclaration.prototype.loc = function() {
      var d;
      if (d = this.option("def")) {
        let end = this.body().option("end") || this.body().loc()[1];
        return [d._loc, end];
      } else {
        return [0, 0];
      }
      ;
    };
    MethodDeclaration.prototype.isGetter = function() {
      return this._type == "get";
    };
    MethodDeclaration.prototype.isSetter = function() {
      return this._type == "set";
    };
    MethodDeclaration.prototype.isConstructor = function() {
      return String(this.name()) == "constructor";
    };
    MethodDeclaration.prototype.isMember = function() {
      return !this.option("static");
    };
    MethodDeclaration.prototype.toJSON = function() {
      return this.metadata();
    };
    MethodDeclaration.prototype.namepath = function() {
      if (this._namepath) {
        return this._namepath;
      }
      ;
      var name = String(this.name().c());
      var sep2 = this.option("static") ? "." : "#";
      if (this.target()) {
        let ctx = this.target();
        if (ctx.namepath() == "ValueNode") {
          ctx = this._context.node();
        }
        ;
        return this._namepath = ctx.namepath() + sep2 + name;
      } else {
        return this._namepath = "&" + name;
      }
      ;
    };
    MethodDeclaration.prototype.visit = function() {
      var $1, up_, variable;
      this._type = this.option("type") || (($1 = this.option("def")) && $1._value || "def");
      this._decorators = (up_ = this.up()) && up_.collectDecorators && up_.collectDecorators();
      if (this._desc) {
        this._desc._skip = true;
      }
      ;
      var o = this._options;
      this.scope().visit();
      if (this.isSetter() && len$(this._params) > 1) {
        if (len$(this._params) > 2) {
          console.warn("setter with more than two params not allowed", this.name());
        }
        ;
        let prev = this._params.pop();
        let op = OP("=", new VarReference(prev._value, "const"), OP(".", SELF, this.name()));
        this._body.add(op, 0);
      }
      ;
      if (this.option("inObject")) {
        this._params.traverse();
        this._body.traverse();
        return this;
      }
      ;
      var closure = this._context = this.scope().parent().closure();
      if (closure instanceof RootScope && !this.target() && !(this._name instanceof DecoratorIdentifier)) {
        this.scope()._context = closure.context();
      } else if (closure instanceof MethodScope && !this.target() && !(this._name instanceof DecoratorIdentifier)) {
        this.scope()._selfless = true;
      }
      ;
      this._params.traverse();
      if (this._name.isPredicate && this._name.isPredicate() && !this.isSetter() && !this.isGetter()) {
        this._name.warn("Only getters/setters should end with ?");
      }
      ;
      if (this.target() instanceof Identifier) {
        if (variable = this.scope().lookup(this.target().toString())) {
          this.setTarget(variable);
        }
        ;
      }
      ;
      if (String(this.name()) == "initialize" && closure instanceof ClassScope && !(closure instanceof TagScope)) {
        this.setType("constructor");
      }
      ;
      if (String(this.name()) == "constructor" || this.isConstructor()) {
        this.up().set({ ctor: this });
        this.set({ noreturn: true });
      }
      ;
      if (closure instanceof ClassScope && !this.target()) {
        this._target = closure.prototype();
        let inExt = closure.node().option("extension");
        this.set(
          {
            prototype: this._target,
            inClassBody: true,
            inExtension: inExt
          }
        );
        closure.annotate(this);
      }
      ;
      if (this.target() instanceof Self) {
        this._target = closure.context();
        closure.annotate(this);
        this.set({ static: true });
      } else if (o.variable) {
        this._variable = this.scope().parent().register(this.name(), this, { type: String(o.variable) });
        if (this.target()) {
          this.warn("" + String(o.variable) + " def cannot have a target");
        }
        ;
      } else if (!this.target()) {
        this._variable = this.scope().parent().register(this.name(), this, { type: "const" });
        true;
      }
      ;
      if (o.export && !(closure instanceof RootScope)) {
        this.warn("cannot export non-root method", { loc: o.export.loc() });
      }
      ;
      ROOT.entities().add(this.namepath(), this);
      this._body.traverse();
      if (this.isConstructor() && this.option("supr")) {
        let ref = this.scope__().context()._reference;
        let supr = this.option("supr");
        let node = supr.node;
        let block = supr.block;
        if (ref) {
          ref.declarator()._defaults = null;
          let op = OP("=", ref, new This());
          block.replace(node, [node, op]);
        }
        ;
      }
      ;
      return this;
    };
    MethodDeclaration.prototype.supername = function() {
      return this.type() == "constructor" ? this.type() : this.name();
    };
    MethodDeclaration.prototype.js = function(stack, co) {
      if (co === void 0)
        co = {};
      var o = this._options;
      if (!(this.type() == "constructor" || this.option("noreturn") || this.isSetter())) {
        if (this.option("chainable")) {
          this.body().add(new ImplicitReturn(this.scope().context()));
        } else if (this.option("greedy")) {
          this.body().consume(new GreedyReturn());
        } else {
          this.body().consume(new ImplicitReturn());
        }
        ;
      }
      ;
      var code = this.scope().c({ indent: true, braces: true });
      var name = typeof this._name == "string" ? this._name : this._name.c({ as: "field" });
      var out = "";
      if ((this.option("inClassBody") || this.option("inObject")) && co.as != "descriptor") {
        let prefix = "";
        if (this.isGetter()) {
          prefix = M2("get", this.option("keyword")) + " ";
        } else if (this.isSetter()) {
          prefix = M2("set", this.option("keyword")) + " ";
        }
        ;
        if (this.option("async")) {
          prefix = "async " + prefix;
        }
        ;
        if (this.option("static")) {
          prefix = "" + M2("static", this.option("static")) + " " + prefix;
        }
        ;
        out = "" + prefix + M2(name, null, { as: "field" }) + "(" + this.params().c() + ")" + code;
        out = this.jsdoc() + out;
        if (this.option("declareOnly") && !STACK.tsc()) {
          return "";
        }
        ;
        return out;
      }
      ;
      var func = "(" + this.params().c() + ")" + code;
      var ctx = this.context();
      var fname = helpers2.toValidIdentifier(AST.sym(this.name()));
      if (this.target()) {
        if (STACK.tsc()) {
          this.set({ jsdocthis: "typeof " + this.target().c() });
        }
        ;
        if (fname[0] == "[") {
          fname = fname.slice(1, -1);
        } else {
          fname = "'" + fname + "'";
        }
        ;
        if (this.isGetter()) {
          out = "Object.defineProperty(" + this.target().c() + "," + fname + ",{get: " + this.jsdoc() + this.funcKeyword() + func + ", configurable: true})";
          return out;
        } else if (this.isSetter()) {
          out = "Object.defineProperty(" + this.target().c() + "," + fname + ",{set: " + this.jsdoc() + this.funcKeyword() + func + ", configurable: true})";
          return out;
        } else {
          let k = OP(".", this.target(), this._name);
          out = "" + k.c() + " = " + this.funcKeyword() + " " + func;
        }
        ;
        if (o.export) {
          out = "exports." + (o.default ? "default" : fname) + " = " + out;
        }
        ;
      } else {
        out = "" + M2(this.funcKeyword(), this.keyword()) + " " + M2(fname, this._name) + func;
        if (o.export) {
          out = "" + M2("export", o.export) + " " + (o.default ? M2("default ", o.default) : "") + out;
        }
        ;
      }
      ;
      if (o.global) {
        out = "" + out + "; " + this.scope__().root().globalRef() + "." + fname + " = " + fname + ";";
      }
      ;
      if (this.option("return")) {
        out = "return " + out;
      }
      ;
      out = this.jsdoc() + out;
      if (this.option("declareOnly") && !STACK.tsc()) {
        return "";
      }
      ;
      return out;
    };
    function Literal(v) {
      this._traversed = false;
      this._expression = true;
      this._cache = null;
      this._raw = null;
      this._value = this.load(v);
    }
    subclass$(Literal, ValueNode2);
    exports.Literal = Literal;
    Literal.prototype.isConstant = function() {
      return true;
    };
    Literal.prototype.load = function(value) {
      return value;
    };
    Literal.prototype.toString = function() {
      return "" + this.value();
    };
    Literal.prototype.hasSideEffects = function() {
      return false;
    };
    Literal.prototype.shouldParenthesizeInTernary = function() {
      return false;
    };
    Literal.prototype.startLoc = function() {
      return this._startLoc || this._value && this._value.startLoc && this._value.startLoc();
    };
    Literal.prototype.endLoc = function() {
      return this._endLoc || this._value && this._value.endLoc && this._value.endLoc();
    };
    function RawScript() {
      return Literal.apply(this, arguments);
    }
    subclass$(RawScript, Literal);
    exports.RawScript = RawScript;
    RawScript.prototype.c = function() {
      return this._value;
    };
    function Bool(v) {
      this._value = v;
      this._raw = String(v) == "true" ? true : false;
    }
    subclass$(Bool, Literal);
    exports.Bool = Bool;
    Bool.prototype.cache = function() {
      return this;
    };
    Bool.prototype.isPrimitive = function() {
      return true;
    };
    Bool.prototype.truthy = function() {
      return String(this.value()) == "true";
    };
    Bool.prototype.js = function(o) {
      return String(this._value);
    };
    Bool.prototype.c = function() {
      STACK._counter += 1;
      return String(this._value);
    };
    Bool.prototype.toJSON = function() {
      return { type: "Bool", value: this._value };
    };
    Bool.prototype.loc = function() {
      return this._value.region ? this._value.region() : [0, 0];
    };
    function Undefined() {
      return Literal.apply(this, arguments);
    }
    subclass$(Undefined, Literal);
    exports.Undefined = Undefined;
    Undefined.prototype.isPrimitive = function() {
      return true;
    };
    Undefined.prototype.isTruthy = function() {
      return false;
    };
    Undefined.prototype.cache = function() {
      return this;
    };
    Undefined.prototype.c = function() {
      return M2("undefined", this._value);
    };
    function Nil() {
      return Literal.apply(this, arguments);
    }
    subclass$(Nil, Literal);
    exports.Nil = Nil;
    Nil.prototype.isPrimitive = function() {
      return true;
    };
    Nil.prototype.isTruthy = function() {
      return false;
    };
    Nil.prototype.cache = function() {
      return this;
    };
    Nil.prototype.c = function() {
      return M2("null", this._value);
    };
    function True() {
      return Bool.apply(this, arguments);
    }
    subclass$(True, Bool);
    exports.True = True;
    True.prototype.raw = function() {
      return true;
    };
    True.prototype.isTruthy = function() {
      return true;
    };
    True.prototype.c = function() {
      return M2("true", this._value);
    };
    function False() {
      return Bool.apply(this, arguments);
    }
    subclass$(False, Bool);
    exports.False = False;
    False.prototype.raw = function() {
      return false;
    };
    False.prototype.isTruthy = function() {
      return false;
    };
    False.prototype.c = function() {
      return M2("false", this._value);
    };
    function Num(v) {
      this._traversed = false;
      this._value = v;
    }
    subclass$(Num, Literal);
    exports.Num = Num;
    Num.prototype.toString = function() {
      return String(this._value).replace(/\_/g, "");
    };
    Num.prototype.toNumber = function() {
      return this._number == null ? this._number = parseFloat(this.toString()) : this._number;
    };
    Num.prototype.isPrimitive = function(deep) {
      return true;
    };
    Num.prototype.isTruthy = function() {
      return this.toNumber() != 0;
    };
    Num.prototype.negate = function() {
      this._value = -this.toNumber();
      return this;
    };
    Num.prototype.shouldParenthesize = function(par) {
      if (par === void 0)
        par = this.up();
      return par instanceof Access && par.left() == this;
    };
    Num.prototype.js = function(o) {
      return this.toString();
    };
    Num.prototype.c = function(o) {
      if (this._cache) {
        return Num.prototype.__super__.c.call(this, o);
      }
      ;
      var out = M2(this.toString(), this._value);
      var par = STACK.current();
      var paren = par instanceof Access && par.left() == this;
      return paren ? "(" + out + ")" : out;
    };
    Num.prototype.cache = function(o) {
      if (!(o && (o.cache || o.pool))) {
        return this;
      }
      ;
      return Num.prototype.__super__.cache.call(this, o);
    };
    Num.prototype.raw = function() {
      return JSON.parse(this.toString());
    };
    Num.prototype.toJSON = function() {
      return { type: this.typeName(), value: this.raw() };
    };
    function NumWithUnit(v, unit) {
      this._traversed = false;
      this._value = v;
      this._unit = unit;
    }
    subclass$(NumWithUnit, Literal);
    exports.NumWithUnit = NumWithUnit;
    NumWithUnit.prototype.negate = function() {
      this.set({ negate: true });
      return this;
    };
    NumWithUnit.prototype.c = function(o) {
      let unit = String(this._unit);
      let val = String(this._value);
      if (this.option("negate")) {
        val = "-" + val;
      }
      ;
      if (unit == "ms") {
        val = "" + val;
      } else if (unit == "kb") {
        val = "(" + val + " * 1024)";
      } else if (unit == "mb") {
        val = "(" + val + " * 1024 * 1024)";
      } else if (unit == "gb") {
        val = "(" + val + " * 1024 * 1024 * 1024)";
      } else if (unit == "s") {
        val = "(" + val + " * 1000)";
      } else if (unit == "minutes") {
        val = "(" + val + " * 60 * 1000)";
      } else if (unit == "hours") {
        val = "(" + val + " * 60 * 60 * 1000)";
      } else if (unit == "days") {
        val = "(" + val + " * 24 * 60 * 60 * 1000)";
      } else if (unit == "n") {
        val = "" + val + "n";
      } else if (unit == "fps") {
        val = "(1000 / " + val + ")";
      } else {
        val = "" + val + unit;
        if (!(o && o.unqouted)) {
          val = "'" + val + "'";
        }
        ;
      }
      ;
      if (OPTS.sourcemap && (!o || o.mark !== false)) {
        val = M2(val, this);
      }
      ;
      return val;
    };
    NumWithUnit.prototype.endLoc = function() {
      return this._unit.endLoc();
    };
    function ExpressionWithUnit(value, unit) {
      this._value = value;
      this._unit = unit;
    }
    subclass$(ExpressionWithUnit, ValueNode2);
    exports.ExpressionWithUnit = ExpressionWithUnit;
    ExpressionWithUnit.prototype.js = function(o) {
      let unit = String(this._unit);
      return "(" + this.value().c() + "+" + STR(this._unit).c() + ")";
    };
    function Str(v) {
      this._traversed = false;
      this._expression = true;
      this._cache = null;
      this._value = v;
    }
    subclass$(Str, Literal);
    exports.Str = Str;
    Str.prototype.isString = function() {
      return true;
    };
    Str.prototype.isPrimitive = function(deep) {
      return true;
    };
    Str.prototype.raw = function() {
      return this._raw || (this._raw = String(this.value()).slice(1, -1));
    };
    Str.prototype.isValidIdentifier = function() {
      return this.raw().match(/^[a-zA-Z\$\_]+[\d\w\$\_]*$/) ? true : false;
    };
    Str.prototype.isTemplate = function() {
      return String(this._value)[0] == "`";
    };
    Str.prototype.js = function(o) {
      return String(this._value);
    };
    Str.prototype.cache = function(o) {
      if (this.raw().length > 20) {
        Str.prototype.__super__.cache.apply(this, arguments);
      }
      ;
      return this;
    };
    Str.prototype.c = function(o) {
      return this._cache ? Str.prototype.__super__.c.call(this, o) : M2(this.js(), this._value, o);
    };
    function TemplateString() {
      return ListNode.apply(this, arguments);
    }
    subclass$(TemplateString, ListNode);
    exports.TemplateString = TemplateString;
    TemplateString.prototype.js = function() {
      let parts = this._nodes.map(function(node) {
        return typeof node == "string" || node instanceof String ? node : node.c();
      });
      let out = "`" + parts.join("") + "`";
      return out;
    };
    function Interpolation() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(Interpolation, ValueNode2);
    exports.Interpolation = Interpolation;
    function InterpolatedString(nodes, o) {
      if (o === void 0)
        o = {};
      this._nodes = nodes;
      this._options = o;
      this;
    }
    subclass$(InterpolatedString, Node2);
    exports.InterpolatedString = InterpolatedString;
    InterpolatedString.prototype.add = function(part) {
      if (part) {
        this._nodes.push(part);
      }
      ;
      return this;
    };
    InterpolatedString.prototype.visit = function() {
      for (let i = 0, items = iter$(this._nodes), len = items.length; i < len; i++) {
        items[i].traverse();
      }
      ;
      return this;
    };
    InterpolatedString.prototype.startLoc = function() {
      return this.option("open").startLoc();
    };
    InterpolatedString.prototype.endLoc = function() {
      return this.option("close").endLoc();
    };
    InterpolatedString.prototype.isString = function() {
      return true;
    };
    InterpolatedString.prototype.isTemplate = function() {
      return String(this.option("open")) == "`";
    };
    InterpolatedString.prototype.escapeString = function(str) {
      return str = str.replace(/\n/g, "\\\n");
    };
    InterpolatedString.prototype.toArray = function() {
      let items = this._nodes.map(function(part, i) {
        if (part instanceof Token2 && part._type == "NEOSTRING") {
          return new Str('"' + part._value + '"');
        } else {
          return part;
        }
        ;
      });
      return items;
    };
    InterpolatedString.prototype.js = function(o, opts) {
      var self2 = this;
      var kind = String(self2.option("open") || '"');
      if (kind.length == 3) {
        kind = kind[0];
      }
      ;
      if (opts && opts.as == "template") {
        var parts = [];
        self2._nodes.map(function(part, i) {
          if (part instanceof Token2 && part._type == "NEOSTRING") {
            return parts.push(self2.escapeString(part._value));
          } else if (part) {
            return parts.push("${", part.c({ expression: true }), "}");
          }
          ;
        });
        return "`" + parts.join("") + "`";
      } else {
        var noparen = self2._noparen;
        parts = [];
        var str = noparen ? "" : "(";
        self2._nodes.map(function(part, i) {
          if (part instanceof Token2 && part._type == "NEOSTRING") {
            return parts.push(kind + self2.escapeString(part._value) + kind);
          } else if (part) {
            if (i == 0) {
              parts.push('""');
            }
            ;
            part._parens = true;
            return parts.push(part.c({ expression: true }));
          }
          ;
        });
        str += parts.join(" + ");
        if (!noparen) {
          str += ")";
        }
        ;
      }
      ;
      return str;
    };
    function Symbol2() {
      return Literal.apply(this, arguments);
    }
    subclass$(Symbol2, Literal);
    exports.Symbol = Symbol2;
    Symbol2.prototype.isValidIdentifier = function() {
      return this.raw().match(/^[a-zA-Z\$\_]+[\d\w\$\_]*$/) ? true : false;
    };
    Symbol2.prototype.isPrimitive = function(deep) {
      return true;
    };
    Symbol2.prototype.raw = function() {
      return this._raw || (this._raw = AST.sym(this.value().toString().replace(/^\:/, "")));
    };
    Symbol2.prototype.js = function(o) {
      return "'" + AST.sym(this.raw()) + "'";
    };
    function RegExp2() {
      return Literal.apply(this, arguments);
    }
    subclass$(RegExp2, Literal);
    exports.RegExp = RegExp2;
    RegExp2.prototype.isPrimitive = function() {
      return true;
    };
    RegExp2.prototype.js = function() {
      var m;
      var v = RegExp2.prototype.__super__.js.apply(this, arguments);
      if (m = constants.HEREGEX.exec(v)) {
        var re = m[1].replace(constants.HEREGEX_OMIT, "").replace(/\//g, "\\/");
        return "/" + (re || "(?:)") + "/" + m[2];
      }
      ;
      return v == "//" ? "/(?:)/" : v;
    };
    function Arr() {
      return Literal.apply(this, arguments);
    }
    subclass$(Arr, Literal);
    exports.Arr = Arr;
    Arr.prototype.load = function(value) {
      return value instanceof Array ? new ArgList(value) : value;
    };
    Arr.prototype.push = function(item) {
      this.value().push(item);
      return this;
    };
    Arr.prototype.count = function() {
      return this.value().length;
    };
    Arr.prototype.nodes = function() {
      var val = this.value();
      return val instanceof Array ? val : val.nodes();
    };
    Arr.prototype.splat = function() {
      return this.value().some(function(v) {
        return v instanceof Splat;
      });
    };
    Arr.prototype.visit = function() {
      if (this._value && this._value.traverse) {
        this._value.traverse();
      }
      ;
      return this;
    };
    Arr.prototype.isPrimitive = function(deep) {
      return !this.value().some(function(v) {
        return !v.isPrimitive(true);
      });
    };
    Arr.prototype.js = function(o) {
      var val = this._value;
      if (!val) {
        return "[]";
      }
      ;
      var nodes = val instanceof Array ? val : val.nodes();
      var out = val instanceof Array ? AST.cary(val) : val.c();
      out = "[" + out + "]";
      if (this.datatype() && STACK.tsc()) {
        out = this.datatype().c() + "(" + out + ")";
      }
      ;
      return out;
    };
    Arr.prototype.hasSideEffects = function() {
      return this.value().some(function(v) {
        return v.hasSideEffects();
      });
    };
    Arr.prototype.toString = function() {
      return "Arr";
    };
    Arr.prototype.indented = function(a, b) {
      this._value.indented(a, b);
      return this;
    };
    Arr.wrap = function(val) {
      return new Arr(val);
    };
    function Obj() {
      return Literal.apply(this, arguments);
    }
    subclass$(Obj, Literal);
    exports.Obj = Obj;
    Obj.prototype.load = function(value) {
      return value instanceof Array ? new AssignList(value) : value;
    };
    Obj.prototype.visit = function() {
      if (this._value) {
        this._value.traverse();
      }
      ;
      return this;
    };
    Obj.prototype.isPrimitive = function(deep) {
      return !this.value().some(function(v) {
        return !v.isPrimitive(true);
      });
    };
    Obj.prototype.js = function(o) {
      return "{" + this.value().c() + "}";
    };
    Obj.prototype.add = function(k, v) {
      if (typeof k == "string" || k instanceof String || k instanceof Token2) {
        k = new Identifier(k);
      }
      ;
      var kv = new ObjAttr(k, v);
      this.value().push(kv);
      return kv;
    };
    Obj.prototype.remove = function(key) {
      for (let i = 0, items = iter$(this.value()), len = items.length, k; i < len; i++) {
        k = items[i];
        if (k.key().symbol() == key) {
          this.value().remove(k);
        }
        ;
      }
      ;
      return this;
    };
    Obj.prototype.keys = function() {
      return Object.keys(this.hash());
    };
    Obj.prototype.hash = function() {
      var hash = {};
      for (let i = 0, items = iter$(this.value()), len = items.length, k; i < len; i++) {
        k = items[i];
        if (k instanceof ObjAttr) {
          hash[k.key().symbol()] = k.value();
        }
        ;
      }
      ;
      return hash;
    };
    Obj.prototype.key = function(key) {
      for (let i = 0, items = iter$(this.value()), len = items.length, k; i < len; i++) {
        k = items[i];
        if (k instanceof ObjAttr && k.key().symbol() == key) {
          return k;
        }
        ;
      }
      ;
      return null;
    };
    Obj.prototype.indented = function(a, b) {
      this._value.indented(a, b);
      return this;
    };
    Obj.prototype.hasSideEffects = function() {
      return this.value().some(function(v) {
        return v.hasSideEffects();
      });
    };
    Obj.wrap = function(obj) {
      var attrs = [];
      for (let v, i = 0, keys = Object.keys(obj), l = keys.length, k; i < l; i++) {
        k = keys[i];
        v = obj[k];
        if (v instanceof Array) {
          v = Arr.wrap(v);
        } else if (v.constructor == Object) {
          v = Obj.wrap(v);
        }
        ;
        v = NODIFY(v);
        if (typeof k == "string" || k instanceof String) {
          k = new Identifier(k);
        }
        ;
        attrs.push(new ObjAttr(k, v));
      }
      ;
      return new Obj(attrs);
    };
    Obj.prototype.toString = function() {
      return "Obj";
    };
    function NumberLike() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(NumberLike, ValueNode2);
    exports.NumberLike = NumberLike;
    NumberLike.prototype.consume = function(node) {
      if (node == NumberLike || node instanceof NumberLike) {
        return this;
      }
      ;
      return NumberLike.prototype.__super__.consume.apply(this, arguments);
    };
    NumberLike.prototype.js = function() {
      return "(" + this._value.c() + ").valueOf()";
    };
    function ObjAttr(key, value, defaults) {
      this._traversed = false;
      this._key = key;
      this._value = value;
      this._dynamic = key instanceof Op;
      this._defaults = defaults;
      this;
    }
    subclass$(ObjAttr, Node2);
    exports.ObjAttr = ObjAttr;
    ObjAttr.prototype.key = function(v) {
      return this._key;
    };
    ObjAttr.prototype.setKey = function(v) {
      this._key = v;
      return this;
    };
    ObjAttr.prototype.value = function(v) {
      return this._value;
    };
    ObjAttr.prototype.setValue = function(v) {
      this._value = v;
      return this;
    };
    ObjAttr.prototype.options = function(v) {
      return this._options;
    };
    ObjAttr.prototype.setOptions = function(v) {
      this._options = v;
      return this;
    };
    ObjAttr.prototype.visit = function(stack, state) {
      this.key().traverse();
      if (this.value()) {
        this.value().traverse();
      }
      ;
      if (this._defaults) {
        this._defaults.traverse();
      }
      ;
      let decl = state && state.declaring;
      if (this.key() instanceof Ivar) {
        if (!this.value()) {
          this.setKey(new Identifier(this.key().value()));
          this.setValue(OP(".", this.scope__().context(), this.key()));
          if (this._defaults) {
            this.setValue(OP("=", this.value(), this._defaults));
            this._defaults = null;
          }
          ;
        }
        ;
      } else if (this.key() instanceof Private) {
        if (!this.value()) {
          this.setValue(OP(".", this.scope__().context(), this.key()));
          this.setKey(new Identifier(this.key().value()));
        }
        ;
      } else if (this.key() instanceof Identifier) {
        if (!this.value()) {
          if (decl) {
            this.setValue(this.scope__().register(this.key().symbol(), this.key(), { type: decl }));
            this.setValue(this.value().via(this.key()));
            if (this._defaults) {
              this.setValue(OP("=", this.value(), this._defaults));
              this._defaults = null;
            }
            ;
          } else {
            this.setValue(this.scope__().lookup(this.key().symbol()));
            if (!this.value()) {
              this.setValue(OP(".", this.scope__().context(), this.key()));
            }
            ;
          }
          ;
        }
        ;
      }
      ;
      return this;
    };
    ObjAttr.prototype.js = function(o) {
      let key = this.key();
      let kjs;
      if (key instanceof IdentifierExpression || key instanceof SymbolIdentifier) {
        kjs = key.asObjectKey();
      } else if (key instanceof InterpolatedString) {
        kjs = "[" + key.c() + "]";
      } else if (key.isReserved()) {
        kjs = "'" + key.c() + "'";
      } else if (key instanceof Str && key.isValidIdentifier()) {
        kjs = key.raw();
      } else {
        kjs = key.c({ as: "key" });
      }
      ;
      if (this._defaults) {
        return "" + kjs + " = " + this._defaults.c();
      } else if (this.value()) {
        return "" + kjs + ": " + this.value().c();
      } else {
        return "" + kjs;
      }
      ;
    };
    ObjAttr.prototype.hasSideEffects = function() {
      return true;
    };
    ObjAttr.prototype.isPrimitive = function(deep) {
      return !this._value || this._value.isPrimitive(deep);
    };
    function ObjRestAttr() {
      return ObjAttr.apply(this, arguments);
    }
    subclass$(ObjRestAttr, ObjAttr);
    exports.ObjRestAttr = ObjRestAttr;
    ObjRestAttr.prototype.js = function(o) {
      let key = this.key();
      if (this.value()) {
        return "..." + this.value().c();
      } else {
        return "..." + key.c();
      }
      ;
    };
    function ArgsReference() {
      return Node2.apply(this, arguments);
    }
    subclass$(ArgsReference, Node2);
    exports.ArgsReference = ArgsReference;
    ArgsReference.prototype.c = function() {
      return "arguments";
    };
    function Self(value) {
      this._value = value;
    }
    subclass$(Self, Literal);
    exports.Self = Self;
    Self.prototype.cache = function() {
      return this;
    };
    Self.prototype.reference = function() {
      return this;
    };
    Self.prototype.visit = function() {
      this._scope__ = this.scope__();
      this._scope__.context();
      return this;
    };
    Self.prototype.js = function() {
      var s = this._scope__ || this.scope__();
      return s ? s.context().c() : "this";
    };
    Self.prototype.c = function() {
      let out = M2(this.js(), this._value);
      let typ = STACK.tsc() && this.option("datatype");
      if (typ) {
        out = "" + typ.c() + "(" + out + ")";
      }
      ;
      return out;
    };
    function This() {
      return Self.apply(this, arguments);
    }
    subclass$(This, Self);
    exports.This = This;
    This.prototype.cache = function() {
      return this;
    };
    This.prototype.reference = function() {
      return this;
    };
    This.prototype.visit = function() {
      return this;
    };
    This.prototype.js = function() {
      return "this";
    };
    function Op(o, l, r) {
      this._expression = false;
      this._traversed = false;
      this._parens = false;
      this._cache = null;
      this._invert = false;
      this._opToken = o;
      this._op = o && o._value || o;
      if (this._op == "and") {
        this._op = "&&";
      } else if (this._op == "or") {
        this._op = "||";
      } else if (this._op == "not") {
        this._op = "!";
      }
      ;
      this._left = l;
      this._right = r;
      return this;
    }
    subclass$(Op, Node2);
    exports.Op = Op;
    Op.prototype.op = function(v) {
      return this._op;
    };
    Op.prototype.setOp = function(v) {
      this._op = v;
      return this;
    };
    Op.prototype.left = function(v) {
      return this._left;
    };
    Op.prototype.setLeft = function(v) {
      this._left = v;
      return this;
    };
    Op.prototype.right = function(v) {
      return this._right;
    };
    Op.prototype.setRight = function(v) {
      this._right = v;
      return this;
    };
    Op.prototype.visit = function() {
      if (this._right && this._right.traverse) {
        this._right.traverse();
      }
      ;
      if (this._left && this._left.traverse) {
        this._left.traverse();
      }
      ;
      return this;
    };
    Op.prototype.startLoc = function() {
      return this._startLoc || this._left.startLoc();
    };
    Op.prototype.endLoc = function() {
      return this._endLoc || (this._right || this._left).endLoc();
    };
    Op.prototype.hasTagRight = function() {
      if (this.isLogical()) {
        let l = this._left.unwrappedNode();
        let r = this._right.unwrappedNode();
        if (r instanceof TagLike) {
          return true;
        }
        ;
        if (r instanceof Op && r.hasTagRight()) {
          return true;
        }
        ;
        if (r instanceof Op && r.hasTagRight()) {
          return true;
        }
        ;
      }
      ;
      return false;
    };
    Op.prototype.opToIfTree = function() {
      if (this.hasTagRight()) {
        let l = this._left.unwrappedNode();
        let r = this._right.unwrappedNode();
        if (this._op == "&&") {
          if (l instanceof Op && l.hasTagRight()) {
            this._left.warn("Tag not allowed here");
          }
          ;
          if (l instanceof Op) {
            l = l.opToIfTree();
          }
          ;
          if (r instanceof Op) {
            r = r.opToIfTree();
          }
          ;
          if (r instanceof If) {
            r.setTest(OP("&&", l, r.test()));
            return r;
          }
          ;
          return new If(l, new Block([r])).traverse();
        } else if (this._op == "||") {
          if (l instanceof Op) {
            l = l.opToIfTree();
          }
          ;
          if (l instanceof If) {
            return l.addElse(new Block([r]));
          } else {
            return new If(l, new Block([])).addElse(new Block([r])).traverse();
          }
          ;
        }
        ;
      }
      ;
      return this;
    };
    Op.prototype.isExpressable = function() {
      return !this.right() || this.right().isExpressable();
    };
    Op.prototype.js = function(o) {
      var out = null;
      if (STACK.tsc() && this.isBitwise()) {
        if (this.isAssignment()) {
          let typ = String(this._op).split("=");
          this._op = "=";
          this._right = OP(typ[0], this._left, this._right);
        } else {
          if (this._right) {
            this._right = this._right.consume(NumberLike);
          }
          ;
          if (this._left) {
            this._left = this._left.consume(NumberLike);
          }
          ;
        }
        ;
      }
      ;
      var op = this._op;
      let opv = op;
      var l = this._left;
      var r = this._right;
      if (op == "!&") {
        return "(" + C(l) + " " + M2("&", this._opToken) + " " + C(r) + ")==0";
      } else if (op == "??") {
        return "(" + C(l) + " " + M2(op, this._opToken) + " " + C(r) + ")";
      } else if (op == "|=?") {
        return If.ternary(
          OP("!&", l, r.cache()),
          new Parens([OP("|=", l, r), TRUE]),
          FALSE
        ).c();
      } else if (op == "~=?") {
        return If.ternary(
          OP("&", l, r.cache()),
          new Parens([OP("~=", l, r), TRUE]),
          FALSE
        ).c();
      } else if (op == "^=?") {
        return OP("!!", OP("&", OP("^=", l, r.cache()), r)).c();
      } else if (op == "=?") {
        r.cache();
        return If.ternary(
          OP("!=", l, r),
          new Parens([OP("=", l, r), TRUE]),
          FALSE
        ).c();
      }
      ;
      let neg = false;
      if (op == "isnt") {
        neg = true;
        op = "is";
      }
      ;
      if (op == "is") {
        if (r instanceof Str || r instanceof Num) {
          op = neg ? "!==" : "===";
        }
        ;
      }
      ;
      if (op == "is") {
        let res;
        if (r instanceof Parens) {
          l.cache();
          res = r.consume(new Util.Is([l, null]));
        } else {
          res = new Util.Is([l, r]);
        }
        ;
        return (neg ? "!" : "") + res.c();
      }
      ;
      if (l instanceof Node2) {
        l = l.c();
      }
      ;
      if (r instanceof Node2) {
        r = r.c();
      }
      ;
      if (l && r) {
        out || (out = "" + l + " " + M2(op, this._opToken) + " " + r);
      } else if (l) {
        let s = this._opToken && this._opToken.spaced ? " " : "";
        out || (out = "" + M2(op, this._opToken) + s + l);
      }
      ;
      return out;
    };
    Op.prototype.isString = function() {
      return this._op == "+" && this._left && this._left.isString();
    };
    Op.prototype.isLogical = function() {
      return this._op == "&&" || this._op == "||" || this._op == "or" || this._op == "and";
    };
    Op.prototype.isBitwise = function() {
      return !!constants.BITWISE_OPERATORS[this._op];
    };
    Op.prototype.isAssignment = function() {
      return !!constants.ASSIGNMENT_OPERATORS[this._op];
    };
    Op.prototype.shouldParenthesize = function() {
      return this._parens;
    };
    Op.prototype.precedence = function() {
      return 10;
    };
    Op.prototype.consume = function(node) {
      var v_;
      if (node == NumberLike) {
        if (this.isBitwise()) {
          return this;
        }
        ;
      } else if (node instanceof Walker) {
        if (this.left()) {
          this.left().consume(node);
        }
        ;
        if (this.right()) {
          this.right().consume(node);
        }
        ;
      }
      ;
      if (node instanceof Util.Is) {
        if (this.op() == "!") {
          this.setLeft(this.left().consume(node));
        } else if (this.isLogical()) {
          if (this.left()) {
            this.setLeft(v_ = this.left().consume(node)), v_;
          }
          ;
          if (this.right()) {
            this.setRight(v_ = this.right().consume(node)), v_;
          }
          ;
        }
        ;
        return this;
      }
      ;
      if (this.isExpressable()) {
        return Op.prototype.__super__.consume.apply(this, arguments);
      }
      ;
      var tmpvar = this.scope__().declare("tmp", null, { system: true });
      var clone = OP(this.op(), this.left(), null);
      var ast = this.right().consume(clone);
      if (node) {
        ast.consume(node);
      }
      ;
      return ast;
    };
    function ComparisonOp() {
      return Op.apply(this, arguments);
    }
    subclass$(ComparisonOp, Op);
    exports.ComparisonOp = ComparisonOp;
    ComparisonOp.prototype.invert = function() {
      var op = this._op;
      var pairs = ["==", "!=", "===", "!==", ">", "<=", "<", ">="];
      var idx = pairs.indexOf(op);
      idx += idx % 2 ? -1 : 1;
      this.setOp(pairs[idx]);
      this._invert = !this._invert;
      return this;
    };
    ComparisonOp.prototype.c = function() {
      if (this.left() instanceof ComparisonOp) {
        this.left().right().cache();
        return OP("&&", this.left(), OP(this.op(), this.left().right(), this.right())).c();
      } else {
        return ComparisonOp.prototype.__super__.c.apply(this, arguments);
      }
      ;
    };
    ComparisonOp.prototype.js = function(o) {
      var op = this._op;
      var l = this._left;
      var r = this._right;
      if (l instanceof Node2) {
        l = l.c();
      }
      ;
      if (r instanceof Node2) {
        r = r.c();
      }
      ;
      return "" + l + " " + M2(op, this._opToken) + " " + r;
    };
    function UnaryOp() {
      return Op.apply(this, arguments);
    }
    subclass$(UnaryOp, Op);
    exports.UnaryOp = UnaryOp;
    UnaryOp.prototype.invert = function() {
      if (this.op() == "!") {
        return this.left();
      } else {
        return UnaryOp.prototype.__super__.invert.apply(this, arguments);
      }
      ;
    };
    UnaryOp.prototype.isTruthy = function() {
      var val = AST.truthy(this.left());
      return val !== void 0 ? !val : void 0;
    };
    UnaryOp.prototype.js = function(o) {
      var l = this._left;
      var r = this._right;
      var op = this.op();
      var s = this._opToken && this._opToken.spaced ? " " : "";
      if (op == "not") {
        op = "!";
      }
      ;
      if (op == "!" || op == "!!") {
        var str = l.c();
        var paren = l.shouldParenthesize(this);
        if (!((str.match(/^\!?([\w\.]+)$/) || l instanceof Parens || paren || l instanceof Access || l instanceof Call) && !str.match(/[\s\&\|]/))) {
          str = "(" + str + ")";
        }
        ;
        return "" + op + str;
      } else if (this.left()) {
        return "" + l.c() + s + op;
      } else {
        return "" + op + s + r.c();
      }
      ;
    };
    UnaryOp.prototype.normalize = function() {
      if (this.op() == "!") {
        return this;
      }
      ;
      var node = (this.left() || this.right()).node();
      return this;
    };
    UnaryOp.prototype.consume = function(node) {
      var norm = this.normalize();
      return norm == this ? UnaryOp.prototype.__super__.consume.apply(this, arguments) : norm.consume(node);
    };
    UnaryOp.prototype.c = function() {
      var norm = this.normalize();
      return norm == this ? UnaryOp.prototype.__super__.c.apply(this, arguments) : norm.c();
    };
    function InstanceOf() {
      return Op.apply(this, arguments);
    }
    subclass$(InstanceOf, Op);
    exports.InstanceOf = InstanceOf;
    InstanceOf.prototype.js = function(s, o) {
      if (String(this._op) == "instanceof") {
        let out = "" + this.left().c() + " instanceof " + this.right().c();
        if (s.parent() instanceof Op) {
          out = helpers2.parenthesize(out);
        }
        ;
        return out;
      }
      ;
      if (this.right() instanceof Parens) {
        let out = this.right().consume(new Util.Isa([this.left().cache(), null])).c();
        out = helpers2.parenthesize(out);
        return out;
      }
      ;
      return new Util.Isa([this.left(), this.right()]).js(s, o);
    };
    function TypeOf() {
      return Op.apply(this, arguments);
    }
    subclass$(TypeOf, Op);
    exports.TypeOf = TypeOf;
    TypeOf.prototype.js = function(o) {
      return "typeof " + this.left().c();
    };
    function Delete() {
      return Op.apply(this, arguments);
    }
    subclass$(Delete, Op);
    exports.Delete = Delete;
    Delete.prototype.js = function(o) {
      var l = this.left();
      var tmp = this.scope__().temporary(this, { pool: "val" });
      var o = OP("=", tmp, l);
      return "(" + o.c() + ",delete " + l.c() + ", " + tmp.c() + ")";
    };
    Delete.prototype.shouldParenthesize = function() {
      return true;
    };
    function In() {
      return Op.apply(this, arguments);
    }
    subclass$(In, Op);
    exports.In = In;
    In.prototype.invert = function() {
      this._invert = !this._invert;
      return this;
    };
    In.prototype.js = function(o) {
      var out = this.util().contains(this.left(), this.right());
      return (this._invert ? "!" : "") + out.c();
    };
    function Access(o, l, r) {
      this._expression = false;
      this._traversed = false;
      this._parens = false;
      this._cache = null;
      this._invert = false;
      this._op = o && o._value || o;
      this._optok = o;
      this._left = l;
      this._right = r;
      return this;
    }
    subclass$(Access, Op);
    exports.Access = Access;
    Access.prototype.startLoc = function() {
      return this._left instanceof ScopeContext ? this._right.startLoc() : (this._left || this._right).startLoc();
    };
    Access.prototype.endLoc = function() {
      return this._right && this._right.endLoc();
    };
    Access.prototype.clone = function(left, right) {
      var ctor = this.constructor;
      return new ctor(this.op(), left, right);
    };
    Access.prototype.isRuntimeReference = function() {
      if (this.left() instanceof VarOrAccess && this.left()._variable instanceof ImbaRuntime) {
        if (this.right() instanceof Identifier) {
          return this.right().toString();
        }
        ;
        return true;
      }
      ;
      return false;
    };
    Access.prototype.js = function(stack) {
      var opjs, r;
      var raw = null;
      var lft = this.left();
      var rgt = this.right();
      var rgtexpr = null;
      if (lft instanceof VarOrAccess && lft._variable instanceof ImportProxy) {
        return lft._variable.access(rgt, lft).c();
      }
      ;
      if (rgt instanceof Token2) {
        rgt = new Identifier(rgt);
      }
      ;
      var ctx = lft || this.scope__().context();
      var pre = "";
      var mark = "";
      let safeop = this.safechain() ? "?" : "";
      if (!this._startLoc) {
        this._startLoc = (lft || rgt).startLoc();
      }
      ;
      if (lft instanceof Super && stack.method() && stack.method().option("inExtension") && false) {
        return CALL(
          OP(".", this.scope__().context(), "super$"),
          [rgt instanceof Identifier ? rgt.toStr() : rgt]
        ).c();
      }
      ;
      if (rgt instanceof Index && rgt.value() instanceof Num) {
        rgt = rgt.value();
      }
      ;
      if (rgt instanceof Num) {
        if (rgt.toNumber() < 0) {
          return safeop ? this.util().optNegIndex(ctx, rgt).c() : this.util().negIndex(ctx, rgt).c();
        }
        ;
        return ctx.c() + ((safeop ? "?." : "") + "[") + rgt.c() + "]";
      }
      ;
      if (rgt instanceof Index && (rgt.value() instanceof Str || rgt.value() instanceof Symbol2)) {
        rgt = rgt.value();
      }
      ;
      if (rgt instanceof Str && rgt.isValidIdentifier()) {
        raw = rgt.raw();
      } else if (rgt instanceof Symbol2 && rgt.isValidIdentifier()) {
        raw = rgt.raw();
      } else if (rgt instanceof InterpolatedIdentifier) {
        rgt = rgt.value();
      } else if (rgt instanceof SymbolIdentifier) {
        true;
      } else if (rgt instanceof Identifier && rgt.isValidIdentifier()) {
        raw = rgt.c();
      }
      ;
      var out = raw ? (opjs = STACK.tsc() ? M2(".", this._optok) : ".", ctx ? "" + safeop + opjs + raw : raw) : (r = rgt instanceof Node2 ? rgt.c({ expression: true, as: "value" }) : rgt, (safeop ? "?." : "") + "[" + r + "]");
      let up = stack.up();
      let typ = this.option("datatype");
      if (ctx) {
        if (this instanceof ImplicitAccess && typ && stack.tsc() && !(up instanceof Block) && false) {
          out = "/**@type{any}*/(" + ctx.c() + ")" + out;
        } else {
          out = ctx.c() + out;
        }
        ;
      }
      ;
      if (this instanceof ImplicitAccess) {
        out = M2(out, rgt._token || rgt._value);
      }
      ;
      if (typ && (!(up instanceof Assign) || up.right().node() == this)) {
        if (up instanceof Block && (this instanceof ImplicitAccess || lft instanceof Self)) {
          out = typ.c() + " " + out;
        } else {
          out = typ.c() + "(" + out + ")";
        }
        ;
      }
      ;
      out = pre + out;
      if (pre) {
        out = "(" + out + ")";
      }
      ;
      return out;
    };
    Access.prototype.visit = function() {
      let lft = this.left();
      if (this.left()) {
        this.left().traverse();
      }
      ;
      if (this.right()) {
        this.right().traverse();
      }
      ;
      this._left || (this._left = this.scope__().context());
      return;
    };
    Access.prototype.isExpressable = function() {
      return true;
    };
    Access.prototype.alias = function() {
      return this.right() instanceof Identifier ? this.right().alias() : Access.prototype.__super__.alias.call(this);
    };
    Access.prototype.safechain = function() {
      return String(this._op) == "?.";
    };
    Access.prototype.cache = function(o) {
      return this.right() instanceof Ivar && !this.left() ? this : Access.prototype.__super__.cache.call(this, o);
    };
    Access.prototype.shouldParenthesizeInTernary = function() {
      return this._parens || this._cache;
    };
    function ImplicitAccess() {
      return Access.apply(this, arguments);
    }
    subclass$(ImplicitAccess, Access);
    exports.ImplicitAccess = ImplicitAccess;
    ImplicitAccess.prototype.datatype = function() {
      return ImplicitAccess.prototype.__super__.datatype.apply(this, arguments) || this._right.datatype();
    };
    function LocalVarAccess() {
      return Access.apply(this, arguments);
    }
    subclass$(LocalVarAccess, Access);
    exports.LocalVarAccess = LocalVarAccess;
    LocalVarAccess.prototype.safechain = function(v) {
      return this._safechain;
    };
    LocalVarAccess.prototype.setSafechain = function(v) {
      this._safechain = v;
      return this;
    };
    LocalVarAccess.prototype.js = function(o) {
      if (this.right() instanceof Variable && this.right().type() == "meth") {
        if (!(this.up() instanceof Call)) {
          return "" + this.right().c() + "()";
        }
        ;
      }
      ;
      return this.right().c();
    };
    LocalVarAccess.prototype.variable = function() {
      return this.right();
    };
    LocalVarAccess.prototype.cache = function(o) {
      if (o === void 0)
        o = {};
      if (o.force) {
        LocalVarAccess.prototype.__super__.cache.call(this, o);
      }
      ;
      return this;
    };
    LocalVarAccess.prototype.alias = function() {
      return this.variable()._alias || LocalVarAccess.prototype.__super__.alias.call(this);
    };
    function PropertyAccess(o, l, r) {
      this._traversed = false;
      this._invert = false;
      this._parens = false;
      this._expression = false;
      this._cache = null;
      this._op = o;
      this._left = l;
      this._right = r;
      return this;
    }
    subclass$(PropertyAccess, Access);
    exports.PropertyAccess = PropertyAccess;
    PropertyAccess.prototype.visit = function() {
      if (this._right) {
        this._right.traverse();
      }
      ;
      if (this._left) {
        this._left.traverse();
      }
      ;
      return this;
    };
    PropertyAccess.prototype.js = function(o) {
      var up = this.up();
      var js = "" + PropertyAccess.prototype.__super__.js.call(this, o);
      return js;
    };
    PropertyAccess.prototype.receiver = function() {
      if (this.left() instanceof Super) {
        return SELF;
      } else {
        return null;
      }
      ;
    };
    function IvarAccess() {
      return Access.apply(this, arguments);
    }
    subclass$(IvarAccess, Access);
    exports.IvarAccess = IvarAccess;
    IvarAccess.prototype.visit = function() {
      if (this._right) {
        this._right.traverse();
      }
      ;
      this._left ? this._left.traverse() : this.scope__().context();
      return this;
    };
    IvarAccess.prototype.cache = function() {
      return this;
    };
    function IndexAccess() {
      return Access.apply(this, arguments);
    }
    subclass$(IndexAccess, Access);
    exports.IndexAccess = IndexAccess;
    IndexAccess.prototype.cache = function(o) {
      if (o === void 0)
        o = {};
      if (o.force) {
        return IndexAccess.prototype.__super__.cache.apply(this, arguments);
      }
      ;
      this.right().cache();
      return this;
    };
    function VarAccess() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(VarAccess, ValueNode2);
    exports.VarAccess = VarAccess;
    function VarOrAccess(value) {
      this._traversed = false;
      this._parens = false;
      this._value = value;
      this._identifier = value;
      this._token = value._value;
      this._variable = null;
      this;
    }
    subclass$(VarOrAccess, ValueNode2);
    exports.VarOrAccess = VarOrAccess;
    VarOrAccess.prototype.isGlobal = function(name) {
      return this._variable && this._variable.isGlobal(name);
    };
    VarOrAccess.prototype.startLoc = function() {
      return this._token.startLoc();
    };
    VarOrAccess.prototype.endLoc = function() {
      return this._token.endLoc();
    };
    VarOrAccess.prototype.visit = function(stack, state) {
      var variable;
      var scope = this.scope__();
      var name = this.value().symbol();
      if (state && state.declaring) {
        variable = scope.register(this.value(), this, { type: state.declaring });
      }
      ;
      variable || (variable = scope.lookup(this.value().symbol()));
      if (variable && variable instanceof GlobalReference) {
        let name2 = variable.name();
        if (variable instanceof ZonedVariable && !stack.tsc()) {
          this._value = variable.forScope(scope);
        } else if (stack.tsc()) {
          this._value = LIT(name2);
        } else if (stack.isNode()) {
          this._value = LIT(scope.imba().c());
          if (name2 != "imba") {
            this._value = LIT("" + scope.imba().c() + "." + name2);
          }
          ;
        } else {
          this._value = LIT(name2);
        }
        ;
      } else if (variable && variable.declarator()) {
        let vscope = variable.scope();
        if (vscope == scope && !variable._initialized) {
          let outerVar = scope.parent().lookup(this.value());
          if (outerVar) {
            variable._virtual = true;
            variable._shadowing = outerVar;
            variable = outerVar;
          }
          ;
        }
        ;
        if (variable && variable._initialized || scope.closure() != vscope.closure()) {
          this._variable = variable;
          variable.addReference(this);
          this._value = variable;
          this._token._variable = variable;
          return this;
        }
        ;
      } else if (this.value().symbol() == "self") {
        this._value = scope.context();
        this._isSelf = true;
      } else if (!this._identifier.isCapitalized()) {
        let selfvar = scope.lookup("self");
        let ctx = scope.context();
        if (!selfvar && ctx.isGlobalContext()) {
          this._includeType = true;
        } else {
          this._value = new ImplicitAccess(".", new Self().traverse(), this._value).set({ datatype: this.datatype() });
        }
        ;
      }
      ;
      return this;
    };
    VarOrAccess.prototype.js = function(o) {
      if (this._tagref) {
        return this._tagref.ref();
      }
      ;
      let val = this._variable || this._value;
      if (this._variable && this._variable.declarator() != this) {
        if (STACK.tsc() && val._typedAlias) {
          let out = val._typedAlias.c();
          return out;
        }
        ;
        let typ = this.datatype();
        if (typ) {
          return typ.c() + "(" + this._variable.c() + ")";
        }
        ;
      }
      ;
      return val.c();
    };
    VarOrAccess.prototype.node = function() {
      return this._variable ? this : this.value();
    };
    VarOrAccess.prototype.datatype = function() {
      return VarOrAccess.prototype.__super__.datatype.apply(this, arguments) || this._identifier.datatype();
    };
    VarOrAccess.prototype.symbol = function() {
      return this._identifier.symbol();
    };
    VarOrAccess.prototype.cache = function(o) {
      if (o === void 0)
        o = {};
      return this._variable ? o.force ? VarOrAccess.prototype.__super__.cache.call(this, o) : this : this.value().cache(o);
    };
    VarOrAccess.prototype.decache = function() {
      this._variable ? VarOrAccess.prototype.__super__.decache.call(this) : this.value().decache();
      return this;
    };
    VarOrAccess.prototype.dom = function() {
      return this.value().dom();
    };
    VarOrAccess.prototype.safechain = function() {
      return this._identifier.safechain();
    };
    VarOrAccess.prototype.dump = function() {
      return { loc: this.loc() };
    };
    VarOrAccess.prototype.loc = function() {
      var loc = this._identifier.region();
      return loc || [0, 0];
    };
    VarOrAccess.prototype.region = function() {
      return this._identifier.region();
    };
    VarOrAccess.prototype.shouldParenthesizeInTernary = function() {
      return this._cache || this._value && this._value._cache || this._parens;
    };
    VarOrAccess.prototype.toString = function() {
      return "VarOrAccess(" + this.value() + ")";
    };
    VarOrAccess.prototype.toJSON = function() {
      return { type: this.typeName(), value: this._identifier.toString() };
    };
    function VarReference(value, type) {
      if (value instanceof VarOrAccess) {
        value = value.value();
        this._variable = null;
      } else if (value instanceof Variable) {
        this._variable = value;
        value = "";
      }
      ;
      VarReference.prototype.__super__.constructor.call(this, value);
      this._export = false;
      this._type = type && String(type);
      this._declared = true;
    }
    subclass$(VarReference, ValueNode2);
    exports.VarReference = VarReference;
    VarReference.prototype.variable = function(v) {
      return this._variable;
    };
    VarReference.prototype.setVariable = function(v) {
      this._variable = v;
      return this;
    };
    VarReference.prototype.declared = function(v) {
      return this._declared;
    };
    VarReference.prototype.setDeclared = function(v) {
      this._declared = v;
      return this;
    };
    VarReference.prototype.type = function(v) {
      return this._type;
    };
    VarReference.prototype.setType = function(v) {
      this._type = v;
      return this;
    };
    VarReference.prototype.datatype = function() {
      return VarReference.prototype.__super__.datatype.apply(this, arguments) || (this._value.datatype ? this._value.datatype() : null);
    };
    VarReference.prototype.loc = function() {
      return this._value.region();
    };
    VarReference.prototype.declare = function() {
      return this;
    };
    VarReference.prototype.consume = function(node) {
      this.forceExpression();
      return this;
    };
    VarReference.prototype.forceExpression = function() {
      if (this._expression != true) {
        this._expression = true;
        for (let i = 0, items = iter$(this._variables), len = items.length, variable; i < len; i++) {
          variable = items[i];
          variable._type = "let";
          variable._virtual = true;
          variable.autodeclare();
        }
        ;
      }
      ;
      return this;
    };
    VarReference.prototype.visit = function(stack, state) {
      var self2 = this;
      var vars = [];
      var virtualize = stack;
      let scope = self2.scope__();
      self2._variables = scope.captureVariableDeclarations(function() {
        self2._value.traverse({ declaring: self2._type, variables: vars });
        if (self2._value instanceof Identifier) {
          return self2._value._variable || (self2._value._variable = scope.register(self2._value.symbol(), self2._value, { type: self2._type, datatype: self2.datatype() }));
        }
        ;
      });
      return self2;
    };
    VarReference.prototype.js = function(stack, params) {
      let out = this._value.c();
      let typ = STACK.tsc() && this.datatype();
      if (this._right) {
        let rgt = this._right.c({ expression: true });
        if (typ) {
          rgt = "" + typ.c() + "(" + rgt + ")";
        }
        ;
        out += " = " + rgt;
      }
      ;
      if (this._expression) {
        if (this._value instanceof Obj) {
          out = "(" + out + ")";
        }
        ;
      } else {
        if (STACK.tsc() && this._variables.length > 1 && this._variables.some(function(_0) {
          return _0.vartype();
        })) {
          let kind = this._type;
          let js = "";
          for (let i = 0, items = iter$(this._variables), len = items.length, item; i < len; i++) {
            item = items[i];
            if (item.vartype()) {
              js += item.vartype().c() + " ";
            }
            ;
            js += "" + M2(kind, this._keyword) + " " + item.c() + ";\n";
          }
          ;
          if (this._value instanceof Obj) {
            out = "(" + out + ")";
          }
          ;
          js += "" + out;
          return js;
        }
        ;
        out = "" + this._type + " " + out;
        if (this.option("export")) {
          out = "" + M2("export", this.option("export")) + " " + out;
        }
        ;
        if (!this._right && typ) {
          out = typ.c() + " " + out;
        }
        ;
      }
      ;
      return out;
    };
    function Assign(o, l, r) {
      this._expression = false;
      this._traversed = false;
      this._parens = false;
      this._cache = null;
      this._invert = false;
      this._opToken = o;
      this._op = o && o._value || o;
      this._left = l;
      this._right = r;
      return this;
    }
    subclass$(Assign, Op);
    exports.Assign = Assign;
    Assign.prototype.isExpressable = function() {
      return !this.right() || this.right().isExpressable();
    };
    Assign.prototype.isUsed = function() {
      if (this.up() instanceof Block) {
        return false;
      }
      ;
      return true;
    };
    Assign.prototype.visit = function() {
      var l = this._left;
      var r = this._right;
      if (l instanceof VarOrAccess && r instanceof VarOrAccess && l._identifier.symbol() == r._identifier.symbol()) {
        this._left = l = new Access(".", this.scope__().context(), l._value);
      }
      ;
      if (l instanceof VarReference && r instanceof Lambda) {
        l.traverse();
      }
      ;
      if (r) {
        r.traverse({ assignment: true });
      }
      ;
      if (l) {
        l.traverse();
      }
      ;
      let up = STACK.up();
      if (l instanceof VarReference && !(up instanceof Block) && !(up instanceof Export) && !(up instanceof TagBody)) {
        l.forceExpression();
      }
      ;
      return this;
    };
    Assign.prototype.c = function(o) {
      if (!this.right().isExpressable()) {
        if (this.left() instanceof VarReference && (!(this.right() instanceof Loop) || this._expression)) {
          this.left().forceExpression();
        }
        ;
        return this.right().consume(this).c(o);
      }
      ;
      return Assign.prototype.__super__.c.call(this, o);
    };
    Assign.prototype.js = function(o) {
      var m, typ;
      if (!this.right().isExpressable()) {
        this.p("Assign#js right is not expressable ");
        if (this.left() instanceof VarReference) {
          this.left().forceExpression();
        }
        ;
        return this.right().consume(this).c();
      }
      ;
      if (this._expression) {
        this.left().forceExpression();
      }
      ;
      var l = this.left().node();
      var r = this.right();
      var lc = null;
      if (l instanceof Access && l.left() instanceof Super && false) {
        if (m = STACK.method()) {
          if (m.option("inExtension")) {
            let key = l.right();
            if (key instanceof Identifier) {
              key = key.toStr();
            }
            ;
            let op = CALL(
              OP(".", this.scope__().context(), "super$set"),
              [key, this.right()]
            );
            return op.c({ expression: true });
          }
          ;
        }
        ;
      }
      ;
      if (l instanceof Self) {
        var ctx = this.scope__().context();
        l = ctx.reference();
      }
      ;
      if (l instanceof VarReference) {
        l._right = r;
        return l.c();
      }
      ;
      if (l instanceof Access && l._left._value == "OPS" && STACK.tsc()) {
        lc = "globalThis." + M2(helpers2.toNamespacedIdentifier("OPS", String(l._right)), l._right);
      }
      ;
      lc || (lc = l.c());
      var out = "" + lc + " " + this.op() + " " + this.right().c({ expression: true });
      if (typ = this.datatype() || l && !(l instanceof VarReference) && l.datatype()) {
        out = typ.c() + " " + out;
      }
      ;
      if (l instanceof Obj) {
        out = "(" + out + ")";
      }
      ;
      return out;
    };
    Assign.prototype.shouldParenthesize = function(par) {
      if (par === void 0)
        par = this.up();
      return this._parens || par instanceof Op && par.op() != "=";
    };
    Assign.prototype.consume = function(node) {
      if (node instanceof TagLike) {
        if (this.right() instanceof TagLike) {
          this.right().set({ assign: this.left() });
          return this.right().consume(node);
        } else {
          return this;
        }
        ;
      }
      ;
      if (node instanceof Return && this.left() instanceof VarReference) {
        if (STACK.tsc()) {
          let rgt = this._right;
          let vars = this._left._variables;
          let after = vars[0] ? new VarAccess(vars[0]).consume(node) : node;
          return new Block([this, BR, after]);
        }
        ;
        this.left().forceExpression();
      }
      ;
      if (this.isExpressable()) {
        this.forceExpression();
        return Assign.prototype.__super__.consume.call(this, node);
      }
      ;
      var ast = this.right().consume(this);
      return ast.consume(node);
    };
    function PushAssign() {
      return Assign.apply(this, arguments);
    }
    subclass$(PushAssign, Assign);
    exports.PushAssign = PushAssign;
    PushAssign.prototype.consumed = function(v) {
      return this._consumed;
    };
    PushAssign.prototype.setConsumed = function(v) {
      this._consumed = v;
      return this;
    };
    PushAssign.prototype.register = function(node) {
      this._consumed || (this._consumed = []);
      this._consumed.push(node);
      return this;
    };
    PushAssign.prototype.js = function(o) {
      return "" + this.left().c() + ".push(" + this.right().c() + ")";
    };
    PushAssign.prototype.consume = function(node) {
      return this;
    };
    function TagPushAssign() {
      return PushAssign.apply(this, arguments);
    }
    subclass$(TagPushAssign, PushAssign);
    exports.TagPushAssign = TagPushAssign;
    TagPushAssign.prototype.js = function(o) {
      return "" + this.left().c() + ".push(" + this.right().c() + ")";
    };
    TagPushAssign.prototype.consume = function(node) {
      return this;
    };
    function ConditionalAssign() {
      return Assign.apply(this, arguments);
    }
    subclass$(ConditionalAssign, Assign);
    exports.ConditionalAssign = ConditionalAssign;
    function CompoundAssign() {
      return Assign.apply(this, arguments);
    }
    subclass$(CompoundAssign, Assign);
    exports.CompoundAssign = CompoundAssign;
    CompoundAssign.prototype.consume = function(node) {
      if (this.isExpressable()) {
        return CompoundAssign.prototype.__super__.consume.apply(this, arguments);
      }
      ;
      var ast = this.normalize();
      if (ast != this) {
        return ast.consume(node);
      }
      ;
      ast = this.right().consume(this);
      return ast.consume(node);
    };
    CompoundAssign.prototype.normalize = function() {
      var ln = this.left().node();
      if (!(ln instanceof PropertyAccess)) {
        return this;
      }
      ;
      if (ln.left()) {
        ln.left().cache();
      }
      ;
      var ast = OP("=", this.left(), OP(this.op()[0], this.left(), this.right()));
      if (ast.isExpressable()) {
        ast.toExpression();
      }
      ;
      return ast;
    };
    CompoundAssign.prototype.c = function() {
      var ast = this.normalize();
      if (ast == this) {
        return CompoundAssign.prototype.__super__.c.apply(this, arguments);
      }
      ;
      var up = STACK.current();
      if (up instanceof Block) {
        up.replace(this, ast);
      }
      ;
      return ast.c();
    };
    function TypeAnnotation(value) {
      this._value = value;
      this;
    }
    subclass$(TypeAnnotation, Node2);
    exports.TypeAnnotation = TypeAnnotation;
    TypeAnnotation.prototype.add = function(item) {
      return this._parts.push(item);
    };
    TypeAnnotation.prototype.startLoc = function() {
      return this._value.startLoc() + 1;
    };
    TypeAnnotation.prototype.endLoc = function() {
      return this._value.endLoc();
    };
    TypeAnnotation.prototype.asParam = function(name) {
      return "@param {" + this.asRawType() + "} " + name;
    };
    TypeAnnotation.prototype.asRawType = function() {
      let raw = String(this._value).slice(1);
      raw = raw.replace(/(^|[\[\,])\<([a-z\-\d]+)\>/g, function(m, pre, name) {
        return pre + new TagTypeIdentifier(name).toClassName();
      });
      raw = raw.replace(/(^|[\[\,])self([\]\,\)\>]|$)/g, function(m, pre, post) {
        return pre + "this" + post;
      });
      return M2(raw, this);
    };
    TypeAnnotation.prototype.asIteratorValue = function() {
      return this.wrapDoc(this.asRawType() + "[]");
    };
    TypeAnnotation.prototype.wrapDoc = function(inner) {
      return "/**@type {" + inner + "}*/";
    };
    TypeAnnotation.prototype.c = function() {
      return "/**@type {" + this.asRawType() + "}*/";
    };
    function Identifier(value) {
      if (value instanceof Token2) {
        this._startLoc = value.startLoc();
      }
      ;
      this._value = this.load(value);
      this._symbol = null;
      if (("" + value).indexOf("?") >= 0) {
        this._safechain = true;
      }
      ;
      this;
    }
    subclass$(Identifier, Node2);
    exports.Identifier = Identifier;
    Identifier.prototype.safechain = function(v) {
      return this._safechain;
    };
    Identifier.prototype.setSafechain = function(v) {
      this._safechain = v;
      return this;
    };
    Identifier.prototype.value = function(v) {
      return this._value;
    };
    Identifier.prototype.setValue = function(v) {
      this._value = v;
      return this;
    };
    Identifier.prototype.variable = function(v) {
      return this._variable;
    };
    Identifier.prototype.setVariable = function(v) {
      this._variable = v;
      return this;
    };
    Identifier.prototype.isStatic = function() {
      return true;
    };
    Identifier.prototype.toRaw = function() {
      return this._value._value || this._value;
    };
    Identifier.prototype.add = function(part) {
      return new IdentifierExpression(this).add(part);
    };
    Identifier.prototype.references = function(variable) {
      if (this._value) {
        this._value._variable = variable;
      }
      ;
      return this;
    };
    Identifier.prototype.metaIdentifier = function() {
      return new Identifier("\u03B1\u03B1" + AST.sym(this._value));
    };
    Identifier.prototype.load = function(v) {
      return v instanceof Identifier ? v.value() : v;
    };
    Identifier.prototype.traverse = function() {
      return this;
    };
    Identifier.prototype.visit = function() {
      if (this._value instanceof Node2) {
        this._value.traverse();
      }
      ;
      return this;
    };
    Identifier.prototype.region = function() {
      return [this._value._loc, this._value._loc + this._value._len];
    };
    Identifier.prototype.startLoc = function() {
      return this._startLoc || this._value && this._value.startLoc ? this._value.startLoc() : null;
    };
    Identifier.prototype.endLoc = function() {
      return this._endLoc || this._value && this._value.endLoc ? this._value.endLoc() : null;
    };
    Identifier.prototype.loc = function() {
      return [this.startLoc(), this.endLoc()];
    };
    Identifier.prototype.isValidIdentifier = function() {
      return helpers2.isValidIdentifier(this.symbol());
    };
    Identifier.prototype.isReserved = function() {
      return this._value.reserved || RESERVED_TEST.test(String(this._value));
    };
    Identifier.prototype.isPredicate = function() {
      return /\?$/.test(String(this._value));
    };
    Identifier.prototype.isCapitalized = function() {
      return /^[A-Z]/.test(String(this._value));
    };
    Identifier.prototype.isInternal = function() {
      return /^\$/.test(String(this._value));
    };
    Identifier.prototype.symbol = function() {
      return this._symbol || (this._symbol = AST.sym(this.value()));
    };
    Identifier.prototype.toString = function() {
      return String(this._value);
    };
    Identifier.prototype.toStr = function() {
      return new Str("'" + this.symbol() + "'");
    };
    Identifier.prototype.toAttrString = function() {
      return new Str("'" + String(this._value) + "'");
    };
    Identifier.prototype.toJSON = function() {
      return this.toString();
    };
    Identifier.prototype.alias = function() {
      return AST.sym(this._value);
    };
    Identifier.prototype.js = function(o) {
      return this._variable ? this._variable.c() : this.symbol();
    };
    Identifier.prototype.c = function(o) {
      if (o) {
        if (o.as == "value") {
          return "'" + this.symbol() + "'";
        }
        ;
        if (o.as == "meta") {
          return "'" + this.symbol() + "'";
        }
        ;
        if (o.as == "namespaced" && o.ns) {
          return M2("\u03A3" + o.ns + "\u03A3" + this.symbol(), this._token || this._value);
        }
        ;
        if (o.as == "field" && !this.isValidIdentifier()) {
          return M2("['" + this.symbol() + "']", this._token || this._value);
        }
        ;
        if (o.as == "key" && !this.isValidIdentifier()) {
          return "'" + this.symbol() + "'";
        }
        ;
      }
      ;
      let up = STACK.current();
      if (up instanceof Util && !(up instanceof Util.Iterable) && !(up instanceof Util.Is)) {
        return this.toStr().c();
      }
      ;
      let out = this.js();
      if (OPTS.sourcemap && (!o || o.mark !== false)) {
        out = M2(out, this._token || this._value);
      }
      ;
      return out;
    };
    Identifier.prototype.dump = function() {
      return { loc: this.region() };
    };
    Identifier.prototype.namepath = function() {
      return this.toString();
    };
    Identifier.prototype.shouldParenthesizeInTernary = function() {
      return this._parens || this._cache;
    };
    Identifier.prototype.registerVariable = function(type, scope) {
      if (scope === void 0)
        scope = this.scope__();
      this._variable = scope.register(this.symbol(), this, { type });
      return this;
    };
    Identifier.prototype.resolveVariable = function(scope) {
      if (scope === void 0)
        scope = this.scope__();
      let variable = scope.lookup(this.symbol());
      this._variable = variable;
      return this;
    };
    function DecoratorIdentifier() {
      return Identifier.apply(this, arguments);
    }
    subclass$(DecoratorIdentifier, Identifier);
    exports.DecoratorIdentifier = DecoratorIdentifier;
    DecoratorIdentifier.prototype.symbol = function() {
      return helpers2.toValidIdentifier(String(this._value));
    };
    DecoratorIdentifier.prototype.toString = function() {
      return this.symbol();
    };
    function SymbolIdentifier() {
      return Identifier.apply(this, arguments);
    }
    subclass$(SymbolIdentifier, Identifier);
    exports.SymbolIdentifier = SymbolIdentifier;
    SymbolIdentifier.prototype.c = function(o) {
      if (o === void 0)
        o = {};
      if (STACK.tsc()) {
        return this.variable().c();
      }
      ;
      let out = this.variable().c();
      if (o.as == "field") {
        return "[" + out + "]";
      } else {
        return out;
      }
      ;
    };
    SymbolIdentifier.prototype.variable = function() {
      return this._variable || (this._variable = this.scope__().root().symbolRef(this._value.slice(0)));
    };
    SymbolIdentifier.prototype.metaIdentifier = function() {
      return this.scope__().root().symbolRef("__" + this._value.slice(0));
    };
    SymbolIdentifier.prototype.isConstant = function() {
      return true;
    };
    SymbolIdentifier.prototype.asObjectKey = function() {
      return "[" + this.c() + "]";
    };
    SymbolIdentifier.prototype.toString = function() {
      return this.c();
    };
    SymbolIdentifier.prototype.resolveVariable = function() {
      return this;
    };
    SymbolIdentifier.prototype.registerVariable = function() {
      return this;
    };
    function IdentifierExpression(value) {
      IdentifierExpression.prototype.__super__.constructor.apply(this, arguments);
      this._static = true;
      this._nodes = [this._single = value];
    }
    subclass$(IdentifierExpression, Node2);
    exports.IdentifierExpression = IdentifierExpression;
    IdentifierExpression.prototype.single = function(v) {
      return this._single;
    };
    IdentifierExpression.prototype.setSingle = function(v) {
      this._single = v;
      return this;
    };
    IdentifierExpression.wrap = function(node) {
      return node;
      return node instanceof this ? node : new this(node);
    };
    IdentifierExpression.prototype.add = function(part) {
      this._nodes.push(part);
      this._single = null;
      return this;
    };
    IdentifierExpression.prototype.isPrimitive = function() {
      return this._single && this._single instanceof Token2;
    };
    IdentifierExpression.prototype.isStatic = function() {
      return this.isPrimitive();
    };
    IdentifierExpression.prototype.visit = function() {
      for (let i = 0, items = iter$(this._nodes), len = items.length, node; i < len; i++) {
        node = items[i];
        if (!(node instanceof Node2)) {
          continue;
        }
        ;
        node.traverse();
      }
      ;
      return this;
    };
    IdentifierExpression.prototype.asObjectKey = function() {
      if (this.isPrimitive()) {
        return "" + this._single.c();
      } else if (this._single && !this.option("prefix")) {
        return "[" + this._single.c() + "]";
      } else {
        return "[" + this.asString() + "]";
      }
      ;
    };
    IdentifierExpression.prototype.startLoc = function() {
      var $1;
      let n = this._nodes[0];
      return ($1 = n) && $1.startLoc && $1.startLoc();
    };
    IdentifierExpression.prototype.endLoc = function() {
      var $1;
      let n = this._nodes[this._nodes.length - 1];
      return ($1 = n) && $1.endLoc && $1.endLoc();
    };
    IdentifierExpression.prototype.asIdentifier = function() {
      return this._single && !this.option("prefix") ? "[" + this._single.c() + "]" : "[" + this.asString() + "]";
    };
    IdentifierExpression.prototype.asString = function() {
      let s = "`";
      if (this.option("prefix")) {
        s += this.option("prefix");
      }
      ;
      for (let i = 0, items = iter$(this._nodes), len = items.length, node; i < len; i++) {
        node = items[i];
        if (node instanceof Token2) {
          s += node.value();
        } else {
          s += "${";
          s += node.c();
          s += "}";
        }
        ;
      }
      ;
      s += "`";
      return s;
    };
    IdentifierExpression.prototype.toRaw = function() {
      return this._single ? this._single.c() : "";
    };
    IdentifierExpression.prototype.toString = function() {
      return this.toRaw();
    };
    IdentifierExpression.prototype.js = function(s, o) {
      if (o === void 0)
        o = {};
      if (o.as == "string" || s.parent() instanceof Util) {
        return this.asString();
      } else if (o.as == "key" || this.option("as") == "property") {
        return this.asObjectKey();
      } else if (o.as == "access") {
        return true;
      } else if (this._single && this._single instanceof Node2) {
        return this._single.c(o);
      } else {
        return this.asString();
      }
      ;
    };
    function InterpolatedSymbolIdentifier(pre, value) {
      InterpolatedSymbolIdentifier.prototype.__super__.constructor.call(this, value);
      this._single = null;
      this.set({ prefix: pre._value });
    }
    subclass$(InterpolatedSymbolIdentifier, IdentifierExpression);
    exports.InterpolatedSymbolIdentifier = InterpolatedSymbolIdentifier;
    InterpolatedSymbolIdentifier.prototype.asString = function() {
      return "Symbol.for(" + InterpolatedSymbolIdentifier.prototype.__super__.asString.apply(this, arguments) + ")";
    };
    function MixinIdentifier() {
      return Identifier.apply(this, arguments);
    }
    subclass$(MixinIdentifier, Identifier);
    exports.MixinIdentifier = MixinIdentifier;
    MixinIdentifier.prototype.symbol = function() {
      return "mixin$" + this._value.slice(1);
    };
    MixinIdentifier.prototype.traverse = function(o) {
      if (this._traversed) {
        return this;
      }
      ;
      this._mixin = this.scope__().mixin(this._value.slice(1));
      if (!this._variable) {
        this.resolveVariable();
      }
      ;
      return this._traversed = true;
    };
    MixinIdentifier.prototype.c = function(o) {
      if (o && (o.as == "string" || o.as == "substr")) {
        let flags = this.toFlags().map(function(f) {
          return f instanceof Variable ? "${" + f.c() + "}" : f.raw();
        });
        let out2 = flags.join(" ");
        return o.as == "string" ? "`" + out2 + "`" : out2;
      }
      ;
      let up = STACK.current();
      if (up instanceof Util && !(up instanceof Util.Iterable)) {
        return this.toStr().c();
      }
      ;
      let out = this.js();
      if (OPTS.sourcemap && (!o || o.mark !== false)) {
        out = M2(out, this._token || this._value);
      }
      ;
      return out;
    };
    MixinIdentifier.prototype.toString = function() {
      return this.symbol();
    };
    MixinIdentifier.prototype.toFlagName = function() {
      return this.symbol();
    };
    MixinIdentifier.prototype.toFlags = function() {
      if (this._parts) {
        return this._parts;
      }
      ;
      this.traverse();
      let v = this._variable;
      let parts = [];
      let part = v;
      while (part) {
        if (part._declarator instanceof StyleRuleSet) {
          parts.push(STR(part._declarator._name));
        } else {
          parts.push(part);
        }
        ;
        part = part._parent;
      }
      ;
      return this._parts = parts;
      if (v && v._declarator instanceof StyleRuleSet) {
        return v._declarator._name;
      }
      ;
      return null;
    };
    function Private() {
      return Identifier.apply(this, arguments);
    }
    subclass$(Private, Identifier);
    exports.Private = Private;
    Private.prototype.symbol = function() {
      return this._symbol || (this._symbol = AST.sym("__" + this.value()));
    };
    Private.prototype.add = function(part) {
      return new IdentifierExpression(this.value()).add(part).set({ prefix: "__", private: true });
    };
    function TagIdRef(v) {
      this._value = v instanceof Identifier ? v.value() : v;
      this;
    }
    subclass$(TagIdRef, ValueNode2);
    exports.TagIdRef = TagIdRef;
    TagIdRef.prototype.js = function() {
      return "" + this.scope__().imba().c() + ".getElementById('" + this.value().c() + "')";
    };
    function Ivar(v) {
      this._value = v instanceof Identifier ? v.value() : v;
      this;
    }
    subclass$(Ivar, Identifier);
    exports.Ivar = Ivar;
    Ivar.prototype.name = function() {
      return helpers2.dashToCamelCase(this._value).replace(/^[\#]/, "");
    };
    Ivar.prototype.alias = function() {
      return this.name();
    };
    Ivar.prototype.js = function(o) {
      return this.symbol();
    };
    function Decorator() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(Decorator, ValueNode2);
    exports.Decorator = Decorator;
    Decorator.prototype.name = function() {
      return this._name || (this._name = this._value.js());
    };
    Decorator.prototype.visit = function() {
      var block;
      this._variable = this.scope__().lookup(this.name());
      this._value._variable || (this._value._variable = this._variable);
      if (!this._variable) {
        this._value = this.runtime()[this.name()];
      }
      ;
      if (this._call) {
        this._call.traverse();
      }
      ;
      if (this.option("params")) {
        this._params = this.option("params");
        this._params.traverse();
      }
      ;
      if (block = this.up()) {
        block._decorators || (block._decorators = []);
        return block._decorators.push(this);
      }
      ;
    };
    Decorator.prototype.tscGetter = function(name, content) {
      if (content === void 0)
        content = null;
      let out = this._value.c();
      if (this._params) {
        out += "(" + this._params.c({ expression: true }) + ")";
      } else {
        out += "()";
      }
      ;
      if (content) {
        out += ".wrap(" + content + ")";
      }
      ;
      return out;
    };
    Decorator.prototype.c = function() {
      if (STACK.current() instanceof ClassBody) {
        return;
      }
      ;
      let out = this._value.c();
      if (this._params) {
        out += ".bind([" + this._params.c({ expression: true }) + "])";
      } else {
        out += ".bind([])";
      }
      ;
      return out;
    };
    function DescriptorPart(value, owner) {
      this._name = value;
    }
    subclass$(DescriptorPart, Node2);
    exports.DescriptorPart = DescriptorPart;
    DescriptorPart.prototype.params = function(v) {
      return this._params;
    };
    DescriptorPart.prototype.setParams = function(v) {
      this._params = v;
      return this;
    };
    DescriptorPart.prototype.value = function(v) {
      return this._value;
    };
    DescriptorPart.prototype.setValue = function(v) {
      this._value = v;
      return this;
    };
    DescriptorPart.prototype.context = function(v) {
      return this._context;
    };
    DescriptorPart.prototype.setContext = function(v) {
      this._context = v;
      return this;
    };
    DescriptorPart.prototype.visit = function(stack) {
      if (this.params()) {
        this.params().traverse();
      }
      ;
      if (this.value()) {
        this.value().traverse();
      }
      ;
      return this;
    };
    DescriptorPart.prototype.js = function() {
      if (this.context()) {
        let op = OP(".", this.context(), this._name);
        let path = op;
        if (this.value()) {
          return OP("=", path, this.value()).c();
        }
        ;
        let fn = OP("isa", path, LIT("Function"));
        let pars = this.params() || (this.value() ? [this.value()] : []);
        let val = this.params() && this.params().first() || this.value() || TRUE;
        let call = CALL(path, pars);
        let setter = OP("=", path, val);
        if (STACK.tsc()) {
          if (pars.length == 0) {
            pars.push(LIT("true"));
          }
          ;
          return call.c();
        }
        ;
        return IF(fn, call, setter).c();
      }
      ;
    };
    function Descriptor(value, owner) {
      if (value instanceof Token2) {
        this._name = this._value = new DecoratorIdentifier(value);
      } else {
        this._value = value;
        this._value._parens = true;
      }
      ;
      this._chain = [];
      this._special = false;
      this._params = null;
      this;
    }
    subclass$(Descriptor, Node2);
    exports.Descriptor = Descriptor;
    Descriptor.prototype.name = function(v) {
      return this._name;
    };
    Descriptor.prototype.setName = function(v) {
      this._name = v;
      return this;
    };
    Descriptor.prototype.value = function(v) {
      return this._value;
    };
    Descriptor.prototype.setValue = function(v) {
      this._value = v;
      return this;
    };
    Descriptor.prototype.params = function(v) {
      return this._params;
    };
    Descriptor.prototype.setParams = function(v) {
      this._params = v;
      return this;
    };
    Descriptor.prototype.isSpecial = function() {
      return this._special;
    };
    Descriptor.prototype.visit = function(stack) {
      let pre = stack._descriptor;
      stack._descriptor = this;
      if (this._name) {
        this._variable = this.scope__().lookup(this._name.js());
        this._value._variable || (this._value._variable = this._variable);
        if (!this._variable) {
          this._value = OP(".", THIS, this._name);
        }
        ;
      } else {
        if (this._value) {
          this._value.traverse();
        }
        ;
      }
      ;
      if (this._params) {
        this._params.traverse();
      }
      ;
      this._chain.map(function(v) {
        return v.traverse();
      });
      if (this._callback = this.option("callback")) {
        this._callback.traverse();
      }
      ;
      if (this.option("default")) {
        this._default = this.option("default");
        if (this._default instanceof Literal) {
          this._literal = this._default;
        }
        ;
        if (!(this._default instanceof Func)) {
          this._default = new Func([], [this._default], null, {});
        }
        ;
        this._default.traverse();
      }
      ;
      return stack._descriptor = pre;
    };
    Descriptor.prototype.valueIsStatic = function() {
      return !this.value() || this.value().isPrimitive() || this.value() instanceof Func && !this.value().nonlocals();
    };
    Descriptor.prototype.isStatic = function() {
      return this.valueIsStatic();
    };
    Descriptor.prototype.isProxy = function() {
      return false;
    };
    Descriptor.prototype.add = function(item, type) {
      if (item instanceof ArgList) {
        if (item._generated) {
          let part = new DescriptorPart(KEY("callback"));
          part.setParams(item);
          this._chain.push(this._last = part);
        } else {
          if (type == "=") {
            (this._last || this).setValue(item._nodes[0]);
          } else {
            (this._last || this).setParams(item || new ListNode([]));
          }
          ;
        }
        ;
      } else {
        this._chain.push(this._last = new DescriptorPart(item));
      }
      ;
      return this;
    };
    Descriptor.prototype.js = function() {
      let ref = this.scope__().root().declare("desc", null, { system: true });
      let val = this._variable ? new Instantiation(CALL(this._value, this.params() || [])) : this._name ? CALL(this._value, this.params() || []) : this._value;
      let parts = AST.blk([]);
      for (let i = 0, items = iter$(this._chain), len = items.length, item; i < len; i++) {
        item = items[i];
        item.setContext(ref);
        parts.push(item);
      }
      ;
      if (this._default) {
        parts.add(LIT("" + ref.c() + ".default = " + this._default.c()));
      }
      ;
      if (this._literal) {
        parts.add(LIT("" + ref.c() + ".default.literal = " + this._literal.c()));
      }
      ;
      if (this._callback) {
        parts.add(LIT("" + ref.c() + ".callback = " + this._callback.c()));
      }
      ;
      if (STACK.tsc()) {
        parts.add(LIT("$" + ref.c()));
        return "((self,$" + ref.c() + "=" + val.c({ mark: true }) + "," + ref.c() + "=imba.descriptor($" + ref.c() + "))=>(" + parts.c() + "))(this)";
      }
      ;
      parts.add(ref);
      parts.unshift(OP("=", ref, val));
      return "(" + parts.c({ expression: true }) + ")";
    };
    function Const() {
      return Identifier.apply(this, arguments);
    }
    subclass$(Const, Identifier);
    exports.Const = Const;
    Const.prototype.symbol = function() {
      return this._symbol || (this._symbol = AST.sym(this.value()));
    };
    Const.prototype.js = function(o) {
      return this._variable ? this._variable.c() : this.symbol();
    };
    Const.prototype.traverse = function() {
      if (this._traversed) {
        return this;
      }
      ;
      this._traversed = true;
      var curr = STACK.current();
      if (!(curr instanceof Access) || curr.left() == this) {
        if (this.symbol() == "Imba") {
          this._variable = this.scope__().imba();
        } else {
          this._variable = this.scope__().lookup(this.value());
        }
        ;
      }
      ;
      return this;
    };
    Const.prototype.c = function() {
      if (this.option("export")) {
        return "exports." + this._value + " = " + this.js();
      } else {
        return Const.prototype.__super__.c.apply(this, arguments);
      }
      ;
    };
    function TagTypeIdentifier(value) {
      this._token = value;
      this._value = this.load(value);
      this;
    }
    subclass$(TagTypeIdentifier, Identifier);
    exports.TagTypeIdentifier = TagTypeIdentifier;
    TagTypeIdentifier.prototype.name = function(v) {
      return this._name;
    };
    TagTypeIdentifier.prototype.setName = function(v) {
      this._name = v;
      return this;
    };
    TagTypeIdentifier.prototype.ns = function(v) {
      return this._ns;
    };
    TagTypeIdentifier.prototype.setNs = function(v) {
      this._ns = v;
      return this;
    };
    TagTypeIdentifier.prototype.startLoc = function() {
      return this._token && this._token.startLoc && this._token.startLoc();
    };
    TagTypeIdentifier.prototype.endLoc = function() {
      return this._token && this._token.endLoc && this._token.endLoc();
    };
    TagTypeIdentifier.prototype.toFunctionalType = function() {
      let sym = new Identifier(this._token);
      if (!this.isClass()) {
        sym = new VarOrAccess(sym);
      }
      ;
      return sym;
    };
    TagTypeIdentifier.prototype.load = function(val) {
      this._str = "" + val;
      var parts = this._str.split(":");
      this._raw = val;
      this._name = parts.pop();
      this._ns = parts.shift();
      return this._str;
    };
    TagTypeIdentifier.prototype.traverse = function(o) {
      if (this._traversed) {
        return this;
      }
      ;
      this._traversed = true;
      if (this.isClass()) {
        if (o && o.declaring) {
          this.registerVariable("const", o.declscope || STACK.scope());
          if (this._variable) {
            this._variable.setValue(o.declaring);
          }
          ;
        } else {
          this.resolveVariable();
        }
        ;
      }
      ;
      return this;
    };
    TagTypeIdentifier.prototype.js = function(o) {
      return "'" + this.toNodeName() + "'";
    };
    TagTypeIdentifier.prototype.c = function() {
      return this.js();
    };
    TagTypeIdentifier.prototype.func = function() {
      var name = this._name.replace(/-/g, "_").replace(/\#/, "");
      if (this._ns) {
        name += "$" + this._ns.toLowerCase();
      }
      ;
      return name;
    };
    TagTypeIdentifier.prototype.nativeCreateNode = function() {
      let doc = this.scope__().root().document().c();
      if (this.isSVG()) {
        return CALL(LIT("" + doc + ".createElementNS"), [STR("http://www.w3.org/2000/svg"), STR(this.name())]);
      } else {
        return CALL(LIT("" + doc + ".createElement"), [STR(this.name())]);
      }
      ;
    };
    TagTypeIdentifier.prototype.isClass = function() {
      return !!this._str.match(/^[A-Z]/);
    };
    TagTypeIdentifier.prototype.isLowerCase = function() {
      return !this._name.match(/^[A-Z]/);
    };
    TagTypeIdentifier.prototype.isNative = function() {
      return !this._ns && TAG_TYPES.HTML.indexOf(this._str) >= 0;
    };
    TagTypeIdentifier.prototype.isNativeHTML = function() {
      return (!this._ns || this._ns == "html") && TAG_TYPES.HTML.indexOf(this._name) >= 0;
    };
    TagTypeIdentifier.prototype.isNativeSVG = function() {
      return this._ns == "svg" && TAG_TYPES.SVG.indexOf(this._str) >= 0;
    };
    TagTypeIdentifier.prototype.isSVG = function() {
      return this._ns == "svg" || !this.isNative() && !this._ns && TAG_NAMES2["svg_" + this._str];
    };
    TagTypeIdentifier.prototype.isAsset = function() {
      return false;
    };
    TagTypeIdentifier.prototype.toAssetName = function() {
      return this.isAsset() ? this._str : null;
    };
    TagTypeIdentifier.prototype.symbol = function() {
      return this._str;
    };
    TagTypeIdentifier.prototype.isCustom = function() {
      return !this.isNative() && !this.isNativeSVG();
    };
    TagTypeIdentifier.prototype.isComponent = function() {
      return !this.isNative() && !this.isNativeSVG();
    };
    TagTypeIdentifier.prototype.toSelector = function() {
      return this.toNodeName();
    };
    TagTypeIdentifier.prototype.resolveVariable = function(scope) {
      if (scope === void 0)
        scope = this.scope__();
      let variable = this.scope__().lookup(this._str);
      this._variable = variable;
      return this;
    };
    TagTypeIdentifier.prototype.toVarPrefix = function() {
      let str = this._str;
      return str.replace(/[\:\-]/g, "");
    };
    TagTypeIdentifier.prototype.toExtensionName = function() {
      return "\u0393" + helpers2.toValidIdentifier(this._str);
    };
    TagTypeIdentifier.prototype.toClassName = function() {
      let str = this._str;
      if (str == "element") {
        return "Element";
      } else if (str == "component") {
        return "imba.Component";
      } else if (str == "svg:element") {
        return "SVGElement";
      } else if (str == "htmlelement") {
        return "HTMLElement";
      } else if (str == "fragment") {
        return "DocumentFragment";
      }
      ;
      let match = TAG_NAMES2[this.isSVG() ? "svg_" + this._name : this._name];
      if (match) {
        return match.name;
      }
      ;
      if (this._str == "fragment") {
        return "DocumentFragment";
      } else if (this.isClass()) {
        return this._str;
      } else if (STACK.tsc()) {
        return "\u0393" + helpers2.toValidIdentifier(this._str);
        return helpers2.pascalCase(this._str + "-custom-element");
        return this._str.replace(/\-/g, "_") + "$$TAG$$";
      } else {
        return helpers2.pascalCase(this._str + "-component");
      }
      ;
    };
    TagTypeIdentifier.prototype.toTscName = function() {
      return this._str.replace(/\-/g, "_") + "$$TAG$$";
    };
    TagTypeIdentifier.prototype.sourceId = function() {
      return this._sourceId || (this._sourceId = STACK.sourceId() + "-" + STACK.generateId("tag"));
    };
    TagTypeIdentifier.prototype.toNodeName = function() {
      if (this.isClass()) {
        return this._nodeName || (this._nodeName = helpers2.dasherize(this._str + "-" + this.sourceId()));
      } else {
        return this._str;
      }
      ;
    };
    TagTypeIdentifier.prototype.toTypeArgument = function() {
      if (this._variable) {
        return this._variable.c();
      } else {
        return this.name();
      }
      ;
    };
    TagTypeIdentifier.prototype.id = function() {
      var m = this._str.match(/\#([\w\-\d\_]+)\b/);
      return m ? m[1] : null;
    };
    TagTypeIdentifier.prototype.flag = function() {
      return "_" + this.name().replace(/--/g, "_").toLowerCase();
    };
    TagTypeIdentifier.prototype.sel = function() {
      return "." + this.flag();
    };
    TagTypeIdentifier.prototype.string = function() {
      return this.value();
    };
    TagTypeIdentifier.prototype.toString = function() {
      return this.value();
    };
    function InterpolatedIdentifier() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(InterpolatedIdentifier, ValueNode2);
    exports.InterpolatedIdentifier = InterpolatedIdentifier;
    InterpolatedIdentifier.prototype.js = function() {
      return "[" + this.value().c() + "]";
    };
    function Argvar() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(Argvar, ValueNode2);
    exports.Argvar = Argvar;
    Argvar.prototype.c = function() {
      var v = parseInt(String(this.value()));
      var out = "arguments";
      if (v > 0) {
        var s = this.scope__();
        var par = s.params().at(v - 1, true);
        out = "" + AST.c(par.name());
      }
      ;
      return M2(out, this._token || this._value);
    };
    function DoPlaceholder() {
      return Node2.apply(this, arguments);
    }
    subclass$(DoPlaceholder, Node2);
    exports.DoPlaceholder = DoPlaceholder;
    function AmperRef() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(AmperRef, ValueNode2);
    exports.AmperRef = AmperRef;
    AmperRef.prototype.visit = function(stack) {
      var v_;
      let blk = stack.up(function(v) {
        return v instanceof ArgList || v instanceof Block || v instanceof AmperFunc || v instanceof Return || v instanceof TagAttr;
      });
      let base = stack.relative(blk, 1);
      let inner = stack.relative(base, 1);
      if (base instanceof Assign && stack._nodes.indexOf(base.left()) == -1) {
        if (!(base.right() instanceof AmperFunc)) {
          let rgt = base.right();
          let wrapper = (base.setRight(v_ = new AmperFunc([], rgt)), v_);
        }
        ;
        return this;
      }
      ;
      if (!(base instanceof AmperFunc)) {
        let wrapper = new AmperFunc([], base);
        blk.replace(base, wrapper);
      }
      ;
      return this;
    };
    AmperRef.prototype.c = function() {
      return "v$";
    };
    function TaggedTemplate(value, string2) {
      this._value = value;
      this._string = string2;
    }
    subclass$(TaggedTemplate, Node2);
    exports.TaggedTemplate = TaggedTemplate;
    TaggedTemplate.prototype.value = function(v) {
      return this._value;
    };
    TaggedTemplate.prototype.setValue = function(v) {
      this._value = v;
      return this;
    };
    TaggedTemplate.prototype.string = function(v) {
      return this._string;
    };
    TaggedTemplate.prototype.setString = function(v) {
      this._string = v;
      return this;
    };
    TaggedTemplate.prototype.visit = function() {
      if (this._value instanceof Node2) {
        this._value.traverse();
      }
      ;
      this._string.traverse();
      if (!this._string.isTemplate()) {
        this._string.warn("Only `` strings allowed in template literals");
      }
      ;
      return this;
    };
    TaggedTemplate.prototype.js = function() {
      return this._value.c() + this._string.c({ as: "template" });
    };
    function Call(callee, args, opexists) {
      this._traversed = false;
      this._expression = false;
      this._parens = false;
      this._cache = null;
      this._receiver = null;
      this._opexists = opexists;
      if (callee instanceof BangCall) {
        callee = callee._callee;
      }
      ;
      if (callee instanceof Super) {
        callee.setArgs(this instanceof BangCall ? [] : args);
        return callee;
      }
      ;
      if (callee instanceof VarOrAccess) {
        var str = callee.value().symbol();
        if (str == "extern") {
          callee.value().value()._type = "EXTERN";
          return new ExternDeclaration(args);
        }
        ;
        if (str == "tag") {
          return new TagWrapper(args && args.index ? args.index(0) : args[0]);
        }
        ;
        if (str == "export") {
          return new Export(args);
        }
        ;
        if (str == "rescue") {
          return new RescueFunc([], args);
        }
        ;
      }
      ;
      this._callee = callee;
      this._args = args || new ArgList([]);
      if (args instanceof Array) {
        this._args = new ArgList(args);
      }
      ;
      if (callee instanceof Decorator) {
        callee._call = this;
        return callee;
      }
      ;
      return this;
    }
    subclass$(Call, Node2);
    exports.Call = Call;
    Call.prototype.callee = function(v) {
      return this._callee;
    };
    Call.prototype.setCallee = function(v) {
      this._callee = v;
      return this;
    };
    Call.prototype.receiver = function(v) {
      return this._receiver;
    };
    Call.prototype.setReceiver = function(v) {
      this._receiver = v;
      return this;
    };
    Call.prototype.args = function(v) {
      return this._args;
    };
    Call.prototype.setArgs = function(v) {
      this._args = v;
      return this;
    };
    Call.prototype.block = function(v) {
      return this._block;
    };
    Call.prototype.setBlock = function(v) {
      this._block = v;
      return this;
    };
    Call.prototype.visit = function() {
      this.args().traverse();
      this.callee().traverse();
      let runref = this.callee().isRuntimeReference();
      if (this.callee() instanceof Access && this.callee().left().isGlobal("import")) {
        let arg = this.args().first();
        let kind = this.callee().right().toString();
        if (arg instanceof Str) {
          if (STACK.tsc() && false) {
            true;
            this.setCallee(this.callee().left());
          } else {
            this.setCallee(LIT(""));
            let asset = STACK.root().registerAsset(arg.raw(), "" + kind, this, arg);
            this.args().replace(arg, asset.ref);
          }
          ;
        }
        ;
      } else if (this.callee().isGlobal("import")) {
        let arg = this.args().first();
        let path = arg instanceof Str && arg.raw();
        if (path) {
          let ext = path.split(".").pop();
          if (EXT_LOADER_MAP[ext] || path.indexOf("?") >= 0) {
            this._asset = STACK.root().registerAsset(path, "", this, arg);
            this.args().replace(arg, this._asset.ref);
          }
          ;
        }
        ;
      } else if (this.callee().isGlobal("require")) {
        let arg = this.args().first();
        let path = arg instanceof Str && arg.raw();
      }
      ;
      if (runref == "asset") {
        let arg = this.args().first();
        if (arg instanceof Str) {
          let asset = STACK.root().registerAsset(arg.raw(), "asset", this);
          this.args().replace(arg, asset.ref);
        }
        ;
      }
      ;
      this._block && this._block.traverse();
      if (this instanceof BangCall && this._args.count() == 0 && this.option("keyword")) {
        let bang = this.option("keyword");
        this._args.setEnds(bang, bang);
      }
      ;
      return this;
    };
    Call.prototype.addBlock = function(block) {
      var pos = this._args.filter(function(n, i) {
        return n instanceof DoPlaceholder;
      })[0];
      pos ? this.args().replace(pos, block) : this.args().push(block);
      return this;
    };
    Call.prototype.receiver = function() {
      return this._receiver || (this._receiver = this.callee() instanceof Access && this.callee().left() || NULL);
    };
    Call.prototype.safechain = function() {
      return this.callee().safechain();
    };
    Call.prototype.shouldParenthesizeInTernary = function() {
      return this._parens || this.safechain() || this._cache;
    };
    Call.prototype.startLoc = function() {
      return this._startLoc || this._callee && this._callee.startLoc ? this._callee.startLoc() : 0;
    };
    Call.prototype.endLoc = function() {
      return this._endLoc || this._args && this._args.endLoc() || this._callee.endLoc();
    };
    Call.prototype.js = function(o) {
      var m, ary;
      if (this._asset) {
        return this._asset.ref.c();
      }
      ;
      var opt = { expression: true };
      var rec = null;
      var args = this.args();
      var splat = args.some(function(v) {
        return v instanceof Splat;
      });
      var out = null;
      var lft = null;
      var rgt = null;
      var wrap = null;
      var callee = this._callee = this._callee.node();
      if (callee instanceof Access) {
        lft = callee.left();
        rgt = callee.right();
      }
      ;
      if (callee instanceof Super) {
        if (m = STACK.method()) {
          if (m.option("inExtension")) {
            callee = OP(".", callee, m.name());
            this._receiver = this.scope__().context();
          }
          ;
        }
        ;
        this;
      }
      ;
      if (callee instanceof PropertyAccess) {
        this._receiver = callee.receiver();
        callee = this._callee = new Access(callee.op(), callee.left(), callee.right());
      }
      ;
      if (rgt instanceof Identifier && rgt.value() == "assert" && !splat && false) {
        let arg = args.first();
        arg.option("assertion", true);
        args._nodes[0] = new AssertionNode(arg);
      }
      ;
      if (callee instanceof Identifier && callee.value() == "L") {
        let dim = "\x1B[90m";
        let bgBlue = "\x1B[44m";
        let bgGreen = "\x1B[42m";
        let bgGrey = "\x1B[100m";
        let bgBlack = "\x1B[40m";
        let white = "\x1B[97m";
        let green = "\x1B[32m";
        let black = "\x1B[30m";
        let reset = "\x1B[0m";
        callee = LIT("console.log");
        let src = STACK.SOURCECODE;
        let fmts = ["%s"];
        let result = [LIT("'" + dim + "::" + reset + "'")];
        for (let i = 0, items = iter$(args), len = items.length, arg; i < len; i++) {
          arg = items[i];
          var ary = iter$(arg.loc());
          let start = ary[0], end = ary[1];
          let s = src.slice(start, end).replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/'/g, "\\'").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
          if (arg instanceof Literal && !(arg instanceof Self || arg instanceof This || arg instanceof Arr)) {
            fmts.push("%s");
            result.push(LIT("'" + bgBlack + green + s + reset + "'"));
          } else {
            fmts.push("%s");
            const formatter = STACK.isWeb() ? "%o" : "%O";
            fmts.push(formatter);
            result.push(LIT("'" + bgBlue + white + s + reset + "'"));
            result.push(arg);
          }
          ;
        }
        ;
        args = new ArgList([].concat(['"' + fmts.join(" ") + '"'], Array.from(result)));
      }
      ;
      let safeop = "";
      if (callee instanceof Access && callee.op() == "?.") {
        safeop = "?.";
      }
      ;
      if (this._receiver) {
        if (!(this._receiver instanceof ScopeContext)) {
          this._receiver.cache();
        }
        ;
        args.unshift(this.receiver());
        out = "" + callee.c({ expression: true }) + ".call(" + args.c({ expression: true, mark: false }) + ")";
      } else {
        let outargs = "(" + args.c({ expression: true, mark: false }) + ")";
        out = "" + callee.c({ expression: true }) + safeop + M2(outargs, this._args);
      }
      ;
      if (wrap) {
        if (this._cache) {
          this._cache.manual = true;
          out = "(" + this.cachevar().c() + "=" + out + ")";
        }
        ;
        out = [wrap[0], out, wrap[1]].join("");
      }
      ;
      return out;
    };
    function BangCall() {
      return Call.apply(this, arguments);
    }
    subclass$(BangCall, Call);
    exports.BangCall = BangCall;
    function Instantiation() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(Instantiation, ValueNode2);
    exports.Instantiation = Instantiation;
    Instantiation.for = function(value, keyword) {
      if (value instanceof Tag) {
        return value.set({ unmemoized: keyword });
      } else {
        return new this(value).set({ keyword });
      }
      ;
    };
    Instantiation.prototype.js = function(o) {
      return "" + M2("new", this.keyword()) + " " + this.value().c();
    };
    function New() {
      return Call.apply(this, arguments);
    }
    subclass$(New, Call);
    exports.New = New;
    New.prototype.visit = function() {
      this.keyword().warn("Value.new is deprecated - use new Value");
      return New.prototype.__super__.visit.apply(this, arguments);
    };
    New.prototype.js = function(o) {
      var target = this.callee();
      while (target instanceof Access) {
        let left = target.left();
        if (left instanceof PropertyAccess || left instanceof VarOrAccess) {
          this.callee()._parens = true;
          break;
        }
        ;
        target = left;
      }
      ;
      var out = "" + M2("new", this.keyword()) + " " + M2(this.callee().c(), this.callee());
      if (!(o.parent() instanceof Call || o.parent() instanceof BangCall)) {
        out += "()";
      }
      ;
      return out;
    };
    function ExternDeclaration() {
      return ListNode.apply(this, arguments);
    }
    subclass$(ExternDeclaration, ListNode);
    exports.ExternDeclaration = ExternDeclaration;
    ExternDeclaration.prototype.visit = function() {
      this.setNodes(this.map(function(item) {
        return item.node();
      }));
      var root = this.scope__();
      for (let i = 0, items = iter$(this.nodes()), len = items.length, item; i < len; i++) {
        item = items[i];
        var variable = root.register(item.symbol(), item, { type: "global" });
        variable.addReference(item);
      }
      ;
      return this;
    };
    ExternDeclaration.prototype.c = function() {
      return "// externs";
    };
    function ControlFlow() {
      return Node2.apply(this, arguments);
    }
    subclass$(ControlFlow, Node2);
    exports.ControlFlow = ControlFlow;
    ControlFlow.prototype.loc = function() {
      return this._body ? this._body.loc() : [0, 0];
    };
    function ControlFlowStatement() {
      return ControlFlow.apply(this, arguments);
    }
    subclass$(ControlFlowStatement, ControlFlow);
    exports.ControlFlowStatement = ControlFlowStatement;
    ControlFlowStatement.prototype.isExpressable = function() {
      return false;
    };
    function If(cond, body, o) {
      if (o === void 0)
        o = {};
      this.setup();
      this._test = cond;
      this._body = body;
      this._alt = null;
      this._type = o.type;
      if (this._type == "unless")
        this.invert();
      this._scope = new IfScope(this);
      this;
    }
    subclass$(If, ControlFlow);
    exports.If = If;
    If.prototype.test = function(v) {
      return this._test;
    };
    If.prototype.setTest = function(v) {
      this._test = v;
      return this;
    };
    If.prototype.body = function(v) {
      return this._body;
    };
    If.prototype.setBody = function(v) {
      this._body = v;
      return this;
    };
    If.prototype.alt = function(v) {
      return this._alt;
    };
    If.prototype.setAlt = function(v) {
      this._alt = v;
      return this;
    };
    If.prototype.scope = function(v) {
      return this._scope;
    };
    If.prototype.setScope = function(v) {
      this._scope = v;
      return this;
    };
    If.prototype.prevIf = function(v) {
      return this._prevIf;
    };
    If.prototype.setPrevIf = function(v) {
      this._prevIf = v;
      return this;
    };
    If.ternary = function(cond, body, alt) {
      var obj = new If(cond, new Block([body]), { type: "?" });
      obj.addElse(new Block([alt]));
      return obj;
    };
    If.prototype.addElse = function(add) {
      if (this.alt() && this.alt() instanceof If) {
        this.alt().addElse(add);
      } else {
        this.setAlt(add);
        if (add instanceof If) {
          add.setPrevIf(this);
        }
        ;
      }
      ;
      return this;
    };
    If.prototype.loc = function() {
      return this._loc || (this._loc = [this._type ? this._type._loc : 0, this.body().loc()[1]]);
    };
    If.prototype.invert = function() {
      if (this._test instanceof ComparisonOp) {
        return this._test = this._test.invert();
      } else {
        return this._test = new UnaryOp("!", this._test, null);
      }
      ;
    };
    If.prototype.visit = function(stack) {
      var alt = this.alt();
      var scop = this._scope;
      if (scop) {
        scop.visit();
      }
      ;
      if (this.test()) {
        this._scope = null;
        this.test().traverse();
        this._scope = scop;
      }
      ;
      this._tag = stack._tag;
      for (let o = this._scope.varmap(), variable, i = 0, keys = Object.keys(o), l = keys.length, name; i < l; i++) {
        name = keys[i];
        variable = o[name];
        if (variable.type() == "let") {
          variable._virtual = true;
          variable.autodeclare();
        }
        ;
      }
      ;
      if (!stack.isAnalyzing() && !stack.tsc()) {
        this._pretest = AST.truthy(this.test());
        if (this._pretest === true) {
          alt = this._alt = null;
          if (this.test() instanceof EnvFlag) {
            this._preunwrap = true;
          }
          ;
        } else if (this._pretest === false) {
          this.loc();
          this.setBody(null);
        }
        ;
      }
      ;
      if (this.body()) {
        this.body().traverse();
      }
      ;
      if (alt) {
        STACK.pop(this);
        alt._scope || (alt._scope = new BlockScope(alt));
        alt.traverse();
        STACK.push(this);
      }
      ;
      if (this._type == "?" && this.isExpressable())
        this.toExpression();
      return this;
    };
    If.prototype.js = function(o) {
      var v_, test_;
      var body = this.body();
      var brace = { braces: true, indent: true };
      if (this._pretest === true && this._preunwrap) {
        let js = body ? body.c({ braces: !!this.prevIf() }) : "true";
        if (!this.prevIf()) {
          js = helpers2.normalizeIndentation(js);
        }
        ;
        if (o.isExpression()) {
          js = "(" + js + ")";
        }
        ;
        return js;
      } else if (this._pretest === false && false) {
        if (this.alt() instanceof If) {
          this.alt().setPrevIf(v_ = this.prevIf()), v_;
        }
        ;
        let js = this.alt() ? this.alt().c({ braces: !!this.prevIf() }) : "";
        if (!this.prevIf()) {
          js = helpers2.normalizeIndentation(js);
        }
        ;
        return js;
      }
      ;
      if (o.isExpression()) {
        if ((test_ = this.test()) && test_.shouldParenthesizeInTernary && test_.shouldParenthesizeInTernary()) {
          this.test()._parens = true;
        }
        ;
        var cond = this.test().c({ expression: true });
        var code = body ? body.c() : "true";
        if (body && body.shouldParenthesizeInTernary()) {
          code = "(" + code + ")";
        }
        ;
        if (this.alt()) {
          var altbody = this.alt().c();
          if (this.alt().shouldParenthesizeInTernary()) {
            altbody = "(" + altbody + ")";
          }
          ;
          return "" + cond + " ? " + code + " : " + altbody;
        } else {
          if (this._tag) {
            return "" + cond + " ? " + code + " : void(0)";
          } else {
            return "" + cond + " && " + code;
          }
          ;
        }
        ;
      } else {
        code = null;
        cond = this.test().c({ expression: true });
        if (body instanceof Block && body.count() == 1 && !(body.first() instanceof LoopFlowStatement)) {
          body = body.first();
        }
        ;
        code = body ? body.c({ braces: true }) : "{}";
        var out = "" + M2("if", this._type) + " (" + cond + ") " + code;
        if (this.alt()) {
          out += " else " + this.alt().c(this.alt() instanceof If ? {} : brace);
        }
        ;
        return out;
      }
      ;
    };
    If.prototype.shouldParenthesize = function() {
      return !!this._parens;
    };
    If.prototype.consume = function(node) {
      if (node instanceof TagLike) {
        node.flag(F.TAG_HAS_BRANCHES);
        if (node.body() == this) {
          let branches = this._body ? [this._body] : [];
          let alt = this._alt;
          while (alt instanceof If) {
            if (alt._body) {
              branches.push(alt._body);
            }
            ;
            alt = alt._alt;
          }
          ;
          if (alt) {
            branches.push(alt);
          }
          ;
          for (let i = 0, items = iter$(branches), len = items.length; i < len; i++) {
            node._branches.push([]);
            items[i].consume(node);
          }
          ;
          return this;
        }
        ;
        if (node instanceof TagLoopFragment) {
          if (this._body) {
            this._body = this._body.consume(node);
          }
          ;
          if (this._alt) {
            this._alt = this._alt.consume(node);
          }
          ;
          return this;
        } else {
          return node.register(this);
        }
        ;
        return this;
      }
      ;
      if (node instanceof TagPushAssign || node instanceof TagFragment) {
        node.register(this);
        if (this._body) {
          this._body = this._body.consume(node);
        }
        ;
        if (this._alt) {
          this._alt = this._alt.consume(node);
        }
        ;
        return this;
      }
      ;
      var isRet = node instanceof Return;
      if (this._expression || (!isRet || this._type == "?") && this.isExpressable()) {
        this.toExpression();
        return If.prototype.__super__.consume.call(this, node);
      } else {
        if (this._body) {
          this._body = this._body.consume(node);
        }
        ;
        if (this._alt) {
          this._alt = this._alt.consume(node);
        }
        ;
      }
      ;
      return this;
    };
    If.prototype.isExpressable = function() {
      var exp = (!this.body() || this.body().isExpressable()) && (!this.alt() || this.alt().isExpressable());
      return exp;
    };
    function Loop(options) {
      if (options === void 0)
        options = {};
      this._traversed = false;
      this._options = options;
      this._body = null;
      this;
    }
    subclass$(Loop, Statement);
    exports.Loop = Loop;
    Loop.prototype.scope = function(v) {
      return this._scope;
    };
    Loop.prototype.setScope = function(v) {
      this._scope = v;
      return this;
    };
    Loop.prototype.options = function(v) {
      return this._options;
    };
    Loop.prototype.setOptions = function(v) {
      this._options = v;
      return this;
    };
    Loop.prototype.body = function(v) {
      return this._body;
    };
    Loop.prototype.setBody = function(v) {
      this._body = v;
      return this;
    };
    Loop.prototype.catcher = function(v) {
      return this._catcher;
    };
    Loop.prototype.setCatcher = function(v) {
      this._catcher = v;
      return this;
    };
    Loop.prototype.elseBody = function(v) {
      return this._elseBody;
    };
    Loop.prototype.setElseBody = function(v) {
      this._elseBody = v;
      return this;
    };
    Loop.prototype.loc = function() {
      var a = this._options.keyword;
      var b = this._body;
      if (a && b) {
        return [a._loc, b.loc()[1]];
      } else {
        return [0, 0];
      }
      ;
    };
    Loop.prototype.set = function(obj) {
      this._options || (this._options = {});
      var keys = Object.keys(obj);
      for (let i = 0, items = iter$(keys), len = items.length, k; i < len; i++) {
        k = items[i];
        this._options[k] = obj[k];
      }
      ;
      return this;
    };
    Loop.prototype.addBody = function(body) {
      this.setBody(AST.blk(body));
      return this;
    };
    Loop.prototype.addElse = function(block) {
      this.setElseBody(block);
      return this;
    };
    Loop.prototype.isReactive = function() {
      return this._tag && this._tag.fragment().isReactive();
    };
    Loop.prototype.isStatementLike = function() {
      return true;
    };
    Loop.prototype.c = function(o) {
      var s = this.stack();
      var curr = s.current();
      if (this.stack().isExpression() || this.isExpression()) {
        this.scope().closeScope();
        var ast = CALL(FN([], [this]), []);
        return ast.c(o);
      } else if (this.stack().current() instanceof Block || s.up() instanceof Block && s.current()._consumer == this) {
        return Loop.prototype.__super__.c.call(this, o);
      } else if (this._tag) {
        return Loop.prototype.__super__.c.call(this, 0);
      } else {
        this.scope().closeScope();
        ast = CALL(FN([], [this]), []);
        return ast.c(o);
      }
      ;
    };
    function While(test2, opts) {
      this._traversed = false;
      this._test = test2;
      this._options = opts || {};
      this._scope = new WhileScope(this);
      if (this.option("invert")) {
        this._test = test2.invert();
      }
      ;
    }
    subclass$(While, Loop);
    exports.While = While;
    While.prototype.test = function(v) {
      return this._test;
    };
    While.prototype.setTest = function(v) {
      this._test = v;
      return this;
    };
    While.prototype.visit = function() {
      this.scope().visit();
      if (this.test()) {
        this.test().traverse();
      }
      ;
      if (this.body()) {
        return this.body().traverse();
      }
      ;
    };
    While.prototype.loc = function() {
      var o = this._options;
      return helpers2.unionOfLocations(o.keyword, this._body, o.guard, this._test);
    };
    While.prototype.consume = function(node) {
      if (this.isExpressable()) {
        return While.prototype.__super__.consume.apply(this, arguments);
      }
      ;
      var reuse = false;
      var resvar = this.scope().declare("res", new Arr([]), { system: true });
      this._catcher = new PushAssign("push", resvar, null);
      this.body().consume(this._catcher);
      var ast = new Block([this, resvar.accessor()]);
      return ast.consume(node);
    };
    While.prototype.js = function(o) {
      var out = "while (" + this.test().c({ expression: true }) + ")" + this.body().c({ braces: true, indent: true });
      if (this.scope().vars().count() > 0) {
        out = this.scope().vars().c() + ";" + out;
      }
      ;
      return out;
    };
    function For(o) {
      if (o === void 0)
        o = {};
      this._traversed = false;
      this._options = o;
      this._scope = new ForScope2(this);
      this._catcher = null;
    }
    subclass$(For, Loop);
    exports.For = For;
    For.prototype.loc = function() {
      var o = this._options;
      return helpers2.unionOfLocations(o.keyword, this._body, o.guard, o.step, o.source);
    };
    For.prototype.ref = function() {
      return this._ref || "" + this._tag.fragment().cvar() + "." + this.oid();
    };
    For.prototype.visit = function(stack) {
      this.scope().visit();
      var parent = stack._tag;
      this.options().source.traverse();
      if (this.options().guard) {
        var op = IF(this.options().guard.invert(), Block.wrap([new ContinueStatement("continue")]));
        this.body().unshift(op, BR);
      }
      ;
      this.declare();
      if (this.options().await) {
        var fnscope = stack.up(Func);
        if (fnscope) {
          this.set({ native: true });
          fnscope.set({ async: true });
        }
        ;
      }
      ;
      if (parent) {
        this._tag = parent;
        stack._tag = this;
        this._level = (this._tag && this._tag._level || 0) + 1;
      }
      ;
      this.body().traverse();
      stack._tag = parent;
      return this;
    };
    For.prototype.isBare = function(src) {
      return src && src._variable && src._variable._isArray;
    };
    For.prototype.declare = function() {
      var o = this.options();
      var scope = this.scope();
      var src = o.source;
      var vars = o.vars = {};
      var oi = o.index;
      var params = o.params;
      var bare = this.isBare(src);
      if (src instanceof Range2) {
        let from = src.left();
        let to = src.right();
        let dynamic = !(from instanceof Num) || !(to instanceof Num);
        if (to instanceof Num) {
          vars.len = to;
        } else {
          vars.len = scope.declare("len", to, { type: "let" });
        }
        ;
        vars.value = scope.declare(o.name, from, { type: "let" });
        if (o.name) {
          vars.value.addReference(o.name);
        }
        ;
        if (o.index) {
          vars.index = scope.declare(o.index, 0, { type: "let" });
          vars.index.addReference(o.index);
        } else {
          vars.index = vars.value;
        }
        ;
        if (dynamic) {
          vars.diff = scope.declare("rd", OP("-", vars.len, vars.value), { type: "let" });
        }
        ;
      } else {
        if (oi) {
          vars.index = scope.declare(oi, 0, { type: "let" });
        } else {
          vars.index = scope.declare("i", new Num(0), { system: true, type: "let", pool: "counter" });
        }
        ;
        vars.source = bare ? src : scope.declare("items", this.util().iterable(src), { system: true, type: "let", pool: "iter" });
        if (params[2]) {
          vars.len = scope.declare(params[2], this.util().len(vars.source), { type: "let" });
        } else {
          vars.len = scope.declare("len", this.util().len(vars.source), { type: "let", pool: "len", system: true });
        }
        ;
        if (o.name) {
          let op = OP(".", vars.source, vars.index).set({ datatype: o.name.datatype() });
          o.name.set({ datatype: void 0 });
          let decl = new VarDeclaration(o.name, op, "let");
          this.body().unshift(decl, BR);
        }
        ;
        if (oi) {
          vars.index.addReference(oi);
        }
        ;
      }
      ;
      return this;
    };
    For.prototype.consume = function(node) {
      if (node instanceof TagLike) {
        return node.register(this);
      }
      ;
      if (this.isExpressable()) {
        return For.prototype.__super__.consume.apply(this, arguments);
      }
      ;
      if (this._resvar) {
        var ast = new Block([this, BR, this._resvar.accessor()]);
        ast.consume(node);
        return ast;
      }
      ;
      var resvar = null;
      var reuseable = false;
      var assignee = null;
      resvar = this._resvar || (this._resvar = this.scope().register("res", null, { system: true, type: "var" }));
      this._catcher = new PushAssign("push", resvar, null);
      let resval = new Arr([]);
      this.body().consume(this._catcher);
      resvar.autodeclare();
      if (node instanceof VarDeclaration || node instanceof Assign) {
        node.setRight(resvar.accessor());
        return new Block([
          OP("=", resvar, resval),
          BR,
          this,
          BR,
          node
        ]);
      } else if (node) {
        let block = [OP("=", resvar, resval), BR, this, BR, resvar.accessor().consume(node)];
        return new Block(block);
      }
      ;
      return this;
    };
    For.prototype.js = function(o) {
      var vars = this.options().vars;
      var idx = vars.index;
      var val = vars.value;
      var src = this.options().source;
      var cond;
      var final;
      if (src instanceof Range2) {
        let a = src.left();
        let b = src.right();
        let inc = src.inclusive();
        cond = OP(inc ? "<=" : "<", val, vars.len);
        final = OP("++", val);
        if (vars.diff) {
          cond = If.ternary(OP(">", vars.diff, new Num(0)), cond, OP(inc ? ">=" : ">", val, vars.len));
          final = If.ternary(OP(">", vars.diff, new Num(0)), OP("++", val), OP("--", val));
        }
        ;
        if (idx && idx != val) {
          final = new ExpressionBlock([final, OP("++", idx)]);
        }
        ;
      } else {
        cond = OP("<", idx, vars.len);
        if (this.options().step) {
          final = OP("=", idx, OP("+", idx, this.options().step));
        } else {
          final = OP("++", idx);
        }
        ;
      }
      ;
      var before = "";
      var after = "";
      var code = this.body().c({ braces: true, indent: true });
      var head = "" + M2("for", this.keyword()) + " (" + this.scope().vars().c() + "; " + cond.c({ expression: true }) + "; " + final.c({ expression: true }) + ") ";
      return before + head + code + after;
    };
    function ForIn() {
      return For.apply(this, arguments);
    }
    subclass$(ForIn, For);
    exports.ForIn = ForIn;
    function ForOf() {
      return For.apply(this, arguments);
    }
    subclass$(ForOf, For);
    exports.ForOf = ForOf;
    ForOf.prototype.source = function(v) {
      return this._source;
    };
    ForOf.prototype.setSource = function(v) {
      this._source = v;
      return this;
    };
    ForOf.prototype.declare = function() {
      var self2 = this;
      var o = self2.options();
      var vars = o.vars = {};
      var params = o.params;
      var k;
      var v;
      if (o.own) {
        vars.source = o.source._variable || self2.scope().declare("o", o.source, { system: true, type: "let" });
        o.value = o.index;
        var i = vars.index = self2.scope().declare("i", new Num(0), { system: true, type: "let", pool: "counter" });
        var keys = vars.keys = self2.scope().declare("keys", Util.keys(vars.source.accessor()), { system: true, type: "let" });
        var l = vars.len = self2.scope().declare("l", Util.len(keys.accessor()), { system: true, type: "let" });
        k = vars.key = self2.scope().declare(o.name, null, { type: "let" });
        if (o.value instanceof Obj || o.value instanceof Arr) {
          self2.body().unshift(new VarDeclaration(o.value, OP(".", vars.source, k), "let"), BR);
          vars.value = null;
        } else if (o.value) {
          v = vars.value = self2.scope().declare(o.value, null, { let: true, type: "let" });
        }
        ;
      } else {
        self2.setSource(vars.source = STACK.tsc() ? o.source : self2.util().iterable(o.source));
        vars.value = o.value = o.name;
        let declvars = self2.scope__().captureVariableDeclarations(function() {
          var value_;
          o.value.traverse({ declaring: "let" });
          if (o.value instanceof Identifier) {
            return (value_ = o.value)._variable || (value_._variable = self2.scope__().register(o.value.symbol(), o.value, { type: "let" }));
          }
          ;
        });
        self2._declvars = declvars;
        if (o.index) {
          vars.counter = self2.scope().parent().temporary(null, {}, "" + o.index + "$");
          self2.body().unshift(new VarDeclaration(o.index, OP("++", vars.counter), "let"), BR);
          self2;
        }
        ;
        if (params[2]) {
          params[2].warn("Length parameter only allowed on for-in loops");
        }
        ;
      }
      ;
      if (v && o.index) {
        v.addReference(o.index);
      }
      ;
      if (k && o.name) {
        k.addReference(o.name);
      }
      ;
      return self2;
    };
    ForOf.prototype.js = function(o) {
      var vars = this.options().vars;
      var osrc = this.options().source;
      var src = vars.source;
      var k = vars.key;
      var v = vars.value;
      var i = vars.index;
      var code;
      if (this.options().own) {
        if (v && v.refcount() > 0) {
          this.body().unshift(OP("=", v, OP(".", src, k)));
        }
        ;
        this.body().unshift(OP("=", k, OP(".", vars.keys, i)));
        code = this.body().c({ indent: true, braces: true });
        var head = "" + M2("for", this.keyword()) + " (" + this.scope().vars().c() + "; " + OP("<", i, vars.len).c() + "; " + OP("++", i).c() + ")";
        return head + code;
      } else {
        if (STACK.tsc()) {
          for (let j = 0, items = iter$(this._declvars), len = items.length, item; j < len; j++) {
            item = items[j];
            if (item.vartype()) {
              let vname = item.c();
              let decl = item._declarator;
              let op = LIT("let " + M2(item.typedAlias().c(), decl) + " = " + item.vartype().c() + "(" + vname + ")");
              this.body().unshift(op);
            }
            ;
          }
          ;
        }
        ;
        code = this.scope().c({ braces: true, indent: true });
        let ofjs = src.c({ expression: true });
        let js = "(let " + v.c() + " of " + ofjs + ")" + code;
        if (this.options().await) {
          js = "" + M2("await", this.options().await) + " " + js;
        }
        ;
        js = "" + M2("for", this.keyword()) + " " + js;
        if (vars.counter) {
          js = "" + vars.counter + " = 0; " + js;
        }
        ;
        return js;
      }
      ;
    };
    ForOf.prototype.head = function() {
      var v = this.options().vars;
      return [
        OP("=", v.key, OP(".", v.keys, v.index)),
        v.value && OP("=", v.value, OP(".", v.source, v.key))
      ];
    };
    function Begin(body) {
      this._nodes = AST.blk(body).nodes();
    }
    subclass$(Begin, Block);
    exports.Begin = Begin;
    Begin.prototype.shouldParenthesize = function() {
      return this.isExpression();
    };
    function Switch(a, b, c) {
      this._traversed = false;
      this._source = a;
      this._cases = b;
      this._fallback = c;
    }
    subclass$(Switch, ControlFlowStatement);
    exports.Switch = Switch;
    Switch.prototype.source = function(v) {
      return this._source;
    };
    Switch.prototype.setSource = function(v) {
      this._source = v;
      return this;
    };
    Switch.prototype.cases = function(v) {
      return this._cases;
    };
    Switch.prototype.setCases = function(v) {
      this._cases = v;
      return this;
    };
    Switch.prototype.fallback = function(v) {
      return this._fallback;
    };
    Switch.prototype.setFallback = function(v) {
      this._fallback = v;
      return this;
    };
    Switch.prototype.visit = function() {
      for (let i = 0, items = iter$(this.cases()), len = items.length; i < len; i++) {
        items[i].traverse();
      }
      ;
      if (this.fallback()) {
        this.fallback().traverse();
      }
      ;
      if (this.source()) {
        this.source().traverse();
      }
      ;
      return;
    };
    Switch.prototype.consume = function(node) {
      if (node instanceof TagLike) {
        if (node.body() == this) {
          let branches = this._cases.slice(0).concat([this._fallback]);
          for (let i = 0, items = iter$(branches), len = items.length, block; i < len; i++) {
            block = items[i];
            if (!block) {
              continue;
            }
            ;
            node._branches.push([]);
            block.consume(node);
          }
          ;
          return this;
        }
        ;
        return node.register(this);
      }
      ;
      this._cases = this._cases.map(function(item) {
        return item.consume(node);
      });
      if (this._fallback) {
        this._fallback = this._fallback.consume(node);
      }
      ;
      return this;
    };
    Switch.prototype.c = function(o) {
      if (this.stack().isExpression() || this.isExpression()) {
        var ast = CALL(FN([], [this]), []);
        return ast.c(o);
      }
      ;
      return Switch.prototype.__super__.c.call(this, o);
    };
    Switch.prototype.js = function(o) {
      var body = [];
      for (let i = 0, items = iter$(this.cases()), len = items.length, part; i < len; i++) {
        part = items[i];
        part.autobreak();
        body.push(part);
      }
      ;
      if (this.fallback()) {
        body.push("default:\n" + this.fallback().c({ indent: true }));
      }
      ;
      return "switch (" + this.source().c() + ") " + helpers2.bracketize(AST.cary(body).join("\n"), true);
    };
    function SwitchCase(test2, body) {
      this._traversed = false;
      this._test = test2;
      this._body = AST.blk(body);
      this._scope = new BlockScope(this);
    }
    subclass$(SwitchCase, ControlFlowStatement);
    exports.SwitchCase = SwitchCase;
    SwitchCase.prototype.test = function(v) {
      return this._test;
    };
    SwitchCase.prototype.setTest = function(v) {
      this._test = v;
      return this;
    };
    SwitchCase.prototype.body = function(v) {
      return this._body;
    };
    SwitchCase.prototype.setBody = function(v) {
      this._body = v;
      return this;
    };
    SwitchCase.prototype.visit = function() {
      this.scope__().visit();
      return this.body().traverse();
    };
    SwitchCase.prototype.consume = function(node) {
      this.body().consume(node);
      return this;
    };
    SwitchCase.prototype.autobreak = function() {
      if (!(this.body().last() instanceof BreakStatement)) {
        this.body().push(new BreakStatement());
      }
      ;
      return this;
    };
    SwitchCase.prototype.js = function(o) {
      if (!(this._test instanceof Array)) {
        this._test = [this._test];
      }
      ;
      var cases = this._test.map(function(item) {
        return "case " + item.c() + ": ";
      });
      return cases.join("\n") + this.body().c({ indent: true, braces: true });
    };
    function Try(body, c, f) {
      this._traversed = false;
      this._body = AST.blk(body);
      this._catch = c;
      this._finally = f;
    }
    subclass$(Try, ControlFlowStatement);
    exports.Try = Try;
    Try.prototype.body = function(v) {
      return this._body;
    };
    Try.prototype.setBody = function(v) {
      this._body = v;
      return this;
    };
    Try.prototype.consume = function(node) {
      this._body = this._body.consume(node);
      if (this._catch) {
        this._catch = this._catch.consume(node);
      }
      ;
      if (this._finally) {
        this._finally = this._finally.consume(node);
      }
      ;
      return this;
    };
    Try.prototype.visit = function() {
      this._body.traverse();
      if (this._catch) {
        this._catch.traverse();
      }
      ;
      if (this._finally) {
        return this._finally.traverse();
      }
      ;
    };
    Try.prototype.c = function(o) {
      if (this.stack().isExpression() || this.isExpression()) {
        var ast = IIFE([this]);
        return ast.c(o);
      }
      ;
      return Try.prototype.__super__.c.call(this, o);
    };
    Try.prototype.js = function(o) {
      var out = "try " + this.body().c({ braces: true, indent: true });
      if (this._catch) {
        out += " " + this._catch.c();
      }
      ;
      if (this._finally) {
        out += " " + this._finally.c();
      }
      ;
      if (!(this._catch || this._finally)) {
        out += " catch (e) { }";
      }
      ;
      out += ";";
      return out;
    };
    function Catch(body, varname) {
      this._traversed = false;
      this._body = AST.blk(body || []);
      this._scope = new CatchScope(this);
      this._varname = varname;
      this;
    }
    subclass$(Catch, ControlFlowStatement);
    exports.Catch = Catch;
    Catch.prototype.body = function(v) {
      return this._body;
    };
    Catch.prototype.setBody = function(v) {
      this._body = v;
      return this;
    };
    Catch.prototype.consume = function(node) {
      this._body = this._body.consume(node);
      return this;
    };
    Catch.prototype.visit = function() {
      this._scope.visit();
      this._variable = this._scope.register(this._varname, this, { type: "let", pool: "catchvar" });
      if (len$(this._body) == 0) {
        let node = this._variable.accessor();
        let accessor = node;
        if (STACK.tsc()) {
          node = IF(LIT("" + node.c() + " instanceof Error"), node);
        }
        ;
        this._body.push(node);
      }
      ;
      return this._body.traverse();
    };
    Catch.prototype.js = function(o) {
      return "catch (" + this._variable.c() + ") " + this._body.c({ braces: true, indent: true });
    };
    function Finally(body) {
      this._traversed = false;
      this._body = AST.blk(body || []);
    }
    subclass$(Finally, ControlFlowStatement);
    exports.Finally = Finally;
    Finally.prototype.visit = function() {
      return this._body.traverse();
    };
    Finally.prototype.consume = function(node) {
      return this;
    };
    Finally.prototype.js = function(o) {
      return "finally " + this._body.c({ braces: true, indent: true });
    };
    function Range2() {
      return Op.apply(this, arguments);
    }
    subclass$(Range2, Op);
    exports.Range = Range2;
    Range2.prototype.inclusive = function() {
      return this.op() == "..";
    };
    Range2.prototype.c = function() {
      return "range";
    };
    function Splat() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(Splat, ValueNode2);
    exports.Splat = Splat;
    Splat.prototype.js = function(o) {
      return "..." + this.value().c();
      var par = this.stack().parent();
      if (par instanceof ArgList || par instanceof Arr) {
        return "Array.from(" + this.value().c() + ")";
      } else {
        this.p("what is the parent? " + par);
        return "SPLAT";
      }
      ;
    };
    Splat.prototype.node = function() {
      return this.value();
    };
    function TagPart(value, owner) {
      this._name = this.load(value);
      this._tag = owner;
      this._chain = [];
      this._special = false;
      this._params = null;
      this;
    }
    subclass$(TagPart, Node2);
    exports.TagPart = TagPart;
    TagPart.prototype.name = function(v) {
      return this._name;
    };
    TagPart.prototype.setName = function(v) {
      this._name = v;
      return this;
    };
    TagPart.prototype.value = function(v) {
      return this._value;
    };
    TagPart.prototype.setValue = function(v) {
      this._value = v;
      return this;
    };
    TagPart.prototype.params = function(v) {
      return this._params;
    };
    TagPart.prototype.setParams = function(v) {
      this._params = v;
      return this;
    };
    TagPart.prototype.load = function(value) {
      return value;
    };
    TagPart.prototype.isSpecial = function() {
      return this._special;
    };
    TagPart.prototype.visit = function() {
      this._chain.map(function(v) {
        return v.traverse();
      });
      if (this._value) {
        this._value.traverse();
      }
      ;
      if (this._name.traverse) {
        this._name.traverse();
      }
      ;
      return this;
    };
    TagPart.prototype.quoted = function() {
      return this._quoted || (this._quoted = this._name instanceof IdentifierExpression ? this._name.asString() : helpers2.singlequote(this._name));
    };
    TagPart.prototype.valueIsStatic = function() {
      return !this.value() || this.value().isPrimitive() || this.value() instanceof Func && !this.value().nonlocals();
    };
    TagPart.prototype.isStatic = function() {
      return this.valueIsStatic();
    };
    TagPart.prototype.isProxy = function() {
      return false;
    };
    TagPart.prototype.add = function(item, type) {
      if (type == TagArgList) {
        (this._last || this).setParams(item || new ListNode([]));
      } else {
        this._chain.push(this._last = new TagModifier(item));
      }
      ;
      return this;
    };
    TagPart.prototype.modifiers = function() {
      return this._modifiers || (this._modifiers = new TagModifiers(this._chain).traverse());
    };
    TagPart.prototype.js = function() {
      return "";
    };
    TagPart.prototype.ref = function() {
      return "c$." + this.oid();
    };
    TagPart.prototype.tagRef = function() {
      return this._tagRef || this._tag.ref();
    };
    function TagId() {
      return TagPart.apply(this, arguments);
    }
    subclass$(TagId, TagPart);
    exports.TagId = TagId;
    TagId.prototype.js = function() {
      return "" + this.tagRef() + ".id=" + this.quoted();
    };
    function TagFlag() {
      return TagPart.apply(this, arguments);
    }
    subclass$(TagFlag, TagPart);
    exports.TagFlag = TagFlag;
    TagFlag.prototype.condition = function(v) {
      return this._condition;
    };
    TagFlag.prototype.setCondition = function(v) {
      this._condition = v;
      return this;
    };
    TagFlag.prototype.rawClassName = function() {
      return this.name().toRaw();
    };
    TagFlag.prototype.value = function() {
      return this._name;
    };
    TagFlag.prototype.visit = function() {
      this._chain.map(function(v) {
        return v.traverse();
      });
      if (this._condition) {
        this._condition.traverse();
      }
      ;
      if (this._name.traverse) {
        return this._name.traverse();
      }
      ;
    };
    TagFlag.prototype.isStatic = function() {
      return !this.isConditional() && (this._name instanceof Token2 || this._name.isStatic() || this._name instanceof MixinIdentifier);
    };
    TagFlag.prototype.isConditional = function() {
      return !!this.condition();
    };
    TagFlag.prototype.js = function() {
      if (STACK.tsc()) {
        let val2 = this.value().c();
        return this.condition() ? "[" + val2 + "," + this.condition().c() + "]" : "[" + val2 + "]";
      }
      ;
      let val = this.value().c({ as: "string" });
      return this.condition() ? "" + this.tagRef() + ".flags.toggle(" + val + "," + this.condition().c() + ")" : "" + this.tagRef() + ".classList.add(" + val + ")";
    };
    function TagSep() {
      return TagPart.apply(this, arguments);
    }
    subclass$(TagSep, TagPart);
    exports.TagSep = TagSep;
    function TagArgList() {
      return TagPart.apply(this, arguments);
    }
    subclass$(TagArgList, TagPart);
    exports.TagArgList = TagArgList;
    function TagAttr() {
      return TagPart.apply(this, arguments);
    }
    subclass$(TagAttr, TagPart);
    exports.TagAttr = TagAttr;
    TagAttr.prototype.isSpecial = function() {
      return String(this._name) == "value";
    };
    TagAttr.prototype.startLoc = function() {
      return this._name && this._name.startLoc && this._name.startLoc();
    };
    TagAttr.prototype.endLoc = function() {
      return this._value && this._value.endLoc && this._value.endLoc();
    };
    TagAttr.prototype.replace = function(base, replacement) {
      if (this._value == base) {
        return this._value = replacement;
      }
      ;
    };
    TagAttr.prototype.isStatic = function() {
      return TagAttr.prototype.__super__.isStatic.apply(this, arguments) && this._chain.every(function(item) {
        let val = item instanceof Parens ? item.value() : item;
        return val instanceof Func ? !val.nonlocals() : val.isPrimitive();
      });
    };
    TagAttr.prototype.visit = function() {
      this._chain.map(function(v) {
        return v.traverse();
      });
      if (this._value) {
        this._value.traverse();
      }
      ;
      if (this._name.traverse) {
        this._name.traverse();
      }
      ;
      let key = this._key = String(this._name);
      let i = key.indexOf(":");
      if (i >= 0) {
        this._ns = key.slice(0, i);
        this._key = key.slice(i + 1);
      }
      ;
      if (!this._value) {
        this._autovalue = true;
        this._value = STR(key);
      }
      ;
      if (this._chain.length) {
        this._mods = {};
        for (let j = 0, items = iter$(this._chain), len = items.length; j < len; j++) {
          this._mods[items[j].name()] = 1;
        }
        ;
      }
      ;
      if (this._ns == "bind") {
        STACK.use("dom_bind");
      }
      ;
      if (!this._ns && this._key == "ease") {
        STACK.use("dom_transitions");
      }
      ;
      let isAsset = key == "asset" || key == "src" && this.value() instanceof Str && /^(style|img|script|svg)$/.test(this._tag.tagName());
      if (isAsset) {
        let tagName = this._tag.tagName();
        let kind = "asset";
        if (tagName == "svg") {
          kind = "";
        } else if (tagName == "img") {
          kind = "img";
        } else if (tagName == "script") {
          kind = STACK._options.vite ? "url&entry" : "web";
        } else if (tagName == "style") {
          kind = "css";
        }
        ;
        let path = this.value() instanceof Str && this.value().raw();
        if (path && !path.match(/^(\/|https?\:\/\/)/)) {
          this._asset = STACK.root().registerAsset(path, kind, this, this.value());
        }
        ;
      }
      ;
      return this;
    };
    TagAttr.prototype.ns = function() {
      return this._ns;
    };
    TagAttr.prototype.key = function() {
      return this._key;
    };
    TagAttr.prototype.mods = function() {
      return this._mods;
    };
    TagAttr.prototype.nameIdentifier = function() {
      return this._nameIdentifier || (this._nameIdentifier = new Identifier(this.key()));
    };
    TagAttr.prototype.modsIdentifier = function() {
      return this._modsIdentifier || (this._modsIdentifier = new Identifier(this.key() + "__"));
    };
    TagAttr.prototype.js = function(o) {
      let val = this.value().c(o);
      let bval = val;
      let op = M2("=", this.option("op"));
      let isAttr = this.key().match(/^(aria-|data-)/) || this.key() == "style" || this._tag && this._tag.isSVG() || this.ns() == "html";
      let tagName = this._tag && this._tag._tagName;
      let tref = this._tag.ref();
      if (this._asset) {
        val = this._asset.ref.c();
      }
      ;
      if (STACK.tsc() && (isAttr || TAG_GLOBAL_ATTRIBUTES[this.key()])) {
        return "" + tref + ".setAttribute('" + this.key() + "',String(" + val + "))";
      }
      ;
      if (isAttr) {
        if ((STACK.isNode() || this.ns() == "html") && !this._asset) {
          STACK.meta().universal = false;
          return "" + tref + ".setAttribute('" + this.key() + "'," + val + ")";
        }
        ;
      }
      ;
      if (STACK.tsc()) {
        let path = this.nameIdentifier().c();
        if (path == "value" && idx$(this._tag._tagName, ["input", "textarea", "select", "option", "button"]) >= 0) {
          val = "/**@type {any}*/(" + val + ")";
        }
        ;
        let access = "" + tref + "." + M2(path, this._name);
        return "" + M2(access, this._name) + op + (this._autovalue ? M2("true", this._value) : val);
      }
      ;
      let key = this.key();
      if (key == "tabindex") {
        key = "tabIndex";
      }
      ;
      if (key == "value" && idx$(this._tag._tagName, ["input", "textarea", "select", "option", "button"]) >= 0 && !STACK.isNode()) {
        key = "richValue";
      }
      ;
      if (this.ns() == "css") {
        return "" + tref + ".css$('" + key + "'," + val + ")";
      } else if (this.ns() == "bind") {
        let path = PATHIFY(this.value());
        if (path instanceof Variable) {
          let getter = "function(){ return " + val + " }";
          let setter = "function(v$){ " + val + " = v$ }";
          bval = "{get:" + getter + ",set:" + setter + "}";
        } else if (path instanceof Array) {
          bval = "[" + val[0].c(o) + "," + val[1].c(o) + "]";
        }
        ;
        return "" + tref + ".bind$('" + key + "'," + bval + ")";
      } else if (key.indexOf("--") == 0) {
        let pars = ["'" + key + "'", val];
        let u = this.option("unit");
        let k = StyleTheme2.propAbbr(this.option("propname"));
        if (u || k) {
          pars.push(u ? STR(u) : NULL);
          if (k) {
            pars.push(STR(k));
          }
          ;
        }
        ;
        STACK.use("styles");
        let term = this.option("styleterm");
        if (term && term.param) {
          while (pars.length < 4) {
            pars.push(NULL);
          }
          ;
          pars.push(term.param);
        }
        ;
        return "" + tref + ".css$var(" + AST.cary(pars, { as: "js" }).join(",") + ")";
      } else if (key.indexOf("aria-") == 0 || this._tag && this._tag.isSVG() || key == "for" || TAG_GLOBAL_ATTRIBUTES[key]) {
        if (this.ns()) {
          return "" + tref + ".setns$('" + this.ns() + "','" + key + "'," + val + ")";
        } else {
          return "" + tref + ".set$('" + key + "'," + val + ")";
        }
        ;
      } else if (key.indexOf("data-") == 0) {
        return "" + tref + ".setAttribute('" + key + "'," + val + ")";
      } else {
        return OP(".", LIT(tref), key).c() + ("" + op + val);
      }
      ;
    };
    function TagStyleAttr() {
      return TagAttr.apply(this, arguments);
    }
    subclass$(TagStyleAttr, TagAttr);
    exports.TagStyleAttr = TagStyleAttr;
    function TagAttrValue() {
      return TagPart.apply(this, arguments);
    }
    subclass$(TagAttrValue, TagPart);
    exports.TagAttrValue = TagAttrValue;
    TagAttrValue.prototype.isPrimitive = function() {
      return this.value().isPrimitive();
    };
    TagAttrValue.prototype.value = function() {
      return this.name();
    };
    TagAttrValue.prototype.js = function() {
      return this.value().c();
    };
    TagAttrValue.prototype.toRaw = function() {
      if (this.value() instanceof Str) {
        return this.value().raw();
      }
      ;
      return null;
    };
    function TagHandlerSpecialArg() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(TagHandlerSpecialArg, ValueNode2);
    exports.TagHandlerSpecialArg = TagHandlerSpecialArg;
    TagHandlerSpecialArg.prototype.isPrimitive = function() {
      return true;
    };
    TagHandlerSpecialArg.prototype.c = function() {
      return "'~$" + this.value() + "'";
    };
    function TagModifiers() {
      return ListNode.apply(this, arguments);
    }
    subclass$(TagModifiers, ListNode);
    exports.TagModifiers = TagModifiers;
    TagModifiers.prototype.isStatic = function() {
      return this._nodes.every(function(item) {
        let val = item instanceof Parens ? item.value() : item;
        return val instanceof Func ? !val.nonlocals() : val.isPrimitive();
      });
    };
    TagModifiers.prototype.visit = function() {
      var keys = { FUNC: 0 };
      for (let i = 0, items = iter$(this.nodes()), len = items.length, node; i < len; i++) {
        node = items[i];
        let key = String(node.name());
        if (keys[key]) {
          node.setName(key + "~" + keys[key]++);
        } else {
          keys[key] = 1;
        }
        ;
      }
      ;
      return this;
    };
    TagModifiers.prototype.extractDynamics = function() {
      if (this._dynamics) {
        return this._dynamics;
      }
      ;
      this._dynamics = [];
      for (let i = 0, items = iter$(this.nodes()), len = items.length, part; i < len; i++) {
        part = items[i];
        if (!(part instanceof TagModifier)) {
          continue;
        }
        ;
        for (let k = 0, ary = iter$(part.params()), len2 = ary.length, param; k < len2; k++) {
          param = ary[k];
          if (!param.isPrimitive()) {
            let ref = new TagDynamicArg(param).set(
              {
                key: KEY(part.name()),
                index: k
              }
            );
            part.params().swap(param, LIT("null"));
            this._dynamics.push(ref);
          }
          ;
        }
        ;
      }
      ;
      return this._dynamics;
    };
    TagModifiers.prototype.c = function() {
      if (STACK.tsc()) {
        return "[" + this.nodes().map(function(_0) {
          return _0.c();
        }).join(",") + "]";
      }
      ;
      let obj = new Obj([]);
      for (let i = 0, items = iter$(this.nodes()), len = items.length, part; i < len; i++) {
        part = items[i];
        let val = part.params() ? new Arr(part.params()) : LIT("true");
        obj.add(KEY(part.name()), val);
      }
      ;
      return obj.c();
    };
    function TagModifier() {
      return TagPart.apply(this, arguments);
    }
    subclass$(TagModifier, TagPart);
    exports.TagModifier = TagModifier;
    TagModifier.prototype.params = function(v) {
      return this._params;
    };
    TagModifier.prototype.setParams = function(v) {
      this._params = v;
      return this;
    };
    TagModifier.prototype.load = function(value) {
      if (value instanceof IdentifierExpression) {
        return value._single;
      }
      ;
      return value;
    };
    TagModifier.prototype.isPrimitive = function() {
      return !this.params() || this.params().every(function(param) {
        return param.isPrimitive();
      });
    };
    TagModifier.prototype.visit = function() {
      if (this._name instanceof TagHandlerCallback) {
        this._name.traverse();
        this._name = this._name.value();
      }
      ;
      if (this._name instanceof Func) {
        let evparam = this._name.params().at(0, true, "e");
        let stateparam = this._name.params().at(1, true, "$");
        this._name.traverse();
      }
      ;
      if (this._name instanceof IsolatedFunc) {
        this._value = this._name;
        this._name = STR("$_");
        this._params = new ListNode([this._value].concat(this._value.leaks() || []));
      }
      ;
      if (this._params) {
        this._params.traverse();
      }
      ;
      return this;
    };
    TagModifier.prototype.js = function() {
      if (STACK.tsc()) {
        if (this._name instanceof Func) {
          return "(" + this._name.c() + ")(e,{})";
        }
        ;
        let key = this.quoted().slice(1, -1).split("-");
        let inv = false;
        if (key[0][0] == "!") {
          inv = true;
          key[0] = key[0].slice(1);
        }
        ;
        let path = key[0];
        if (key.length > 1) {
          if (path == "emit" || path == "flag" || path == "css") {
            path = "" + path + "-name";
          } else {
            path = key.join("-");
          }
          ;
        }
        ;
        path = helpers2.toValidIdentifier("\u03B1" + path);
        let parjs = this.params() ? this.params().c() : "";
        if (this.params() && parjs == "") {
          if (path == "\u03B1options") {
            parjs = M2("", MLOC(this._handlerName.endLoc() + 1));
          } else {
            parjs = M2("", MLOC(this._name.endLoc() + 1));
          }
          ;
        }
        ;
        let call = "" + M2(path, this._name) + "(" + parjs + ")";
        if (!this.params() || this.params().count() == 0) {
          call = M2(call, this._name);
        }
        ;
        if (inv) {
          let loc = MLOC(this._name.startLoc() - 1, this._name.startLoc());
          return M2("e." + call + "===true", loc);
        }
        ;
        return "e." + call;
      }
      ;
      if (this.params() && this.params().count() > 0) {
        return "[" + this.quoted() + "," + this.params().c() + "]";
      } else if (this.params()) {
        return "[" + this.quoted() + "]";
      } else {
        return this.quoted();
      }
      ;
    };
    function TagData() {
      return TagPart.apply(this, arguments);
    }
    subclass$(TagData, TagPart);
    exports.TagData = TagData;
    TagData.prototype.value = function() {
      return this.name();
    };
    TagData.prototype.isStatic = function() {
      return !this.value() || this.value().isPrimitive();
    };
    TagData.prototype.isSpecial = function() {
      return true;
    };
    TagData.prototype.isProxy = function() {
      return this.proxyParts() instanceof Array;
    };
    TagData.prototype.proxyParts = function() {
      var val = this.value();
      if (val instanceof ArgList) {
        val = val.values()[0];
      }
      ;
      if (val instanceof Parens) {
        val = val.value();
      }
      ;
      if (val instanceof VarOrAccess) {
        val = val._variable || val.value();
      }
      ;
      if (val instanceof Access) {
        let left = val.left();
        let right = val.right() instanceof Index ? val.right().value() : val.right();
        if (val instanceof IvarAccess) {
          left || (left = val.scope__().context());
        }
        ;
        return [left, right];
      }
      ;
      return val;
    };
    TagData.prototype.js = function() {
      var val = this.value();
      if (val instanceof ArgList) {
        val = val.values()[0];
      }
      ;
      if (val instanceof Parens) {
        val = val.value();
      }
      ;
      if (val instanceof VarOrAccess) {
        val = val._variable || val.value();
      }
      ;
      if (val instanceof Access) {
        let left = val.left();
        let right = val.right() instanceof Index ? val.right().value() : val.right();
        if (val instanceof IvarAccess) {
          left || (left = val.scope__().context());
        }
        ;
        let pars = [left.c(), right.c()];
        if (right instanceof Identifier) {
          pars[1] = "'" + pars[1] + "'";
        }
        ;
        return "bind$('data',[" + pars.join(",") + "])";
      } else {
        return "data=(" + val.c() + ")";
      }
      ;
    };
    function TagDynamicArg() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(TagDynamicArg, ValueNode2);
    exports.TagDynamicArg = TagDynamicArg;
    TagDynamicArg.prototype.c = function() {
      return this.value().c();
    };
    function TagHandler() {
      return TagPart.apply(this, arguments);
    }
    subclass$(TagHandler, TagPart);
    exports.TagHandler = TagHandler;
    TagHandler.prototype.__params = { watch: "paramsDidSet", name: "params" };
    TagHandler.prototype.params = function(v) {
      return this._params;
    };
    TagHandler.prototype.setParams = function(v) {
      var a = this.params();
      if (v != a) {
        this._params = v;
      }
      if (v != a) {
        this.paramsDidSet && this.paramsDidSet(v, a, this.__params);
      }
      return this;
    };
    TagHandler.prototype.paramsDidSet = function(params) {
      this._chain.push(this._last = new TagModifier("options"));
      this._last._handlerName = this._name;
      return this._last.setParams(params), params;
    };
    TagHandler.prototype.add = function(item, type, start, end) {
      if (type == TagHandlerCallback) {
        if (item instanceof ArgList) {
          item = item.first();
        }
        ;
        item = new TagHandlerCallback(item);
      }
      ;
      return TagHandler.prototype.__super__.add.call(this, item, type);
    };
    TagHandler.prototype.visit = function() {
      TagHandler.prototype.__super__.visit.apply(this, arguments);
      STACK.use("events");
      if (this._name && CUSTOM_EVENTS[String(this._name)] && STACK.isWeb()) {
        return STACK.use(CUSTOM_EVENTS[String(this._name)]);
      }
      ;
    };
    TagHandler.prototype.isStatic = function() {
      let valStatic = !this.value() || this.value().isPrimitive() || this.value() instanceof Func && !this.value().nonlocals();
      return valStatic && this._chain.every(function(item) {
        let val = item instanceof Parens ? item.value() : item;
        return val instanceof Func ? !val.nonlocals() : val.isPrimitive();
      });
    };
    TagHandler.prototype.modsIdentifier = function() {
      return null;
    };
    TagHandler.prototype.js = function(o) {
      if (STACK.tsc()) {
        let out = "" + this.tagRef() + ".addEventListener(" + this.quoted() + ",(e)=>{\n";
        for (let i = 0, items = iter$(this.modifiers()), len = items.length; i < len; i++) {
          out += items[i].c() + ";\n";
        }
        ;
        out += "})";
        return out;
      }
      ;
      if (this._standalone) {
        let up = this._tag;
        let iref = "" + up.cvar() + "[" + this.osym() + "]";
        let mods = this.modifiers();
        let specials = mods.extractDynamics();
        let visit = false;
        let out = [];
        let add = function(val) {
          return out.push(val);
        };
        let hvar = up.hvar();
        add("" + up.hvar() + " = " + iref + " || (" + iref + "=" + mods.c(o) + ")");
        for (let j = 0, items = iter$(specials), len = items.length, special; j < len; j++) {
          special = items[j];
          let k = special.option("key");
          let i = special.option("index");
          let path = "" + OP(".", hvar, k).c() + "[" + i + "]";
          if (k == "options") {
            visit = true;
            add("(" + this.vvar() + "=" + special.c(o) + "," + this.vvar() + "===" + path + " || (" + path + "=" + this.vvar() + "," + this.dvar() + "|=" + F.DIFF_MODIFIERS + "|" + F.DIFF_INLINE + "))");
          } else {
            add("" + path + "=" + special.c(o));
          }
          ;
        }
        ;
        add("" + up.bvar() + " || " + up.ref() + ".on$(" + this.quoted() + "," + hvar.c() + "," + this.scope__().context().c() + ")");
        if (visit) {
          add("" + up.dvar() + "&" + F.DIFF_INLINE + " && (" + up.dvar() + "^=" + F.DIFF_INLINE + "," + hvar + "[" + this.gsym("#visit") + "]?.())");
        }
        ;
        return "(" + out.join(",\n") + ")";
      }
      ;
      return "" + this.tagRef() + ".on$(" + this.quoted() + "," + this.modifiers().c() + "," + this.scope__().context().c() + ")";
    };
    TagHandler.prototype.consume = function(node) {
      if (node instanceof TagLike) {
        this._tag = node;
        this._standalone = true;
      }
      ;
      return this;
    };
    function TagHandlerCallback() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(TagHandlerCallback, ValueNode2);
    exports.TagHandlerCallback = TagHandlerCallback;
    TagHandlerCallback.prototype.visit = function() {
      let val = this.value();
      if (val instanceof Parens) {
        val = val.value();
      }
      ;
      if (val instanceof Func) {
        val = val.body();
      }
      ;
      if (val instanceof Access || val instanceof VarOrAccess) {
        let target = val;
        val = CALL(val, [LIT("e")]);
        val._args._startLoc = target.endLoc();
        val._args._endLoc = target.endLoc();
      }
      ;
      this.setValue(new (STACK.tsc() ? Func : IsolatedFunc)([], [val], null, {}));
      if (this.value() instanceof Func) {
        let evparam = this.value().params().at(0, true, "e");
        let stateparam = this.value().params().at(1, true, "$$");
      }
      ;
      this.value().traverse();
      return;
    };
    function TagBody() {
      return ListNode.apply(this, arguments);
    }
    subclass$(TagBody, ListNode);
    exports.TagBody = TagBody;
    TagBody.prototype.add = function(item, o) {
      if (item instanceof InterpolatedString) {
        item = item.toArray();
        if (item.length == 1) {
          item = new TagTextContent(item[0]);
        }
        ;
      }
      ;
      return TagBody.prototype.__super__.add.call(this, item, o);
    };
    TagBody.prototype.consume = function(node) {
      if (node instanceof TagLike) {
        this._nodes = this._nodes.map(function(child) {
          if (!(child instanceof Meta)) {
            return child.consume(node);
          } else {
            return child;
          }
          ;
        });
        return this;
      }
      ;
      return TagBody.prototype.__super__.consume.apply(this, arguments);
    };
    function TagLike(o) {
      if (o === void 0)
        o = {};
      this._options = o;
      this._flags = 0;
      this._tagvars = {};
      this.setup(o);
      this;
    }
    subclass$(TagLike, Node2);
    TagLike.prototype.isIndexableInLoop = function() {
      return false;
    };
    TagLike.prototype.sourceId = function() {
      return this._sourceId || (this._sourceId = STACK.sourceId() + "-" + this.oid());
    };
    TagLike.prototype.body = function() {
      return this._body || this._options.body;
    };
    TagLike.prototype.value = function() {
      return this._options.value;
    };
    TagLike.prototype.isReactive = function() {
      return true;
    };
    TagLike.prototype.isDetached = function() {
      return this.option("detached");
    };
    TagLike.prototype.isSVG = function() {
      return this._isSVG == null ? this._isSVG = this._parent ? this._parent.isSVG() : false : this._isSVG;
    };
    TagLike.prototype.parentTag = function() {
      let el = this._parent;
      while (el && !(el instanceof Tag)) {
        el = el._parent;
      }
      ;
      return el;
    };
    TagLike.prototype.tagLikeParents = function() {
      let parents = [];
      let el = this._parent;
      while (el instanceof TagLike) {
        parents.push(el);
        el = el.parent();
      }
      ;
      return parents;
    };
    TagLike.prototype.setup = function() {
      this._traversed = false;
      this._consumed = [];
      return this;
    };
    TagLike.prototype.osym = function(ns) {
      if (ns === void 0)
        ns = "";
      return STACK.getSymbol(this.oid() + ns, InternalPrefixes2.SYM + (this.tagvarprefix() || "") + ns);
    };
    TagLike.prototype.root = function() {
      return this._parent ? this._parent.root() : this;
    };
    TagLike.prototype.register = function(node) {
      if (node instanceof If || node instanceof Switch) {
        this.flag(F.TAG_HAS_BRANCHES);
        node = new TagSwitchFragment({ body: node });
      } else if (node instanceof Loop) {
        this.flag(F.TAG_HAS_LOOPS);
        node = new TagLoopFragment({ body: node.body(), value: node });
      } else if (node instanceof Tag) {
        if (node.isSlot()) {
          this.flag(F.TAG_HAS_DYNAMIC_CHILDREN);
        }
        ;
      } else if (node instanceof Op) {
        node = node.opToIfTree();
        if (node instanceof If) {
          this.flag(F.TAG_HAS_BRANCHES);
          node = new TagSwitchFragment({ body: node });
        } else {
          this.flag(F.TAG_HAS_DYNAMIC_CHILDREN);
          node = new TagContent2({ value: node });
        }
        ;
      } else if (node instanceof StyleRuleSet) {
        true;
      } else {
        if (!(node instanceof Str)) {
          this.flag(F.TAG_HAS_DYNAMIC_CHILDREN);
        }
        ;
        node = new TagContent2({ value: node });
      }
      ;
      this._consumed.push(node);
      node._consumedBy = this;
      node._parent = this;
      return node;
    };
    TagLike.prototype.flag = function(key) {
      return this._flags |= key;
    };
    TagLike.prototype.type = function() {
      return "frag";
    };
    TagLike.prototype.unflag = function(key) {
      return this._flags = this._flags & ~key;
    };
    TagLike.prototype.hasFlag = function(key) {
      return this._flags & key;
    };
    TagLike.prototype.isAbstract = function() {
      return true;
    };
    TagLike.prototype.isOnlyChild = function() {
      return this.isFirstChild() && this.isLastChild();
    };
    TagLike.prototype.isFirstChild = function() {
      return this.hasFlag(F.TAG_FIRST_CHILD);
    };
    TagLike.prototype.isLastChild = function() {
      return this.hasFlag(F.TAG_LAST_CHILD);
    };
    TagLike.prototype.isIndexed = function() {
      return this.option("indexed");
    };
    TagLike.prototype.isComponent = function() {
      return this._kind == "component";
    };
    TagLike.prototype.isSelf = function() {
      return this.type() instanceof Self || this.type() instanceof This;
    };
    TagLike.prototype.isShadowRoot = function() {
      return this._tagName && this._tagName == "shadow-root";
    };
    TagLike.prototype.isSlot = function() {
      return this._kind == "slot";
    };
    TagLike.prototype.isFragment = function() {
      return this._kind == "fragment";
    };
    TagLike.prototype.isMemoized = function() {
      return !this.option("unmemoized");
    };
    TagLike.prototype.hasLoops = function() {
      return this.hasFlag(F.TAG_HAS_LOOPS);
    };
    TagLike.prototype.hasBranches = function() {
      return this.hasFlag(F.TAG_HAS_BRANCHES);
    };
    TagLike.prototype.hasDynamicChildren = function() {
      return this.hasFlag(F.TAG_HAS_DYNAMIC_CHILDREN);
    };
    TagLike.prototype.hasDynamicFlags = function() {
      return this.hasFlag(F.TAG_HAS_DYNAMIC_FLAGS);
    };
    TagLike.prototype.hasNonTagChildren = function() {
      return this.hasLoops() || this.hasBranches() || this.hasDynamicChildren();
    };
    TagLike.prototype.hasDynamicDescendants = function() {
      if (this.hasNonTagChildren()) {
        return true;
      }
      ;
      for (let i = 0, items = iter$(this._consumed), len = items.length, el; i < len; i++) {
        el = items[i];
        if (el instanceof Tag) {
          if (el.hasDynamicDescendants()) {
            return true;
          }
          ;
        }
        ;
      }
      ;
      return false;
    };
    TagLike.prototype.hasChildren = function() {
      return this._consumed.length > 0;
    };
    TagLike.prototype.tagvar = function(name) {
      name = InternalPrefixes2[name] || name;
      return this._tagvars[name] || (this._tagvars[name] = this.scope__().closure().temporary(null, { reuse: false, alias: "" + name + this.tagvarprefix() }, "" + name + this.tagvarprefix()));
    };
    TagLike.prototype.tagvarprefix = function() {
      return "";
    };
    TagLike.prototype.level = function() {
      return this._level;
    };
    TagLike.prototype.parent = function() {
      return this._parent || (this._parent = this.option("parent"));
    };
    TagLike.prototype.fragment = function() {
      return this._fragment || this.parent();
    };
    TagLike.prototype.tvar = function() {
      return this._tvar || this.tagvar("T");
    };
    TagLike.prototype.parentRef = function() {
      return this._parentRef || (this._parentRef = this.parent() ? this.parent().ref() : "" + this.parentCache() + "._");
    };
    TagLike.prototype.parentCache = function() {
      return this._parentCache || (this._parentCache = this.parent() ? this.parent().cvar() : this.isMemoized() ? this.scope__().closure().tagCache() : this.scope__().closure().tagTempCache());
    };
    TagLike.prototype.renderContextFn = function() {
      return "" + this.parentCache() + "[" + this.gsym("#getRenderContext") + "]";
    };
    TagLike.prototype.dynamicContextFn = function() {
      return "" + this.parentCache() + "[" + this.gsym("#getDynamicContext") + "]";
    };
    TagLike.prototype.bvar = function() {
      return this._bvar || (this._parent ? this._parent.bvar() : this.tagvar("B"));
    };
    TagLike.prototype.cvar = function() {
      return this._cvar || (this._parent ? this._parent.cvar() : this.tagvar("C"));
    };
    TagLike.prototype.owncvar = function() {
      return this.tagvar("C");
    };
    TagLike.prototype.vvar = function() {
      return this.tagvar("V");
    };
    TagLike.prototype.hvar = function() {
      return this.tagvar("H");
    };
    TagLike.prototype.kvar = function() {
      return this.tagvar("K");
    };
    TagLike.prototype.dvar = function() {
      return this.tagvar("D");
    };
    TagLike.prototype.ref = function() {
      return this._ref || (this._cachedRef = "" + (this.parent() ? this.parent().cvar() : "") + "[" + this.osym() + "]");
    };
    TagLike.prototype.visit = function(stack) {
      var o = this._options;
      var scope = this._tagScope = this.scope__();
      if (this.up() instanceof Op) {
        this.set({ detached: true });
      }
      ;
      let prevTag = this._parent = stack._tag;
      this._level = (this._parent && this._parent._level || 0) + 1;
      stack._tag = null;
      for (let i = 0, items = iter$(this._attributes), len = items.length; i < len; i++) {
        items[i].traverse();
      }
      ;
      stack._tag = this;
      if (o.key) {
        o.key.traverse();
      }
      ;
      this.visitBeforeBody(stack);
      if (this.body()) {
        this.body().traverse();
      }
      ;
      this.visitAfterBody(stack);
      stack._tag = this._parent;
      if (!this._parent) {
        this._level = 0;
        this.consumeChildren();
        this.visitAfterConsumed();
      }
      ;
      return this;
    };
    TagLike.prototype.visitBeforeBody = function() {
      return this;
    };
    TagLike.prototype.visitAfterBody = function() {
      return this;
    };
    TagLike.prototype.consumeChildren = function() {
      if (this._consumed.length) {
        return;
      }
      ;
      this.body() && this.body().consume(this);
      let first = this._consumed[0];
      let last = this._consumed[this._consumed.length - 1];
      if (!this.isAbstract()) {
        if (first instanceof TagLike) {
          first.flag(F.TAG_FIRST_CHILD);
        }
        ;
        if (last instanceof TagLike) {
          last.flag(F.TAG_LAST_CHILD);
        }
        ;
      }
      ;
      for (let i = 0, items = iter$(this._consumed), len = items.length, item; i < len; i++) {
        item = items[i];
        if (!(item instanceof TagLike)) {
          continue;
        }
        ;
        item._consumedBy = this;
        item._parent = this;
        item._level = this._level + 1;
        item.visitAfterConsumed();
        item.consumeChildren();
      }
      ;
      this.visitAfterConsumedChildren();
      return this;
    };
    TagLike.prototype.visitAfterConsumedChildren = function() {
      return this;
    };
    TagLike.prototype.visitAfterConsumed = function() {
      return this;
    };
    TagLike.prototype.consume = function(node) {
      if (node instanceof TagLike) {
        return node.register(this);
      }
      ;
      if (node instanceof Variable) {
        this.option("assignToVar", node);
        return this;
      }
      ;
      if (node instanceof Assign) {
        return OP(node.op(), node.left(), this);
      } else if (node instanceof VarDeclaration) {
        return OP("=", node.left(), this);
      } else if (node instanceof Op) {
        return OP(node.op(), node.left(), this);
      } else if (node instanceof Return) {
        this.option("return", true);
        return this;
      }
      ;
      return this;
    };
    function TagTextContent() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(TagTextContent, ValueNode2);
    exports.TagTextContent = TagTextContent;
    function TagContent2() {
      return TagLike.apply(this, arguments);
    }
    subclass$(TagContent2, TagLike);
    exports.TagContent = TagContent2;
    TagContent2.prototype.vvar = function() {
      return this.parent().vvar();
    };
    TagContent2.prototype.bvar = function() {
      return this.parent().bvar();
    };
    TagContent2.prototype.ref = function() {
      return this.fragment().tvar();
    };
    TagContent2.prototype.key = function() {
      return this._key || (this._key = "" + this.parent().cvar() + "[" + this.osym() + "]");
    };
    TagContent2.prototype.isStatic = function() {
      return this.value() instanceof Str || this.value() instanceof Num;
    };
    TagContent2.prototype.js = function() {
      let value = this.value();
      let parts = [];
      let isText = value instanceof Str || value instanceof Num || value instanceof TagTextContent;
      let isStatic = this.isStatic();
      if (STACK.tsc()) {
        return value.c(this.o());
      }
      ;
      if (this.parent() instanceof TagSwitchFragment || this._tvar && this.parent() instanceof Tag && (this.parent().isSlot() || this.isDetached())) {
        parts.push("" + this._tvar + "=" + value.c(this.o()));
        if (value instanceof Call || value instanceof BangCall) {
          let k = "" + this.parent().cvar() + "[" + this.osym("$") + "]";
          parts.unshift("" + this.runtime().renderContext + ".context=(" + k + " || (" + k + "={_:" + this.fragment().tvar() + "}))");
          parts.push("" + this.runtime().renderContext + ".context=null");
        }
        ;
      } else if (this.isOnlyChild() && (value instanceof Str || value instanceof Num)) {
        return "" + this.bvar() + " || " + this.ref() + ".text$(" + value.c(this.o()) + ")";
      } else if (isStatic) {
        return "" + this.bvar() + " || " + this.ref() + this.domCall("insert") + "(" + value.c(this.o()) + ")";
      } else if (value instanceof TagTextContent && this.isOnlyChild() && !(this.parent() instanceof TagSwitchFragment)) {
        return "(" + this.vvar() + "=" + value.c(this.o()) + "," + this.vvar() + "===" + this.key() + " || " + this.ref() + ".text$(String(" + this.key() + "=" + this.vvar() + ")))";
      } else {
        parts.push("" + this.vvar() + "=" + value.c(this.o()));
        let inskey = "" + this.parent().cvar() + "[" + this.osym("i") + "]";
        if (value instanceof Call || value instanceof BangCall) {
          let k = "" + this.parent().cvar() + "[" + this.osym("$") + "]";
          parts.unshift("" + this.runtime().renderContext + ".context=(" + k + " || (" + k + "={_:" + this.fragment().tvar() + "}))");
          parts.push("" + this.runtime().renderContext + ".context=null");
        }
        ;
        if (value instanceof TagTextContent) {
          parts.push("(" + this.vvar() + "===" + this.key() + "&&" + this.bvar() + ") || (" + inskey + " = " + this.ref() + this.domCall("insert") + "(String(" + this.key() + "=" + this.vvar() + ")," + this._flags + "," + inskey + "))");
        } else {
          parts.push("(" + this.vvar() + "===" + this.key() + "&&" + this.bvar() + ") || (" + inskey + " = " + this.ref() + this.domCall("insert") + "(" + this.key() + "=" + this.vvar() + "," + this._flags + "," + inskey + "))");
        }
        ;
      }
      ;
      return "(" + parts.join(",") + ")";
    };
    function TagFragment() {
      return TagLike.apply(this, arguments);
    }
    subclass$(TagFragment, TagLike);
    exports.TagFragment = TagFragment;
    function TagSwitchFragment() {
      return TagLike.apply(this, arguments);
    }
    subclass$(TagSwitchFragment, TagLike);
    exports.TagSwitchFragment = TagSwitchFragment;
    TagSwitchFragment.prototype.setup = function() {
      TagSwitchFragment.prototype.__super__.setup.apply(this, arguments);
      this._branches = [];
      this._inserts = [];
      return this._styles = [];
    };
    TagSwitchFragment.prototype.getInsertVar = function(index) {
      return this._inserts[index] || (this._inserts[index] = this.tagvar("\u03C4" + index + "if"));
    };
    TagSwitchFragment.prototype.getStyleVar = function(index) {
      return this._styles[index] || (this._styles[index] = this.tagvar("\u03C4" + index + "css"));
    };
    TagSwitchFragment.prototype.tvar = function() {
      return this.fragment().tvar();
    };
    TagSwitchFragment.prototype.register = function(node) {
      let res = TagSwitchFragment.prototype.__super__.register.apply(this, arguments);
      if (this._branches) {
        let curr = this._branches[this._branches.length - 1];
        curr && curr.push(res);
      }
      ;
      return res;
    };
    TagSwitchFragment.prototype.visitAfterConsumedChildren = function() {
      if (!(this._parent instanceof TagSwitchFragment)) {
        let max = this.assignChildIndices(0, 0, this);
      }
      ;
      return this;
    };
    TagSwitchFragment.prototype.assignChildIndices = function(start, stylestart, root) {
      let nr = start;
      let max = start;
      let stylenr = stylestart;
      let stylemax = stylestart;
      for (let i = 0, items = iter$(this._branches), len = items.length, branch; i < len; i++) {
        branch = items[i];
        nr = start;
        for (let j = 0, ary = iter$(branch), len2 = ary.length, item; j < len2; j++) {
          item = ary[j];
          if (item instanceof TagSwitchFragment) {
            let res = item.assignChildIndices(nr, stylenr, root);
            nr = res[0];
            stylenr = res[1];
          } else if (item instanceof StyleRuleSet) {
            item._tvar = root.getStyleVar(stylenr);
            item._tvar._stylerule = item;
            stylenr++;
          } else {
            item._tvar = root.getInsertVar(nr);
            item.set({ detached: true });
            nr++;
          }
          ;
        }
        ;
        if (nr > max) {
          max = nr;
        }
        ;
        if (stylenr > stylemax) {
          stylemax = stylenr;
        }
        ;
      }
      ;
      return [max, stylemax];
    };
    TagSwitchFragment.prototype.js = function(o) {
      var parts = [];
      var top = "";
      let vars = this._inserts.concat(this._styles);
      if (len$(vars)) {
        top = vars.join(" = ") + " = null";
      }
      ;
      let wasInline = o.inline;
      if (this.body().isExpression()) {
        o.inline = true;
      }
      ;
      var out = this.body().c(o);
      o.inline = wasInline;
      if (STACK.tsc()) {
        return out;
      }
      ;
      if (top) {
        parts.push(top);
      }
      ;
      parts.push(out);
      for (let i = 0, items = iter$(this._inserts), len = items.length; i < len; i++) {
        let key = "" + this.cvar() + "[" + this.osym(i) + "]";
        parts.push("(" + key + " = " + this.tvar() + this.domCall("insert") + "(" + items[i] + ",0," + key + "))");
      }
      ;
      for (let i = 0, items = iter$(this._styles), len = items.length, item; i < len; i++) {
        item = items[i];
        let flag = item._stylerule._name;
        parts.push("" + this.tvar() + ".flags.toggle('" + flag + "',!!" + item + ")");
      }
      ;
      if (o.inline) {
        return parts.join(",");
      } else {
        return parts.join(";\n");
      }
      ;
    };
    function TagLoopFragment() {
      return TagLike.apply(this, arguments);
    }
    subclass$(TagLoopFragment, TagLike);
    exports.TagLoopFragment = TagLoopFragment;
    TagLoopFragment.prototype.isKeyed = function() {
      return this.option("keyed") || this.hasFlag(F.TAG_HAS_BRANCHES);
    };
    TagLoopFragment.prototype.isIndexableInLoop = function() {
      return true;
    };
    TagLoopFragment.prototype.consumeChildren = function() {
      TagLoopFragment.prototype.__super__.consumeChildren.apply(this, arguments);
      if (this.hasFlag(F.TAG_HAS_BRANCHES)) {
        return this.set({ keyed: true });
      } else if (this._consumed.every(function(_0) {
        return _0 instanceof TagLike && _0.isIndexableInLoop();
      })) {
        return this.set({ indexed: true });
      } else {
        return this.set({ keyed: true });
      }
      ;
    };
    TagLoopFragment.prototype.cvar = function() {
      return this._cvar || this.tagvar("C");
    };
    TagLoopFragment.prototype.js = function(o) {
      if (this.stack().isExpression()) {
        let fn = CALL(FN([], [this], this.stack().scope()), []);
        return fn.c();
      }
      ;
      if (STACK.tsc()) {
        return "" + this.tvar() + " = new DocumentFragment;\n" + this.value().c(o);
      }
      ;
      if (this.parent() instanceof TagLoopFragment && this.parent().isKeyed()) {
        this.set({ detached: true });
      }
      ;
      if (this.parent() instanceof TagSwitchFragment) {
        this.set({ detached: true });
      }
      ;
      if (this.parent() && !this._consumedBy) {
        this.set({ detached: true });
      }
      ;
      let iref = this.option("indexed") ? this.runtime().createIndexedList : this.runtime().createKeyedList;
      let cache = this.parent().cvar();
      let parentRef = this.isDetached() ? LIT("null") : this.fragment().tvar();
      let out = "";
      let refpath;
      if (this.parent() instanceof TagLoopFragment) {
        if (this.parent().isKeyed()) {
          this.option("key", OP("+", LIT("'" + this.oid() + "$'"), this.parent().kvar()));
          out += "" + this.hvar() + "=" + this.option("key").c() + ";\n";
          refpath = this._ref = "" + this.parent().cvar() + "[" + this.hvar() + "]";
        } else {
          refpath = this._ref = "" + this.parent().cvar() + "[" + this.parent().kvar() + "]";
        }
        ;
      } else {
        refpath = "" + cache + "[" + this.osym() + "]";
      }
      ;
      out += "(" + this.tvar() + " = " + refpath + ") || (" + refpath + "=" + this.tvar() + "=" + iref + "(" + this._flags + "," + parentRef + "));\n";
      this._ref = "" + this.tvar();
      if (this.isDetached()) {
        out += "" + this.tvar() + "[" + this.gsym("##up") + "] = " + this.fragment().tvar() + ";\n";
      }
      ;
      out += "" + this.kvar() + " = 0;\n";
      out += "" + this.cvar() + "=" + this.tvar() + ".$;\n";
      out += this.value().c(o);
      out += ";" + this.tvar() + this.domCall("end") + "(" + this.kvar() + ");";
      if (this.parent() instanceof TagLoopFragment) {
        if (this.parent().isKeyed()) {
          out += "" + this.parent().ref() + ".push(" + this.tvar() + "," + this.parent().kvar() + "++," + this.hvar() + ");";
        } else if (this.parent().isIndexed()) {
          out += "" + this.parent().kvar() + "++;";
        }
        ;
      }
      ;
      return out;
    };
    function TagIndexedFragment() {
      return TagLike.apply(this, arguments);
    }
    subclass$(TagIndexedFragment, TagLike);
    exports.TagIndexedFragment = TagIndexedFragment;
    function TagKeyedFragment() {
      return TagLike.apply(this, arguments);
    }
    subclass$(TagKeyedFragment, TagLike);
    exports.TagKeyedFragment = TagKeyedFragment;
    function TagSlotProxy() {
      return TagLike.apply(this, arguments);
    }
    subclass$(TagSlotProxy, TagLike);
    exports.TagSlotProxy = TagSlotProxy;
    TagSlotProxy.prototype.ref = function() {
      return this.tvar();
    };
    TagSlotProxy.prototype.tagvarprefix = function() {
      return this.oid() + "S";
    };
    function Tag() {
      return TagLike.apply(this, arguments);
    }
    subclass$(Tag, TagLike);
    exports.Tag = Tag;
    Tag.prototype.attrmap = function(v) {
      return this._attrmap;
    };
    Tag.prototype.setAttrmap = function(v) {
      this._attrmap = v;
      return this;
    };
    Tag.prototype.setup = function() {
      Tag.prototype.__super__.setup.apply(this, arguments);
      this._attributes = this._options.attributes || [];
      this._attrmap = {};
      this._classNames = [];
      return this._className = null;
    };
    Tag.prototype.isAbstract = function() {
      return this.isSlot() || this.isFragment();
    };
    Tag.prototype.attrs = function() {
      return this._attributes;
    };
    Tag.prototype.cssns = function() {
      return this._cssns || (this._cssns = ("" + this.sourceId()).replace("-", "_"));
    };
    Tag.prototype.cssid = function() {
      return this._cssid || (this._cssid = ("" + this.sourceId()).replace("_", "-"));
    };
    Tag.prototype.tagvarprefix = function() {
      return this.isSelf() ? "SELF" : "T";
      return this._tagvarprefix || (this._tagvarprefix = this.type() && this.type().toVarPrefix ? this.type().toVarPrefix() : this.isSelf() ? "self" : "tag");
      return "";
    };
    Tag.prototype.isStatementLike = function() {
      return this.option("iife");
    };
    Tag.prototype.isIndexableInLoop = function() {
      return !this.option("key") && !this.isDynamicType();
    };
    Tag.prototype.traverse = function() {
      if (this._traversed) {
        return this;
      }
      ;
      this._tid = STACK.generateId("tag");
      this._tagDeclaration = STACK.up(TagDeclaration);
      let close = this._options.close;
      let body = this._options.body || [];
      let returns = this;
      if (close && close._value == "/>" && len$(body)) {
        returns = [this].concat(body._nodes);
        this._options.body = new ArgList([]);
      }
      ;
      Tag.prototype.__super__.traverse.apply(this, arguments);
      return returns;
    };
    Tag.prototype.visitBeforeBody = function(stack) {
      var self2 = this;
      self2.oid();
      let type = self2._options.type;
      type && type.traverse();
      if (STACK.hmr()) {
        self2.cssid();
      }
      ;
      if (self2.isSelf() || self2.tagName().indexOf("-") >= 0 || self2.isDynamicType() || type && type.isComponent()) {
        self2._options.custom = true;
        self2._kind = "component";
      } else {
        self2._kind = "element";
      }
      ;
      if (self2.attrs().length == 0 && !self2._options.type) {
        self2._options.type = "fragment";
      }
      ;
      let tagName = self2.tagName();
      if (tagName == "slot") {
        self2._kind = "slot";
      } else if (tagName == "fragment") {
        self2._kind = "fragment";
      }
      ;
      if (tagName == "shadow-root") {
        self2._kind = "shadow-root";
      }
      ;
      if (self2.isSelf()) {
        let decl = stack.up(TagDeclaration);
        if (decl) {
          decl.set({ self: self2, sourceId: self2.sourceId() });
        }
        ;
      }
      ;
      self2._tagName = tagName;
      self2._dynamics = [];
      let i = 0;
      while (i < self2._attributes.length) {
        let item = self2._attributes[i++];
        if (item instanceof TagFlag && item.name() instanceof StyleRuleSet) {
          if (item.name().placeholders().length) {
            for (let j = 0, items = iter$(item.name().placeholders()), len = items.length, ph; j < len; j++) {
              ph = items[j];
              let setter = new TagStyleAttr(ph.name());
              setter._tag = self2;
              setter.setValue(ph.runtimeValue());
              setter.set(
                {
                  propname: ph._propname,
                  unit: ph.option("unit"),
                  styleterm: ph
                }
              );
              self2._attributes.splice(i++, 0, setter);
              setter.traverse();
            }
            ;
          }
          ;
        }
        ;
      }
      ;
      self2._attributes = self2._attributes.filter(function(item) {
        if (item instanceof TagFlag && item.isStatic()) {
          self2._classNames.push(item);
          return false;
        }
        ;
        if (!STACK.tsc()) {
          if (item == self2._attrmap.$key) {
            item.warn("$key= is deprecated, use key=", { loc: item._name });
            self2.set({ key: item.value() });
            return false;
          }
          ;
          if (item == self2._attrmap.key) {
            self2.set({ key: item.value() });
            return false;
          }
          ;
        }
        ;
        if (!item.isStatic()) {
          self2._dynamics.push(item);
        }
        ;
        return true;
      });
      if (self2._parent) {
        if (self2._attrmap.route || self2.isDynamicType() || self2.isSlot()) {
          self2._parent.set({ shouldEnd: true, ownCache: true });
        }
        ;
      }
      ;
      if (self2.isSlot()) {
        let name = self2._attrmap.name ? self2._attrmap.name.value() : "__";
        if (name instanceof Str) {
          name = name.raw();
        }
        ;
        self2.set({ name });
        self2._attributes = [];
      }
      ;
      self2._scope = new TagBodyScope(self2);
      self2._scope.visit();
      return Tag.prototype.__super__.visitBeforeBody.apply(self2, arguments);
    };
    Tag.prototype.register = function(node) {
      node = Tag.prototype.__super__.register.call(this, node);
      if (node instanceof TagLike && (this.isComponent() && !this.isSelf())) {
        let slotKey = node instanceof Tag ? node._attrmap.slot : null;
        let name = "__";
        if (slotKey) {
          if (slotKey.value() instanceof Str) {
            name = slotKey.value().raw();
          }
          ;
        }
        ;
        let slot = this.getSlot(name);
        node._fragment = slot;
      }
      ;
      return node;
    };
    Tag.prototype.visitAfterBody = function(stack) {
      return this;
    };
    Tag.prototype.visitAfterConsumed = function() {
      if (this.isSVG()) {
        this._kind = "svg";
      }
      ;
      if (this._options.reference) {
        let method = this.stack().up(MethodDeclaration);
        let tagdef = this.stack().up(TagDeclaration);
        let err;
        if (this._options.key) {
          err = "Named element cannot be keyed at the same time";
        }
        ;
        if (tagdef && method && String(method.name()) == "render") {
          for (let i = 0, items = iter$(this.tagLikeParents()), len = items.length, el; i < len; i++) {
            el = items[i];
            if (el instanceof TagLoopFragment) {
              err = "Named tags not allowed inside loops";
            }
            ;
            if (el instanceof Tag && el.isDynamicType()) {
              err = "Named tags not allowed inside dynamic parent";
            }
            ;
          }
          ;
          if (!err) {
            tagdef.addElementReference(this._options.reference, this);
          }
          ;
        } else {
          err = "Named tags are only allowed inside render method";
        }
        ;
        if (err) {
          this.warn(err, { loc: this._options.reference });
        }
        ;
      }
      ;
      return this;
    };
    Tag.prototype.visitAfterConsumedChildren = function() {
      if (this.isSlot() && this._consumed.length > 1) {
        this.set({ markWhenBuilt: true, reactive: true });
      }
      ;
      return;
    };
    Tag.prototype.hasBlockScopedVariables = function() {
      return Object.keys(this._scope.varmap()).length > 0;
    };
    Tag.prototype.getSlot = function(name) {
      this._slots || (this._slots = {});
      return this._slots[name] || (this._slots[name] = new TagSlotProxy({ parent: this, name }));
    };
    Tag.prototype.addPart = function(part, type, tok) {
      let attrs = this._attributes;
      let curr = attrs.CURRENT;
      let next = curr;
      if (type == TagId) {
        this.set({ id: part });
      }
      ;
      if (type == TagArgList) {
        if (attrs.length == 0) {
          let typ = this.option("type");
          if (typ._token == "div") {
            typ = null;
          }
          ;
          this.set({ dynamic: true });
          let op = part.nodes()[0];
          if (typ) {
            op = CALL(typ.toFunctionalType(), part.nodes());
          }
          ;
          this.set({ type: op, functional: op });
          return this;
        }
        ;
      }
      ;
      if (type == TagSep) {
        next = null;
      } else if (type == TagAttrValue) {
        if (part instanceof Parens) {
          part = part.value();
        }
        ;
        if (curr instanceof TagFlag) {
          curr.setCondition(part);
          this.flag(F.TAG_HAS_DYNAMIC_FLAGS);
          curr.set({ op: tok });
        } else if (curr instanceof TagHandler) {
          if (part) {
            curr.add(new TagHandlerCallback(part), type);
          }
          ;
        } else if (curr) {
          curr.setValue(part);
          curr.set({ op: tok });
        }
        ;
      } else if (curr instanceof TagHandler) {
        if (part instanceof IdentifierExpression && part.single() && !part.isPrimitive()) {
          part = new (STACK.tsc() ? Func : IsolatedFunc)([], [part.single()], null, {});
        }
        ;
        curr.add(part, type);
      } else if (curr instanceof TagAttr) {
        curr.add(part, type);
      } else {
        if (type == TagFlag && part instanceof IdentifierExpression && !part.isPrimitive()) {
          this.flag(F.TAG_HAS_DYNAMIC_FLAGS);
        }
        ;
        if (part instanceof type) {
          part._tag = this;
        } else {
          part = new type(part, this);
        }
        ;
        attrs.push(next = part);
        if (next instanceof TagAttr && next.name().isPrimitive()) {
          let name = String(next.name().toRaw());
          if (name.match(/^bind(?=\:|$)/) && this.isFunctional()) {
            next._name.error("bind not supported for functional fragments");
          }
          ;
          if (name == "bind") {
            (next._name._single || next._name)._value = "bind:data";
            name = "bind:data";
          }
          ;
          this._attrmap[name] = next;
        }
        ;
      }
      ;
      if (next != curr) {
        attrs.CURRENT = next;
      }
      ;
      return this;
    };
    Tag.prototype.type = function() {
      return this._options.type || (this._attributes.length == 0 ? "fragment" : "div");
    };
    Tag.prototype.tagName = function() {
      return this._tagName || String(this._options.type);
    };
    Tag.prototype.isDynamicType = function() {
      return this.type() instanceof ExpressionNode || this._options.dynamic;
    };
    Tag.prototype.isFunctional = function() {
      return !!this._options.functional;
    };
    Tag.prototype.isSVG = function() {
      return this._isSVG == null ? this._isSVG = this.type() instanceof TagTypeIdentifier && this.type().isSVG() || this._parent && this._parent.isSVG() && !this.isDynamicType() : this._isSVG;
    };
    Tag.prototype.isAsset = function() {
      return this._isAsset || false;
    };
    Tag.prototype.create_ = function() {
      if (this.isFragment() || this.isSlot()) {
        return this.runtime().createLiveFragment;
      } else if (this.isAsset()) {
        return this.runtime().createAssetElement;
      } else if (this.isDynamicType()) {
        return this.runtime().createDynamic;
      } else if (this.isSVG()) {
        return this.runtime().createSVGElement;
      } else if (this.isComponent()) {
        return this.runtime().createComponent;
      } else {
        return this.runtime().createElement;
      }
      ;
    };
    Tag.prototype.isReactive = function() {
      return this.option("reactive") || (this._parent ? this._parent.isReactive() : !(this.scope__() instanceof RootScope));
    };
    Tag.prototype.isDetached = function() {
      return this.option("detached");
    };
    Tag.prototype.hasDynamicParts = function() {
      if (this._dynamics.length == 0 && !this.hasDynamicFlags() && !(this.type() instanceof ExpressionNode)) {
        let nodes = this.body() ? this.body().values() : [];
        if (nodes.every(function(v) {
          return v instanceof Str || v instanceof Tag && !v.isDynamicType();
        })) {
          if (!this.hasNonTagChildren() && !this.isSlot() && !this.option("dynamic")) {
            this.setHasDynamicParts(false);
          }
          ;
        }
        ;
      }
      ;
      return true;
    };
    Tag.prototype.js = function(o) {
      var cname;
      var stack = STACK;
      var isExpression = stack.isExpression();
      var head = [];
      var out = [];
      var foot = [];
      var add = function(val) {
        if (val instanceof Variable) {
          val = val.toString();
        }
        ;
        return out.push(val);
      };
      var parent = this.parent();
      var fragment = this.fragment();
      var component = this._tagDeclaration;
      let oscope = this._tagDeclaration ? this._tagDeclaration.scope() : null;
      let typ = this.isSelf() ? "self" : this.isFragment() ? "'fragment'" : this.type().isClass && this.type().isClass() ? this.type().toTypeArgument() : "'" + this.type()._value + "'";
      if (this.type()._value == "global" || this.type()._value == "teleport") {
        typ = "'i-" + this.type()._value + "'";
        STACK.use("dom_teleport");
      }
      ;
      if (parent && !this._consumedBy) {
        this.set({ detached: true });
      }
      ;
      var parentIsInlined = o.inline;
      var isSVG = this.isSVG();
      var isReactive = this.isReactive();
      var canInline = false;
      var hasDynamicParts = true;
      var useRoutes = this._attrmap.route || this._attrmap.routeTo || this._attrmap["route-to"];
      var shouldEnd = this.isComponent() || useRoutes || this.option("shouldEnd");
      if (useRoutes) {
        stack.use("router");
      }
      ;
      var dynamicKey = null;
      var ownCache = this.option("ownCache") || false;
      if (this._asset) {
        typ = this._assetRef.c();
      }
      ;
      var slotPath = "";
      if (this.isSlot()) {
        if (this.root().isSelf()) {
          slotPath = OP(".", OP(".", this.root().tvar(), STR("__slots")), STR(this.option("name"))).c();
        } else {
          let fn = OP(".", this.root().tvar(), this.gsym("#registerFunctionalSlot")).c();
          slotPath = "" + fn + "(" + STR(this.option("name")).c() + ")";
        }
        ;
      }
      ;
      if (stack.tsc()) {
        if (this.type() instanceof TagTypeIdentifier && !this.isSelf()) {
          if (this.type().isAsset()) {
            add("" + this.tvar() + " = new " + M2("SVGSVGElement", this.type()));
          } else if (this.type().isClass()) {
            add("" + this.tvar() + " = new " + M2(this.type().toClassName(), this.type()));
          } else {
            add("" + this.tvar() + " = new " + M2(this.type().toClassName(), this.type()));
          }
          ;
        } else if (this.isSelf()) {
          add("" + this.tvar() + " = " + this.type().c());
        } else if (this.isDynamicType()) {
          if (this._options.dynamic) {
            add("" + this.tvar() + " = new \u0393any");
            add("" + this.type().c());
          } else {
            add("" + this.tvar() + " = new " + M2("\u0393any", this.type()));
            add("" + this.type().c());
          }
          ;
        } else {
          add("" + this.tvar() + " = new " + M2("HTMLElement", this.type()));
          add("" + this.type().c());
        }
        ;
        for (let i = 0, items = iter$(this._attributes), len = items.length, item; i < len; i++) {
          item = items[i];
          this._ref = this.tvar();
          if (item instanceof TagAttr || item instanceof TagHandler || item instanceof TagFlag) {
            add(item.c(o));
          }
          ;
          this;
        }
        ;
        let nodes2 = this.body() ? this.body().values() : [];
        for (let i = 0, items = iter$(nodes2), len = items.length; i < len; i++) {
          add(items[i].c());
        }
        ;
        if (o.inline || isExpression) {
          add(this.option("return") ? "return " + this.tvar() : "" + this.tvar());
          let js2 = "(" + out.join(",\n") + ")";
          return js2;
        } else {
          if (this.option("return")) {
            add("return " + this.tvar());
          }
          ;
          let js2 = out.join(";\n");
          if (this.hasBlockScopedVariables()) {
            js2 = "{" + js2 + "}";
          }
          ;
          return js2;
        }
        ;
      }
      ;
      var markWhenBuilt = shouldEnd || this.hasDynamicFlags() || this.attrs().length || this.option("markWhenBuilt") || this.isDetached() || this.isDynamicType() || !!this.option("key");
      var inCondition = parent && parent.option("condition");
      if (this.isDynamicType()) {
        ownCache = true;
        if (this.isMemoized()) {
          typ = "" + this.owncvar() + ".value";
        } else {
          typ = this.type().c();
        }
        ;
      }
      ;
      if (this._cssid) {
        this._classNames.unshift(this.cssid());
      }
      ;
      for (let i = 0, items = iter$(STACK.closures()), len = items.length, closure; i < len; i++) {
        closure = items[i];
        if (closure._cssns && (!this.isSelf() || closure != oscope)) {
          this._classNames.push(closure._cssns);
        }
        ;
      }
      ;
      for (let i = 0, items = iter$(this.tagLikeParents()), len = items.length, par; i < len; i++) {
        par = items[i];
        if (par._cssns) {
          this._classNames.push(par._cssns);
        }
        ;
      }
      ;
      if (component && !this.isSelf()) {
        if (cname = component.cssref(this.option("reference") ? null : this.scope__())) {
          let orig = component._cssns;
          if (this._classNames.indexOf(orig) >= 0) {
            this._classNames.splice(this._classNames.indexOf(orig), 1);
          }
          ;
          this._classNames.push(cname);
        }
        ;
      }
      ;
      if (this.option("reference")) {
        if (oscope) {
          let name = String(this.option("reference")).slice(1);
          this._classNames.push("$" + name);
        }
        ;
      }
      ;
      if (this.option("key")) {
        this.set({ detached: true });
      }
      ;
      if (this._classNames.length) {
        let names = [];
        let dynamic = false;
        for (let i = 0, items = iter$(this._classNames), len = items.length, cls; i < len; i++) {
          cls = items[i];
          if (cls instanceof TagFlag) {
            if (cls.name() instanceof MixinIdentifier) {
              names.push(cls.name().toRaw());
            } else {
              names.push(cls.rawClassName());
            }
            ;
          } else if (cls instanceof Node2) {
            dynamic = true;
            names.push("${" + cls.c() + "}");
          } else {
            names.push(cls);
          }
          ;
        }
        ;
        names = names.filter(function(item, i) {
          return names.indexOf(item) == i;
        });
        let q = dynamic ? "`" : "'";
        this._className = q + names.join(" ") + q;
      }
      ;
      var params = [
        typ,
        fragment && !this.option("detached") ? fragment.tvar() : "null",
        this._className || "null",
        "null"
      ];
      var nodes = this.body() ? this.body().values() : [];
      if (nodes.length == 1 && nodes[0] instanceof TagContent2 && nodes[0].isStatic() && !this.isSelf() && !this.isSlot()) {
        params[3] = nodes[0].value().c();
        nodes = [];
      }
      ;
      if (this._dynamics.length == 0 && !this.hasDynamicFlags() && !dynamicKey && !this.isDynamicType()) {
        if (nodes.every(function(v) {
          return v instanceof Str || v instanceof Tag && !v.isDynamicType() && !v.option("key");
        })) {
          if (!shouldEnd && !this.hasNonTagChildren() && !this.isSlot() && !this.option("dynamic") && !this.option("reference")) {
            hasDynamicParts = false;
            if (parent instanceof Tag && !(this.up() instanceof Op)) {
              canInline = true;
            }
            ;
          }
          ;
        }
        ;
      }
      ;
      if (this.isFragment() || this.isSlot()) {
        params = [this._flags].concat(params.slice(1, 2));
      }
      ;
      if (this.isSlot()) {
        params[1] = "null";
      }
      ;
      var ctor = M2("" + this.create_() + "(" + params.join(",") + ")", this.type());
      if (this.option("reference")) {
        let par = params[1];
        params[1] = "null";
        ctor = M2("" + this.create_() + "(" + params.join(",") + ")", this.type());
        this.set({ ctor });
        ctor = OP(".", this.scope__().context(), this.option("reference")).c();
        ctor = "(" + this.tvar() + "=" + ctor + "," + this.tvar() + "[" + this.gsym("##up") + "]=" + par + "," + this.tvar() + ")";
        let decl = this.option("tagdeclbody");
        if (decl && !STACK.tsc()) {
          let head2 = decl._head || (decl._head = []);
          let ref = helpers2.toValidIdentifier(this.option("reference").c());
          let gen = this.option("ctor");
          let body = "let el=" + gen + ";\n	return (Object.defineProperty(this,'" + ref + "',{value:el}),el);";
          let getter = "get " + ref + "(){\n	" + body + "\n}";
          head2.push(getter);
        }
        ;
      } else {
        ctor = "" + this.tvar() + "=" + ctor;
      }
      ;
      if (this.option("assign")) {
        ctor = OP("=", this.option("assign"), LIT(ctor)).c();
      }
      ;
      let deeplyDynamic = this.hasDynamicDescendants();
      if (!this._consumedBy) {
        this._ref = "" + this.tvar();
        if (this.isSelf()) {
          add("" + this.tvar() + "=this");
          add("" + this.tvar() + this.domCall("open") + "()");
          add("(" + this.bvar() + "=" + this.dvar() + "=1," + this.tvar() + "[" + this.osym() + "] === 1) || (" + this.bvar() + "=" + this.dvar() + "=0," + this.tvar() + "[" + this.osym() + "]=1)");
          this._cvar = this.tvar();
        } else if (isReactive) {
          let k = "" + this.parentCache() + "[" + this.osym() + "]";
          if (this.isDynamicType() && this.isMemoized()) {
            if (this.option("key")) {
              add("" + this.owncvar() + "=" + this.dynamicContextFn() + "(" + this.osym() + "," + this.option("key").c() + ")");
            } else {
              add("" + this.owncvar() + "=" + this.renderContextFn() + "(" + this.osym() + ")");
            }
            ;
            ctor = "" + this.owncvar() + ".cache(" + ctor + ")";
            add("(" + this.bvar() + "=" + this.dvar() + "=1," + this.tvar() + "=" + this.owncvar() + ".run(" + this.type().c() + ")) || (" + this.bvar() + "=" + this.dvar() + "=0," + ctor + ")");
          } else if (this.option("key")) {
            add("" + this.cvar() + "=(" + k + "=" + k + "||new Map())");
            add("(" + this.bvar() + "=" + this.dvar() + "=1," + this.tvar() + "=" + this.cvar() + ".get(" + this.kvar() + "=" + this.option("key").c() + ")) || (" + this.bvar() + "=" + this.dvar() + "=0," + this.cvar() + ".set(" + this.kvar() + "," + ctor + "))");
          } else {
            if (this.isMemoized()) {
              add("(" + this.bvar() + "=" + this.dvar() + "=1," + this.tvar() + "=" + k + ") || (" + this.bvar() + "=" + this.dvar() + "=0," + this.tvar() + "=" + k + "=" + ctor + ")");
            } else {
              add("(" + this.bvar() + "=" + this.dvar() + "=0," + this.tvar() + "=" + ctor + ")");
            }
            ;
          }
          ;
          add("" + this.bvar() + " || (" + this.tvar() + "[" + this.gsym("##up") + "]=" + this.parentRef() + ")");
          this._cvar = this.tvar();
          this._ref = this.tvar();
          if (isExpression && !deeplyDynamic) {
            this.option("inline", canInline = true);
            o.inline = true;
          } else {
            if (isExpression) {
              this.option("iife", true);
            }
            ;
            o.inline = false;
          }
          ;
        } else {
          add("(" + ctor + ")");
          this._cvar = this.tvar();
          if (isExpression && !hasDynamicParts) {
            this.option("inline", canInline = true);
            o.inline = true;
          } else {
            this.option("iife", true);
            o.inline = false;
          }
          ;
        }
        ;
      } else {
        if (o.inline && !canInline) {
          this.option("iife", true);
          o.inline = false;
        }
        ;
        if (this.isShadowRoot()) {
          let key = "" + this.cvar() + "[" + this.osym() + "]";
          add("" + this.tvar() + "=" + key + " || (" + key + "=" + fragment.tvar() + ".attachShadow({mode:'open'}))");
        } else if (this.isSlot() && !this.hasChildren()) {
          add("" + this.tvar() + "=" + slotPath);
          if (!(parent instanceof TagSwitchFragment)) {
            let key = "" + this.cvar() + "[" + this.osym() + "]";
            add("(" + key + " = " + fragment.tvar() + this.domCall("insert") + "(" + this.tvar() + "," + this._flags + "," + key + "))");
          }
          ;
        } else if (this.isSlot() && this._consumed.length == 1) {
          this._consumed[0].set({ dynamic: true, detached: true });
          this._consumed[0]._tvar = this.tvar();
          this._consumed[0]._parent = parent;
        } else if (parent instanceof TagLoopFragment) {
          this._bvar = this.tagvar("B");
          let key = this.option("key");
          if (this.option("key")) {
            if (this.isDynamicType()) {
              add("" + this.owncvar() + "=" + this.renderContextFn() + "(" + this.option("key").c() + ")");
              let gets = "" + this.owncvar() + ".run(" + this.type().c() + ")";
              add("(" + this.bvar() + "=" + this.dvar() + "=1," + this.tvar() + "=" + gets + ") || (" + this.bvar() + "=" + this.dvar() + "=0," + this.owncvar() + ".cache(" + ctor + "))");
            } else {
              let gets = "" + this.parentCache() + ".get(" + this.kvar() + "=" + this.option("key").c() + ")";
              add("(" + this.bvar() + "=" + this.dvar() + "=1," + this.tvar() + "=" + gets + ") || (" + this.bvar() + "=" + this.dvar() + "=0," + this.parentCache() + ".set(" + this.kvar() + "," + ctor + "))");
            }
            ;
          } else if (parent.isIndexed()) {
            let memo = "" + this.parentCache() + "[" + parent.kvar() + "]";
            add("(" + this.bvar() + "=" + this.dvar() + "=1," + this.tvar() + "=" + memo + ") || (" + this.bvar() + "=" + this.dvar() + "=0," + memo + "=" + ctor + ")");
          } else if (parent.isKeyed()) {
            if (!this.isDynamicType()) {
              let gets = "(" + this.kvar() + "=" + this.renderContextFn() + "(" + this.osym() + ")).get(" + parent.kvar() + ")";
              add("(" + this.bvar() + "=" + this.dvar() + "=1," + this.tvar() + "=" + gets + ") || (" + this.bvar() + "=" + this.dvar() + "=0," + this.kvar() + ".set(" + parent.kvar() + "," + ctor + "))");
            } else {
              let gets = "(" + this.owncvar() + "=" + this.dynamicContextFn() + "(" + this.type().osym() + "," + parent.kvar() + ")).run(" + this.type().c() + ")";
              add("(" + this.bvar() + "=" + this.dvar() + "=1," + this.tvar() + "=" + gets + ") || (" + this.bvar() + "=" + this.dvar() + "=0," + this.owncvar() + ".cache(" + ctor + "))");
            }
            ;
          }
          ;
          this._ref = "" + this.tvar();
          if (true) {
            add("" + this.bvar() + "||(" + this.tvar() + "[" + this.gsym("##up") + "]=" + fragment.tvar() + ")");
          }
          ;
          if (this._dynamics.length || this._consumed.length && nodes.length) {
            ownCache = true;
          }
          ;
        } else if (!isReactive) {
          add("(" + ctor + ")");
        } else if (canInline) {
          this._ref = this.tvar();
          this._bvar = parent.bvar();
          add("" + parent.bvar() + " || (" + ctor + ")");
        } else {
          let key = this.option("key");
          let cref = this._cref || (this._cref = "" + this.cvar() + "[" + this.osym() + "]");
          if (markWhenBuilt) {
            this._bvar = this.tagvar("B");
          }
          ;
          if (this.isDynamicType()) {
            if (key) {
              add("" + this.owncvar() + "=" + this.dynamicContextFn() + "(" + key.osym() + "," + key.c() + ")");
            } else {
              add("" + this.owncvar() + "=" + this.renderContextFn() + "(" + this.type().osym() + ")");
            }
            ;
            let gets = "" + this.owncvar() + ".run(" + this.type().c() + ")";
            add("(" + this.bvar() + "=" + this.dvar() + "=1," + this.tvar() + "=" + gets + ") || (" + this.bvar() + "=" + this.dvar() + "=0," + this.owncvar() + ".cache(" + ctor + "))");
          } else if (key) {
            add("" + this.owncvar() + "=" + this.renderContextFn() + "(" + key.osym() + ")");
            let gets = "" + this.owncvar() + ".run(" + key.c() + ")";
            add("(" + this.bvar() + "=" + this.dvar() + "=1," + this.tvar() + "=" + gets + ") || (" + this.bvar() + "=" + this.dvar() + "=0," + this.owncvar() + ".cache(" + ctor + "))");
          } else {
            let ref = "" + this.parentCache() + "[" + this.osym() + "]";
            if (markWhenBuilt) {
              add("(" + this.bvar() + "=" + this.dvar() + "=1," + this.tvar() + "=" + ref + ") || (" + this.bvar() + "=" + this.dvar() + "=0," + ref + "=" + ctor + ")");
            } else {
              add("(" + this.tvar() + "=" + ref + ") || (" + ref + "=" + ctor + ")");
            }
            ;
          }
          ;
          if (this.isDetached()) {
            add("" + this.bvar() + "||(" + this.tvar() + "[" + this.gsym("##up") + "]=" + fragment.tvar() + ")");
          }
          ;
          this._ref = this.tvar();
          if (dynamicKey) {
            ownCache = true;
          }
          ;
          if (parent instanceof TagSwitchFragment) {
            ownCache = true;
          }
          ;
        }
        ;
        if (ownCache) {
          this._cvar = this.tvar();
        }
        ;
      }
      ;
      if (this.isDynamicType()) {
        add({ "if": "" + this.tvar() + "[" + this.gsym("#isRichElement") + "]" });
      }
      ;
      if (this._slots) {
        for (let o1 = this._slots, slot, i = 0, keys = Object.keys(o1), l = keys.length, name; i < l; i++) {
          name = keys[i];
          slot = o1[name];
          STACK.use("slots");
          let fn = this.isDynamicType() ? this.gsym("#getFunctionalSlot") : this.gsym("#getSlot");
          add("" + slot.tvar() + " = " + OP(".", this.tvar(), fn).c() + "('" + name + "'," + this.cvar() + ")");
        }
        ;
      }
      ;
      let flagsToConcat = [];
      for (let i = 0, items = iter$(this._attributes), len = items.length, item; i < len; i++) {
        item = items[i];
        if (item._chain && item._chain.length && !(item instanceof TagHandler)) {
          let mods = item.modifiers();
          let dyn = !mods.isStatic();
          let specials = mods.extractDynamics();
          let modid = item.modsIdentifier();
          let modpath = modid ? OP(".", this.tvar(), modid).c() : "" + this.cvar() + "[" + mods.osym() + "]";
          if (dyn) {
            add("" + this.vvar() + " = " + modpath + " || (" + mods.c(o) + ")");
            for (let j = 0, ary = iter$(specials), len2 = ary.length, special; j < len2; j++) {
              special = ary[j];
              let k = special.option("key");
              let i2 = special.option("index");
              add("" + OP(".", this.vvar(), k).c() + "[" + i2 + "]=" + special.c(o));
            }
            ;
            add("" + this.bvar() + " || (" + modpath + "=" + this.vvar() + ")");
          } else {
            add("" + this.bvar() + " || (" + modpath + "=" + mods.c(o) + ")");
          }
          ;
        }
        ;
        if (!isReactive) {
          add(item.c(o));
        } else if (item.isStatic()) {
          add("" + this.bvar() + " || (" + item.c(o) + ")");
        } else {
          let iref = "" + this.cvar() + "[" + item.osym() + "]";
          if (item instanceof TagFlag) {
            let cond = item.condition();
            let val = item.name();
            let cref;
            let vref;
            let batched = !this.isDynamicType();
            if (cond && !cond.isPrimitive()) {
              cref = "" + this.cvar() + "[" + cond.osym() + "]";
              add("(" + this.vvar() + "=(" + cond.c(o) + "||undefined)," + this.vvar() + "===" + cref + "||(" + this.dvar() + "|=" + F.DIFF_FLAGS + "," + cref + "=" + this.vvar() + "))");
            }
            ;
            if (val && !(val instanceof Token2) && !val.isPrimitive() && !(val instanceof MixinIdentifier) && !(val instanceof StyleRuleSet)) {
              vref = "" + this.cvar() + "[" + val.osym() + "]";
              add("(" + this.vvar() + "=" + val.c(o) + "," + this.vvar() + "===" + vref + "||(" + this.dvar() + "|=" + F.DIFF_FLAGS + "," + vref + "=" + this.vvar() + "))");
            }
            ;
            if (batched || true) {
              if (cref && vref) {
                flagsToConcat.push("(" + cref + " ? (" + vref + "||'') : '')");
              } else if (cref) {
                flagsToConcat.push("(" + cref + " ? " + val.c({ as: "string" }) + " : '')");
              } else if (vref) {
                flagsToConcat.push("(" + vref + "||'')");
              } else if (val instanceof MixinIdentifier) {
                flagsToConcat.push(val.c({ as: "string" }));
              } else {
                flagsToConcat.push("'" + val.c({ as: "substring" }) + "'");
              }
              ;
            } else {
              if (cref) {
                add("" + this.tvar() + ".flags.toggle(" + (vref ? vref : val.c({ as: "string" })) + "," + cref + "))");
              } else {
                add("(" + this.bvar() + "||" + this.tvar() + ".flags.add(" + (vref ? vref : val.c({ as: "string" })) + ")");
              }
              ;
            }
            ;
          } else if (item instanceof TagHandler) {
            let mods = item.modifiers();
            let specials = mods.extractDynamics();
            let visit = false;
            add("" + this.hvar() + " = " + iref + " || (" + iref + "=" + mods.c(o) + ")");
            for (let j = 0, ary = iter$(specials), len2 = ary.length, special; j < len2; j++) {
              special = ary[j];
              let k = special.option("key");
              let i2 = special.option("index");
              let path = "" + OP(".", this.hvar(), k).c() + "[" + i2 + "]";
              if (k == "options") {
                visit = true;
                add("(" + this.vvar() + "=" + special.c(o) + "," + this.vvar() + "===" + path + " || (" + path + "=" + this.vvar() + "," + this.dvar() + "|=" + F.DIFF_MODIFIERS + "|" + F.DIFF_INLINE + "))");
              } else {
                add("" + path + "=" + special.c(o));
              }
              ;
            }
            ;
            add("" + this.bvar() + " || " + this.ref() + ".on$(" + item.quoted() + "," + this.hvar().c() + "," + this.scope__().context().c() + ")");
            if (visit) {
              add("" + this.dvar() + "&" + F.DIFF_INLINE + " && (" + this.dvar() + "^=" + F.DIFF_INLINE + "," + this.hvar() + "[" + this.gsym("#visit") + "]?.())");
            }
            ;
          } else if (item instanceof TagAttr && item.ns() == "bind") {
            let rawVal = item.value();
            let val = PATHIFY(rawVal);
            shouldEnd = true;
            if (val instanceof Array) {
              let target = val[0];
              let key = val[1];
              let bval = "[]";
              let alit = target && target.isConstant();
              let blit = key && key.isConstant();
              if (alit && blit) {
                bval = "[" + target.c(o) + "," + key.c(o) + "]";
              } else if (blit) {
                bval = "[null," + key.c(o) + "]";
              }
              ;
              add("" + this.vvar() + "=" + iref + " || (" + iref + "=" + this.ref() + ".bind$('" + item.key() + "'," + bval + "))");
              for (let i2 = 0, ary = iter$(val), len2 = ary.length, part; i2 < len2; i2++) {
                part = ary[i2];
                if (!(part && part.isConstant())) {
                  add("" + this.vvar() + "[" + i2 + "]=" + part.c(o));
                }
                ;
              }
              ;
            } else if (val instanceof Variable) {
              let getter = "function(){ return " + val.c(o) + " }";
              let setter = "function(v$){ " + val.c(o) + " = v$ }";
              let bval = "{get:" + getter + ",set:" + setter + "}";
              add("" + this.bvar() + " || " + this.ref() + ".bind$('" + item.key() + "'," + bval + ")");
            }
            ;
          } else {
            if (isSVG) {
              item.option({ svg: true });
            }
            ;
            let val = item.value();
            if (item.valueIsStatic()) {
              add("" + this.bvar() + " || (" + M2(item.js(o), item) + ")");
            } else if (val instanceof Func) {
              add("(" + item.js(o) + ")");
            } else if (val._variable) {
              let vc = val.c(o);
              item.setValue(LIT("" + iref + "=" + vc));
              add("(" + vc + "===" + iref + " || (" + M2(item.js(o), item) + "))");
            } else {
              item.setValue(LIT("" + iref + "=" + this.vvar()));
              add("(" + this.vvar() + "=" + val.c(o) + "," + this.vvar() + "===" + iref + " || (" + M2(item.js(o), item) + "))");
            }
            ;
          }
          ;
        }
        ;
      }
      ;
      if (flagsToConcat.length || (this.isSelf() || this.isDynamicType()) && this._className) {
        if (this._className) {
          flagsToConcat.unshift(this._className);
        }
        ;
        let cond = "" + this.dvar() + "&" + F.DIFF_FLAGS;
        let meth = this.isSelf() ? "flagSelf$" : "flag$";
        if (this.isSelf() || this.isDynamicType()) {
          cond = "(!" + this.bvar() + "||" + cond + ")";
        }
        ;
        if (this.isDynamicType()) {
          add("(" + cond + " && " + this.tvar() + ".flags.reconcile(" + this.osym() + "," + flagsToConcat.join("+' '+") + "))");
        } else {
          add("(" + cond + " && " + this.tvar() + "." + meth + "(" + flagsToConcat.join("+' '+") + "))");
        }
        ;
      }
      ;
      let count = nodes.length;
      for (let i = 0, len = nodes.length, item; i < len; i++) {
        item = nodes[i];
        if (item instanceof Str) {
          if (isReactive) {
            add("" + this.bvar() + " || " + this.tvar() + this.domCall("insert") + "(" + item.c(o) + ")");
          } else {
            add("" + this.tvar() + this.domCall("insert") + "(" + item.c(o) + ")");
          }
          ;
        } else if (item instanceof StyleRuleSet) {
          for (let j = 0, items = iter$(item.placeholders()), len2 = items.length; j < len2; j++) {
            let item2 = items[j]._setter;
            let iref = "" + this.cvar() + "[" + item2.osym() + "]";
            let val = item2.value();
            if (item2.valueIsStatic()) {
              add("" + this.bvar() + " || (" + M2(item2.js(o), item2) + ")");
            } else if (val instanceof Func) {
              add("(" + item2.js(o) + ")");
            } else if (val._variable) {
              let vc = val.c(o);
              item2.setValue(LIT("" + iref + "=" + vc));
              add("(" + vc + "===" + iref + " || (" + M2(item2.js(o), item2) + "))");
            } else {
              item2.setValue(LIT("" + iref + "=" + this.vvar()));
              add("(" + this.vvar() + "=" + val.c(o) + "," + this.vvar() + "===" + iref + " || (" + M2(item2.js(o), item2) + "))");
            }
            ;
          }
          ;
        } else {
          add(item.c(o));
        }
        ;
      }
      ;
      if (shouldEnd) {
        if (!parent && !this.isSelf()) {
          foot.push("" + this.bvar() + " || " + this.parentCache() + ".sym || !" + this.tvar() + ".setup || " + this.tvar() + ".setup(" + this.dvar() + ")");
          foot.push("" + this.parentCache() + ".sym || " + this.tvar() + this.domCall("end") + "(" + this.dvar() + ")");
        } else if (this.isSelf()) {
          foot.push("" + this.tvar() + this.domCall("close") + "(" + this.dvar() + ")");
        } else {
          foot.push("" + this.bvar() + " || !" + this.tvar() + ".setup || " + this.tvar() + ".setup(" + this.dvar() + ")");
          foot.push("" + this.tvar() + this.domCall("end") + "(" + this.dvar() + ")");
        }
        ;
      }
      ;
      if (this.isDynamicType()) {
        foot.push({ endif: true });
      }
      ;
      if (parent instanceof TagLoopFragment) {
        if (parent.isKeyed()) {
          foot.push("" + parent.ref() + ".push(" + this.tvar() + "," + parent.kvar() + "++," + this.kvar() + ")");
        } else if (parent.isIndexed()) {
          foot.push("" + parent.kvar() + "++");
        }
        ;
      } else if (this.isFragment() && parent && !(parent instanceof TagSwitchFragment)) {
        true;
      } else if (parent && !(parent instanceof TagSwitchFragment) && (this.isComponent() || dynamicKey || this.option("reference"))) {
        let pref = fragment.ref();
        let cref = this._cref;
        if (dynamicKey || this.isDynamicType() || this.isDetached()) {
          if (fragment instanceof TagSlotProxy) {
            foot.push("(" + this.tvar() + "==" + cref + ") || (!" + cref + " && " + pref + this.domCall("appendChild") + "(" + cref + "=" + this.tvar() + ")) || (" + pref + this.domCall("replaceChild") + "(" + this.tvar() + "," + cref + ")," + cref + "=" + this.tvar() + ")");
          } else {
            foot.push("(" + this.tvar() + "==" + cref + ") || (!" + cref + " && (" + cref + "=" + this.tvar() + ")" + this.domCall("insertInto") + "(" + pref + ")) || " + cref + this.domCall("replaceWith") + "(" + cref + "=" + this.tvar() + "," + pref + ")");
          }
          ;
        } else if (!this.isDetached()) {
          foot.push("" + this.bvar() + " || " + pref + this.domCall("appendChild") + "(" + this.tvar() + ")");
        }
        ;
      }
      ;
      if (this.option("fragmented")) {
        add("" + this.runtime().renderContext + ".context=null");
      }
      ;
      if (!this._consumedBy) {
        if (this.option("return") || this.option("iife")) {
          foot.push("return " + this.tvar());
        } else if (!isReactive || o.inline) {
          foot.push("" + this.tvar());
        }
        ;
      }
      ;
      out = out.concat(foot);
      if (o.inline) {
        o.inline = parentIsInlined;
        let js2 = "(";
        let last = out.length - 1;
        for (let i = 0, items = iter$(out), len = items.length, item; i < len; i++) {
          item = items[i];
          if (item.if) {
            js2 += "(" + item.if + " && (\n";
          } else {
            js2 += item.endif ? "))" : item;
            if (!(i == last || out[i + 1].endif)) {
              js2 += ",\n";
            }
            ;
          }
          ;
        }
        ;
        js2 += ")";
        if (this.isSlot() && this.hasChildren()) {
          let post = "";
          if (!(parent instanceof TagSwitchFragment)) {
            let key = "" + this.cvar() + "[" + this.osym() + "]";
            let key_ = "" + this.cvar() + "[" + this.osym("_") + "]";
            let key__ = "" + this.cvar() + "[" + this.osym("__") + "]";
            let post2 = "" + this.tvar() + "===" + key__ + " || (" + key_ + " = " + fragment.tvar() + this.domCall("insert") + "(" + key__ + "=" + this.tvar() + "," + this._flags + "," + key_ + "))";
          }
          ;
          js2 = "(" + this.tvar() + "=" + slotPath + "),(!" + this.tvar() + " || !" + this.tvar() + ".hasChildNodes() && " + js2 + "),(" + post + ")";
        }
        ;
        return js2;
      }
      ;
      o.inline = parentIsInlined;
      let js = "";
      for (let i = 0, items = iter$(out), len = items.length, item; i < len; i++) {
        item = items[i];
        if (item.if) {
          js += "if(" + item.if + "){\n";
        } else if (item.endif) {
          js += "};\n";
        } else {
          js += item + ";\n";
        }
        ;
      }
      ;
      if (this.isSlot() && this.hasChildren()) {
        let post = "";
        if (!(parent instanceof TagSwitchFragment)) {
          let key = "" + this.cvar() + "[" + this.osym() + "]";
          let key_ = "" + this.cvar() + "[" + this.osym("_") + "]";
          let key__ = "" + this.cvar() + "[" + this.osym("__") + "]";
          post = "" + this.tvar() + "===" + key__ + " || (" + key_ + " = " + fragment.tvar() + this.domCall("insert") + "(" + key__ + "=" + this.tvar() + "," + this._flags + "," + key_ + "))";
        }
        ;
        js = "" + this.tvar() + "=" + slotPath + ";\nif(!" + this.tvar() + " || !" + this.tvar() + ".hasChildNodes()){\n" + js + "\n}\n" + post;
      }
      ;
      if (this.option("iife")) {
        js = "(()=>{" + js + ";})()";
        if (this.option("return")) {
          js = "return " + js;
        }
        ;
      } else if (this.hasBlockScopedVariables()) {
        js = "{" + js + "}";
      }
      ;
      return js;
    };
    function TagWrapper() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(TagWrapper, ValueNode2);
    exports.TagWrapper = TagWrapper;
    TagWrapper.prototype.visit = function() {
      if (this.value() instanceof Array) {
        this.value().map(function(v) {
          return v.traverse();
        });
      } else {
        this.value().traverse();
      }
      ;
      return this;
    };
    TagWrapper.prototype.c = function() {
      return "" + this.scope__().imba().c() + ".getTagForDom(" + this.value().c({ expression: true }) + ")";
    };
    function Selector(list, options) {
      this._nodes = list || [];
      this._options = options;
    }
    subclass$(Selector, ListNode);
    exports.Selector = Selector;
    Selector.prototype.add = function(part, typ) {
      this.push(part);
      return this;
    };
    Selector.prototype.isExpressable = function() {
      return true;
    };
    Selector.prototype.visit = function() {
      let res = [];
      for (let i = 0, items = iter$(this._nodes), len = items.length, item; i < len; i++) {
        item = items[i];
        res.push(!(item instanceof Token2) && item.traverse());
      }
      ;
      return res;
    };
    Selector.prototype.query = function() {
      var str = "";
      var ary = [];
      for (let i = 0, items = iter$(this.nodes()), len = items.length, item; i < len; i++) {
        item = items[i];
        var val = item.c();
        if (item instanceof Token2) {
          ary.push("'" + val.replace(/\'/g, '"') + "'");
        } else {
          ary.push(val);
        }
        ;
      }
      ;
      return ary.join(" + ");
    };
    Selector.prototype.toString = function() {
      return AST.cary(this.nodes()).join("");
    };
    Selector.prototype.js = function(o) {
      var typ = this.option("type");
      var q = AST.c(this.query());
      var imba = this.scope__().imba().c();
      if (typ == "%") {
        return "" + imba + ".q$(" + q + "," + o.scope().context().c({ explicit: true }) + ")";
      } else if (typ == "%%") {
        return "" + imba + ".q$$(" + q + "," + o.scope().context().c({ explicit: true }) + ")";
      } else {
        return "" + imba + ".q" + typ + "(" + q + ")";
      }
      ;
    };
    function SelectorPart() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(SelectorPart, ValueNode2);
    exports.SelectorPart = SelectorPart;
    function Await() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(Await, ValueNode2);
    exports.Await = Await;
    Await.prototype.func = function(v) {
      return this._func;
    };
    Await.prototype.setFunc = function(v) {
      this._func = v;
      return this;
    };
    Await.prototype.js = function(o) {
      return "await " + this.value().c();
      return CALL(OP(".", new Util.Promisify([this.value()]), "then"), [this.func()]).c();
    };
    Await.prototype.visit = function(o) {
      this.value().traverse();
      var fnscope = o.up(Func);
      if (fnscope) {
        fnscope.set({ async: true });
      }
      ;
      return this;
      this.warn("toplevel await not allowed");
      var block = o.up(Block);
      var outer = o.relative(block, 1);
      var par = o.relative(this, -1);
      this.setFunc(new AsyncFunc([], []));
      this.func().body().setNodes(block.defers(outer, this));
      this.func().scope().visit();
      if (par instanceof Assign) {
        par.left().traverse();
        var lft = par.left().node();
        if (lft instanceof VarReference) {
          this.func().params().at(0, true, lft.variable().name());
        } else {
          par.setRight(this.func().params().at(0, true));
          this.func().body().unshift(par);
          this.func().scope().context();
        }
        ;
      }
      ;
      this.func().traverse();
      return this;
    };
    function AsyncFunc(params, body, name, target, options) {
      AsyncFunc.prototype.__super__.constructor.call(this, params, body, name, target, options);
    }
    subclass$(AsyncFunc, Func);
    exports.AsyncFunc = AsyncFunc;
    AsyncFunc.prototype.scopetype = function() {
      return LambdaScope;
    };
    function ESMSpecifier(name, alias) {
      this._name = name;
      this._alias = alias;
    }
    subclass$(ESMSpecifier, Node2);
    exports.ESMSpecifier = ESMSpecifier;
    ESMSpecifier.prototype.alias = function(v) {
      return this._alias;
    };
    ESMSpecifier.prototype.setAlias = function(v) {
      this._alias = v;
      return this;
    };
    ESMSpecifier.prototype.name = function(v) {
      return this._name;
    };
    ESMSpecifier.prototype.setName = function(v) {
      this._name = v;
      return this;
    };
    ESMSpecifier.prototype.loc = function() {
      return this._alias ? this._alias.loc() : this._name.loc();
    };
    ESMSpecifier.prototype.visit = function(stack) {
      this._declaration = stack.up(ESMDeclaration);
      if (this._declaration instanceof ImportDeclaration) {
        this._importer = this._declaration;
      } else {
        this._exporter = this._declaration;
      }
      ;
      this._cname = helpers2.clearLocationMarkers(this._name.c());
      this._key = this._alias ? helpers2.clearLocationMarkers(this._alias.c()) : this._cname;
      if (this._exporter) {
        if (!this._exporter.source()) {
          this._variable = this.scope__().root().lookup(this._cname);
        }
        ;
      } else {
        this._variable = this.scope__().root().register(this._key, this, { type: "imported" });
      }
      ;
      return this;
    };
    ESMSpecifier.prototype.js = function() {
      let n = helpers2.toValidIdentifier(this._name.c());
      let a = this._alias && helpers2.toValidIdentifier(this._alias.c());
      if (a) {
        return "" + n + " as " + a;
      } else {
        return "" + n;
      }
      ;
    };
    function ImportSpecifier() {
      return ESMSpecifier.apply(this, arguments);
    }
    subclass$(ImportSpecifier, ESMSpecifier);
    exports.ImportSpecifier = ImportSpecifier;
    function ImportNamespaceSpecifier() {
      return ESMSpecifier.apply(this, arguments);
    }
    subclass$(ImportNamespaceSpecifier, ESMSpecifier);
    exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
    function ExportSpecifier() {
      return ESMSpecifier.apply(this, arguments);
    }
    subclass$(ExportSpecifier, ESMSpecifier);
    exports.ExportSpecifier = ExportSpecifier;
    function ExportAllSpecifier() {
      return ESMSpecifier.apply(this, arguments);
    }
    subclass$(ExportAllSpecifier, ESMSpecifier);
    exports.ExportAllSpecifier = ExportAllSpecifier;
    function ImportDefaultSpecifier() {
      return ESMSpecifier.apply(this, arguments);
    }
    subclass$(ImportDefaultSpecifier, ESMSpecifier);
    exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
    function ESMSpecifierList() {
      return ListNode.apply(this, arguments);
    }
    subclass$(ESMSpecifierList, ListNode);
    exports.ESMSpecifierList = ESMSpecifierList;
    ESMSpecifierList.prototype.js = function() {
      return "{" + ESMSpecifierList.prototype.__super__.js.apply(this, arguments) + "}";
    };
    function ESMDeclaration(keyword, specifiers, source) {
      this.setup();
      this._keyword = keyword;
      this._specifiers = specifiers;
      this._source = source;
      this._defaults = specifiers && specifiers.find(function(_0) {
        return _0 instanceof ImportDefaultSpecifier;
      });
    }
    subclass$(ESMDeclaration, Statement);
    exports.ESMDeclaration = ESMDeclaration;
    ESMDeclaration.prototype.variable = function(v) {
      return this._variable;
    };
    ESMDeclaration.prototype.setVariable = function(v) {
      this._variable = v;
      return this;
    };
    ESMDeclaration.prototype.source = function(v) {
      return this._source;
    };
    ESMDeclaration.prototype.setSource = function(v) {
      this._source = v;
      return this;
    };
    ESMDeclaration.prototype.isExport = function() {
      return String(this.keyword()) == "export";
    };
    ESMDeclaration.prototype.js = function() {
      let kw = M2(this.keyword().c(), this.keyword());
      if (this._specifiers && this._source) {
        return "" + kw + " " + AST.cary(this._specifiers).join(",") + " from " + this._source.c();
      } else if (this._specifiers) {
        return "" + kw + " " + AST.cary(this._specifiers).join(",");
      } else if (this._source) {
        return "" + kw + " " + this._source.c();
      }
      ;
    };
    function AssetReference() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(AssetReference, ValueNode2);
    exports.AssetReference = AssetReference;
    AssetReference.prototype.setup = function() {
      return this;
    };
    AssetReference.prototype.asset = function() {
      return this._value;
    };
    AssetReference.prototype.c = function() {
      let out = "";
      let ref = this.value().ref.c();
      let path = this.value().path;
      if (this.asset().kind && path.indexOf("?") == -1) {
        path += "?" + this.asset().kind;
      }
      ;
      if (STACK.tsc()) {
        if (this.value().pathToken) {
          let pathjs = M2("'" + path.split("?")[0] + "'", this.value().pathToken);
          out = "import " + pathjs + "; const " + ref + " = /** @type{ImbaAsset} */(null)";
        } else {
          out = "const " + ref + " = /** @type{ImbaAsset} */({path:'" + path + "'})";
        }
        ;
      } else {
        out = "import " + ref + " from " + M2("'" + path + "'", this.value().pathToken);
      }
      ;
      return out;
    };
    function ImportDeclaration() {
      return ESMDeclaration.apply(this, arguments);
    }
    subclass$(ImportDeclaration, ESMDeclaration);
    exports.ImportDeclaration = ImportDeclaration;
    ImportDeclaration.prototype.ownjs = function() {
      var ary;
      var src = this._source && this._source.c();
      if (STACK.tsc()) {
        var ary = iter$(this._source.raw().split("?"));
        let raw = ary[0], q = ary[1];
        src = M2("'" + raw + "'", this._source);
        if (raw.match(/\.(html|svg|png|jpe?g|gif)$/) || q && q.match(/^\w/) && q != "external") {
          if (this._specifiers && this._source) {
            let out = "" + M2(this.keyword().c(), this.keyword()) + " " + src + ";\nimport " + AST.cary(this._specifiers).join(",") + " from 'data:text/asset;';";
            return out;
          }
          ;
        }
        ;
      }
      ;
      if (this._specifiers && this._source) {
        return "" + M2(this.keyword().c(), this.keyword()) + " " + AST.cary(this._specifiers).join(",") + " from " + src;
      } else {
        return "" + M2(this.keyword().c(), this.keyword()) + " " + src;
      }
      ;
    };
    ImportDeclaration.prototype.js = function() {
      let out = this.ownjs();
      return out;
    };
    ImportDeclaration.prototype.push = function(next) {
      let curr = this._next || this;
      return this._up.replace(curr, [curr, BR, this._next = next]);
    };
    ImportDeclaration.prototype.visit = function() {
      var $1;
      for (let i = 0, items = iter$(this._specifiers), len = items.length; i < len; i++) {
        ($1 = items[i]) && $1.traverse && $1.traverse();
      }
      ;
      this.scope__()._lastImport = this;
      this._up = this.up();
      return;
    };
    function ImportTypeDeclaration() {
      return ESMDeclaration.apply(this, arguments);
    }
    subclass$(ImportTypeDeclaration, ESMDeclaration);
    exports.ImportTypeDeclaration = ImportTypeDeclaration;
    ImportTypeDeclaration.prototype.js = function() {
      if (!STACK.tsc()) {
        return "";
      }
      ;
      let src = this._source.c();
      if (this._defaults) {
        let tpl = "/** @typedef {import(SOURCE).default} NAME */true";
        tpl = tpl.replace("SOURCE", src).replace("NAME", this._defaults.c());
        return tpl;
      } else {
        let parts = [];
        for (let i = 0, items = iter$(this._specifiers[0].nodes()), len = items.length, item; i < len; i++) {
          item = items[i];
          let name = item._name.c();
          let alias = item._alias ? item._alias.c() : item._name.c();
          let part = "/** @typedef {import(" + src + ")." + name + "} " + alias + " */true";
          parts.push(part);
        }
        ;
        return parts.join(";\n");
      }
      ;
    };
    function ExportDeclaration() {
      return ESMDeclaration.apply(this, arguments);
    }
    subclass$(ExportDeclaration, ESMDeclaration);
    exports.ExportDeclaration = ExportDeclaration;
    ExportDeclaration.prototype.visit = function() {
      var $1;
      for (let i = 0, items = iter$(this._specifiers), len = items.length; i < len; i++) {
        ($1 = items[i]) && $1.traverse && $1.traverse();
      }
      ;
      return this;
    };
    ExportDeclaration.prototype.js = function() {
      let kw = M2(this.keyword().c(), this.keyword());
      if (this._specifiers && this._source) {
        return "" + kw + " " + AST.cary(this._specifiers).join(",") + " from " + this._source.c();
      } else if (this._specifiers) {
        return "" + kw + " " + AST.cary(this._specifiers).join(",");
      } else if (this._source) {
        return "" + kw + " " + this._source.c();
      }
      ;
    };
    function ExportAllDeclaration() {
      return ExportDeclaration.apply(this, arguments);
    }
    subclass$(ExportAllDeclaration, ExportDeclaration);
    exports.ExportAllDeclaration = ExportAllDeclaration;
    function ExportNamedDeclaration() {
      return ExportDeclaration.apply(this, arguments);
    }
    subclass$(ExportNamedDeclaration, ExportDeclaration);
    exports.ExportNamedDeclaration = ExportNamedDeclaration;
    function MixinReference(name, scope) {
      this._name = name;
      this._scope = scope;
      this._options = {};
    }
    exports.MixinReference = MixinReference;
    MixinReference.prototype.name = function(v) {
      return this._name;
    };
    MixinReference.prototype.setName = function(v) {
      this._name = v;
      return this;
    };
    MixinReference.prototype.scope = function(v) {
      return this._scope;
    };
    MixinReference.prototype.setScope = function(v) {
      this._scope = v;
      return this;
    };
    MixinReference.prototype.options = function(v) {
      return this._options;
    };
    MixinReference.prototype.setOptions = function(v) {
      this._options = v;
      return this;
    };
    MixinReference.prototype.rule = function(v) {
      return this._rule;
    };
    MixinReference.prototype.setRule = function(v) {
      this._rule = v;
      return this;
    };
    function MixinExports() {
      return Node2.apply(this, arguments);
    }
    subclass$(MixinExports, Node2);
    exports.MixinExports = MixinExports;
    MixinExports.prototype.add = function(name, val) {
      this._mixins || (this._mixins = {});
      this._mixins[name] = val;
      return this;
    };
    MixinExports.prototype.c = function() {
      return "export const mixins$ = " + AST.compileRaw(this._mixins || {});
    };
    function Export() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(Export, ValueNode2);
    exports.Export = Export;
    Export.prototype.loc = function() {
      let kw = this.option("keyword");
      return kw && kw.region ? kw.region() : Export.prototype.__super__.loc.apply(this, arguments);
    };
    Export.prototype.consume = function(node) {
      if (node instanceof Return) {
        this.option("return", true);
        return this;
      }
      ;
      return Export.prototype.__super__.consume.apply(this, arguments);
    };
    Export.prototype.visit = function() {
      this.value().set(
        {
          export: this.option("keyword") || this,
          return: this.option("return"),
          "default": this.option("default")
        }
      );
      return Export.prototype.__super__.visit.apply(this, arguments);
    };
    Export.prototype.js = function(o) {
      var self2 = this;
      let isDefault = self2.option("default");
      if (self2.value() instanceof ListNode) {
        self2.value().map(function(item) {
          return item.set({ export: self2 });
        });
      }
      ;
      if (self2.value() instanceof MethodDeclaration || self2.value() instanceof ClassDeclaration) {
        return self2.value().c();
      }
      ;
      if (self2.value() instanceof Assign && self2.value().left() instanceof VarReference) {
        let ek = M2("export", self2.option("keyword"));
        let dk = isDefault && M2("default", self2.option("default"));
        return isDefault ? "" + ek + " " + dk + " " + self2.value().c() : "" + ek + " " + self2.value().c();
      }
      ;
      if (isDefault) {
        let out = self2.value().c();
        return "export default " + out;
      }
      ;
      return self2.value().c();
    };
    function Require() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(Require, ValueNode2);
    exports.Require = Require;
    Require.prototype.js = function(o) {
      var val = this.value() instanceof Parens ? this.value().value() : this.value();
      var out = val.c();
      return out == "require" ? "require" : "require(" + out + ")";
    };
    function EnvFlag() {
      EnvFlag.prototype.__super__.constructor.apply(this, arguments);
      this._key = String(this._value).slice(1, -1);
    }
    subclass$(EnvFlag, ValueNode2);
    exports.EnvFlag = EnvFlag;
    EnvFlag.prototype.raw = function() {
      return this._raw == null ? this._raw = STACK.env("" + this._key) : this._raw;
    };
    EnvFlag.prototype.isTruthy = function() {
      var val = this.raw();
      if (val !== void 0 && !(val instanceof Node2)) {
        return !!val;
      }
      ;
      return void 0;
    };
    EnvFlag.prototype.loc = function() {
      return [0, 0];
    };
    EnvFlag.prototype.c = function() {
      var val = this.raw();
      var out = val;
      if (val !== void 0) {
        if (typeof val == "string" || val instanceof String) {
          if (val.match(/^\d+(\.\d+)?$/)) {
            out = String(parseFloat(val));
          } else {
            out = "'" + val + "'";
          }
          ;
        } else if (val instanceof Node2) {
          out = out.c();
        } else {
          out = "" + val;
        }
        ;
      } else {
        out = "ENV_" + this._key;
      }
      ;
      return M2(out, this._value);
    };
    function StyleNode2() {
      return Node2.apply(this, arguments);
    }
    subclass$(StyleNode2, Node2);
    exports.StyleNode = StyleNode2;
    function StyleSelector() {
      return StyleNode2.apply(this, arguments);
    }
    subclass$(StyleSelector, StyleNode2);
    exports.StyleSelector = StyleSelector;
    function StyleRuleSet(selectors, body) {
      this._placeholders = [];
      this._selectors = selectors;
      this._body = body;
    }
    subclass$(StyleRuleSet, StyleNode2);
    exports.StyleRuleSet = StyleRuleSet;
    StyleRuleSet.prototype.isStatic = function() {
      return true;
    };
    StyleRuleSet.prototype.isGlobal = function() {
      return !!this.option("global");
    };
    StyleRuleSet.prototype.addPlaceholder = function(item) {
      this._placeholders.push(item);
      return this;
    };
    StyleRuleSet.prototype.placeholders = function() {
      return this._placeholders;
    };
    StyleRuleSet.prototype.cssid = function() {
      return this._cssid || (this._cssid = "" + STACK.root().sourceId() + "-" + this.oid());
    };
    StyleRuleSet.prototype.visit = function(stack, o) {
      let cmp = this._tagDeclaration = stack.up(TagDeclaration);
      let tags = stack.parents(TagLike);
      if (tags[0] && cmp && tags[0].isSelf() && tags[1]) {
        tags[0] = cmp;
      }
      ;
      if (tags.length == 0 && cmp) {
        tags = [cmp];
      }
      ;
      this._css = {};
      this._flag = stack.up(TagFlag);
      this._tag = this._flag && this._flag._tag;
      let keywordName = String(this.option("name") || "");
      if (keywordName[0] == "%") {
        this._mixin = this.scope__().mixin(keywordName.slice(1));
        this._mixin.setRule(this);
        this._mixin.options().id = this.cssid();
      }
      ;
      if (this.option("export")) {
        STACK.root().mixinExports().add(this._mixin.name(), this._mixin.options());
      }
      ;
      let sel = String(this._selectors).trim();
      if (stack.parent() instanceof ClassBody) {
        let owner = stack.up(2);
        if (owner instanceof TagDeclaration) {
          this._css.type = "component";
          if (!this._variable) {
            this._sel = sel || "&";
            this._css.scope = cmp;
          }
          ;
        } else {
          throw "css not allowed in class declaration";
        }
        ;
      } else if (stack.parent() instanceof TagBody) {
        this._tag = tags[tags.length - 1];
        this._sel = sel || "&";
        this._css.type = "scoped";
        this._css.scope = this._tag;
      } else if (this.option("toplevel")) {
        let inbody = stack.up(TagBody);
        if (inbody) {
          this._tag = stack.up(TagLike);
          this._sel = sel || "&";
          this._css.scope = this._tag;
          this._css.ns = this.cssid();
          this._css.id = this.cssid();
          this._css.type = "scoped";
          this._name = this.cssid();
          this.set({ inTagTree: true });
        } else {
          this._css.scope = this.isGlobal() ? null : this.scope__().closure();
          this._sel || (this._sel = sel);
        }
        ;
      } else if (o.rule) {
        this._sel || (this._sel = this._selectors && this._selectors.toString && this._selectors.toString().trim());
        if (this._sel.indexOf("&") == -1) {
          this._sel = "& " + this._sel;
        }
        ;
      } else if (!this._name && this._tag && this._flag && !this._flag._condition) {
        this._css.scope = this._tag;
        this._name = this._tag.cssid();
        this._sel = "&";
      } else if (!this._name) {
        this._name = this.cssid();
        this._sel = "." + this._name;
      }
      ;
      this._selectors && this._selectors.traverse && this._selectors.traverse();
      this._styles = {};
      this._body && this._body.traverse && this._body.traverse({ rule: this, styles: this._styles, rootRule: o.rule || this });
      if (this._placeholders.length) {
        if (this.option("inTagTree")) {
          for (let i = 0, items = iter$(this._placeholders), len = items.length, ph; i < len; i++) {
            ph = items[i];
            let setter = new TagStyleAttr(ph.name());
            setter._tag = this._tag;
            setter.setValue(ph.runtimeValue());
            setter.set(
              {
                propname: ph._propname,
                unit: ph.option("unit"),
                styleterm: ph
              }
            );
            ph._setter = setter;
            setter.traverse();
          }
          ;
        } else if (!this._flag) {
          for (let i = 0, items = iter$(this._placeholders), len = items.length; i < len; i++) {
            items[i].warn("Only allowed inside tag tree");
          }
          ;
        }
        ;
      }
      ;
      if (o.rule && o.styles) {
        if (o.styles[this._sel]) {
          let base = o.styles[this._sel];
          helpers2.deepAssign(base, this._styles);
        } else {
          o.styles[this._sel] = this._styles;
        }
        ;
      } else {
        let component = this._tagDeclaration;
        let opts = {
          selectors: [],
          ns: this._css.ns,
          id: this._css.id,
          type: this._css.type,
          scope: this._css.scope,
          tags,
          component: cmp,
          inline: !!this._flag,
          global: !!this.isGlobal(),
          mixins: {},
          apply: {},
          depth: this._tag ? this._tag._level : 0
        };
        this._css = new StyleRule2(null, this._sel, this._styles, opts).toString();
        STACK.css().add(this._css, opts);
      }
      ;
      return this;
    };
    StyleRuleSet.prototype.toRaw = function() {
      return "" + this._name;
    };
    StyleRuleSet.prototype.c = function() {
      if (this.option("toplevel") && this.option("export")) {
        return "";
      }
      ;
      if (this._tvar) {
        let out2 = ["" + this._tvar + " = '" + this._name + "'"];
        let add = function(_0) {
          return out2.push(_0);
        };
        let cvar = this._tag.cvar();
        let bvar = this._tag.bvar();
        for (let i = 0, items = iter$(this._placeholders), len = items.length; i < len; i++) {
          let item = items[i]._setter;
          let iref = "" + cvar + "[" + item.osym() + "]";
          let val = item.value();
          if (true) {
            add("" + M2(item.js(this.o()), item));
          }
          ;
        }
        ;
        let expr = STACK.isExpression();
        return expr ? "(" + out2.join(",") + ")" : out2.join(";\n");
      }
      ;
      if (STACK.tsc() && this._placeholders.length) {
        let out2 = [];
        for (let i = 0, items = iter$(this.placeholders()), len = items.length; i < len; i++) {
          out2.push(items[i].runtimeValue().c());
        }
        ;
        let expr = STACK.isExpression();
        return expr ? "(" + out2.join(",") + ")" : out2.join(";\n");
      }
      ;
      if (this.option("inClassBody") || this.option("inTagTree") || this.option("toplevel")) {
        return "";
      }
      ;
      let out = "'" + this._name + "'";
      return out;
    };
    function StyleBody() {
      return ListNode.apply(this, arguments);
    }
    subclass$(StyleBody, ListNode);
    exports.StyleBody = StyleBody;
    StyleBody.prototype.visit = function() {
      let items = this._nodes;
      let i = 0;
      let prevname;
      for (let j = 0, ary = iter$(items), len = ary.length, item; j < len; j++) {
        item = ary[j];
        if (!(item instanceof StyleDeclaration)) {
          continue;
        }
        ;
        if (!item._property._name) {
          item._property.setName(prevname);
        }
        ;
        prevname = item._property._name;
      }
      ;
      while (i < items.length) {
        let item = items[i];
        let res = item.traverse();
        if (res != item) {
          if (res instanceof Array) {
            items.splice.apply(items, [].concat([i, 1], Array.from(res)));
            continue;
          }
          ;
        }
        ;
        if (item == items[i]) {
          i++;
        }
        ;
      }
      ;
      return this;
    };
    StyleBody.prototype.toJSON = function() {
      return this.values();
    };
    function StyleDeclaration(property, expr) {
      this._property = property;
      this._expr = expr instanceof StyleExpressions ? expr : new StyleExpressions(expr);
      this;
    }
    subclass$(StyleDeclaration, StyleNode2);
    exports.StyleDeclaration = StyleDeclaration;
    StyleDeclaration.prototype.clone = function(name, params) {
      if (!params) {
        params = this._expr.clone();
      }
      ;
      if (typeof params == "string" || typeof params == "number") {
        params = [params];
      }
      ;
      if (!(params instanceof Array) && (!(params instanceof ListNode) || params instanceof StyleOperation)) {
        params = [params];
      }
      ;
      return new StyleDeclaration(this._property.clone(name), params);
    };
    StyleDeclaration.prototype.visit = function(stack, o) {
      var self2 = this, v_;
      let theme = stack.theme();
      let list = stack.parent();
      let name = String(self2._property.name());
      let alias = theme.expandProperty(name);
      if (self2._expr) {
        self2._expr.traverse(
          {
            rule: o.rule,
            rootRule: o.rootRule,
            decl: self2,
            property: self2._property
          }
        );
      }
      ;
      if (alias instanceof Array) {
        list.replace(self2, alias.map(function(_0) {
          return self2.clone(_0);
        }));
        return;
      } else if (alias && alias != name) {
        self2._property = self2._property.clone(alias);
      }
      ;
      let method = String(alias || name).replace(/-/g, "_");
      if (self2._expr) {
        self2._expr.traverse({ decl: self2, property: self2._property });
      }
      ;
      if (theme[method] && !self2.option("plain")) {
        let res = theme[method].apply(theme, self2._expr.toArray());
        let expanded = [];
        if (res instanceof Array) {
          self2._expr = new StyleExpressions(res);
        } else if (res instanceof Object) {
          for (let v, i = 0, keys = Object.keys(res), l = keys.length, k; i < l; i++) {
            k = keys[i];
            v = res[k];
            if (k.indexOf("&") >= 0) {
              let body = new StyleBody([]);
              let rule = new StyleRuleSet(LIT(k), body);
              expanded.push(rule);
              for (let v2, j = 0, keys1 = Object.keys(v), l2 = keys1.length, k2; j < l2; j++) {
                k2 = keys1[j];
                v2 = v[k2];
                body.add(self2.clone(k2, v2));
              }
              ;
            } else {
              expanded.push(self2.clone(k, v).set({ plain: k == name || k == alias }));
            }
            ;
          }
          ;
          list.replace(self2, expanded);
          return;
        }
        ;
      }
      ;
      if (self2._expr) {
        self2._expr.traverse({ decl: self2, property: self2._property });
        self2._expr.set({ parens: false });
      }
      ;
      if (o.styles) {
        let key = self2._property.toKey();
        let val = self2._expr;
        if (o.selector) {
          key = JSON.stringify([o.selector, key]);
        }
        ;
        if (self2._property.isUnit()) {
          if (self2._property.number() != 1) {
            val = LIT("calc(" + val.c() + " / " + self2._property.number() + ")");
          }
          ;
        }
        ;
        if (o.styles[key]) {
          v_ = o.styles[key], delete o.styles[key], v_;
        }
        ;
        o.styles[key] = val.c({ property: self2._property });
      }
      ;
      return self2;
    };
    StyleDeclaration.prototype.toCSS = function() {
      return "" + this._property.c() + ": " + AST.cary(this._expr).join(" ");
    };
    StyleDeclaration.prototype.toJSON = function() {
      return this.toCSS();
    };
    function StyleProperty(token) {
      var m;
      this._token = token;
      let raw = String(this._token);
      if (raw[0] == "#") {
        this._kind = "color";
      }
      ;
      this._parts = raw.replace(/(^|\b)\$/g, "--").split(/\b(?=[\^\.\@\!])/g);
      for (let i = 0, items = iter$(this._parts), len = items.length; i < len; i++) {
        this._parts[i] = items[i].replace(/^\.(?=[^\.])/, "@.");
      }
      ;
      this._name = String(this._parts[0]);
      if (m = this._name.match(/^(\d+)([a-zA-Z]+)$/)) {
        this._number = parseInt(m[1]);
        this._unit = m[2];
      }
      ;
      if (!this._name.match(/^[\#\w\-]/)) {
        this._parts.unshift(this._name = null);
      }
      ;
      this;
    }
    subclass$(StyleProperty, StyleNode2);
    exports.StyleProperty = StyleProperty;
    StyleProperty.prototype.name = function(v) {
      return this._name;
    };
    StyleProperty.prototype.setName = function(v) {
      this._name = v;
      return this;
    };
    StyleProperty.prototype.number = function(v) {
      return this._number;
    };
    StyleProperty.prototype.setNumber = function(v) {
      this._number = v;
      return this;
    };
    StyleProperty.prototype.unit = function(v) {
      return this._unit;
    };
    StyleProperty.prototype.setUnit = function(v) {
      this._unit = v;
      return this;
    };
    StyleProperty.prototype.kind = function(v) {
      return this._kind;
    };
    StyleProperty.prototype.setKind = function(v) {
      this._kind = v;
      return this;
    };
    StyleProperty.prototype.setName = function(value) {
      var m;
      if (m = value.match(/^(\d+)([a-zA-Z]+)$/)) {
        this._number = parseInt(m[1]);
        this._unit = m[2];
      } else {
        this._number = this._unit = null;
      }
      ;
      this._name = value;
      return this;
    };
    StyleProperty.prototype.name = function() {
      return this._name || (this._name = String(this._parts[0]));
    };
    StyleProperty.prototype.clone = function(newname) {
      return new StyleProperty([newname || this.name()].concat(this.modifiers()).join(""));
    };
    StyleProperty.prototype.addModifier = function(modifier) {
      this._parts.push(modifier);
      return this;
    };
    StyleProperty.prototype.isUnit = function() {
      return this._unit;
    };
    StyleProperty.prototype.isColor = function() {
      return this._kind == "color";
    };
    StyleProperty.prototype.modifiers = function() {
      return this._parts.slice(1);
    };
    StyleProperty.prototype.toJSON = function() {
      return this.name() + this.modifiers().join("\xA7");
    };
    StyleProperty.prototype.toString = function() {
      return this.name() + this.modifiers().join("\xA7");
    };
    StyleProperty.prototype.toKey = function() {
      let name = this.isUnit() ? "--u_" + this._unit : this.isColor() ? "--c_" + this._name.slice(1) : this.name();
      return [name].concat(this.modifiers()).join("\xA7");
    };
    StyleProperty.prototype.c = function() {
      return this.toString();
    };
    function StylePropertyIdentifier(name) {
      this._name = name;
      if (String(name)[0] == "$") {
        this._name = "--" + String(name).slice(1);
      }
      ;
    }
    subclass$(StylePropertyIdentifier, StyleNode2);
    exports.StylePropertyIdentifier = StylePropertyIdentifier;
    StylePropertyIdentifier.prototype.toJSON = function() {
      return String(this._name);
    };
    StylePropertyIdentifier.prototype.toString = function() {
      return String(this._name);
    };
    function StylePropertyModifier(name) {
      this._name = name;
    }
    subclass$(StylePropertyModifier, StyleNode2);
    exports.StylePropertyModifier = StylePropertyModifier;
    StylePropertyModifier.prototype.toJSON = function() {
      return String(this._name);
    };
    StylePropertyModifier.prototype.toString = function() {
      return String(this._name);
    };
    function StyleExpressions() {
      return ListNode.apply(this, arguments);
    }
    subclass$(StyleExpressions, ListNode);
    exports.StyleExpressions = StyleExpressions;
    StyleExpressions.prototype.load = function(list) {
      if (list instanceof Array) {
        list = list.map(function(_0) {
          return _0 instanceof StyleExpression ? _0 : new StyleExpression(_0);
        });
      }
      ;
      return [].concat(list);
    };
    StyleExpressions.prototype.c = function(o) {
      let out = AST.cary(this._nodes, o).join(", ");
      if (this.option("parens")) {
        out = "( " + out + " )";
      }
      ;
      return out;
    };
    StyleExpressions.prototype.clone = function() {
      return new StyleExpressions(this._nodes.slice(0));
    };
    StyleExpressions.prototype.toArray = function() {
      return this._nodes.filter(function(_0) {
        return _0 instanceof StyleExpression;
      }).map(function(_0) {
        return _0.toArray();
      });
    };
    function StyleExpression() {
      return ListNode.apply(this, arguments);
    }
    subclass$(StyleExpression, ListNode);
    exports.StyleExpression = StyleExpression;
    StyleExpression.prototype.load = function(list) {
      return [].concat(list);
    };
    StyleExpression.prototype.toString = function() {
      return AST.cary(this._nodes).join(" ");
    };
    StyleExpression.prototype.toArray = function() {
      return this._nodes.slice(0);
    };
    StyleExpression.prototype.clone = function() {
      return new StyleExpression(this._nodes.slice(0));
    };
    StyleExpression.prototype.c = function(o) {
      if (o && o.as == "js") {
        return AST.cary(this._nodes, o).join(" ");
      }
      ;
      return this.toString();
    };
    StyleExpression.prototype.toJSON = function() {
      return this.toString();
    };
    StyleExpression.prototype.toArray = function() {
      return this._nodes;
    };
    StyleExpression.prototype.toIterable = function() {
      return this._nodes;
    };
    StyleExpression.prototype.addParam = function(param, op) {
      param._op = op;
      this.last().addParam(param);
      return this;
    };
    StyleExpression.prototype.reclaimParams = function() {
      let items = this.filter(function(_0) {
        return _0.param;
      });
      for (let i = 0, ary = iter$(items), len = ary.length, item; i < len; i++) {
        item = ary[i];
        let param = item.param;
        let op = param._op;
        this.add([op, param], { after: item });
        item._params = [];
      }
      ;
      return;
    };
    StyleExpression.prototype.visit = function(stack, o) {
      if (o && o.property) {
        let name = o.property._name;
        if (name == "gt" || name == "grid-template") {
          this.reclaimParams();
        }
        ;
      }
      ;
      return StyleExpression.prototype.__super__.visit.apply(this, arguments);
    };
    function StyleParens() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(StyleParens, ValueNode2);
    exports.StyleParens = StyleParens;
    StyleParens.prototype.visit = function(stack, o) {
      StyleParens.prototype.__super__.visit.apply(this, arguments);
      return this.set({ calc: !stack.up(StyleParens) && !stack.up(StyleFunction) });
    };
    StyleParens.prototype.c = function(o) {
      let plain = this._value.c();
      if (o && o.as == "js") {
        return plain;
      } else if (this.option("calc")) {
        let unit = this._options && String(this._options.unit || "");
        if (unit) {
          return "calc(calc(" + plain + ") * 1" + unit + ")";
        } else {
          return "calc(" + plain + ")";
        }
        ;
      } else {
        return "(" + plain + ")";
      }
      ;
    };
    function StyleOperation() {
      return ListNode.apply(this, arguments);
    }
    subclass$(StyleOperation, ListNode);
    exports.StyleOperation = StyleOperation;
    StyleOperation.prototype.c = function(o) {
      return AST.cary(this._nodes, o).join(" ");
    };
    function StyleTerm() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(StyleTerm, ValueNode2);
    exports.StyleTerm = StyleTerm;
    StyleTerm.prototype.valueOf = function() {
      return String(this._value);
    };
    StyleTerm.prototype.toString = function() {
      return String(this._value);
    };
    StyleTerm.prototype.toRaw = function() {
      return this.valueOf();
    };
    StyleTerm.prototype.toAlpha = function() {
      return this.valueOf();
    };
    StyleTerm.prototype.visit = function(stack, o) {
      this._token = this._value;
      this._property = o.property;
      this._propname = o.property && o.property._name;
      this.alone = stack.up() instanceof StyleExpression && stack.up().values().length == 1;
      let resolved = stack.theme().$value(this, 0, this._propname);
      if (!(stack.up(StyleParens) || stack.up(StyleFunction))) {
        this._resolvedValue = resolved;
      }
      ;
      return this;
    };
    Object.defineProperty(StyleTerm.prototype, "param", { get: function() {
      return this._params && this._params[0];
    }, configurable: true });
    StyleTerm.prototype.kind = function() {
      return this._kind;
    };
    StyleTerm.prototype.runtimeValue = function() {
      return this.value();
    };
    StyleTerm.prototype.addParam = function(param) {
      this._params || (this._params = []);
      this._params.push(param);
      return this;
    };
    StyleTerm.prototype.c = function(o) {
      let out = this._resolvedValue && !(this._resolvedValue instanceof Node2) ? C(this._resolvedValue) : this.valueOf();
      return out;
    };
    function StyleInterpolationExpression() {
      return StyleTerm.apply(this, arguments);
    }
    subclass$(StyleInterpolationExpression, StyleTerm);
    exports.StyleInterpolationExpression = StyleInterpolationExpression;
    StyleInterpolationExpression.prototype.name = function(v) {
      return this._name;
    };
    StyleInterpolationExpression.prototype.setName = function(v) {
      this._name = v;
      return this;
    };
    StyleInterpolationExpression.prototype.loc = function() {
      return [this._startLoc, this._endLoc];
    };
    StyleInterpolationExpression.prototype.visit = function(stack, o) {
      StyleInterpolationExpression.prototype.__super__.visit.apply(this, arguments);
      if (o.rootRule) {
        o.rootRule.addPlaceholder(this);
      }
      ;
      this._id = "" + this.sourceId() + "_" + this.oid();
      this._name = "--" + this._id;
      return this._runtimeValue = this.value();
    };
    StyleInterpolationExpression.prototype.runtimeValue = function() {
      return this._runtimeValue;
    };
    Object.defineProperty(StyleInterpolationExpression.prototype, "unit", { get: function() {
      return this._options && String(this._options.unit) || "";
    }, configurable: true });
    StyleInterpolationExpression.prototype.c = function() {
      return "var(--" + this._id + ")";
    };
    function StyleFunction(value, params) {
      this._name = value;
      this._params = params;
    }
    subclass$(StyleFunction, Node2);
    exports.StyleFunction = StyleFunction;
    StyleFunction.prototype.kind = function() {
      return "function";
    };
    StyleFunction.prototype.visit = function(stack, o) {
      this._property = o.property;
      this._propname = o.property && o.property._name;
      if (this._params && this._params.traverse) {
        this._params.traverse();
      }
      ;
      return this;
    };
    StyleFunction.prototype.toString = function() {
      return this.c();
    };
    StyleFunction.prototype.c = function(o) {
      var res;
      let name = String(this._name);
      let pars = this._params.c();
      let out = "" + name + "(" + pars + ")";
      if (this._property && this._property.isColor()) {
        if (name == "hsl") {
          let parts = this._params.toArray().flat();
          if (parts.length == 3) {
            return AST.cary(parts).join(",");
          }
          ;
        }
        ;
        if (res = Color2.from(out)) {
          return res.toVar();
        }
        ;
      }
      ;
      if (o && o.as == "js") {
        out = helpers2.singlequote(out);
      }
      ;
      return out;
    };
    function StyleURL() {
      return ValueNode2.apply(this, arguments);
    }
    subclass$(StyleURL, ValueNode2);
    exports.StyleURL = StyleURL;
    StyleURL.prototype.c = function() {
      let out = String(this._value);
      return SourceMapper2.strip(out);
    };
    function StyleIdentifier() {
      return StyleTerm.apply(this, arguments);
    }
    subclass$(StyleIdentifier, StyleTerm);
    exports.StyleIdentifier = StyleIdentifier;
    StyleIdentifier.prototype.color = function(v) {
      return this._color;
    };
    StyleIdentifier.prototype.setColor = function(v) {
      this._color = v;
      return this;
    };
    StyleIdentifier.prototype.visit = function(stack) {
      let raw = this.toString();
      if (raw.match(/^([a-zA-Z]+\d+|black|white)$/)) {
        this.setColor("" + raw);
        if (this.param) {
          this.setColor(this.color() + "/" + this.param.toAlpha());
        }
        ;
      }
      ;
      return StyleIdentifier.prototype.__super__.visit.apply(this, arguments);
    };
    StyleIdentifier.prototype.c = function(o) {
      if (this.color()) {
        let val2 = this.color().toString();
        let asvar = this.option("parameterize") || this._property && this._property.isColor();
        let pre = asvar ? "/*##*/" : "/*#*/";
        return pre + val2;
      }
      ;
      let val = this.toString();
      if (val[0] == "$") {
        val = "var(--" + val.slice(1) + ")";
        if (o && o.as == "js") {
          val = helpers2.singlequote(val);
        }
        ;
        return val;
      } else {
        return StyleIdentifier.prototype.__super__.c.apply(this, arguments);
      }
      ;
    };
    function StyleString() {
      return StyleTerm.apply(this, arguments);
    }
    subclass$(StyleString, StyleTerm);
    exports.StyleString = StyleString;
    function StyleColor() {
      return StyleTerm.apply(this, arguments);
    }
    subclass$(StyleColor, StyleTerm);
    exports.StyleColor = StyleColor;
    StyleColor.prototype.c = function(o) {
      let raw = this.toRaw();
      let name = raw.slice(1);
      let rich = Color2.from(raw);
      let a = this.param ? this.param.toAlpha() : 1;
      if (a[0] == "$") {
        a = "var(--" + a.slice(1) + ",100%)";
      }
      ;
      if (this._property && this._property.isColor()) {
        return rich.toVar();
      }
      ;
      return "hsla(" + rich.toVar() + "," + a + ")";
    };
    function StyleVar() {
      return StyleTerm.apply(this, arguments);
    }
    subclass$(StyleVar, StyleTerm);
    exports.StyleVar = StyleVar;
    StyleVar.prototype.c = function(o) {
      return this.toString();
    };
    var VALID_CSS_UNITS2 = "cm mm Q in pc pt px em ex ch rem vw vh vmin vmax % s ms fr deg rad grad turn Hz kHz".split(" ");
    function StyleDimension(value) {
      this._value = value;
      let m = String(value).match(/^([\-\+]?[\d\.]*)([a-zA-Z]+|%)?$/);
      this._number = parseFloat(m[1]);
      this._unit = m[2] || null;
    }
    subclass$(StyleDimension, StyleTerm);
    exports.StyleDimension = StyleDimension;
    StyleDimension.prototype.unit = function(v) {
      return this._unit;
    };
    StyleDimension.prototype.setUnit = function(v) {
      this._unit = v;
      return this;
    };
    StyleDimension.prototype.number = function(v) {
      return this._number;
    };
    StyleDimension.prototype.setNumber = function(v) {
      this._number = v;
      return this;
    };
    StyleDimension.prototype.clone = function(num, unit) {
      if (num === void 0)
        num = this._number;
      if (unit === void 0)
        unit = this._unit;
      let cloned = new StyleDimension(this.value());
      cloned._unit = unit;
      cloned._number = num;
      return cloned;
    };
    StyleDimension.prototype.toString = function() {
      return "" + this._number + (this._unit || "");
    };
    StyleDimension.prototype.toRaw = function() {
      return this._unit ? this.toString() : this._number;
    };
    StyleDimension.prototype.c = function(o) {
      let out = this._resolvedValue && !(this._resolvedValue instanceof Node2) ? C(this._resolvedValue) : this.valueOf();
      if (o && o.as == "js" && this._unit) {
        out = helpers2.singlequote(out);
      }
      ;
      return out;
    };
    StyleDimension.prototype.valueOf = function() {
      if (this.unit() == "u") {
        return this.number() * 4 + "px";
      } else if (this.unit() == null) {
        return this.number();
      } else if (idx$(this.unit(), VALID_CSS_UNITS2) >= 0) {
        return String(this._value);
      } else if (this.number() == 1) {
        return "var(--u_" + this.unit() + ",1" + this.unit() + ")";
      } else {
        return "calc(var(--u_" + this.unit() + ",1" + this.unit() + ") * " + this._number + ")";
      }
      ;
    };
    StyleDimension.prototype.toAlpha = function() {
      if (!this.unit()) {
        return this.number() + "%";
      } else {
        return this.valueOf();
      }
      ;
    };
    function StyleNumber() {
      return StyleDimension.apply(this, arguments);
    }
    subclass$(StyleNumber, StyleDimension);
    exports.StyleNumber = StyleNumber;
    function Util(args) {
      this._args = args;
    }
    subclass$(Util, Node2);
    exports.Util = Util;
    Util.prototype.args = function(v) {
      return this._args;
    };
    Util.prototype.setArgs = function(v) {
      this._args = v;
      return this;
    };
    Util.extend = function(a, b) {
      return new Util.Extend([a, b]);
    };
    Util.callImba = function(scope, meth, args) {
      return CALL(OP(".", scope.imba(), new Identifier(meth)), args);
    };
    Util.repeat = function(str, times) {
      var res = "";
      while (times > 0) {
        if (times % 2 == 1) {
          res += str;
        }
        ;
        str += str;
        times >>= 1;
      }
      ;
      return res;
    };
    Util.keys = function(obj) {
      var l = new Const("Object");
      var r = new Identifier("keys");
      return CALL(OP(".", l, r), [obj]);
    };
    Util.len = function(obj, cache) {
      var r = new Identifier("length");
      var node = OP(".", obj, r);
      if (cache) {
        node.cache({ force: true, pool: "len" });
      }
      ;
      return node;
    };
    Util.indexOf = function(lft, rgt) {
      var node = new Util.IndexOf([lft, rgt]);
      return node;
    };
    Util.slice = function(obj, a, b) {
      var slice = new Identifier("slice");
      return CALL(OP(".", obj, slice), AST.compact([a, b]));
    };
    Util.iterable = function(obj, cache) {
      if (STACK.tsc()) {
        return obj;
      }
      ;
      var node = new Util.Iterable([obj]);
      if (cache) {
        node.cache({ force: true, pool: "iter" });
      }
      ;
      return node;
    };
    Util.counter = function(start, cache) {
      var node = new Num(start);
      if (cache) {
        node.cache({ force: true, pool: "counter" });
      }
      ;
      return node;
    };
    Util.array = function(size, cache) {
      var node = new Util.Array([size]);
      if (cache) {
        node.cache({ force: true, pool: "list" });
      }
      ;
      return node;
    };
    Util.prototype.name = function() {
      return "requireDefault$";
    };
    Util.prototype.js = function() {
      console.warn("compiling", this.name(), this.option("stdlib"));
      if (this.option("stdlib") && !STACK.isStdLib()) {
        return "" + STACK.runtime()[this.option("stdlib")] + "(" + this._args.map(function(v) {
          return v.c();
        }).join(",") + ")";
      } else {
        this.scope__().root().helper(this, this.helper());
        return "" + this.name() + "(" + this._args.map(function(v) {
          return v.c();
        }).join(",") + ")";
      }
      ;
    };
    Util.prototype.called = function(pars, std) {
      if (std && !STACK.isStdLib()) {
        return "" + STACK.runtime()[std] + "(" + pars.map(function(v) {
          return v.c();
        }).join(",") + ")";
      } else {
        this.scope__().root().helper(this, this.helper());
        return "" + this.name() + "(" + pars.map(function(v) {
          return v.c();
        }).join(",") + ")";
      }
      ;
    };
    var HELPERS = {
      setField: "(target,key,value,o){\n	Object.defineProperty(target,key,{value:value});\n};",
      unit: "(value,unit){\n	return value + unit;\n};",
      memo: "(hash,slf,cb,scope = globalThis){\n	let sym = Symbol.for(hash)\n	let fn = scope[sym] ||= (cb.memoized=sym,cb)\n	return slf == null ? fn : fn.bind(slf)\n};",
      optNegIndex: "(value,index){ return value ? value[value.length + index] : null };",
      negIndex: "(value,index){ return value[value.length + index] };",
      extendTag: "(el,cls){\n	Object.defineProperties(el,Object.getOwnPropertyDescriptors(cls.prototype));\n	return el;\n};",
      inheritClass: "(cls){\n	Object.getPrototypeOf(cls.prototype).constructor?.inherited?.(cls);\n};",
      inheritClass: "(cls){\n	Object.getPrototypeOf(cls.prototype).constructor?.inherited?.(cls);\n};",
      defineName: {
        inline: '(cls,name){\n	Object.defineProperty(cls,"name",{value:name,configurable:true});\n};',
        std: "defineName"
      },
      initField: "(target,key,o){\n	Object.defineProperty(target,key,o);\n};",
      watcher: "(k,w){\n	return { enumerable:true,\n		set(v){var o=this[k]; (v===o)||(this[k]=v,this[w]({value:v,oldValue:o}));},\n		get(){ return this[k] }\n	};\n};",
      decorate: {
        inline: '(decorators,target,key,desc){\n	var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n	if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n	else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n	return c > 3 && r && Object.defineProperty(target, key, r), r;\n};'
      },
      contains: '(a,b){\n	const sym = Symbol.for("#has");\n	return b && ( b[sym]?.(a) ?? b.includes?.(a) ?? b.has?.(a) ?? false);\n};',
      requireDefault: "(obj){\n	return obj && obj.__esModule ? obj : { default: obj };\n};",
      virtualSuper: "(target){\n	var up = Object.getPrototypeOf(target);\n	var supers = Object.getOwnPropertyDescriptors(target);\n\n	const map = new WeakMap();\n	const obj = Object.defineProperties(Object.create(up), supers);\n\n	const proxy = {\n		apply: (self, key, ...params) => { return obj[key].apply(self, params) },\n		get: (self, key) => { return Reflect.get(obj, key, self); },\n		set: (self, key, value, receiver) => { return Reflect.set(obj, key, value, self);}\n	}\n\n	return function (s) {\n		return map.get(s) || map.set(s, new Proxy(s, proxy)) && map.get(s);\n	}\n};"
    };
    Util.Helper = function Helper() {
      return Util.apply(this, arguments);
    };
    subclass$(Util.Helper, Util);
    Util.Helper.prototype.name = function() {
      return this.option("name");
    };
    Util.Helper.prototype.helper = function() {
      return this.option("helper");
    };
    for (let v, i = 0, keys = Object.keys(HELPERS), l = keys.length, k; i < l; i++) {
      k = keys[i];
      v = HELPERS[k];
      Util[k] = function() {
        var $0 = arguments, j = $0.length;
        var args = new Array(j > 0 ? j : 0);
        while (j > 0)
          args[j - 1] = $0[--j];
        let helper = "function " + k + "$__" + (v.inline || v);
        return new Util.Helper(args).set({ name: k + "$__", helper, stdlib: v.std || (v.inline ? k : null) });
      };
    }
    Util.Extend = function Extend() {
      return Util.apply(this, arguments);
    };
    subclass$(Util.Extend, Util);
    Util.Extend.prototype.helper = function() {
      return "function extend$__(target,ext){\n	// @ts-ignore\n	const descriptors = Object.getOwnPropertyDescriptors(ext);\n	delete descriptors.constructor;\n	if(target.extend__ instanceof Function){\n		target.extend__(descriptors,ext);\n	} else {\n		// @ts-ignore\n		Object.defineProperties(target,descriptors);\n	}\n	return target;\n};";
    };
    Util.Extend.prototype.js = function(o) {
      this.scope__().root().helper(this, this.helper());
      return "extend$__(" + AST.compact(AST.cary(this.args())).join(",") + ")";
    };
    Util.IndexOf = function IndexOf() {
      return Util.apply(this, arguments);
    };
    subclass$(Util.IndexOf, Util);
    Util.IndexOf.prototype.helper = function() {
      return "function idx$__(a,b){\n	return (b && b.indexOf) ? b.indexOf(a) : [].indexOf.call(a,b);\n};";
    };
    Util.IndexOf.prototype.js = function(o) {
      this.scope__().root().helper(this, this.helper());
      return "idx$__(" + this.args().map(function(v) {
        return v.c();
      }).join(",") + ")";
    };
    Util.Is = function Is() {
      return Util.apply(this, arguments);
    };
    subclass$(Util.Is, Util);
    Util.Is.prototype.left = function() {
      return this.args()[0];
    };
    Util.Is.prototype.right = function() {
      return this.args()[1];
    };
    Util.Is.prototype.helper = function() {
      return "// @ts-ignore\nfunction is$(a,b){ return a === b || " + ("b?.[" + this.symbolRef("#matcher") + "]?.(a) || false") + "}";
    };
    Util.Is.prototype.clone = function(b) {
      return new this.constructor([this.args()[0], b]);
    };
    Util.Is.prototype.js = function(o) {
      return this.called(this.args(), "op_is");
    };
    Util.Isa = function Isa() {
      return Util.Is.apply(this, arguments);
    };
    subclass$(Util.Isa, Util.Is);
    Util.Isa.prototype.helper = function() {
      return '// @ts-ignore\nfunction isa$(a,b){ return typeof b === "string" ? (typeof a === b) : b[Symbol.hasInstance]?.(a) }';
    };
    Util.Isa.prototype.js = function() {
      if (this.right() instanceof Str) {
        return "typeof " + this.left().c() + "===" + this.right().c();
      }
      ;
      return this.called([this.left(), this.right()], "op_isa");
      this.scope__().root().helper(this, this.helper());
      return "isa$(" + this.left().c() + "," + this.right().c() + ")";
    };
    Util.Promisify = function Promisify() {
      return Util.apply(this, arguments);
    };
    subclass$(Util.Promisify, Util);
    Util.Promisify.prototype.helper = function() {
      return 'function promise$__(a){\n	if(a instanceof Array){\n		console.warn("await (Array) is deprecated - use await Promise.all(Array)");\n		return Promise.all(a);\n	} else {\n		return (a && a.then ? a : Promise.resolve(a));\n	}\n}';
    };
    Util.Promisify.prototype.js = function(o) {
      this.scope__().root().helper(this, this.helper());
      return "promise$__(" + this.args().map(function(v) {
        return v.c();
      }).join(",") + ")";
    };
    Util.Iterable = function Iterable() {
      return Util.apply(this, arguments);
    };
    subclass$(Util.Iterable, Util);
    Util.Iterable.prototype.helper = function() {
      return "function iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };";
    };
    Util.Iterable.prototype.js = function(o) {
      if (this.args()[0] instanceof Arr) {
        return this.args()[0].c();
      }
      ;
      this.scope__().root().helper(this, this.helper());
      return "iter$__(" + this.args()[0].c() + ")";
    };
    Util.IsFunction = function IsFunction() {
      return Util.apply(this, arguments);
    };
    subclass$(Util.IsFunction, Util);
    Util.IsFunction.prototype.js = function(o) {
      return "" + this.args()[0].c();
    };
    Util.Array = function Array2() {
      return Util.apply(this, arguments);
    };
    subclass$(Util.Array, Util);
    Util.Array.prototype.js = function(o) {
      return "new Array(" + this.args().map(function(v) {
        return v.c();
      }) + ")";
    };
    function Entities(root) {
      this._root = root;
      this._map = [];
      return this;
    }
    Entities.prototype.add = function(path, object) {
      this._map[path] = object;
      if (this._map.indexOf(object) < 0) {
        this._map.push(object);
      }
      ;
      return this;
    };
    Entities.prototype.lookup = function(path) {
      return this._map[path];
    };
    Entities.prototype.plain = function() {
      return JSON.parse(JSON.stringify(this._map));
    };
    Entities.prototype.toJSON = function() {
      return this._map;
    };
    function RootEntities(root) {
      this._root = root;
      this._map = {};
      return this;
    }
    RootEntities.prototype.add = function(path, object) {
      this._map[path] = object;
      return this;
    };
    RootEntities.prototype.register = function(entity) {
      var path = entity.namepath();
      this._map[path] || (this._map[path] = entity);
      return this;
    };
    RootEntities.prototype.plain = function() {
      return JSON.parse(JSON.stringify(this._map));
    };
    RootEntities.prototype.toJSON = function() {
      return this._map;
    };
    function Scope2(node, parent) {
      this._nr = STACK.incr("scopes");
      this._head = [];
      this._node = node;
      this._parent = parent;
      this._vars = new ScopeVariables([]);
      this._entities = new Entities(this);
      this._meta = {};
      this._annotations = [];
      this._closure = this;
      this._virtual = false;
      this._counter = 0;
      this._varmap = {};
      this._counters = {};
      this._varpool = [];
      this._mixins = {};
      this._refcounter = 0;
      this._declListeners = [];
      this._level = (parent ? parent._level : -1) + 1;
      this.setup();
    }
    exports.Scope = Scope2;
    Scope2.prototype.level = function(v) {
      return this._level;
    };
    Scope2.prototype.setLevel = function(v) {
      this._level = v;
      return this;
    };
    Scope2.prototype.context = function(v) {
      return this._context;
    };
    Scope2.prototype.setContext = function(v) {
      this._context = v;
      return this;
    };
    Scope2.prototype.node = function(v) {
      return this._node;
    };
    Scope2.prototype.setNode = function(v) {
      this._node = v;
      return this;
    };
    Scope2.prototype.parent = function(v) {
      return this._parent;
    };
    Scope2.prototype.setParent = function(v) {
      this._parent = v;
      return this;
    };
    Scope2.prototype.varmap = function(v) {
      return this._varmap;
    };
    Scope2.prototype.setVarmap = function(v) {
      this._varmap = v;
      return this;
    };
    Scope2.prototype.varpool = function(v) {
      return this._varpool;
    };
    Scope2.prototype.setVarpool = function(v) {
      this._varpool = v;
      return this;
    };
    Scope2.prototype.params = function(v) {
      return this._params;
    };
    Scope2.prototype.setParams = function(v) {
      this._params = v;
      return this;
    };
    Scope2.prototype.head = function(v) {
      return this._head;
    };
    Scope2.prototype.setHead = function(v) {
      this._head = v;
      return this;
    };
    Scope2.prototype.vars = function(v) {
      return this._vars;
    };
    Scope2.prototype.setVars = function(v) {
      this._vars = v;
      return this;
    };
    Scope2.prototype.counter = function(v) {
      return this._counter;
    };
    Scope2.prototype.setCounter = function(v) {
      this._counter = v;
      return this;
    };
    Scope2.prototype.entities = function(v) {
      return this._entities;
    };
    Scope2.prototype.setEntities = function(v) {
      this._entities = v;
      return this;
    };
    Scope2.prototype.p = function() {
      if (STACK.loglevel() > 0) {
        console.log.apply(console, arguments);
      }
      ;
      return this;
    };
    Scope2.prototype.oid = function() {
      return this._oid || (this._oid = STACK.generateId(""));
    };
    Scope2.prototype.stack = function() {
      return STACK;
    };
    Scope2.prototype.kind = function() {
      return this._kind || (this._kind = this.constructor.name.replace("Scope", "").toLowerCase());
    };
    Scope2.prototype.runtime = function() {
      return this.root().runtime();
    };
    Scope2.prototype.setup = function() {
      return this._selfless = true;
    };
    Scope2.prototype.incr = function(name) {
      if (name === void 0)
        name = "i";
      var val = this._counters[name] || (this._counters[name] = 0);
      this._counters[name]++;
      return val;
    };
    Scope2.prototype.nextShortRef = function() {
      return AST.counterToShortRef(this._refcounter++);
    };
    Scope2.prototype.memovar = function(name, init) {
      this._memovars || (this._memovars = {});
      let item = this._memovars[name];
      if (!item) {
        item = this._memovars[name] = this.declare(item, init);
      }
      ;
      return item;
    };
    Scope2.prototype.mixin = function(name) {
      return this._mixins[name] || (this._mixins[name] = new MixinReference(name, this));
    };
    Scope2.prototype.captureVariableDeclarations = function(blk) {
      let items = [];
      this._declListeners.push(items);
      blk();
      this._declListeners.pop();
      return items;
    };
    Scope2.prototype.meta = function(key, value) {
      if (value != void 0) {
        this._meta[key] = value;
        return this;
      }
      ;
      return this._meta[key];
    };
    Scope2.prototype.namepath = function() {
      return "?";
    };
    Scope2.prototype.cssid = function() {
      return this._cssid || (this._cssid = "" + this.root().sourceId() + "-" + this.oid());
    };
    Scope2.prototype.cssns = function() {
      return this._cssns || (this._cssns = "" + this.root().sourceId() + "_" + this.oid());
    };
    Scope2.prototype.tagCache = function() {
      if (!this._tagCache) {
        var cache = LIT("" + this.runtime().getRenderContext + "()");
        if (STACK.closure() instanceof IsolatedFunctionScope) {
          cache = LIT("{}");
        }
        ;
        this._tagCache = this.declare(
          "\u03F2\u03C4",
          cache,
          {
            system: true,
            temporary: true,
            alias: "\u03F2\u03C4"
          }
        );
      }
      ;
      return this._tagCache;
    };
    Scope2.prototype.tagTempCache = function() {
      return this._tagTempCache || (this._tagTempCache = this.declare(
        "\u03F2\u03C4\u03C4",
        LIT("{}"),
        {
          system: true,
          temporary: true,
          alias: "\u03F2\u03C4\u03C4"
        }
      ));
    };
    Scope2.prototype.context = function() {
      if (!this._context) {
        if (this.selfless()) {
          this._context = this.parent().context().fromScope(this);
        } else {
          this._context = new ScopeContext(this);
        }
        ;
      }
      ;
      return this._context;
    };
    Scope2.prototype.isInExtend = function() {
      return this.closure().node().option("extension");
    };
    Scope2.prototype.traverse = function() {
      return this;
    };
    Scope2.prototype.visit = function() {
      if (this._parent) {
        return this;
      }
      ;
      this._parent = STACK.scope(1);
      this._level = STACK.scopes().length - 1;
      STACK.addScope(this);
      this.root().scopes().push(this);
      return this;
    };
    Scope2.prototype.wrap = function(scope) {
      this._parent = scope._parent;
      scope._parent = this;
      return this;
    };
    Scope2.prototype.virtualize = function() {
      return this;
    };
    Scope2.prototype.root = function() {
      return STACK.ROOT;
      var scope = this;
      while (scope) {
        if (scope instanceof RootScope) {
          return scope;
        }
        ;
        scope = scope.parent();
      }
      ;
      return null;
    };
    Scope2.prototype.register = function(name, decl, o) {
      if (decl === void 0)
        decl = null;
      if (o === void 0)
        o = {};
      if (!name) {
        o.system = true;
      }
      ;
      if (o.system) {
        return new (o.varclass || SystemVariable)(this, name, decl, o);
      }
      ;
      name = AST.sym(name);
      var existing = this._varmap.hasOwnProperty(name) && this._varmap[name];
      if (existing) {
        if (decl && existing.type() != "global") {
          decl.error("Cannot redeclare variable");
        }
        ;
      }
      ;
      if (existing && !o.unique && existing.type() != "global") {
        return existing;
      }
      ;
      let par = o.lookup && this.parent() && this.parent().lookup(name);
      var item = new (o.varclass || Variable)(this, name, decl, o);
      if (par) {
        item._parent = par;
      }
      ;
      if (!o.system && (!existing || existing.type() == "global")) {
        this._varmap[name] = item;
      }
      ;
      if (STACK.state() && STACK.state().variables instanceof Array) {
        STACK.state().variables.push(item);
      }
      ;
      if (this._declListeners.length) {
        for (let i = 0, items = iter$(this._declListeners), len = items.length; i < len; i++) {
          items[i].push(item);
        }
        ;
      }
      ;
      return item;
    };
    Scope2.prototype.annotate = function(obj) {
      this._annotations.push(obj);
      return this;
    };
    Scope2.prototype.declare = function(name, init, o) {
      var declarator_;
      if (init === void 0)
        init = null;
      if (o === void 0)
        o = {};
      var variable = name instanceof Variable ? name : this.register(name, null, o);
      var dec = this._vars.add(variable, init);
      (declarator_ = variable.declarator()) || (variable.setDeclarator(dec), dec);
      return variable;
    };
    Scope2.prototype.reusevar = function(name) {
      return this.temporary(null, { reuse: true }, name);
    };
    Scope2.prototype.temporary = function(decl, o, name) {
      if (o === void 0)
        o = {};
      if (name === void 0)
        name = null;
      if (this._systemscope && this._systemscope != this) {
        return this._systemscope.temporary(decl, o, name);
      }
      ;
      name || (name = o.name);
      o.temporary = true;
      if (name && o.reuse && this._vars["_temp_" + name]) {
        return this._vars["_temp_" + name];
      }
      ;
      if (o.pool) {
        for (let i = 0, items = iter$(this._varpool), len = items.length, v; i < len; i++) {
          v = items[i];
          if (v.pool() == o.pool && v.declarator() == null) {
            return v.reuse(decl);
          }
          ;
        }
        ;
      }
      ;
      var item = new SystemVariable(this, name, decl, o);
      this._varpool.push(item);
      this._vars.push(item);
      if (name && o.reuse) {
        this._vars["_temp_" + name] = item;
      }
      ;
      return item;
    };
    Scope2.prototype.lookup = function(name) {
      this._lookups || (this._lookups = {});
      var ret = null;
      name = AST.sym(name);
      if (this._varmap.hasOwnProperty(name)) {
        ret = this._varmap[name];
      } else {
        ret = this.parent() && this.parent().lookup(name);
        if (ret) {
          this._nonlocals || (this._nonlocals = {});
          this._nonlocals[name] = ret;
        }
        ;
      }
      ;
      return ret;
    };
    Scope2.prototype.requires = function(path, name) {
      if (name === void 0)
        name = "";
      return this.root().requires(path, name);
    };
    Scope2.prototype.imba = function() {
      STACK.meta().universal = false;
      return this._imba || (this._imba = STACK.isNode() ? LIT("(this && this[" + this.root().symbolRef("#imba").c() + "] || globalThis[" + this.root().symbolRef("#imba").c() + "])") : LIT("imba"));
    };
    Scope2.prototype.autodeclare = function(variable) {
      return this.vars().add(variable);
    };
    Scope2.prototype.free = function(variable) {
      variable.free();
      return this;
    };
    Scope2.prototype.selfless = function() {
      return !!this._selfless;
    };
    Scope2.prototype.closure = function() {
      return this._closure;
    };
    Scope2.prototype.finalize = function() {
      return this;
    };
    Scope2.prototype.klass = function() {
      var scope = this;
      while (scope) {
        scope = scope.parent();
        if (scope instanceof ClassScope) {
          return scope;
        }
        ;
      }
      ;
      return null;
    };
    Scope2.prototype.head = function() {
      return [this._vars, this._params];
    };
    Scope2.prototype.c = function(o) {
      var body;
      if (o === void 0)
        o = {};
      o.expression = false;
      this.node().body().setHead(this.head());
      return body = this.node().body().c(o);
    };
    Scope2.prototype.region = function() {
      return this.node().body().region();
    };
    Scope2.prototype.loc = function() {
      return this.node().loc();
    };
    Scope2.prototype.dump = function() {
      var self2 = this;
      var vars = Object.keys(self2._varmap).map(function(k) {
        var v = self2._varmap[k];
        return v.references().length ? AST.dump(v) : null;
      });
      var desc = {
        nr: self2._nr,
        type: self2.constructor.name,
        level: self2.level() || 0,
        vars: AST.compact(vars),
        loc: self2.loc()
      };
      return desc;
    };
    Scope2.prototype.toJSON = function() {
      return this.dump();
    };
    Scope2.prototype.toString = function() {
      return "" + this.constructor.name;
    };
    Scope2.prototype.closeScope = function() {
      return this;
    };
    function RootScope() {
      RootScope.prototype.__super__.constructor.apply(this, arguments);
      this.register("global", this, { type: "global" })._c = "globalThis";
      this.REQUIRE = this.register("require", this, { type: "global" });
      this.IMPORT = this.register("import", this, { type: "global" });
      this.MODULE = this.register("module", this, { type: "global" });
      this.register("window", this, { type: "global", varclass: WindowReference });
      this.setDocument(this.register("document", this, { type: "global", varclass: DocumentReference }));
      this.register("exports", this, { type: "global" });
      this.register("console", this, { type: "global" });
      this.register("process", this, { type: "global" });
      this.register("parseInt", this, { type: "global" });
      this.register("parseFloat", this, { type: "global" });
      this.register("setTimeout", this, { type: "global" });
      this.register("setInterval", this, { type: "global" });
      this.register("setImmediate", this, { type: "global" });
      this.register("clearTimeout", this, { type: "global" });
      this.register("clearInterval", this, { type: "global" });
      this.register("clearImmediate", this, { type: "global" });
      this.register("globalThis", this, { type: "global" });
      this.register("isNaN", this, { type: "global" });
      this.register("isFinite", this, { type: "global" });
      this.register("__dirname", this, { type: "global" });
      this.register("__filename", this, { type: "global" });
      this.register("__realname", this, { type: "global" })._c = "__filename";
      this.register("__pure__", this, { type: "global", varclass: PureReference })._c = "/* @__PURE__ */";
      this.register("_", this, { type: "global" });
      this._requires = {};
      this._warnings = [];
      this._scopes = [];
      this._helpers = [];
      this._assets = {};
      this._selfless = true;
      this._implicitAccessors = [];
      this._entities = new RootEntities(this);
      this._object = Obj.wrap({});
      this._head = [this._vars];
      this._symbolRefs = {};
      this._importProxies = {};
      this._vars.setSplit(true);
      this._imba = this.register("imba", this, { type: "global", varclass: ImbaRuntime, path: "imba" });
      this._runtime = this._imba.proxy();
      this;
    }
    subclass$(RootScope, Scope2);
    exports.RootScope = RootScope;
    RootScope.prototype.warnings = function(v) {
      return this._warnings;
    };
    RootScope.prototype.setWarnings = function(v) {
      this._warnings = v;
      return this;
    };
    RootScope.prototype.scopes = function(v) {
      return this._scopes;
    };
    RootScope.prototype.setScopes = function(v) {
      this._scopes = v;
      return this;
    };
    RootScope.prototype.entities = function(v) {
      return this._entities;
    };
    RootScope.prototype.setEntities = function(v) {
      this._entities = v;
      return this;
    };
    RootScope.prototype.object = function(v) {
      return this._object;
    };
    RootScope.prototype.setObject = function(v) {
      this._object = v;
      return this;
    };
    RootScope.prototype.options = function(v) {
      return this._options;
    };
    RootScope.prototype.setOptions = function(v) {
      this._options = v;
      return this;
    };
    RootScope.prototype.assets = function(v) {
      return this._assets;
    };
    RootScope.prototype.setAssets = function(v) {
      this._assets = v;
      return this;
    };
    RootScope.prototype.document = function(v) {
      return this._document;
    };
    RootScope.prototype.setDocument = function(v) {
      this._document = v;
      return this;
    };
    RootScope.prototype.importProxy = function(name, path) {
      return this._importProxies[name] || (this._importProxies[name] = this.register("$" + name + "$", this, { type: "global", varclass: ImportProxy, path: path || name }));
    };
    RootScope.prototype.runtime = function() {
      return this._runtime;
    };
    RootScope.prototype.use = function(item) {
      if (!STACK.tsc()) {
        return this._imba.touch("use_" + item);
      }
      ;
    };
    RootScope.prototype.sourceId = function() {
      return this._sourceId || (this._sourceId = STACK.sourceId());
    };
    RootScope.prototype.cssns = function() {
      return this._cssns || (this._cssns = "" + this.sourceId() + "_");
    };
    RootScope.prototype.sfco = function() {
      return this._sfco || (this._sfco = this.declare("sfc$", LIT("{/*$sfc$*/}")));
    };
    RootScope.prototype.context = function() {
      return this._context || (this._context = new RootScopeContext(this));
    };
    RootScope.prototype.globalRef = function() {
      return this._globalRef || (this._globalRef = LIT("globalThis"));
    };
    RootScope.prototype.mixinExports = function() {
      if (!this._mixinExports) {
        this._head.push(this._mixinExports = new MixinExports());
      }
      ;
      return this._mixinExports;
    };
    RootScope.prototype.registerAsset = function(path, kind, context, pathToken) {
      let key = path + kind;
      if (this._assets[key]) {
        return this._assets[key];
      }
      ;
      let insertAt = STACK.lastImport() || this.head();
      let asset = this._assets[key] = {
        path,
        kind,
        external: true,
        context,
        pathToken,
        ref: this.register("asset", null, { system: true })
      };
      insertAt.push(new AssetReference(asset));
      return asset;
    };
    RootScope.prototype.lookup = function(name) {
      name = AST.sym(name);
      if (this._varmap.hasOwnProperty(name)) {
        return this._varmap[name];
      }
      ;
    };
    RootScope.prototype.visit = function() {
      STACK.addScope(this);
      return this;
    };
    RootScope.prototype.helper = function(typ, value) {
      if (this._helpers.indexOf(value) == -1) {
        this._helpers.push(value);
      }
      ;
      return this;
    };
    RootScope.prototype.head = function() {
      return this._head;
    };
    RootScope.prototype.dump = function() {
      var obj = {
        autoself: this._implicitAccessors.map(function(s) {
          return s.dump();
        })
      };
      if (OPTS.analysis.scopes) {
        var scopes = this._scopes.map(function(s) {
          return s.dump();
        });
        scopes.unshift(RootScope.prototype.__super__.dump.call(this));
        obj.scopes = scopes;
      }
      ;
      if (OPTS.analysis.entities) {
        obj.entities = this._entities;
      }
      ;
      return obj;
    };
    RootScope.prototype.requires = function(path, name) {
      var variable, declarator_;
      if (variable = this.lookup(name)) {
        return variable;
      }
      ;
      if (variable = this._requires[name]) {
        if (variable._requirePath != path) {
          throw new Error("" + name + " is already defined as require('" + variable._requirePath + "')");
        }
        ;
        return variable;
      }
      ;
      var req = new Require(new Str("'" + path + "'"));
      variable = new Variable(this, name, null, { system: true });
      var dec = this._vars.add(variable, req);
      (declarator_ = variable.declarator()) || (variable.setDeclarator(dec), dec);
      variable._requirePath = path;
      this._requires[name] = variable;
      return variable;
    };
    RootScope.prototype.imba = function() {
      return this._imba;
    };
    RootScope.prototype.symbolRef = function(name) {
      name = SourceMapper2.strip(name);
      if (STACK.tsc()) {
        return this._symbolRefs[name] || (this._symbolRefs[name] = new Identifier(name.slice(1) + "_$INTERNAL$_"));
      }
      ;
      let map = this._symbolRefs;
      let alias = toJSIdentifier2(name);
      return map[name] || (map[name] = this.declare(null, LIT("Symbol.for('" + name + "')"), { type: "const", system: true, alias, gsym: name }));
    };
    RootScope.prototype.c = function(o) {
      if (o === void 0)
        o = {};
      o.expression = false;
      let body = this.node().body().c(o);
      let sheet = STACK.css();
      let pre = new Block([]);
      pre.setHead(this.head());
      pre.add(LIT(sheet.js(this, STACK)));
      let out = pre.c(o) + "\n/*body*/\n" + body;
      if (len$(this._helpers)) {
        out = AST.cary(this._helpers).join(";\n") + "\n" + out;
      }
      ;
      return out;
    };
    function ModuleScope() {
      return Scope2.apply(this, arguments);
    }
    subclass$(ModuleScope, Scope2);
    exports.ModuleScope = ModuleScope;
    ModuleScope.prototype.setup = function() {
      return this._selfless = false;
    };
    ModuleScope.prototype.namepath = function() {
      return this._node.namepath();
    };
    function ClassScope() {
      return Scope2.apply(this, arguments);
    }
    subclass$(ClassScope, Scope2);
    exports.ClassScope = ClassScope;
    ClassScope.prototype.setup = function() {
      return this._selfless = false;
    };
    ClassScope.prototype.namepath = function() {
      return this._node.namepath();
    };
    ClassScope.prototype.virtualize = function() {
      var up = this.parent();
      for (let o = this._varmap, v, i = 0, keys = Object.keys(o), l = keys.length, k; i < l; i++) {
        k = keys[i];
        v = o[k];
        v.resolve(up, true);
      }
      ;
      return this;
    };
    ClassScope.prototype.prototype = function() {
      return this._prototype || (this._prototype = new ValueNode2(OP(".", this.context(), "prototype")));
    };
    function TagScope() {
      return ClassScope.apply(this, arguments);
    }
    subclass$(TagScope, ClassScope);
    exports.TagScope = TagScope;
    function ClosureScope() {
      return Scope2.apply(this, arguments);
    }
    subclass$(ClosureScope, Scope2);
    exports.ClosureScope = ClosureScope;
    function FunctionScope() {
      return Scope2.apply(this, arguments);
    }
    subclass$(FunctionScope, Scope2);
    exports.FunctionScope = FunctionScope;
    function IsolatedFunctionScope() {
      return FunctionScope.apply(this, arguments);
    }
    subclass$(IsolatedFunctionScope, FunctionScope);
    exports.IsolatedFunctionScope = IsolatedFunctionScope;
    IsolatedFunctionScope.prototype.lookup = function(name) {
      this._lookups || (this._lookups = {});
      var ret = null;
      name = AST.sym(name);
      if (this._varmap.hasOwnProperty(name)) {
        ret = this._varmap[name];
      } else {
        ret = this.parent() && this.parent().lookup(name);
        if (ret && ret.closure() == this.parent().closure()) {
          this._leaks || (this._leaks = /* @__PURE__ */ new Map());
          this._nonlocals || (this._nonlocals = {});
          this._nonlocals[name] = ret;
          let shadow = this._leaks.get(ret);
          if (!shadow) {
            this._leaks.set(ret, shadow = new ShadowedVariable(this, name, ret));
          }
          ;
          ret = shadow;
        }
        ;
      }
      ;
      return ret;
    };
    function MethodScope() {
      return Scope2.apply(this, arguments);
    }
    subclass$(MethodScope, Scope2);
    exports.MethodScope = MethodScope;
    MethodScope.prototype.setup = function() {
      return this._selfless = false;
    };
    MethodScope.prototype.isInExtend = function() {
      return this.parent().isInExtend();
    };
    MethodScope.prototype.visit = function() {
      MethodScope.prototype.__super__.visit.apply(this, arguments);
      if (STACK.tsc() && this.isInExtend()) {
        let cls = this.parent().closure().node();
        if (cls._className) {
          let ref = this.context().reference(LIT("/** @type " + cls._className.c() + " */(/** @type unknown */(this))"));
          this.context()._useReference = true;
          ref.c();
        }
        ;
      }
      ;
      return this;
    };
    function FieldScope2() {
      return Scope2.apply(this, arguments);
    }
    subclass$(FieldScope2, Scope2);
    exports.FieldScope = FieldScope2;
    FieldScope2.prototype.setup = function() {
      return this._selfless = false;
    };
    FieldScope2.prototype.mergeScopeInto = function(other) {
      for (let o = this._varmap, v, i = 0, keys = Object.keys(o), l = keys.length, k; i < l; i++) {
        k = keys[i];
        v = o[k];
        if (k == "self") {
          continue;
        }
        ;
        v.resolve(other, true);
        other.declare(v);
      }
      ;
      if (this._context && this._context._reference) {
        this._context._reference = other.context().reference();
      }
      ;
      return true;
    };
    function LambdaScope() {
      return Scope2.apply(this, arguments);
    }
    subclass$(LambdaScope, Scope2);
    exports.LambdaScope = LambdaScope;
    LambdaScope.prototype.context = function() {
      if (!this._context) {
        this._context = this.parent().context().fromScope(this);
      }
      ;
      return this._context;
    };
    function FlowScope() {
      return Scope2.apply(this, arguments);
    }
    subclass$(FlowScope, Scope2);
    exports.FlowScope = FlowScope;
    FlowScope.prototype.params = function() {
      if (this._parent) {
        return this._parent.params();
      }
      ;
    };
    FlowScope.prototype.register = function(name, decl, o) {
      var found;
      if (decl === void 0)
        decl = null;
      if (o === void 0)
        o = {};
      if (o.type != "let" && o.type != "const" && this.closure() != this) {
        if (found = this.lookup(name)) {
          if (found.type() == "let") {
            if (decl) {
              decl.warn("Variable already exists in block");
            }
            ;
          }
          ;
        }
        ;
        return this.closure().register(name, decl, o);
      } else {
        return FlowScope.prototype.__super__.register.call(this, name, decl, o);
      }
      ;
    };
    FlowScope.prototype.autodeclare = function(variable) {
      return this.parent().autodeclare(variable);
    };
    FlowScope.prototype.closure = function() {
      return this._parent.closure();
    };
    FlowScope.prototype.context = function() {
      return this._context || (this._context = this.parent().context());
    };
    FlowScope.prototype.closeScope = function() {
      if (this._context) {
        this._context.reference();
      }
      ;
      return this;
    };
    FlowScope.prototype.temporary = function(refnode, o, name) {
      if (o === void 0)
        o = {};
      if (name === void 0)
        name = null;
      return (this._systemscope || this.parent()).temporary(refnode, o, name);
    };
    function CatchScope() {
      return FlowScope.apply(this, arguments);
    }
    subclass$(CatchScope, FlowScope);
    exports.CatchScope = CatchScope;
    function WhileScope() {
      return FlowScope.apply(this, arguments);
    }
    subclass$(WhileScope, FlowScope);
    exports.WhileScope = WhileScope;
    WhileScope.prototype.autodeclare = function(variable) {
      return this.vars().add(variable);
    };
    function ForScope2() {
      return FlowScope.apply(this, arguments);
    }
    subclass$(ForScope2, FlowScope);
    exports.ForScope = ForScope2;
    ForScope2.prototype.autodeclare = function(variable) {
      return this.vars().add(variable);
    };
    function IfScope() {
      return FlowScope.apply(this, arguments);
    }
    subclass$(IfScope, FlowScope);
    exports.IfScope = IfScope;
    function BlockScope() {
      return FlowScope.apply(this, arguments);
    }
    subclass$(BlockScope, FlowScope);
    exports.BlockScope = BlockScope;
    BlockScope.prototype.region = function() {
      return this.node().region();
    };
    function TagBodyScope() {
      return FlowScope.apply(this, arguments);
    }
    subclass$(TagBodyScope, FlowScope);
    exports.TagBodyScope = TagBodyScope;
    function Variable(scope, name, decl, o) {
      this._ref = STACK._counter++;
      this._c = null;
      this._scope = scope;
      this._name = name;
      this._alias = null;
      this._initialized = true;
      this._declarator = decl;
      this._autodeclare = false;
      this._declared = o && o.declared || false;
      this._datatype = o && o.datatype;
      this._resolved = false;
      this._options = o || {};
      this._type = o && o.type || "var";
      this._export = false;
      this._references = [];
      this._assignments = [];
      this;
    }
    subclass$(Variable, Node2);
    exports.Variable = Variable;
    Variable.prototype.scope = function(v) {
      return this._scope;
    };
    Variable.prototype.setScope = function(v) {
      this._scope = v;
      return this;
    };
    Variable.prototype.name = function(v) {
      return this._name;
    };
    Variable.prototype.setName = function(v) {
      this._name = v;
      return this;
    };
    Variable.prototype.alias = function(v) {
      return this._alias;
    };
    Variable.prototype.setAlias = function(v) {
      this._alias = v;
      return this;
    };
    Variable.prototype.type = function(v) {
      return this._type;
    };
    Variable.prototype.setType = function(v) {
      this._type = v;
      return this;
    };
    Variable.prototype.options = function(v) {
      return this._options;
    };
    Variable.prototype.setOptions = function(v) {
      this._options = v;
      return this;
    };
    Variable.prototype.initialized = function(v) {
      return this._initialized;
    };
    Variable.prototype.setInitialized = function(v) {
      this._initialized = v;
      return this;
    };
    Variable.prototype.declared = function(v) {
      return this._declared;
    };
    Variable.prototype.setDeclared = function(v) {
      this._declared = v;
      return this;
    };
    Variable.prototype.declarator = function(v) {
      return this._declarator;
    };
    Variable.prototype.setDeclarator = function(v) {
      this._declarator = v;
      return this;
    };
    Variable.prototype.autodeclare = function(v) {
      return this._autodeclare;
    };
    Variable.prototype.setAutodeclare = function(v) {
      this._autodeclare = v;
      return this;
    };
    Variable.prototype.references = function(v) {
      return this._references;
    };
    Variable.prototype.setReferences = function(v) {
      this._references = v;
      return this;
    };
    Variable.prototype.export = function(v) {
      return this._export;
    };
    Variable.prototype.setExport = function(v) {
      this._export = v;
      return this;
    };
    Variable.prototype.value = function(v) {
      return this._value;
    };
    Variable.prototype.setValue = function(v) {
      this._value = v;
      return this;
    };
    Variable.prototype.datatype = function(v) {
      return this._datatype;
    };
    Variable.prototype.setDatatype = function(v) {
      this._datatype = v;
      return this;
    };
    Variable.prototype.pool = function() {
      return null;
    };
    Variable.prototype.isImported = function() {
      return this._type == "imported";
    };
    Variable.prototype.typedAlias = function() {
      return this._typedAlias || (this._typedAlias = new Variable(this._scope, this._name + "$TYPED$", this._declarator, this._options));
    };
    Variable.prototype.isGlobal = function(name) {
      return this._type == "global" && (!name || this._name == name);
    };
    Variable.prototype.closure = function() {
      return this._scope.closure();
    };
    Variable.prototype.assignments = function() {
      return this._assignments;
    };
    Variable.prototype.vartype = function() {
      return this._vartype || this._declarator && this._declarator.datatype && this._declarator.datatype();
    };
    Variable.prototype.assigned = function(val, source) {
      this._assignments.push(val);
      if (val instanceof Arr) {
        this._isArray = true;
      } else {
        this._isArray = false;
      }
      ;
      return this;
    };
    Variable.prototype.parents = function() {
      let parents = [];
      let scope = this.closure().parent();
      let res = this;
      while (scope && res && parents.length < 5) {
        if (res = scope.lookup(this._name)) {
          parents.unshift(res);
          let newscope = res.scope().parent();
          if (scope == newscope) {
            break;
          }
          ;
          scope = newscope;
        }
        ;
      }
      ;
      return parents;
    };
    Variable.prototype.resolve = function(scope, force) {
      if (scope === void 0)
        scope = this.scope();
      if (force === void 0)
        force = false;
      if (this._resolved && !force) {
        return this;
      }
      ;
      this._resolved = true;
      var closure = this._scope.closure();
      var item = this._shadowing || scope.lookup(this._name);
      if (this._scope != closure && this._type == "let" && this._virtual) {
        item = closure.lookup(this._name);
        scope = closure;
      }
      ;
      if (item == this) {
        scope.varmap()[this._name] = this;
        return this;
      } else if (item) {
        if (item.scope() != scope && (this.options().let || this._type == "let")) {
          scope.varmap()[this._name] = this;
          if (!this._virtual && !this._shadowing) {
            return this;
          }
          ;
        }
        ;
        if (this._options.proxy) {
          true;
        } else {
          var i = 0;
          var orig = this._name;
          while (scope.lookup(this._name)) {
            this._name = "" + orig + (i += 1);
          }
          ;
        }
        ;
      }
      ;
      scope.varmap()[this._name] = this;
      closure.varmap()[this._name] = this;
      return this;
    };
    Variable.prototype.reference = function() {
      return this;
    };
    Variable.prototype.node = function() {
      return this;
    };
    Variable.prototype.cache = function() {
      return this;
    };
    Variable.prototype.traverse = function() {
      return this;
    };
    Variable.prototype.free = function(ref) {
      this._declarator = null;
      return this;
    };
    Variable.prototype.reuse = function(ref) {
      this._declarator = ref;
      return this;
    };
    Variable.prototype.proxy = function(par, index) {
      this._proxy = [par, index];
      return this;
    };
    Variable.prototype.refcount = function() {
      return this._references.length;
    };
    Variable.prototype.c = function(params) {
      if (params && params.as == "field") {
        return "[" + this.c({}) + "]";
      }
      ;
      if (this._c) {
        return this._c;
      }
      ;
      if (this._typedAlias) {
        this._typedAlias.c(params);
      }
      ;
      if (this._proxy) {
        if (this._proxy instanceof Node2) {
          this._c = this._proxy.c();
        } else {
          this._c = this._proxy[0].c();
          if (this._proxy[1]) {
            this._c += "[" + this._proxy[1].c() + "]";
          }
          ;
        }
        ;
      } else {
        if (!this._resolved)
          this.resolve();
        var v = this.alias() || this.name();
        this._c = typeof v == "string" ? helpers2.toValidIdentifier(v) : v.c({ as: "variable" });
        if (RESERVED_REGEX.test(this._c)) {
          this._c = "" + this.c() + "$";
        }
        ;
      }
      ;
      return this._c;
    };
    Variable.prototype.js = function() {
      return this.c();
    };
    Variable.prototype.consume = function(node) {
      return this;
    };
    Variable.prototype.accessor = function(ref) {
      var node = new LocalVarAccess(".", null, this);
      return node;
    };
    Variable.prototype.assignment = function(val) {
      return new Assign("=", this, val);
    };
    Variable.prototype.addReference = function(ref) {
      if (ref instanceof Identifier) {
        ref.references(this);
      }
      ;
      if (ref.region && ref.region()) {
        this._references.push(ref);
        if (ref.scope__() != this._scope) {
          this._noproxy = true;
        }
        ;
      }
      ;
      return this;
    };
    Variable.prototype.autodeclare = function() {
      if (this._declared) {
        return this;
      }
      ;
      this._autodeclare = true;
      this.scope().autodeclare(this);
      this._declared = true;
      return this;
    };
    Variable.prototype.predeclared = function() {
      this._declared = true;
      return this;
    };
    Variable.prototype.toString = function() {
      return String(this.name());
    };
    Variable.prototype.dump = function(typ) {
      var name = this.name();
      if (name[0].match(/[A-Z]/)) {
        return null;
      }
      ;
      return {
        type: this.type(),
        name,
        refs: AST.dump(this._references, typ)
      };
    };
    Variable.prototype.via = function(node) {
      return new ValueReferenceNode(this, node);
    };
    function SystemVariable() {
      return Variable.apply(this, arguments);
    }
    subclass$(SystemVariable, Variable);
    exports.SystemVariable = SystemVariable;
    SystemVariable.prototype.pool = function() {
      return this._options.pool;
    };
    SystemVariable.prototype.predeclared = function() {
      this.scope().vars().remove(this);
      return this;
    };
    SystemVariable.prototype.resolve = function() {
      if (this._resolved) {
        return this;
      }
      ;
      this._resolved = true;
      let o = this._options;
      if (o.gsym) {
        this._name = "" + o.gsym.replace(/\#/g, "$") + "$";
        return this;
      }
      ;
      let sysnr = STACK.incr("sysvar");
      this._name = "$" + sysnr;
      return this;
      o = this._options;
      var alias = o.alias || this._name;
      var typ = o.pool;
      var names = [].concat(o.names);
      var alt = null;
      var node = null;
      this._name = null;
      let name = alias || InternalPrefixes2.ANY;
      if (/\d/.test(name[0])) {
        name = "_" + name;
      }
      ;
      if (/\d$/.test(name)) {
        name = name + InternalPrefixes2.SEP;
      }
      ;
      let nr = STACK.incr(name);
      if (nr == 1) {
        nr = "";
      }
      ;
      if (ReservedIdentifierRegex2.test(name)) {
        this._name = "" + name + nr;
      } else {
        this._name = "" + name + "\u03C6" + nr;
      }
      ;
      return this;
    };
    SystemVariable.prototype.name = function() {
      this.resolve();
      return this._name;
    };
    function ShadowedVariable() {
      return Variable.apply(this, arguments);
    }
    subclass$(ShadowedVariable, Variable);
    exports.ShadowedVariable = ShadowedVariable;
    function GlobalReference() {
      return Variable.apply(this, arguments);
    }
    subclass$(GlobalReference, Variable);
    exports.GlobalReference = GlobalReference;
    function PureReference() {
      return Variable.apply(this, arguments);
    }
    subclass$(PureReference, Variable);
    exports.PureReference = PureReference;
    function ZonedVariable() {
      return GlobalReference.apply(this, arguments);
    }
    subclass$(ZonedVariable, GlobalReference);
    exports.ZonedVariable = ZonedVariable;
    ZonedVariable.prototype.forScope = function(scope) {
      return new ZonedVariableAccess(this, scope);
    };
    ZonedVariable.prototype.c = function() {
      return "" + this._name;
    };
    function DocumentReference() {
      return ZonedVariable.apply(this, arguments);
    }
    subclass$(DocumentReference, ZonedVariable);
    exports.DocumentReference = DocumentReference;
    DocumentReference.prototype.forScope = function(scope) {
      return this;
    };
    DocumentReference.prototype.c = function() {
      if (STACK.isNode()) {
        return "" + this.runtime().get_document + "()";
      } else {
        return "globalThis.document";
      }
      ;
    };
    function WindowReference() {
      return GlobalReference.apply(this, arguments);
    }
    subclass$(WindowReference, GlobalReference);
    exports.WindowReference = WindowReference;
    WindowReference.prototype.c = function() {
      if (STACK.isNode()) {
        return "" + this.runtime().get_window + "()";
      } else {
        return "window";
      }
      ;
    };
    function ZonedVariableAccess(variable, scope) {
      this._variable = variable;
      this._scope = scope;
    }
    subclass$(ZonedVariableAccess, Node2);
    exports.ZonedVariableAccess = ZonedVariableAccess;
    ZonedVariableAccess.prototype.c = function() {
      let name = this._variable._name;
      if (STACK.isNode()) {
        STACK.use("" + name);
        return "" + this.runtime().zone + ".get('" + name + "'," + this._scope.context().c() + ")";
      } else {
        return "" + name;
      }
      ;
    };
    function ImportProxy() {
      var self2 = this;
      ImportProxy.prototype.__super__.constructor.apply(self2, arguments);
      self2._path = self2._options.path;
      self2._exports = {};
      self2._touched = {};
      self2._head = LIT("import ");
      self2._head.c = self2.head.bind(self2);
      self2.scope()._head.unshift(self2._head);
      var getter = function(t, p, r) {
        return self2.access(p);
      };
      self2._proxy_ = new Proxy(self2, { get: getter });
    }
    subclass$(ImportProxy, Variable);
    exports.ImportProxy = ImportProxy;
    ImportProxy.prototype.proxy = function(v) {
      return this._proxy;
    };
    ImportProxy.prototype.setProxy = function(v) {
      this._proxy = v;
      return this;
    };
    ImportProxy.prototype.path = function(v) {
      return this._path;
    };
    ImportProxy.prototype.setPath = function(v) {
      this._path = v;
      return this;
    };
    ImportProxy.prototype.proxy = function() {
      return this._proxy_;
    };
    ImportProxy.prototype.touch = function(key) {
      if (!this._touched[key]) {
        this._touched[key] = this.access(key);
      }
      ;
      return this;
    };
    ImportProxy.prototype.head = function() {
      var self2 = this;
      let keys = Object.keys(self2._exports);
      let touches = Object.values(self2._touched);
      let js = [];
      let path = self2.path();
      if (path == "imba") {
        path = STACK.imbaPath() || "imba";
      }
      ;
      let pathjs = "'" + path + "'";
      if (self2._importAll) {
        js.push("import * as " + self2._name + " from " + pathjs + ";");
      }
      ;
      if (keys.length > 0) {
        let out = keys.map(function(a) {
          return "" + a + " as " + self2._exports[a];
        }).join(", ");
        js.push("import {" + out + "} from " + pathjs + ";");
      }
      ;
      if (touches.length) {
        js.push("(" + touches.map(function(_0) {
          return _0.c() + "()";
        }).join(",") + ");");
      }
      ;
      return js.length ? js.join("\n") : "";
    };
    ImportProxy.prototype.access = function(key, ctx) {
      if (ctx === void 0)
        ctx = null;
      if (this._globalName) {
        return LIT("" + M2(this._globalName, ctx) + "." + C(key));
      }
      ;
      let raw = C(key, { mark: false });
      return this._exports[raw] || (this._exports[raw] = LIT("" + this._name + "_" + raw));
    };
    ImportProxy.prototype.c = function() {
      if (!this._importAll) {
        this._importAll = true;
      }
      ;
      return ImportProxy.prototype.__super__.c.apply(this, arguments);
    };
    function ImbaRuntime() {
      return ImportProxy.apply(this, arguments);
    }
    subclass$(ImbaRuntime, ImportProxy);
    exports.ImbaRuntime = ImbaRuntime;
    ImbaRuntime.prototype.configure = function(options) {
      if (options.runtime == "global" || STACK.tsc()) {
        this._globalName = "imba";
      } else if (options.runtime) {
        this.setPath(options.runtime);
      }
      ;
      return this;
    };
    ImbaRuntime.prototype.head = function() {
      if (STACK.tsc()) {
        return "";
      }
      ;
      return ImbaRuntime.prototype.__super__.head.apply(this, arguments);
    };
    ImbaRuntime.prototype.c = function() {
      if (!this._importAll) {
        this._importAll = true;
        STACK.current().warn("Referencing imba directly disables efficient tree-shaking");
      }
      ;
      return this._c = "imba";
    };
    function ScopeContext(scope, value) {
      this._scope = scope;
      this._value = value;
      this._reference = null;
      this;
    }
    subclass$(ScopeContext, Node2);
    exports.ScopeContext = ScopeContext;
    ScopeContext.prototype.scope = function(v) {
      return this._scope;
    };
    ScopeContext.prototype.setScope = function(v) {
      this._scope = v;
      return this;
    };
    ScopeContext.prototype.value = function(v) {
      return this._value;
    };
    ScopeContext.prototype.setValue = function(v) {
      this._value = v;
      return this;
    };
    ScopeContext.prototype.reference = function(v) {
      return this._reference;
    };
    ScopeContext.prototype.setReference = function(v) {
      this._reference = v;
      return this;
    };
    ScopeContext.prototype.namepath = function() {
      return this._scope.namepath();
    };
    ScopeContext.prototype.reference = function(thisValue) {
      return this._reference || (this._reference = this.scope().lookup("self") || this.scope().declare("self", thisValue == void 0 ? new This() : thisValue));
    };
    ScopeContext.prototype.fromScope = function(other) {
      return new IndirectScopeContext(other, this);
    };
    ScopeContext.prototype.isConstant = function() {
      return true;
    };
    ScopeContext.prototype.c = function() {
      if (this._useReference && this._reference) {
        return this.reference().c();
      }
      ;
      var val = this._value;
      return val ? val.c() : "this";
    };
    ScopeContext.prototype.cache = function() {
      return this;
    };
    ScopeContext.prototype.proto = function() {
      return "" + this.c() + ".prototype";
    };
    ScopeContext.prototype.isGlobalContext = function() {
      return false;
    };
    function IndirectScopeContext(scope, parent) {
      this._scope = scope;
      this._parent = parent;
      this._reference = parent.reference();
    }
    subclass$(IndirectScopeContext, ScopeContext);
    exports.IndirectScopeContext = IndirectScopeContext;
    IndirectScopeContext.prototype.reference = function() {
      return this._reference;
    };
    IndirectScopeContext.prototype.c = function() {
      return this.reference().c();
    };
    IndirectScopeContext.prototype.isGlobalContext = function() {
      return this._parent.isGlobalContext();
    };
    function RootScopeContext() {
      return ScopeContext.apply(this, arguments);
    }
    subclass$(RootScopeContext, ScopeContext);
    exports.RootScopeContext = RootScopeContext;
    RootScopeContext.prototype.reference = function() {
      return this._reference || (this._reference = this.scope().lookup("global"));
    };
    RootScopeContext.prototype.c = function(o) {
      return "globalThis";
      var val = this.reference();
      return val && val != this ? val.c() : "this";
    };
    RootScopeContext.prototype.isGlobalContext = function() {
      return true;
    };
    function Super(keyword, member) {
      this._keyword = keyword;
      this._member = member;
      Super.prototype.__super__.constructor.apply(this, arguments);
    }
    subclass$(Super, Node2);
    exports.Super = Super;
    Super.prototype.member = function(v) {
      return this._member;
    };
    Super.prototype.setMember = function(v) {
      this._member = v;
      return this;
    };
    Super.prototype.args = function(v) {
      return this._args;
    };
    Super.prototype.setArgs = function(v) {
      this._args = v;
      return this;
    };
    Super.prototype.visit = function() {
      var m;
      this._method = STACK.method();
      this._up = STACK.parent();
      if (m = STACK.method()) {
        m.set({ supr: { node: STACK.blockpart(), block: STACK.block(), real: this } });
        m.set({ injectInitAfter: STACK.blockpart() });
      }
      ;
      if (this._method) {
        this._class = STACK.up(ClassDeclaration);
      }
      ;
      if (this.args()) {
        this.args().traverse();
      }
      ;
      return this;
    };
    Super.prototype.startLoc = function() {
      return this._keyword && this._keyword.startLoc();
    };
    Super.prototype.endLoc = function() {
      return this._keyword && this._keyword.endLoc();
    };
    Super.callOp = function(name, params) {
      let op = OP(".", LIT("super"), name);
      return CALL(op, params || [LIT("...arguments")]);
    };
    Super.prototype.c = function() {
      let m = this._method;
      let up = this._up;
      let sup = LIT("super");
      let op;
      let top = this.option("top");
      let virtual = m && m.option("inExtension");
      let args = this.args();
      if (virtual && this._class) {
        sup = CALL(this._class.virtualSuper(), [this.slf()]);
      }
      ;
      if (!(up instanceof Access || up instanceof Call)) {
        if (m && m.isConstructor() && !this.member()) {
          if (STACK.tsc() && this._class && !this._class.superclass()) {
            return args ? "[" + args.c() + "]" : "";
          }
          ;
          let target = this.option("target") || LIT("super");
          let fallbackArgs = this.option("args") || [LIT("...arguments")];
          return M2(CALL(target, args || fallbackArgs).c(), this._keyword);
        } else if (this.member()) {
          op = OP(".", sup, this.member());
        } else if (m) {
          op = OP(".", sup, m.name());
          if (m.isSetter()) {
            op = OP("=", op, m.params().at(0));
          } else if (!m.isGetter()) {
            args || (args = [LIT("...arguments")]);
          }
          ;
        }
        ;
        if (args) {
          op = CALL(op, args);
        }
        ;
        return op ? M2(op.c({ mark: false }), this._keyword) : "/**/";
      }
      ;
      if (this.member()) {
        return OP(".", sup, this.member()).c();
      }
      ;
      if (up instanceof Call && m && !m.isConstructor()) {
        return OP(".", sup, m.name()).c();
      }
      ;
      return "super";
    };
    var BR0 = exports.BR0 = new Newline("\n");
    var BR = exports.BR = new Newline("\n");
    var BR2 = exports.BR2 = new Newline("\n\n");
    var SELF = exports.SELF = new Self();
    var THIS = exports.THIS = LIT("this");
    var PROTO = exports.PROTO = LIT("this.prototype");
    var TRUE = exports.TRUE = new True("true");
    var FALSE = exports.FALSE = new False("false");
    var UNDEFINED = exports.UNDEFINED = new Undefined();
    var NIL = exports.NIL = new Nil();
    var ARGUMENTS = exports.ARGUMENTS = new ArgsReference("arguments");
    var EMPTY = exports.EMPTY = "";
    var NULL = exports.NULL = "null";
    var RESERVED = exports.RESERVED = ["default", "native", "enum", "with"];
    var RESERVED_REGEX = exports.RESERVED_REGEX = /^(default|native|enum|with|new|char)$/;
  }
});
var imbaconfig_exports = {};
__export2(imbaconfig_exports, {
  resolveConfigFile: () => resolveConfigFile
});
function iter$__10(a) {
  let v;
  return a ? (v = a.toIterable) ? v.call(a) : a : [];
}
function resolvePaths(obj, cwd) {
  var \u03C64;
  if (obj instanceof Array) {
    for (let i = 0, items\u03C6 = iter$__10(obj), len\u03C6 = items\u03C6.length; i < len\u03C6; i++) {
      let item = items\u03C6[i];
      obj[i] = resolvePaths(item, cwd);
    }
    ;
  } else if (typeof obj == "string") {
    return obj.replace(/^\.\//, cwd + "/");
  } else if (typeof obj == "object") {
    for (let i\u03C6 = 0, keys\u03C6 = Object.keys(obj), l\u03C6 = keys\u03C6.length, k, v; i\u03C6 < l\u03C6; i\u03C6++) {
      k = keys\u03C6[i\u03C6];
      v = obj[k];
      let alt = k.replace(/^\.\//, cwd + "/");
      obj[alt] = resolvePaths(v, cwd);
      if (alt != k) {
        \u03C64 = obj[k], delete obj[k], \u03C64;
      }
      ;
    }
    ;
  }
  ;
  return obj;
}
function resolveConfigFile(dir, { path, fs }) {
  if (!path || !fs || !dir || dir == path.dirname(dir)) {
    return null;
  }
  ;
  let src = path.resolve(dir, "package.json");
  if (cached[src]) {
    return cached[src];
  }
  ;
  if (cached[src] !== null && fs.existsSync(src)) {
    let resolver = function(key, value) {
      if (typeof value == "string" && value.match(/^\.\//)) {
        return path.resolve(dir, value);
      }
      ;
      return value;
    };
    let pkg = JSON.parse(fs.readFileSync(src, "utf8"));
    let config = pkg.imba || (pkg.imba = {});
    resolvePaths(config, dir);
    config.package = pkg;
    config.cwd || (config.cwd = dir);
    return cached[src] = config;
  } else {
    cached[src] = null;
  }
  ;
  return resolveConfigFile(path.dirname(dir), { path, fs });
}
var cached;
var init_imbaconfig = __esm({
  "src/compiler/imbaconfig.imba"() {
    cached = {};
  }
});
var require_compiler = __commonJS({
  "src/compiler/compiler.imba1"(exports) {
    var self = {};
    var T = require_token();
    var util = require_helpers();
    var lexer2 = require_lexer();
    var rewriter = require_rewriter();
    var parser3 = exports.parser = require_parser().parser;
    var ast = require_nodes();
    var resolveConfigFile2 = (init_imbaconfig(), __toCommonJS2(imbaconfig_exports)).resolveConfigFile;
    var ImbaParseError = require_errors().ImbaParseError;
    var compilation$ = (init_compilation(), __toCommonJS2(compilation_exports));
    var Diagnostic2 = compilation$.Diagnostic;
    var Compilation2 = compilation$.Compilation;
    var lex = exports.lex = new lexer2.Lexer();
    var Rewriter = exports.Rewriter = rewriter.Rewriter;
    var helpers2 = exports.helpers = util;
    rewriter = new Rewriter();
    parser3.lexer = lex.jisonBridge();
    parser3.yy = ast;
    Compilation2.prototype.lexer = lex;
    Compilation2.prototype.rewriter = rewriter;
    Compilation2.prototype.parser = parser3;
    exports.resolveConfig = self.resolveConfig = function(o) {
      if (o === void 0)
        o = {};
      let path = o.sourcePath;
      o.config || (o.config = resolveConfigFile2(path, o) || {});
      return o;
    };
    exports.deserialize = self.deserialize = function(data, options) {
      if (options === void 0)
        options = {};
      return Compilation2.deserialize(data, options);
    };
    exports.tokenize = self.tokenize = function(code, options) {
      if (options === void 0)
        options = {};
      let script = new Compilation2(code, options);
      return script.tokenize();
    };
    exports.rewrite = self.rewrite = function(tokens, o) {
      if (o === void 0)
        o = {};
      return rewriter.rewrite(tokens, o);
    };
    exports.parse = self.parse = function(code, o) {
      if (o === void 0)
        o = {};
      o = self.resolveConfig(o);
      var tokens = code instanceof Array ? code : self.tokenize(code, o);
      try {
        return parser3.parse(tokens);
      } catch (err) {
        err._code = code;
        if (o.sourcePath) {
          err._sourcePath = o.sourcePath;
        }
        ;
        throw err;
      }
      ;
    };
    exports.compile = self.compile = function(code, o) {
      if (o === void 0)
        o = {};
      let compilation = new Compilation2(code, self.resolveConfig(o));
      return compilation.compile();
    };
    exports.resolve = self.resolve = function(code, o) {
      if (o === void 0)
        o = {};
      let compilation = new Compilation2(code, self.resolveConfig(o));
      return compilation.compile();
    };
    exports.analyze = self.analyze = function(code, o) {
      if (o === void 0)
        o = {};
      var meta;
      try {
        var ast2 = self.parse(code, o);
        meta = ast2.analyze(o);
      } catch (e) {
        if (!(e instanceof ImbaParseError)) {
          if (e.lexer) {
            e = new ImbaParseError(e, { tokens: e.lexer.tokens, pos: e.lexer.pos });
          } else {
            throw e;
          }
          ;
        }
        ;
        meta = { warnings: [e] };
      }
      ;
      return meta;
    };
  }
});
var import_compiler = __toESM(require_compiler());
init_styler();
init_theme();
init_compile();
init_lexer();
var grammar2 = {
  defaultToken: "",
  tokenPostfix: ".xml",
  ignoreCase: true,
  qualifiedName: /(?:[\w\.\-]+:)?[\w\.\-]+/,
  tokenizer: {
    root: [
      [/[^<&]+/, ""],
      { include: "@whitespace" },
      [/(<)(@qualifiedName)/, [
        { token: "delimiter" },
        { token: "tag", next: "@tag" }
      ]],
      [/(<\/)(@qualifiedName)(\s*)(>)/, [
        { token: "delimiter" },
        { token: "tag" },
        "",
        { token: "delimiter" }
      ]],
      [/(<\?)(@qualifiedName)/, [
        { token: "delimiter" },
        { token: "metatag", next: "@tag" }
      ]],
      [/(<\!)(@qualifiedName)/, [
        { token: "delimiter" },
        { token: "metatag", next: "@tag" }
      ]],
      [/<\!\[CDATA\[/, { token: "delimiter.cdata", next: "@cdata" }],
      [/&\w+;/, "string.escape"]
    ],
    cdata: [
      [/[^\]]+/, ""],
      [/\]\]>/, { token: "delimiter.cdata", next: "@pop" }],
      [/\]/, ""]
    ],
    tag: [
      [/[ \t\r\n]+/, ""],
      [/(@qualifiedName)(\s*=\s*)("[^"]*"|'[^']*')/, ["attribute.name", "", "attribute.value"]],
      [/(@qualifiedName)(\s*=\s*)("[^">?\/]*|'[^'>?\/]*)(?=[\?\/]\>)/, ["attribute.name", "", "attribute.value"]],
      [/(@qualifiedName)(\s*=\s*)("[^">]*|'[^'>]*)/, ["attribute.name", "", "attribute.value"]],
      [/@qualifiedName/, "attribute.name"],
      [/\?>/, { token: "delimiter", next: "@pop" }],
      [/(\/)(>)/, [
        { token: "tag" },
        { token: "delimiter", next: "@pop" }
      ]],
      [/>/, { token: "delimiter", next: "@pop" }]
    ],
    whitespace: [
      [/[ \t\r\n]+/, ""],
      [/<!--/, { token: "comment", next: "@comment" }]
    ],
    comment: [
      [/[^<\-]+/, "comment.content"],
      [/-->/, { token: "comment", next: "@pop" }],
      [/<!--/, "comment.content.invalid"],
      [/[<\-]/, "comment.content"]
    ]
  }
};
var tokenizers = {};
var Monarch = class {
  static getTokenizer(langId) {
    if (langId == "xml" && !tokenizers[langId]) {
      return this.createTokenizer("xml", grammar2);
    }
    ;
    return tokenizers[langId];
  }
  static createTokenizer(langId, grammar3) {
    let compiled2 = compile(langId, grammar3);
    return tokenizers[langId] = new MonarchTokenizer(langId, compiled2);
  }
};
function iter$__11(a) {
  let v;
  return a ? (v = a.toIterable) ? v.call(a) : a : [];
}
function parseAsset(raw, name) {
  var \u03C64, \u03C622;
  let text = raw.body;
  let startIndex = text.indexOf("<svg");
  if (startIndex > 0) {
    text = text.slice(startIndex);
  }
  ;
  let xml = Monarch.getTokenizer("xml");
  let state = xml.getInitialState();
  let out = xml.tokenize(text, state, 0);
  let attrs = {};
  let desc = { attributes: attrs, flags: [] };
  let currAttr;
  let contentStart = 0;
  for (let i\u03C6 = 0, items\u03C6 = iter$__11(out.tokens), len\u03C6 = items\u03C6.length; i\u03C6 < len\u03C6; i\u03C6++) {
    let tok = items\u03C6[i\u03C6];
    let val = tok.value;
    if (tok.type == "attribute.name.xml") {
      currAttr = tok;
      attrs[val] = true;
    }
    ;
    if (tok.type == "attribute.value.xml") {
      let len = val.length;
      if (len > 2 && val[0] == val[len - 1] && (val[0] == '"' || val[0] == "'")) {
        val = val.slice(1, -1);
      }
      ;
      attrs[currAttr.value] = val;
    }
    ;
    if (tok.type == "delimiter.xml" && val == ">") {
      contentStart = tok.offset + 1;
      break;
    }
    ;
  }
  ;
  desc.content = text.slice(contentStart).replace("</svg>", "");
  if (attrs.class) {
    desc.flags = attrs.class.split(/\s+/g);
    \u03C64 = attrs.class, delete attrs.class, \u03C64;
  }
  ;
  if (name) {
    desc.flags.push("asset-" + name.toLowerCase());
  }
  ;
  \u03C622 = attrs.xmlns, delete attrs.xmlns, \u03C622;
  return desc;
}
init_selparse();
var program_exports = {};
__export2(program_exports, {
  CompletionTypes: () => CompletionTypes,
  Group: () => Group,
  ImbaDocument: () => ImbaDocument,
  KeywordTypes: () => KeywordTypes,
  Keywords: () => Keywords,
  M: () => M,
  Monarch: () => Monarch,
  Node: () => Node,
  Position: () => Position,
  Range: () => Range,
  Scope: () => Scope,
  SemanticTokenModifiers: () => SemanticTokenModifiers,
  SemanticTokenTypes: () => SemanticTokenTypes,
  Sym: () => Sym,
  SymbolFlags: () => SymbolFlags,
  SymbolKind: () => SymbolKind,
  Token: () => Token,
  grammar: () => grammar,
  highlight: () => highlight,
  lexer: () => lexer
});
init_document();
init_lexer2();
init_grammar();
init_types();
function iter$__12(a) {
  let v;
  return a ? (v = a.toIterable) ? v.call(a) : a : [];
}
var replacements = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
var typenames = {
  "[": "square open",
  "]": "square close",
  "{": "curly open",
  "}": "curly close",
  "(": "paren open",
  ")": "paren close"
};
function escape(str) {
  return str.replace(/[\&\<\>]/g, function(m) {
    return replacements[m];
  });
}
function classify(types) {
  return types.join(" ").replace(/[\[\]\{\}\(\)]/g, function(m) {
    return typenames[m];
  });
}
function highlight(tokens, { verbose = false }) {
  let parts = [];
  let depth = 0;
  let counter = 0;
  let ids = [];
  for (let i\u03C6 = 0, items\u03C6 = iter$__12(tokens), len\u03C6 = items\u03C6.length; i\u03C6 < len\u03C6; i\u03C6++) {
    let token = items\u03C6[i\u03C6];
    let value = token.value;
    let types = token.type.split(".");
    let [typ, subtyp] = types;
    let mods = token.mods;
    if (token.var) {
      let id = ids.indexOf(token.var);
      if (id == -1) {
        id = ids.push(token.var) - 1;
      }
      ;
      types.push("vref");
      types.push("var" + id);
      types.push(token.var.type + "-ref");
      mods |= token.var.mods;
    }
    ;
    if (mods & M.Declaration) {
      types.push("decl");
    }
    ;
    if (mods & M.Root) {
      types.push("root");
    }
    ;
    if (mods & M.Local) {
      types.push("local");
    }
    ;
    if (token.end && token.end.start == token) {
      parts.push("<b>");
    }
    ;
    if (subtyp == "start" || subtyp == "open") {
      parts.push("<b class='" + typ + "'>");
      if (!value) {
        continue;
      }
      ;
    }
    ;
    if ((subtyp == "end" || subtyp == "close") && !value) {
      parts.push("</b>");
      continue;
    }
    ;
    if (typ == "push") {
      value = String(++depth);
      let kind = subtyp.indexOf("_") >= 0 ? "group" : "scope";
      let end = token.scope && token.scope.end;
      parts.push("<div class='" + kind + "-" + subtyp.split("_").pop() + " _" + subtyp + " l" + depth + " o" + token.offset + " e" + (end && end.offset) + "'>");
      continue;
    } else if (typ == "pop") {
      value = String(--depth);
      parts.push("</div>");
      continue;
    }
    ;
    if (typ != "white" && typ != "line") {
      value = "<i class='" + classify(types) + " o" + token.offset + "'>" + escape(value || "") + "</i>";
    } else if (typ == "white" && value != "\n") {
      value = "<i raw='" + JSON.stringify(value) + "'>" + escape(value || "") + "</i>";
    }
    ;
    parts.push(value);
    if (subtyp == "end" || subtyp == "close" || token.start) {
      parts.push("</b>");
    }
    ;
  }
  ;
  return parts.join("");
}
init_types();
init_symbol();
init_scope();
init_structures();
var selparser = selparse_exports;
var program = program_exports;
var export_compile = import_compiler.compile;
var export_deserialize = import_compiler.deserialize;
var export_helpers = import_compiler.helpers;
var export_parse = import_compiler.parse;
var export_parser = import_compiler.parser;
var export_resolve = import_compiler.resolve;
var export_resolveConfig = import_compiler.resolveConfig;
var export_rewrite = import_compiler.rewrite;
var export_tokenize = import_compiler.tokenize;
